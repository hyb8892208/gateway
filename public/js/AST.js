//
// Definitions for schema: urn:ast
//  file:/tmp/AST.wsdl#types1
//
//
// Constructor for XML Schema item {urn:ast}NetworkDdnsGetAll
//
function AST_NetworkDdnsGetAll () {
    this.typeMarker = 'AST_NetworkDdnsGetAll';
    this._combuf = null;
    this._general = null;
    this._com = null;
}

//
// accessor is AST_NetworkDdnsGetAll.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_NetworkDdnsGetAll.prototype.setCombuf
//
function AST_NetworkDdnsGetAll_getCombuf() { return this._combuf;}

AST_NetworkDdnsGetAll.prototype.getCombuf = AST_NetworkDdnsGetAll_getCombuf;

function AST_NetworkDdnsGetAll_setCombuf(value) { this._combuf = value;}

AST_NetworkDdnsGetAll.prototype.setCombuf = AST_NetworkDdnsGetAll_setCombuf;
//
// accessor is AST_NetworkDdnsGetAll.prototype.getGeneral
// element get for general
// - element type is {urn:ast}NetworkDdnsGeneral
// - required element
//
// element set for general
// setter function is is AST_NetworkDdnsGetAll.prototype.setGeneral
//
function AST_NetworkDdnsGetAll_getGeneral() { return this._general;}

AST_NetworkDdnsGetAll.prototype.getGeneral = AST_NetworkDdnsGetAll_getGeneral;

function AST_NetworkDdnsGetAll_setGeneral(value) { this._general = value;}

AST_NetworkDdnsGetAll.prototype.setGeneral = AST_NetworkDdnsGetAll_setGeneral;
//
// accessor is AST_NetworkDdnsGetAll.prototype.getCom
// element get for com
// - element type is {urn:ast}NetworkDdnsComArr
// - required element
//
// element set for com
// setter function is is AST_NetworkDdnsGetAll.prototype.setCom
//
function AST_NetworkDdnsGetAll_getCom() { return this._com;}

AST_NetworkDdnsGetAll.prototype.getCom = AST_NetworkDdnsGetAll_getCom;

function AST_NetworkDdnsGetAll_setCom(value) { this._com = value;}

AST_NetworkDdnsGetAll.prototype.setCom = AST_NetworkDdnsGetAll_setCom;
//
// Serialize {urn:ast}NetworkDdnsGetAll
//
function AST_NetworkDdnsGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._general.serialize(cxfjsutils, 'jns0:general', null);
    }
    // block for local variables
    {
     xml = xml + this._com.serialize(cxfjsutils, 'jns0:com', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_NetworkDdnsGetAll.prototype.serialize = AST_NetworkDdnsGetAll_serialize;

function AST_NetworkDdnsGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_NetworkDdnsGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing general');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_NetworkDdnsGeneral_deserialize(cxfjsutils, curElement);
    }
    newobject.setGeneral(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing com');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_NetworkDdnsComArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setCom(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}NetworkSave
//
function AST_NetworkSave () {
    this.typeMarker = 'AST_NetworkSave';
    this._networktype = '';
    this._lan = null;
    this._wan = null;
    this._dns = null;
}

//
// accessor is AST_NetworkSave.prototype.getNetworktype
// element get for networktype
// - element type is {http://www.w3.org/2001/XMLSchema}byte
// - required element
//
// element set for networktype
// setter function is is AST_NetworkSave.prototype.setNetworktype
//
function AST_NetworkSave_getNetworktype() { return this._networktype;}

AST_NetworkSave.prototype.getNetworktype = AST_NetworkSave_getNetworktype;

function AST_NetworkSave_setNetworktype(value) { this._networktype = value;}

AST_NetworkSave.prototype.setNetworktype = AST_NetworkSave_setNetworktype;
//
// accessor is AST_NetworkSave.prototype.getLan
// element get for lan
// - element type is {urn:ast}NetworkLan
// - required element
//
// element set for lan
// setter function is is AST_NetworkSave.prototype.setLan
//
function AST_NetworkSave_getLan() { return this._lan;}

AST_NetworkSave.prototype.getLan = AST_NetworkSave_getLan;

function AST_NetworkSave_setLan(value) { this._lan = value;}

AST_NetworkSave.prototype.setLan = AST_NetworkSave_setLan;
//
// accessor is AST_NetworkSave.prototype.getWan
// element get for wan
// - element type is {urn:ast}NetworkWan
// - required element
//
// element set for wan
// setter function is is AST_NetworkSave.prototype.setWan
//
function AST_NetworkSave_getWan() { return this._wan;}

AST_NetworkSave.prototype.getWan = AST_NetworkSave_getWan;

function AST_NetworkSave_setWan(value) { this._wan = value;}

AST_NetworkSave.prototype.setWan = AST_NetworkSave_setWan;
//
// accessor is AST_NetworkSave.prototype.getDns
// element get for dns
// - element type is {urn:ast}NetworkDns
// - required element
//
// element set for dns
// setter function is is AST_NetworkSave.prototype.setDns
//
function AST_NetworkSave_getDns() { return this._dns;}

AST_NetworkSave.prototype.getDns = AST_NetworkSave_getDns;

function AST_NetworkSave_setDns(value) { this._dns = value;}

AST_NetworkSave.prototype.setDns = AST_NetworkSave_setDns;
//
// Serialize {urn:ast}NetworkSave
//
function AST_NetworkSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:networktype>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._networktype);
     xml = xml + '</jns0:networktype>';
    }
    // block for local variables
    {
     xml = xml + this._lan.serialize(cxfjsutils, 'jns0:lan', null);
    }
    // block for local variables
    {
     xml = xml + this._wan.serialize(cxfjsutils, 'jns0:wan', null);
    }
    // block for local variables
    {
     xml = xml + this._dns.serialize(cxfjsutils, 'jns0:dns', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_NetworkSave.prototype.serialize = AST_NetworkSave_serialize;

function AST_NetworkSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_NetworkSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing networktype');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setNetworktype(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing lan');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_NetworkLan_deserialize(cxfjsutils, curElement);
    }
    newobject.setLan(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing wan');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_NetworkWan_deserialize(cxfjsutils, curElement);
    }
    newobject.setWan(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing dns');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_NetworkDns_deserialize(cxfjsutils, curElement);
    }
    newobject.setDns(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipBendGet
//
function AST_SipBendGet () {
    this.typeMarker = 'AST_SipBendGet';
    this._combuf = null;
    this._ana = null;
    this._sections = null;
}

//
// accessor is AST_SipBendGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_SipBendGet.prototype.setCombuf
//
function AST_SipBendGet_getCombuf() { return this._combuf;}

AST_SipBendGet.prototype.getCombuf = AST_SipBendGet_getCombuf;

function AST_SipBendGet_setCombuf(value) { this._combuf = value;}

AST_SipBendGet.prototype.setCombuf = AST_SipBendGet_setCombuf;
//
// accessor is AST_SipBendGet.prototype.getAna
// element get for ana
// - element type is {urn:ast}SipAnaArr
// - required element
//
// element set for ana
// setter function is is AST_SipBendGet.prototype.setAna
//
function AST_SipBendGet_getAna() { return this._ana;}

AST_SipBendGet.prototype.getAna = AST_SipBendGet_getAna;

function AST_SipBendGet_setAna(value) { this._ana = value;}

AST_SipBendGet.prototype.setAna = AST_SipBendGet_setAna;
//
// accessor is AST_SipBendGet.prototype.getSections
// element get for sections
// - element type is {urn:ast}SectionArr
// - required element
//
// element set for sections
// setter function is is AST_SipBendGet.prototype.setSections
//
function AST_SipBendGet_getSections() { return this._sections;}

AST_SipBendGet.prototype.getSections = AST_SipBendGet_getSections;

function AST_SipBendGet_setSections(value) { this._sections = value;}

AST_SipBendGet.prototype.setSections = AST_SipBendGet_setSections;
//
// Serialize {urn:ast}SipBendGet
//
function AST_SipBendGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._ana.serialize(cxfjsutils, 'jns0:ana', null);
    }
    // block for local variables
    {
     xml = xml + this._sections.serialize(cxfjsutils, 'jns0:sections', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipBendGet.prototype.serialize = AST_SipBendGet_serialize;

function AST_SipBendGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipBendGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ana');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SipAnaArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setAna(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sections');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SectionArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setSections(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}jConsBoard
//
function AST_jConsBoard () {
    this.typeMarker = 'AST_jConsBoard';
    this._item = [];
}

//
// accessor is AST_jConsBoard.prototype.getItem
// element get for item
// - element type is {urn:ast}Relay
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_jConsBoard.prototype.setItem
//
function AST_jConsBoard_getItem() { return this._item;}

AST_jConsBoard.prototype.getItem = AST_jConsBoard_getItem;

function AST_jConsBoard_setItem(value) { this._item = value;}

AST_jConsBoard.prototype.setItem = AST_jConsBoard_setItem;
//
// Serialize {urn:ast}jConsBoard
//
function AST_jConsBoard_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_jConsBoard.prototype.serialize = AST_jConsBoard_serialize;

function AST_jConsBoard_deserialize (cxfjsutils, element) {
    var newobject = new AST_jConsBoard();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_Relay_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}UcpNetworkRulesGetOne
//
function AST_UcpNetworkRulesGetOne () {
    this.typeMarker = 'AST_UcpNetworkRulesGetOne';
    this._combuf = null;
    this._rules = null;
    this._sections = null;
}

//
// accessor is AST_UcpNetworkRulesGetOne.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_UcpNetworkRulesGetOne.prototype.setCombuf
//
function AST_UcpNetworkRulesGetOne_getCombuf() { return this._combuf;}

AST_UcpNetworkRulesGetOne.prototype.getCombuf = AST_UcpNetworkRulesGetOne_getCombuf;

function AST_UcpNetworkRulesGetOne_setCombuf(value) { this._combuf = value;}

AST_UcpNetworkRulesGetOne.prototype.setCombuf = AST_UcpNetworkRulesGetOne_setCombuf;
//
// accessor is AST_UcpNetworkRulesGetOne.prototype.getRules
// element get for rules
// - element type is {urn:ast}UcpNetworkRules
// - required element
//
// element set for rules
// setter function is is AST_UcpNetworkRulesGetOne.prototype.setRules
//
function AST_UcpNetworkRulesGetOne_getRules() { return this._rules;}

AST_UcpNetworkRulesGetOne.prototype.getRules = AST_UcpNetworkRulesGetOne_getRules;

function AST_UcpNetworkRulesGetOne_setRules(value) { this._rules = value;}

AST_UcpNetworkRulesGetOne.prototype.setRules = AST_UcpNetworkRulesGetOne_setRules;
//
// accessor is AST_UcpNetworkRulesGetOne.prototype.getSections
// element get for sections
// - element type is {urn:ast}SectionArr
// - required element
//
// element set for sections
// setter function is is AST_UcpNetworkRulesGetOne.prototype.setSections
//
function AST_UcpNetworkRulesGetOne_getSections() { return this._sections;}

AST_UcpNetworkRulesGetOne.prototype.getSections = AST_UcpNetworkRulesGetOne_getSections;

function AST_UcpNetworkRulesGetOne_setSections(value) { this._sections = value;}

AST_UcpNetworkRulesGetOne.prototype.setSections = AST_UcpNetworkRulesGetOne_setSections;
//
// Serialize {urn:ast}UcpNetworkRulesGetOne
//
function AST_UcpNetworkRulesGetOne_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._rules.serialize(cxfjsutils, 'jns0:rules', null);
    }
    // block for local variables
    {
     xml = xml + this._sections.serialize(cxfjsutils, 'jns0:sections', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_UcpNetworkRulesGetOne.prototype.serialize = AST_UcpNetworkRulesGetOne_serialize;

function AST_UcpNetworkRulesGetOne_deserialize (cxfjsutils, element) {
    var newobject = new AST_UcpNetworkRulesGetOne();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing rules');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_UcpNetworkRules_deserialize(cxfjsutils, curElement);
    }
    newobject.setRules(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sections');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SectionArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setSections(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}FxsSpeeddialArr
//
function AST_FxsSpeeddialArr () {
    this.typeMarker = 'AST_FxsSpeeddialArr';
    this._item = [];
}

//
// accessor is AST_FxsSpeeddialArr.prototype.getItem
// element get for item
// - element type is {urn:ast}FxsSpeeddial
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_FxsSpeeddialArr.prototype.setItem
//
function AST_FxsSpeeddialArr_getItem() { return this._item;}

AST_FxsSpeeddialArr.prototype.getItem = AST_FxsSpeeddialArr_getItem;

function AST_FxsSpeeddialArr_setItem(value) { this._item = value;}

AST_FxsSpeeddialArr.prototype.setItem = AST_FxsSpeeddialArr_setItem;
//
// Serialize {urn:ast}FxsSpeeddialArr
//
function AST_FxsSpeeddialArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_FxsSpeeddialArr.prototype.serialize = AST_FxsSpeeddialArr_serialize;

function AST_FxsSpeeddialArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_FxsSpeeddialArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_FxsSpeeddial_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SysLoginGeneral
//
function AST_SysLoginGeneral () {
    this.typeMarker = 'AST_SysLoginGeneral';
    this._username = null;
    this._password = null;
    this._port1 = '';
    this._port2 = '';
    this._loginmode = '';
}

//
// accessor is AST_SysLoginGeneral.prototype.getUsername
// element get for username
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for username
// setter function is is AST_SysLoginGeneral.prototype.setUsername
//
function AST_SysLoginGeneral_getUsername() { return this._username;}

AST_SysLoginGeneral.prototype.getUsername = AST_SysLoginGeneral_getUsername;

function AST_SysLoginGeneral_setUsername(value) { this._username = value;}

AST_SysLoginGeneral.prototype.setUsername = AST_SysLoginGeneral_setUsername;
//
// accessor is AST_SysLoginGeneral.prototype.getPassword
// element get for password
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for password
// setter function is is AST_SysLoginGeneral.prototype.setPassword
//
function AST_SysLoginGeneral_getPassword() { return this._password;}

AST_SysLoginGeneral.prototype.getPassword = AST_SysLoginGeneral_getPassword;

function AST_SysLoginGeneral_setPassword(value) { this._password = value;}

AST_SysLoginGeneral.prototype.setPassword = AST_SysLoginGeneral_setPassword;
//
// accessor is AST_SysLoginGeneral.prototype.getPort1
// element get for port1
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedShort
// - required element
//
// element set for port1
// setter function is is AST_SysLoginGeneral.prototype.setPort1
//
function AST_SysLoginGeneral_getPort1() { return this._port1;}

AST_SysLoginGeneral.prototype.getPort1 = AST_SysLoginGeneral_getPort1;

function AST_SysLoginGeneral_setPort1(value) { this._port1 = value;}

AST_SysLoginGeneral.prototype.setPort1 = AST_SysLoginGeneral_setPort1;
//
// accessor is AST_SysLoginGeneral.prototype.getPort2
// element get for port2
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedShort
// - required element
//
// element set for port2
// setter function is is AST_SysLoginGeneral.prototype.setPort2
//
function AST_SysLoginGeneral_getPort2() { return this._port2;}

AST_SysLoginGeneral.prototype.getPort2 = AST_SysLoginGeneral_getPort2;

function AST_SysLoginGeneral_setPort2(value) { this._port2 = value;}

AST_SysLoginGeneral.prototype.setPort2 = AST_SysLoginGeneral_setPort2;
//
// accessor is AST_SysLoginGeneral.prototype.getLoginmode
// element get for loginmode
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for loginmode
// setter function is is AST_SysLoginGeneral.prototype.setLoginmode
//
function AST_SysLoginGeneral_getLoginmode() { return this._loginmode;}

AST_SysLoginGeneral.prototype.getLoginmode = AST_SysLoginGeneral_getLoginmode;

function AST_SysLoginGeneral_setLoginmode(value) { this._loginmode = value;}

AST_SysLoginGeneral.prototype.setLoginmode = AST_SysLoginGeneral_setLoginmode;
//
// Serialize {urn:ast}SysLoginGeneral
//
function AST_SysLoginGeneral_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._username == null) {
      xml = xml + '<jns0:username xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:username>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._username);
      xml = xml + '</jns0:username>';
     }
    }
    // block for local variables
    {
     if (this._password == null) {
      xml = xml + '<jns0:password xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:password>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._password);
      xml = xml + '</jns0:password>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:port1>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._port1);
     xml = xml + '</jns0:port1>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:port2>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._port2);
     xml = xml + '</jns0:port2>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:loginmode>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._loginmode);
     xml = xml + '</jns0:loginmode>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SysLoginGeneral.prototype.serialize = AST_SysLoginGeneral_serialize;

function AST_SysLoginGeneral_deserialize (cxfjsutils, element) {
    var newobject = new AST_SysLoginGeneral();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing username');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setUsername(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing password');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setPassword(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing port1');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setPort1(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing port2');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setPort2(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing loginmode');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setLoginmode(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}UcpNetworkSwitch
//
function AST_UcpNetworkSwitch () {
    this.typeMarker = 'AST_UcpNetworkSwitch';
    this._firewall = '';
    this._ping = '';
    this._wenable = '';
    this._benable = '';
    this._wip = null;
    this._bip = null;
}

//
// accessor is AST_UcpNetworkSwitch.prototype.getFirewall
// element get for firewall
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for firewall
// setter function is is AST_UcpNetworkSwitch.prototype.setFirewall
//
function AST_UcpNetworkSwitch_getFirewall() { return this._firewall;}

AST_UcpNetworkSwitch.prototype.getFirewall = AST_UcpNetworkSwitch_getFirewall;

function AST_UcpNetworkSwitch_setFirewall(value) { this._firewall = value;}

AST_UcpNetworkSwitch.prototype.setFirewall = AST_UcpNetworkSwitch_setFirewall;
//
// accessor is AST_UcpNetworkSwitch.prototype.getPing
// element get for ping
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for ping
// setter function is is AST_UcpNetworkSwitch.prototype.setPing
//
function AST_UcpNetworkSwitch_getPing() { return this._ping;}

AST_UcpNetworkSwitch.prototype.getPing = AST_UcpNetworkSwitch_getPing;

function AST_UcpNetworkSwitch_setPing(value) { this._ping = value;}

AST_UcpNetworkSwitch.prototype.setPing = AST_UcpNetworkSwitch_setPing;
//
// accessor is AST_UcpNetworkSwitch.prototype.getWenable
// element get for wenable
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for wenable
// setter function is is AST_UcpNetworkSwitch.prototype.setWenable
//
function AST_UcpNetworkSwitch_getWenable() { return this._wenable;}

AST_UcpNetworkSwitch.prototype.getWenable = AST_UcpNetworkSwitch_getWenable;

function AST_UcpNetworkSwitch_setWenable(value) { this._wenable = value;}

AST_UcpNetworkSwitch.prototype.setWenable = AST_UcpNetworkSwitch_setWenable;
//
// accessor is AST_UcpNetworkSwitch.prototype.getBenable
// element get for benable
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for benable
// setter function is is AST_UcpNetworkSwitch.prototype.setBenable
//
function AST_UcpNetworkSwitch_getBenable() { return this._benable;}

AST_UcpNetworkSwitch.prototype.getBenable = AST_UcpNetworkSwitch_getBenable;

function AST_UcpNetworkSwitch_setBenable(value) { this._benable = value;}

AST_UcpNetworkSwitch.prototype.setBenable = AST_UcpNetworkSwitch_setBenable;
//
// accessor is AST_UcpNetworkSwitch.prototype.getWip
// element get for wip
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for wip
// setter function is is AST_UcpNetworkSwitch.prototype.setWip
//
function AST_UcpNetworkSwitch_getWip() { return this._wip;}

AST_UcpNetworkSwitch.prototype.getWip = AST_UcpNetworkSwitch_getWip;

function AST_UcpNetworkSwitch_setWip(value) { this._wip = value;}

AST_UcpNetworkSwitch.prototype.setWip = AST_UcpNetworkSwitch_setWip;
//
// accessor is AST_UcpNetworkSwitch.prototype.getBip
// element get for bip
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for bip
// setter function is is AST_UcpNetworkSwitch.prototype.setBip
//
function AST_UcpNetworkSwitch_getBip() { return this._bip;}

AST_UcpNetworkSwitch.prototype.getBip = AST_UcpNetworkSwitch_getBip;

function AST_UcpNetworkSwitch_setBip(value) { this._bip = value;}

AST_UcpNetworkSwitch.prototype.setBip = AST_UcpNetworkSwitch_setBip;
//
// Serialize {urn:ast}UcpNetworkSwitch
//
function AST_UcpNetworkSwitch_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:firewall>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._firewall);
     xml = xml + '</jns0:firewall>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:ping>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._ping);
     xml = xml + '</jns0:ping>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:wenable>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._wenable);
     xml = xml + '</jns0:wenable>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:benable>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._benable);
     xml = xml + '</jns0:benable>';
    }
    // block for local variables
    {
     if (this._wip != null) {
      if (this._wip == null) {
       xml = xml + '<jns0:wip xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:wip>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._wip);
       xml = xml + '</jns0:wip>';
      }
     }
    }
    // block for local variables
    {
     if (this._bip != null) {
      if (this._bip == null) {
       xml = xml + '<jns0:bip xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:bip>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._bip);
       xml = xml + '</jns0:bip>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_UcpNetworkSwitch.prototype.serialize = AST_UcpNetworkSwitch_serialize;

function AST_UcpNetworkSwitch_deserialize (cxfjsutils, element) {
    var newobject = new AST_UcpNetworkSwitch();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing firewall');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setFirewall(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ping');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setPing(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing wenable');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setWenable(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing benable');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setBenable(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing wip');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'wip')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setWip(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing bip');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'bip')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setBip(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipBend
//
function AST_SipBend () {
    this.typeMarker = 'AST_SipBend';
    this._section = null;
    this._username = null;
    this._secret = null;
    this._ipaddr = null;
    this._bipaddr = null;
    this._port = 0;
    this._allow = null;
    this._md5 = '';
    this._vosencrypt = '';
}

//
// accessor is AST_SipBend.prototype.getSection
// element get for section
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for section
// setter function is is AST_SipBend.prototype.setSection
//
function AST_SipBend_getSection() { return this._section;}

AST_SipBend.prototype.getSection = AST_SipBend_getSection;

function AST_SipBend_setSection(value) { this._section = value;}

AST_SipBend.prototype.setSection = AST_SipBend_setSection;
//
// accessor is AST_SipBend.prototype.getUsername
// element get for username
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for username
// setter function is is AST_SipBend.prototype.setUsername
//
function AST_SipBend_getUsername() { return this._username;}

AST_SipBend.prototype.getUsername = AST_SipBend_getUsername;

function AST_SipBend_setUsername(value) { this._username = value;}

AST_SipBend.prototype.setUsername = AST_SipBend_setUsername;
//
// accessor is AST_SipBend.prototype.getSecret
// element get for secret
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for secret
// setter function is is AST_SipBend.prototype.setSecret
//
function AST_SipBend_getSecret() { return this._secret;}

AST_SipBend.prototype.getSecret = AST_SipBend_getSecret;

function AST_SipBend_setSecret(value) { this._secret = value;}

AST_SipBend.prototype.setSecret = AST_SipBend_setSecret;
//
// accessor is AST_SipBend.prototype.getIpaddr
// element get for ipaddr
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for ipaddr
// setter function is is AST_SipBend.prototype.setIpaddr
//
function AST_SipBend_getIpaddr() { return this._ipaddr;}

AST_SipBend.prototype.getIpaddr = AST_SipBend_getIpaddr;

function AST_SipBend_setIpaddr(value) { this._ipaddr = value;}

AST_SipBend.prototype.setIpaddr = AST_SipBend_setIpaddr;
//
// accessor is AST_SipBend.prototype.getBipaddr
// element get for bipaddr
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for bipaddr
// setter function is is AST_SipBend.prototype.setBipaddr
//
function AST_SipBend_getBipaddr() { return this._bipaddr;}

AST_SipBend.prototype.getBipaddr = AST_SipBend_getBipaddr;

function AST_SipBend_setBipaddr(value) { this._bipaddr = value;}

AST_SipBend.prototype.setBipaddr = AST_SipBend_setBipaddr;
//
// accessor is AST_SipBend.prototype.getPort
// element get for port
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for port
// setter function is is AST_SipBend.prototype.setPort
//
function AST_SipBend_getPort() { return this._port;}

AST_SipBend.prototype.getPort = AST_SipBend_getPort;

function AST_SipBend_setPort(value) { this._port = value;}

AST_SipBend.prototype.setPort = AST_SipBend_setPort;
//
// accessor is AST_SipBend.prototype.getAllow
// element get for allow
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for allow
// setter function is is AST_SipBend.prototype.setAllow
//
function AST_SipBend_getAllow() { return this._allow;}

AST_SipBend.prototype.getAllow = AST_SipBend_getAllow;

function AST_SipBend_setAllow(value) { this._allow = value;}

AST_SipBend.prototype.setAllow = AST_SipBend_setAllow;
//
// accessor is AST_SipBend.prototype.getMd5
// element get for md5
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
//
// element set for md5
// setter function is is AST_SipBend.prototype.setMd5
//
function AST_SipBend_getMd5() { return this._md5;}

AST_SipBend.prototype.getMd5 = AST_SipBend_getMd5;

function AST_SipBend_setMd5(value) { this._md5 = value;}

AST_SipBend.prototype.setMd5 = AST_SipBend_setMd5;
//
// accessor is AST_SipBend.prototype.getVosencrypt
// element get for vosencrypt
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for vosencrypt
// setter function is is AST_SipBend.prototype.setVosencrypt
//
function AST_SipBend_getVosencrypt() { return this._vosencrypt;}

AST_SipBend.prototype.getVosencrypt = AST_SipBend_getVosencrypt;

function AST_SipBend_setVosencrypt(value) { this._vosencrypt = value;}

AST_SipBend.prototype.setVosencrypt = AST_SipBend_setVosencrypt;
//
// Serialize {urn:ast}SipBend
//
function AST_SipBend_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._section == null) {
      xml = xml + '<jns0:section xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:section>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._section);
      xml = xml + '</jns0:section>';
     }
    }
    // block for local variables
    {
     if (this._username == null) {
      xml = xml + '<jns0:username xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:username>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._username);
      xml = xml + '</jns0:username>';
     }
    }
    // block for local variables
    {
     if (this._secret == null) {
      xml = xml + '<jns0:secret xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:secret>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._secret);
      xml = xml + '</jns0:secret>';
     }
    }
    // block for local variables
    {
     if (this._ipaddr == null) {
      xml = xml + '<jns0:ipaddr xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:ipaddr>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._ipaddr);
      xml = xml + '</jns0:ipaddr>';
     }
    }
    // block for local variables
    {
     if (this._bipaddr == null) {
      xml = xml + '<jns0:bipaddr xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:bipaddr>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._bipaddr);
      xml = xml + '</jns0:bipaddr>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:port>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._port);
     xml = xml + '</jns0:port>';
    }
    // block for local variables
    {
     if (this._allow == null) {
      xml = xml + '<jns0:allow xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:allow>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._allow);
      xml = xml + '</jns0:allow>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:md5>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._md5);
     xml = xml + '</jns0:md5>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:vosencrypt>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._vosencrypt);
     xml = xml + '</jns0:vosencrypt>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipBend.prototype.serialize = AST_SipBend_serialize;

function AST_SipBend_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipBend();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing section');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSection(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing username');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setUsername(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing secret');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSecret(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ipaddr');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setIpaddr(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing bipaddr');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setBipaddr(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing port');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setPort(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing allow');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setAllow(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing md5');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setMd5(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing vosencrypt');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setVosencrypt(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AdvAstGeneral
//
function AST_AdvAstGeneral () {
    this.typeMarker = 'AST_AdvAstGeneral';
    this._username = null;
    this._secret = null;
    this._deny = '';
    this._permit = '';
    this._read = null;
    this._write = null;
    this._enabled = '';
}

//
// accessor is AST_AdvAstGeneral.prototype.getUsername
// element get for username
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for username
// setter function is is AST_AdvAstGeneral.prototype.setUsername
//
function AST_AdvAstGeneral_getUsername() { return this._username;}

AST_AdvAstGeneral.prototype.getUsername = AST_AdvAstGeneral_getUsername;

function AST_AdvAstGeneral_setUsername(value) { this._username = value;}

AST_AdvAstGeneral.prototype.setUsername = AST_AdvAstGeneral_setUsername;
//
// accessor is AST_AdvAstGeneral.prototype.getSecret
// element get for secret
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for secret
// setter function is is AST_AdvAstGeneral.prototype.setSecret
//
function AST_AdvAstGeneral_getSecret() { return this._secret;}

AST_AdvAstGeneral.prototype.getSecret = AST_AdvAstGeneral_getSecret;

function AST_AdvAstGeneral_setSecret(value) { this._secret = value;}

AST_AdvAstGeneral.prototype.setSecret = AST_AdvAstGeneral_setSecret;
//
// accessor is AST_AdvAstGeneral.prototype.getDeny
// element get for deny
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
//
// element set for deny
// setter function is is AST_AdvAstGeneral.prototype.setDeny
//
function AST_AdvAstGeneral_getDeny() { return this._deny;}

AST_AdvAstGeneral.prototype.getDeny = AST_AdvAstGeneral_getDeny;

function AST_AdvAstGeneral_setDeny(value) { this._deny = value;}

AST_AdvAstGeneral.prototype.setDeny = AST_AdvAstGeneral_setDeny;
//
// accessor is AST_AdvAstGeneral.prototype.getPermit
// element get for permit
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
//
// element set for permit
// setter function is is AST_AdvAstGeneral.prototype.setPermit
//
function AST_AdvAstGeneral_getPermit() { return this._permit;}

AST_AdvAstGeneral.prototype.getPermit = AST_AdvAstGeneral_getPermit;

function AST_AdvAstGeneral_setPermit(value) { this._permit = value;}

AST_AdvAstGeneral.prototype.setPermit = AST_AdvAstGeneral_setPermit;
//
// accessor is AST_AdvAstGeneral.prototype.getRead
// element get for read
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for read
// setter function is is AST_AdvAstGeneral.prototype.setRead
//
function AST_AdvAstGeneral_getRead() { return this._read;}

AST_AdvAstGeneral.prototype.getRead = AST_AdvAstGeneral_getRead;

function AST_AdvAstGeneral_setRead(value) { this._read = value;}

AST_AdvAstGeneral.prototype.setRead = AST_AdvAstGeneral_setRead;
//
// accessor is AST_AdvAstGeneral.prototype.getWrite
// element get for write
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for write
// setter function is is AST_AdvAstGeneral.prototype.setWrite
//
function AST_AdvAstGeneral_getWrite() { return this._write;}

AST_AdvAstGeneral.prototype.getWrite = AST_AdvAstGeneral_getWrite;

function AST_AdvAstGeneral_setWrite(value) { this._write = value;}

AST_AdvAstGeneral.prototype.setWrite = AST_AdvAstGeneral_setWrite;
//
// accessor is AST_AdvAstGeneral.prototype.getEnabled
// element get for enabled
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for enabled
// setter function is is AST_AdvAstGeneral.prototype.setEnabled
//
function AST_AdvAstGeneral_getEnabled() { return this._enabled;}

AST_AdvAstGeneral.prototype.getEnabled = AST_AdvAstGeneral_getEnabled;

function AST_AdvAstGeneral_setEnabled(value) { this._enabled = value;}

AST_AdvAstGeneral.prototype.setEnabled = AST_AdvAstGeneral_setEnabled;
//
// Serialize {urn:ast}AdvAstGeneral
//
function AST_AdvAstGeneral_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._username == null) {
      xml = xml + '<jns0:username xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:username>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._username);
      xml = xml + '</jns0:username>';
     }
    }
    // block for local variables
    {
     if (this._secret == null) {
      xml = xml + '<jns0:secret xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:secret>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._secret);
      xml = xml + '</jns0:secret>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:deny>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._deny);
     xml = xml + '</jns0:deny>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:permit>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._permit);
     xml = xml + '</jns0:permit>';
    }
    // block for local variables
    {
     if (this._read == null) {
      xml = xml + '<jns0:read xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:read>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._read);
      xml = xml + '</jns0:read>';
     }
    }
    // block for local variables
    {
     if (this._write == null) {
      xml = xml + '<jns0:write xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:write>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._write);
      xml = xml + '</jns0:write>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:enabled>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._enabled);
     xml = xml + '</jns0:enabled>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AdvAstGeneral.prototype.serialize = AST_AdvAstGeneral_serialize;

function AST_AdvAstGeneral_deserialize (cxfjsutils, element) {
    var newobject = new AST_AdvAstGeneral();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing username');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setUsername(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing secret');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSecret(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing deny');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setDeny(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing permit');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setPermit(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing read');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setRead(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing write');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setWrite(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing enabled');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setEnabled(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipBatchSip
//
function AST_SipBatchSip () {
    this.typeMarker = 'AST_SipBatchSip';
    this._section = null;
    this._order = '';
}

//
// accessor is AST_SipBatchSip.prototype.getSection
// element get for section
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for section
// setter function is is AST_SipBatchSip.prototype.setSection
//
function AST_SipBatchSip_getSection() { return this._section;}

AST_SipBatchSip.prototype.getSection = AST_SipBatchSip_getSection;

function AST_SipBatchSip_setSection(value) { this._section = value;}

AST_SipBatchSip.prototype.setSection = AST_SipBatchSip_setSection;
//
// accessor is AST_SipBatchSip.prototype.getOrder
// element get for order
// - element type is {http://www.w3.org/2001/XMLSchema}short
// - required element
//
// element set for order
// setter function is is AST_SipBatchSip.prototype.setOrder
//
function AST_SipBatchSip_getOrder() { return this._order;}

AST_SipBatchSip.prototype.getOrder = AST_SipBatchSip_getOrder;

function AST_SipBatchSip_setOrder(value) { this._order = value;}

AST_SipBatchSip.prototype.setOrder = AST_SipBatchSip_setOrder;
//
// Serialize {urn:ast}SipBatchSip
//
function AST_SipBatchSip_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._section == null) {
      xml = xml + '<jns0:section xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:section>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._section);
      xml = xml + '</jns0:section>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:order>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._order);
     xml = xml + '</jns0:order>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipBatchSip.prototype.serialize = AST_SipBatchSip_serialize;

function AST_SipBatchSip_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipBatchSip();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing section');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSection(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing order');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setOrder(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}NetworkOpenvpn
//
function AST_NetworkOpenvpn () {
    this.typeMarker = 'AST_NetworkOpenvpn';
    this._pptpServer = null;
    this._pptpAccount = null;
    this._pptpPasswd = null;
    this._pptpDomain = null;
    this._openvpnPasswd = null;
    this._openvpnUsername = null;
    this._openvpnServer = null;
    this._zerovpnNetworkID = null;
    this._l2tpvpnServer = null;
    this._l2tpvpnUsername = null;
    this._l2tpvpnPasswd = null;
    this._l2tpvpnIpsecPasswd = null;
    this._openvpnPort = 0;
    this._pptpMppe = '';
    this._openvpnEncSw = '';
    this._l2tpvpnSw = '';
    this._l2tpvpnIpsecSw = '';
    this._vpntype = '';
}

//
// accessor is AST_NetworkOpenvpn.prototype.getPptpServer
// element get for pptpServer
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for pptpServer
// setter function is is AST_NetworkOpenvpn.prototype.setPptpServer
//
function AST_NetworkOpenvpn_getPptpServer() { return this._pptpServer;}

AST_NetworkOpenvpn.prototype.getPptpServer = AST_NetworkOpenvpn_getPptpServer;

function AST_NetworkOpenvpn_setPptpServer(value) { this._pptpServer = value;}

AST_NetworkOpenvpn.prototype.setPptpServer = AST_NetworkOpenvpn_setPptpServer;
//
// accessor is AST_NetworkOpenvpn.prototype.getPptpAccount
// element get for pptpAccount
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for pptpAccount
// setter function is is AST_NetworkOpenvpn.prototype.setPptpAccount
//
function AST_NetworkOpenvpn_getPptpAccount() { return this._pptpAccount;}

AST_NetworkOpenvpn.prototype.getPptpAccount = AST_NetworkOpenvpn_getPptpAccount;

function AST_NetworkOpenvpn_setPptpAccount(value) { this._pptpAccount = value;}

AST_NetworkOpenvpn.prototype.setPptpAccount = AST_NetworkOpenvpn_setPptpAccount;
//
// accessor is AST_NetworkOpenvpn.prototype.getPptpPasswd
// element get for pptpPasswd
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for pptpPasswd
// setter function is is AST_NetworkOpenvpn.prototype.setPptpPasswd
//
function AST_NetworkOpenvpn_getPptpPasswd() { return this._pptpPasswd;}

AST_NetworkOpenvpn.prototype.getPptpPasswd = AST_NetworkOpenvpn_getPptpPasswd;

function AST_NetworkOpenvpn_setPptpPasswd(value) { this._pptpPasswd = value;}

AST_NetworkOpenvpn.prototype.setPptpPasswd = AST_NetworkOpenvpn_setPptpPasswd;
//
// accessor is AST_NetworkOpenvpn.prototype.getPptpDomain
// element get for pptpDomain
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for pptpDomain
// setter function is is AST_NetworkOpenvpn.prototype.setPptpDomain
//
function AST_NetworkOpenvpn_getPptpDomain() { return this._pptpDomain;}

AST_NetworkOpenvpn.prototype.getPptpDomain = AST_NetworkOpenvpn_getPptpDomain;

function AST_NetworkOpenvpn_setPptpDomain(value) { this._pptpDomain = value;}

AST_NetworkOpenvpn.prototype.setPptpDomain = AST_NetworkOpenvpn_setPptpDomain;
//
// accessor is AST_NetworkOpenvpn.prototype.getOpenvpnPasswd
// element get for openvpnPasswd
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for openvpnPasswd
// setter function is is AST_NetworkOpenvpn.prototype.setOpenvpnPasswd
//
function AST_NetworkOpenvpn_getOpenvpnPasswd() { return this._openvpnPasswd;}

AST_NetworkOpenvpn.prototype.getOpenvpnPasswd = AST_NetworkOpenvpn_getOpenvpnPasswd;

function AST_NetworkOpenvpn_setOpenvpnPasswd(value) { this._openvpnPasswd = value;}

AST_NetworkOpenvpn.prototype.setOpenvpnPasswd = AST_NetworkOpenvpn_setOpenvpnPasswd;
//
// accessor is AST_NetworkOpenvpn.prototype.getOpenvpnUsername
// element get for openvpnUsername
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for openvpnUsername
// setter function is is AST_NetworkOpenvpn.prototype.setOpenvpnUsername
//
function AST_NetworkOpenvpn_getOpenvpnUsername() { return this._openvpnUsername;}

AST_NetworkOpenvpn.prototype.getOpenvpnUsername = AST_NetworkOpenvpn_getOpenvpnUsername;

function AST_NetworkOpenvpn_setOpenvpnUsername(value) { this._openvpnUsername = value;}

AST_NetworkOpenvpn.prototype.setOpenvpnUsername = AST_NetworkOpenvpn_setOpenvpnUsername;
//
// accessor is AST_NetworkOpenvpn.prototype.getOpenvpnServer
// element get for openvpnServer
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for openvpnServer
// setter function is is AST_NetworkOpenvpn.prototype.setOpenvpnServer
//
function AST_NetworkOpenvpn_getOpenvpnServer() { return this._openvpnServer;}

AST_NetworkOpenvpn.prototype.getOpenvpnServer = AST_NetworkOpenvpn_getOpenvpnServer;

function AST_NetworkOpenvpn_setOpenvpnServer(value) { this._openvpnServer = value;}

AST_NetworkOpenvpn.prototype.setOpenvpnServer = AST_NetworkOpenvpn_setOpenvpnServer;
//
// accessor is AST_NetworkOpenvpn.prototype.getZerovpnNetworkID
// element get for zerovpnNetworkID
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for zerovpnNetworkID
// setter function is is AST_NetworkOpenvpn.prototype.setZerovpnNetworkID
//
function AST_NetworkOpenvpn_getZerovpnNetworkID() { return this._zerovpnNetworkID;}

AST_NetworkOpenvpn.prototype.getZerovpnNetworkID = AST_NetworkOpenvpn_getZerovpnNetworkID;

function AST_NetworkOpenvpn_setZerovpnNetworkID(value) { this._zerovpnNetworkID = value;}

AST_NetworkOpenvpn.prototype.setZerovpnNetworkID = AST_NetworkOpenvpn_setZerovpnNetworkID;
//
// accessor is AST_NetworkOpenvpn.prototype.getL2tpvpnServer
// element get for l2tpvpnServer
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for l2tpvpnServer
// setter function is is AST_NetworkOpenvpn.prototype.setL2tpvpnServer
//
function AST_NetworkOpenvpn_getL2tpvpnServer() { return this._l2tpvpnServer;}

AST_NetworkOpenvpn.prototype.getL2tpvpnServer = AST_NetworkOpenvpn_getL2tpvpnServer;

function AST_NetworkOpenvpn_setL2tpvpnServer(value) { this._l2tpvpnServer = value;}

AST_NetworkOpenvpn.prototype.setL2tpvpnServer = AST_NetworkOpenvpn_setL2tpvpnServer;
//
// accessor is AST_NetworkOpenvpn.prototype.getL2tpvpnUsername
// element get for l2tpvpnUsername
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for l2tpvpnUsername
// setter function is is AST_NetworkOpenvpn.prototype.setL2tpvpnUsername
//
function AST_NetworkOpenvpn_getL2tpvpnUsername() { return this._l2tpvpnUsername;}

AST_NetworkOpenvpn.prototype.getL2tpvpnUsername = AST_NetworkOpenvpn_getL2tpvpnUsername;

function AST_NetworkOpenvpn_setL2tpvpnUsername(value) { this._l2tpvpnUsername = value;}

AST_NetworkOpenvpn.prototype.setL2tpvpnUsername = AST_NetworkOpenvpn_setL2tpvpnUsername;
//
// accessor is AST_NetworkOpenvpn.prototype.getL2tpvpnPasswd
// element get for l2tpvpnPasswd
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for l2tpvpnPasswd
// setter function is is AST_NetworkOpenvpn.prototype.setL2tpvpnPasswd
//
function AST_NetworkOpenvpn_getL2tpvpnPasswd() { return this._l2tpvpnPasswd;}

AST_NetworkOpenvpn.prototype.getL2tpvpnPasswd = AST_NetworkOpenvpn_getL2tpvpnPasswd;

function AST_NetworkOpenvpn_setL2tpvpnPasswd(value) { this._l2tpvpnPasswd = value;}

AST_NetworkOpenvpn.prototype.setL2tpvpnPasswd = AST_NetworkOpenvpn_setL2tpvpnPasswd;
//
// accessor is AST_NetworkOpenvpn.prototype.getL2tpvpnIpsecPasswd
// element get for l2tpvpnIpsecPasswd
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for l2tpvpnIpsecPasswd
// setter function is is AST_NetworkOpenvpn.prototype.setL2tpvpnIpsecPasswd
//
function AST_NetworkOpenvpn_getL2tpvpnIpsecPasswd() { return this._l2tpvpnIpsecPasswd;}

AST_NetworkOpenvpn.prototype.getL2tpvpnIpsecPasswd = AST_NetworkOpenvpn_getL2tpvpnIpsecPasswd;

function AST_NetworkOpenvpn_setL2tpvpnIpsecPasswd(value) { this._l2tpvpnIpsecPasswd = value;}

AST_NetworkOpenvpn.prototype.setL2tpvpnIpsecPasswd = AST_NetworkOpenvpn_setL2tpvpnIpsecPasswd;
//
// accessor is AST_NetworkOpenvpn.prototype.getOpenvpnPort
// element get for openvpnPort
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for openvpnPort
// setter function is is AST_NetworkOpenvpn.prototype.setOpenvpnPort
//
function AST_NetworkOpenvpn_getOpenvpnPort() { return this._openvpnPort;}

AST_NetworkOpenvpn.prototype.getOpenvpnPort = AST_NetworkOpenvpn_getOpenvpnPort;

function AST_NetworkOpenvpn_setOpenvpnPort(value) { this._openvpnPort = value;}

AST_NetworkOpenvpn.prototype.setOpenvpnPort = AST_NetworkOpenvpn_setOpenvpnPort;
//
// accessor is AST_NetworkOpenvpn.prototype.getPptpMppe
// element get for pptpMppe
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for pptpMppe
// setter function is is AST_NetworkOpenvpn.prototype.setPptpMppe
//
function AST_NetworkOpenvpn_getPptpMppe() { return this._pptpMppe;}

AST_NetworkOpenvpn.prototype.getPptpMppe = AST_NetworkOpenvpn_getPptpMppe;

function AST_NetworkOpenvpn_setPptpMppe(value) { this._pptpMppe = value;}

AST_NetworkOpenvpn.prototype.setPptpMppe = AST_NetworkOpenvpn_setPptpMppe;
//
// accessor is AST_NetworkOpenvpn.prototype.getOpenvpnEncSw
// element get for openvpnEncSw
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for openvpnEncSw
// setter function is is AST_NetworkOpenvpn.prototype.setOpenvpnEncSw
//
function AST_NetworkOpenvpn_getOpenvpnEncSw() { return this._openvpnEncSw;}

AST_NetworkOpenvpn.prototype.getOpenvpnEncSw = AST_NetworkOpenvpn_getOpenvpnEncSw;

function AST_NetworkOpenvpn_setOpenvpnEncSw(value) { this._openvpnEncSw = value;}

AST_NetworkOpenvpn.prototype.setOpenvpnEncSw = AST_NetworkOpenvpn_setOpenvpnEncSw;
//
// accessor is AST_NetworkOpenvpn.prototype.getL2tpvpnSw
// element get for l2tpvpnSw
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for l2tpvpnSw
// setter function is is AST_NetworkOpenvpn.prototype.setL2tpvpnSw
//
function AST_NetworkOpenvpn_getL2tpvpnSw() { return this._l2tpvpnSw;}

AST_NetworkOpenvpn.prototype.getL2tpvpnSw = AST_NetworkOpenvpn_getL2tpvpnSw;

function AST_NetworkOpenvpn_setL2tpvpnSw(value) { this._l2tpvpnSw = value;}

AST_NetworkOpenvpn.prototype.setL2tpvpnSw = AST_NetworkOpenvpn_setL2tpvpnSw;
//
// accessor is AST_NetworkOpenvpn.prototype.getL2tpvpnIpsecSw
// element get for l2tpvpnIpsecSw
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for l2tpvpnIpsecSw
// setter function is is AST_NetworkOpenvpn.prototype.setL2tpvpnIpsecSw
//
function AST_NetworkOpenvpn_getL2tpvpnIpsecSw() { return this._l2tpvpnIpsecSw;}

AST_NetworkOpenvpn.prototype.getL2tpvpnIpsecSw = AST_NetworkOpenvpn_getL2tpvpnIpsecSw;

function AST_NetworkOpenvpn_setL2tpvpnIpsecSw(value) { this._l2tpvpnIpsecSw = value;}

AST_NetworkOpenvpn.prototype.setL2tpvpnIpsecSw = AST_NetworkOpenvpn_setL2tpvpnIpsecSw;
//
// accessor is AST_NetworkOpenvpn.prototype.getVpntype
// element get for vpntype
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for vpntype
// setter function is is AST_NetworkOpenvpn.prototype.setVpntype
//
function AST_NetworkOpenvpn_getVpntype() { return this._vpntype;}

AST_NetworkOpenvpn.prototype.getVpntype = AST_NetworkOpenvpn_getVpntype;

function AST_NetworkOpenvpn_setVpntype(value) { this._vpntype = value;}

AST_NetworkOpenvpn.prototype.setVpntype = AST_NetworkOpenvpn_setVpntype;
//
// Serialize {urn:ast}NetworkOpenvpn
//
function AST_NetworkOpenvpn_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._pptpServer == null) {
      xml = xml + '<jns0:pptpServer xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:pptpServer>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._pptpServer);
      xml = xml + '</jns0:pptpServer>';
     }
    }
    // block for local variables
    {
     if (this._pptpAccount == null) {
      xml = xml + '<jns0:pptpAccount xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:pptpAccount>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._pptpAccount);
      xml = xml + '</jns0:pptpAccount>';
     }
    }
    // block for local variables
    {
     if (this._pptpPasswd == null) {
      xml = xml + '<jns0:pptpPasswd xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:pptpPasswd>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._pptpPasswd);
      xml = xml + '</jns0:pptpPasswd>';
     }
    }
    // block for local variables
    {
     if (this._pptpDomain == null) {
      xml = xml + '<jns0:pptpDomain xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:pptpDomain>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._pptpDomain);
      xml = xml + '</jns0:pptpDomain>';
     }
    }
    // block for local variables
    {
     if (this._openvpnPasswd == null) {
      xml = xml + '<jns0:openvpnPasswd xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:openvpnPasswd>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._openvpnPasswd);
      xml = xml + '</jns0:openvpnPasswd>';
     }
    }
    // block for local variables
    {
     if (this._openvpnUsername == null) {
      xml = xml + '<jns0:openvpnUsername xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:openvpnUsername>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._openvpnUsername);
      xml = xml + '</jns0:openvpnUsername>';
     }
    }
    // block for local variables
    {
     if (this._openvpnServer == null) {
      xml = xml + '<jns0:openvpnServer xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:openvpnServer>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._openvpnServer);
      xml = xml + '</jns0:openvpnServer>';
     }
    }
    // block for local variables
    {
     if (this._zerovpnNetworkID == null) {
      xml = xml + '<jns0:zerovpnNetworkID xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:zerovpnNetworkID>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._zerovpnNetworkID);
      xml = xml + '</jns0:zerovpnNetworkID>';
     }
    }
    // block for local variables
    {
     if (this._l2tpvpnServer == null) {
      xml = xml + '<jns0:l2tpvpnServer xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:l2tpvpnServer>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._l2tpvpnServer);
      xml = xml + '</jns0:l2tpvpnServer>';
     }
    }
    // block for local variables
    {
     if (this._l2tpvpnUsername == null) {
      xml = xml + '<jns0:l2tpvpnUsername xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:l2tpvpnUsername>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._l2tpvpnUsername);
      xml = xml + '</jns0:l2tpvpnUsername>';
     }
    }
    // block for local variables
    {
     if (this._l2tpvpnPasswd == null) {
      xml = xml + '<jns0:l2tpvpnPasswd xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:l2tpvpnPasswd>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._l2tpvpnPasswd);
      xml = xml + '</jns0:l2tpvpnPasswd>';
     }
    }
    // block for local variables
    {
     if (this._l2tpvpnIpsecPasswd == null) {
      xml = xml + '<jns0:l2tpvpnIpsecPasswd xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:l2tpvpnIpsecPasswd>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._l2tpvpnIpsecPasswd);
      xml = xml + '</jns0:l2tpvpnIpsecPasswd>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:openvpnPort>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._openvpnPort);
     xml = xml + '</jns0:openvpnPort>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:pptpMppe>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._pptpMppe);
     xml = xml + '</jns0:pptpMppe>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:openvpnEncSw>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._openvpnEncSw);
     xml = xml + '</jns0:openvpnEncSw>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:l2tpvpnSw>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._l2tpvpnSw);
     xml = xml + '</jns0:l2tpvpnSw>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:l2tpvpnIpsecSw>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._l2tpvpnIpsecSw);
     xml = xml + '</jns0:l2tpvpnIpsecSw>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:vpntype>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._vpntype);
     xml = xml + '</jns0:vpntype>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_NetworkOpenvpn.prototype.serialize = AST_NetworkOpenvpn_serialize;

function AST_NetworkOpenvpn_deserialize (cxfjsutils, element) {
    var newobject = new AST_NetworkOpenvpn();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing pptpServer');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setPptpServer(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing pptpAccount');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setPptpAccount(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing pptpPasswd');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setPptpPasswd(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing pptpDomain');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setPptpDomain(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing openvpnPasswd');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setOpenvpnPasswd(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing openvpnUsername');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setOpenvpnUsername(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing openvpnServer');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setOpenvpnServer(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing zerovpnNetworkID');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setZerovpnNetworkID(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing l2tpvpnServer');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setL2tpvpnServer(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing l2tpvpnUsername');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setL2tpvpnUsername(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing l2tpvpnPasswd');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setL2tpvpnPasswd(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing l2tpvpnIpsecPasswd');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setL2tpvpnIpsecPasswd(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing openvpnPort');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setOpenvpnPort(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing pptpMppe');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setPptpMppe(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing openvpnEncSw');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setOpenvpnEncSw(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing l2tpvpnSw');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setL2tpvpnSw(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing l2tpvpnIpsecSw');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setL2tpvpnIpsecSw(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing vpntype');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setVpntype(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AlgFax
//
function AST_AlgFax () {
    this.typeMarker = 'AST_AlgFax';
    this._mode = null;
    this._rate = null;
    this._opermode = null;
    this._fxorxgain = null;
    this._fxotxgain = null;
    this._fxsrxgain = null;
    this._fxstxgain = null;
    this._ecm = '';
}

//
// accessor is AST_AlgFax.prototype.getMode
// element get for mode
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for mode
// setter function is is AST_AlgFax.prototype.setMode
//
function AST_AlgFax_getMode() { return this._mode;}

AST_AlgFax.prototype.getMode = AST_AlgFax_getMode;

function AST_AlgFax_setMode(value) { this._mode = value;}

AST_AlgFax.prototype.setMode = AST_AlgFax_setMode;
//
// accessor is AST_AlgFax.prototype.getRate
// element get for rate
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for rate
// setter function is is AST_AlgFax.prototype.setRate
//
function AST_AlgFax_getRate() { return this._rate;}

AST_AlgFax.prototype.getRate = AST_AlgFax_getRate;

function AST_AlgFax_setRate(value) { this._rate = value;}

AST_AlgFax.prototype.setRate = AST_AlgFax_setRate;
//
// accessor is AST_AlgFax.prototype.getOpermode
// element get for opermode
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for opermode
// setter function is is AST_AlgFax.prototype.setOpermode
//
function AST_AlgFax_getOpermode() { return this._opermode;}

AST_AlgFax.prototype.getOpermode = AST_AlgFax_getOpermode;

function AST_AlgFax_setOpermode(value) { this._opermode = value;}

AST_AlgFax.prototype.setOpermode = AST_AlgFax_setOpermode;
//
// accessor is AST_AlgFax.prototype.getFxorxgain
// element get for fxorxgain
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for fxorxgain
// setter function is is AST_AlgFax.prototype.setFxorxgain
//
function AST_AlgFax_getFxorxgain() { return this._fxorxgain;}

AST_AlgFax.prototype.getFxorxgain = AST_AlgFax_getFxorxgain;

function AST_AlgFax_setFxorxgain(value) { this._fxorxgain = value;}

AST_AlgFax.prototype.setFxorxgain = AST_AlgFax_setFxorxgain;
//
// accessor is AST_AlgFax.prototype.getFxotxgain
// element get for fxotxgain
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for fxotxgain
// setter function is is AST_AlgFax.prototype.setFxotxgain
//
function AST_AlgFax_getFxotxgain() { return this._fxotxgain;}

AST_AlgFax.prototype.getFxotxgain = AST_AlgFax_getFxotxgain;

function AST_AlgFax_setFxotxgain(value) { this._fxotxgain = value;}

AST_AlgFax.prototype.setFxotxgain = AST_AlgFax_setFxotxgain;
//
// accessor is AST_AlgFax.prototype.getFxsrxgain
// element get for fxsrxgain
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for fxsrxgain
// setter function is is AST_AlgFax.prototype.setFxsrxgain
//
function AST_AlgFax_getFxsrxgain() { return this._fxsrxgain;}

AST_AlgFax.prototype.getFxsrxgain = AST_AlgFax_getFxsrxgain;

function AST_AlgFax_setFxsrxgain(value) { this._fxsrxgain = value;}

AST_AlgFax.prototype.setFxsrxgain = AST_AlgFax_setFxsrxgain;
//
// accessor is AST_AlgFax.prototype.getFxstxgain
// element get for fxstxgain
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for fxstxgain
// setter function is is AST_AlgFax.prototype.setFxstxgain
//
function AST_AlgFax_getFxstxgain() { return this._fxstxgain;}

AST_AlgFax.prototype.getFxstxgain = AST_AlgFax_getFxstxgain;

function AST_AlgFax_setFxstxgain(value) { this._fxstxgain = value;}

AST_AlgFax.prototype.setFxstxgain = AST_AlgFax_setFxstxgain;
//
// accessor is AST_AlgFax.prototype.getEcm
// element get for ecm
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for ecm
// setter function is is AST_AlgFax.prototype.setEcm
//
function AST_AlgFax_getEcm() { return this._ecm;}

AST_AlgFax.prototype.getEcm = AST_AlgFax_getEcm;

function AST_AlgFax_setEcm(value) { this._ecm = value;}

AST_AlgFax.prototype.setEcm = AST_AlgFax_setEcm;
//
// Serialize {urn:ast}AlgFax
//
function AST_AlgFax_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._mode == null) {
      xml = xml + '<jns0:mode xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:mode>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._mode);
      xml = xml + '</jns0:mode>';
     }
    }
    // block for local variables
    {
     if (this._rate == null) {
      xml = xml + '<jns0:rate xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:rate>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._rate);
      xml = xml + '</jns0:rate>';
     }
    }
    // block for local variables
    {
     if (this._opermode == null) {
      xml = xml + '<jns0:opermode xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:opermode>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._opermode);
      xml = xml + '</jns0:opermode>';
     }
    }
    // block for local variables
    {
     if (this._fxorxgain == null) {
      xml = xml + '<jns0:fxorxgain xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:fxorxgain>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._fxorxgain);
      xml = xml + '</jns0:fxorxgain>';
     }
    }
    // block for local variables
    {
     if (this._fxotxgain == null) {
      xml = xml + '<jns0:fxotxgain xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:fxotxgain>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._fxotxgain);
      xml = xml + '</jns0:fxotxgain>';
     }
    }
    // block for local variables
    {
     if (this._fxsrxgain == null) {
      xml = xml + '<jns0:fxsrxgain xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:fxsrxgain>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._fxsrxgain);
      xml = xml + '</jns0:fxsrxgain>';
     }
    }
    // block for local variables
    {
     if (this._fxstxgain == null) {
      xml = xml + '<jns0:fxstxgain xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:fxstxgain>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._fxstxgain);
      xml = xml + '</jns0:fxstxgain>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:ecm>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._ecm);
     xml = xml + '</jns0:ecm>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AlgFax.prototype.serialize = AST_AlgFax_serialize;

function AST_AlgFax_deserialize (cxfjsutils, element) {
    var newobject = new AST_AlgFax();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing mode');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setMode(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing rate');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setRate(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing opermode');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setOpermode(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fxorxgain');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setFxorxgain(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fxotxgain');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setFxotxgain(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fxsrxgain');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setFxsrxgain(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fxstxgain');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setFxstxgain(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ecm');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setEcm(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}UcpAlgGlbSave
//
function AST_UcpAlgGlbSave () {
    this.typeMarker = 'AST_UcpAlgGlbSave';
    this._global = null;
    this._glb = null;
}

//
// accessor is AST_UcpAlgGlbSave.prototype.getGlobal
// element get for global
// - element type is {urn:ast}UcpAlgGlobal
// - required element
//
// element set for global
// setter function is is AST_UcpAlgGlbSave.prototype.setGlobal
//
function AST_UcpAlgGlbSave_getGlobal() { return this._global;}

AST_UcpAlgGlbSave.prototype.getGlobal = AST_UcpAlgGlbSave_getGlobal;

function AST_UcpAlgGlbSave_setGlobal(value) { this._global = value;}

AST_UcpAlgGlbSave.prototype.setGlobal = AST_UcpAlgGlbSave_setGlobal;
//
// accessor is AST_UcpAlgGlbSave.prototype.getGlb
// element get for glb
// - element type is {urn:ast}AlgGlb
// - required element
//
// element set for glb
// setter function is is AST_UcpAlgGlbSave.prototype.setGlb
//
function AST_UcpAlgGlbSave_getGlb() { return this._glb;}

AST_UcpAlgGlbSave.prototype.getGlb = AST_UcpAlgGlbSave_getGlb;

function AST_UcpAlgGlbSave_setGlb(value) { this._glb = value;}

AST_UcpAlgGlbSave.prototype.setGlb = AST_UcpAlgGlbSave_setGlb;
//
// Serialize {urn:ast}UcpAlgGlbSave
//
function AST_UcpAlgGlbSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._global.serialize(cxfjsutils, 'jns0:global', null);
    }
    // block for local variables
    {
     xml = xml + this._glb.serialize(cxfjsutils, 'jns0:glb', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_UcpAlgGlbSave.prototype.serialize = AST_UcpAlgGlbSave_serialize;

function AST_UcpAlgGlbSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_UcpAlgGlbSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing global');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_UcpAlgGlobal_deserialize(cxfjsutils, curElement);
    }
    newobject.setGlobal(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing glb');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_AlgGlb_deserialize(cxfjsutils, curElement);
    }
    newobject.setGlb(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}NetworkDdnsGeneral
//
function AST_NetworkDdnsGeneral () {
    this.typeMarker = 'AST_NetworkDdnsGeneral';
    this._ddns = '';
    this._type = '';
}

//
// accessor is AST_NetworkDdnsGeneral.prototype.getDdns
// element get for ddns
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for ddns
// setter function is is AST_NetworkDdnsGeneral.prototype.setDdns
//
function AST_NetworkDdnsGeneral_getDdns() { return this._ddns;}

AST_NetworkDdnsGeneral.prototype.getDdns = AST_NetworkDdnsGeneral_getDdns;

function AST_NetworkDdnsGeneral_setDdns(value) { this._ddns = value;}

AST_NetworkDdnsGeneral.prototype.setDdns = AST_NetworkDdnsGeneral_setDdns;
//
// accessor is AST_NetworkDdnsGeneral.prototype.getType
// element get for type
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for type
// setter function is is AST_NetworkDdnsGeneral.prototype.setType
//
function AST_NetworkDdnsGeneral_getType() { return this._type;}

AST_NetworkDdnsGeneral.prototype.getType = AST_NetworkDdnsGeneral_getType;

function AST_NetworkDdnsGeneral_setType(value) { this._type = value;}

AST_NetworkDdnsGeneral.prototype.setType = AST_NetworkDdnsGeneral_setType;
//
// Serialize {urn:ast}NetworkDdnsGeneral
//
function AST_NetworkDdnsGeneral_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:ddns>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._ddns);
     xml = xml + '</jns0:ddns>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:type>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._type);
     xml = xml + '</jns0:type>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_NetworkDdnsGeneral.prototype.serialize = AST_NetworkDdnsGeneral_serialize;

function AST_NetworkDdnsGeneral_deserialize (cxfjsutils, element) {
    var newobject = new AST_NetworkDdnsGeneral();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ddns');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setDdns(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing type');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setType(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}UcpAlgFxsparamGet
//
function AST_UcpAlgFxsparamGet () {
    this.typeMarker = 'AST_UcpAlgFxsparamGet';
    this._combuf = null;
    this._fxs = null;
}

//
// accessor is AST_UcpAlgFxsparamGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_UcpAlgFxsparamGet.prototype.setCombuf
//
function AST_UcpAlgFxsparamGet_getCombuf() { return this._combuf;}

AST_UcpAlgFxsparamGet.prototype.getCombuf = AST_UcpAlgFxsparamGet_getCombuf;

function AST_UcpAlgFxsparamGet_setCombuf(value) { this._combuf = value;}

AST_UcpAlgFxsparamGet.prototype.setCombuf = AST_UcpAlgFxsparamGet_setCombuf;
//
// accessor is AST_UcpAlgFxsparamGet.prototype.getFxs
// element get for fxs
// - element type is {urn:ast}UcpAlgFxsparam
// - required element
//
// element set for fxs
// setter function is is AST_UcpAlgFxsparamGet.prototype.setFxs
//
function AST_UcpAlgFxsparamGet_getFxs() { return this._fxs;}

AST_UcpAlgFxsparamGet.prototype.getFxs = AST_UcpAlgFxsparamGet_getFxs;

function AST_UcpAlgFxsparamGet_setFxs(value) { this._fxs = value;}

AST_UcpAlgFxsparamGet.prototype.setFxs = AST_UcpAlgFxsparamGet_setFxs;
//
// Serialize {urn:ast}UcpAlgFxsparamGet
//
function AST_UcpAlgFxsparamGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._fxs.serialize(cxfjsutils, 'jns0:fxs', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_UcpAlgFxsparamGet.prototype.serialize = AST_UcpAlgFxsparamGet_serialize;

function AST_UcpAlgFxsparamGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_UcpAlgFxsparamGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fxs');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_UcpAlgFxsparam_deserialize(cxfjsutils, curElement);
    }
    newobject.setFxs(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipSecGet
//
function AST_SipSecGet () {
    this.typeMarker = 'AST_SipSecGet';
    this._combuf = null;
    this._sipgen = null;
    this._sipkey = null;
    this._file = null;
}

//
// accessor is AST_SipSecGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_SipSecGet.prototype.setCombuf
//
function AST_SipSecGet_getCombuf() { return this._combuf;}

AST_SipSecGet.prototype.getCombuf = AST_SipSecGet_getCombuf;

function AST_SipSecGet_setCombuf(value) { this._combuf = value;}

AST_SipSecGet.prototype.setCombuf = AST_SipSecGet_setCombuf;
//
// accessor is AST_SipSecGet.prototype.getSipgen
// element get for sipgen
// - element type is {urn:ast}SipGen
// - required element
//
// element set for sipgen
// setter function is is AST_SipSecGet.prototype.setSipgen
//
function AST_SipSecGet_getSipgen() { return this._sipgen;}

AST_SipSecGet.prototype.getSipgen = AST_SipSecGet_getSipgen;

function AST_SipSecGet_setSipgen(value) { this._sipgen = value;}

AST_SipSecGet.prototype.setSipgen = AST_SipSecGet_setSipgen;
//
// accessor is AST_SipSecGet.prototype.getSipkey
// element get for sipkey
// - element type is {urn:ast}SipKeyArr
// - required element
//
// element set for sipkey
// setter function is is AST_SipSecGet.prototype.setSipkey
//
function AST_SipSecGet_getSipkey() { return this._sipkey;}

AST_SipSecGet.prototype.getSipkey = AST_SipSecGet_getSipkey;

function AST_SipSecGet_setSipkey(value) { this._sipkey = value;}

AST_SipSecGet.prototype.setSipkey = AST_SipSecGet_setSipkey;
//
// accessor is AST_SipSecGet.prototype.getFile
// element get for file
// - element type is {urn:ast}FileArr
// - required element
//
// element set for file
// setter function is is AST_SipSecGet.prototype.setFile
//
function AST_SipSecGet_getFile() { return this._file;}

AST_SipSecGet.prototype.getFile = AST_SipSecGet_getFile;

function AST_SipSecGet_setFile(value) { this._file = value;}

AST_SipSecGet.prototype.setFile = AST_SipSecGet_setFile;
//
// Serialize {urn:ast}SipSecGet
//
function AST_SipSecGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._sipgen.serialize(cxfjsutils, 'jns0:sipgen', null);
    }
    // block for local variables
    {
     xml = xml + this._sipkey.serialize(cxfjsutils, 'jns0:sipkey', null);
    }
    // block for local variables
    {
     xml = xml + this._file.serialize(cxfjsutils, 'jns0:file', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipSecGet.prototype.serialize = AST_SipSecGet_serialize;

function AST_SipSecGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipSecGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sipgen');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SipGen_deserialize(cxfjsutils, curElement);
    }
    newobject.setSipgen(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sipkey');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SipKeyArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setSipkey(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing file');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_FileArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setFile(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}UcpAlgFxoGlobal
//
function AST_UcpAlgFxoGlobal () {
    this.typeMarker = 'AST_UcpAlgFxoGlobal';
    this._busycount = 0;
    this._busycountry = null;
    this._silencethreshold = null;
    this._maxsilence = null;
    this._rxthreshold = null;
    this._txthreshold = null;
    this._silencedetect = '';
    this._busydetect = '';
}

//
// accessor is AST_UcpAlgFxoGlobal.prototype.getBusycount
// element get for busycount
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for busycount
// setter function is is AST_UcpAlgFxoGlobal.prototype.setBusycount
//
function AST_UcpAlgFxoGlobal_getBusycount() { return this._busycount;}

AST_UcpAlgFxoGlobal.prototype.getBusycount = AST_UcpAlgFxoGlobal_getBusycount;

function AST_UcpAlgFxoGlobal_setBusycount(value) { this._busycount = value;}

AST_UcpAlgFxoGlobal.prototype.setBusycount = AST_UcpAlgFxoGlobal_setBusycount;
//
// accessor is AST_UcpAlgFxoGlobal.prototype.getBusycountry
// element get for busycountry
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for busycountry
// setter function is is AST_UcpAlgFxoGlobal.prototype.setBusycountry
//
function AST_UcpAlgFxoGlobal_getBusycountry() { return this._busycountry;}

AST_UcpAlgFxoGlobal.prototype.getBusycountry = AST_UcpAlgFxoGlobal_getBusycountry;

function AST_UcpAlgFxoGlobal_setBusycountry(value) { this._busycountry = value;}

AST_UcpAlgFxoGlobal.prototype.setBusycountry = AST_UcpAlgFxoGlobal_setBusycountry;
//
// accessor is AST_UcpAlgFxoGlobal.prototype.getSilencethreshold
// element get for silencethreshold
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for silencethreshold
// setter function is is AST_UcpAlgFxoGlobal.prototype.setSilencethreshold
//
function AST_UcpAlgFxoGlobal_getSilencethreshold() { return this._silencethreshold;}

AST_UcpAlgFxoGlobal.prototype.getSilencethreshold = AST_UcpAlgFxoGlobal_getSilencethreshold;

function AST_UcpAlgFxoGlobal_setSilencethreshold(value) { this._silencethreshold = value;}

AST_UcpAlgFxoGlobal.prototype.setSilencethreshold = AST_UcpAlgFxoGlobal_setSilencethreshold;
//
// accessor is AST_UcpAlgFxoGlobal.prototype.getMaxsilence
// element get for maxsilence
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for maxsilence
// setter function is is AST_UcpAlgFxoGlobal.prototype.setMaxsilence
//
function AST_UcpAlgFxoGlobal_getMaxsilence() { return this._maxsilence;}

AST_UcpAlgFxoGlobal.prototype.getMaxsilence = AST_UcpAlgFxoGlobal_getMaxsilence;

function AST_UcpAlgFxoGlobal_setMaxsilence(value) { this._maxsilence = value;}

AST_UcpAlgFxoGlobal.prototype.setMaxsilence = AST_UcpAlgFxoGlobal_setMaxsilence;
//
// accessor is AST_UcpAlgFxoGlobal.prototype.getRxthreshold
// element get for rxthreshold
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for rxthreshold
// setter function is is AST_UcpAlgFxoGlobal.prototype.setRxthreshold
//
function AST_UcpAlgFxoGlobal_getRxthreshold() { return this._rxthreshold;}

AST_UcpAlgFxoGlobal.prototype.getRxthreshold = AST_UcpAlgFxoGlobal_getRxthreshold;

function AST_UcpAlgFxoGlobal_setRxthreshold(value) { this._rxthreshold = value;}

AST_UcpAlgFxoGlobal.prototype.setRxthreshold = AST_UcpAlgFxoGlobal_setRxthreshold;
//
// accessor is AST_UcpAlgFxoGlobal.prototype.getTxthreshold
// element get for txthreshold
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for txthreshold
// setter function is is AST_UcpAlgFxoGlobal.prototype.setTxthreshold
//
function AST_UcpAlgFxoGlobal_getTxthreshold() { return this._txthreshold;}

AST_UcpAlgFxoGlobal.prototype.getTxthreshold = AST_UcpAlgFxoGlobal_getTxthreshold;

function AST_UcpAlgFxoGlobal_setTxthreshold(value) { this._txthreshold = value;}

AST_UcpAlgFxoGlobal.prototype.setTxthreshold = AST_UcpAlgFxoGlobal_setTxthreshold;
//
// accessor is AST_UcpAlgFxoGlobal.prototype.getSilencedetect
// element get for silencedetect
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for silencedetect
// setter function is is AST_UcpAlgFxoGlobal.prototype.setSilencedetect
//
function AST_UcpAlgFxoGlobal_getSilencedetect() { return this._silencedetect;}

AST_UcpAlgFxoGlobal.prototype.getSilencedetect = AST_UcpAlgFxoGlobal_getSilencedetect;

function AST_UcpAlgFxoGlobal_setSilencedetect(value) { this._silencedetect = value;}

AST_UcpAlgFxoGlobal.prototype.setSilencedetect = AST_UcpAlgFxoGlobal_setSilencedetect;
//
// accessor is AST_UcpAlgFxoGlobal.prototype.getBusydetect
// element get for busydetect
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for busydetect
// setter function is is AST_UcpAlgFxoGlobal.prototype.setBusydetect
//
function AST_UcpAlgFxoGlobal_getBusydetect() { return this._busydetect;}

AST_UcpAlgFxoGlobal.prototype.getBusydetect = AST_UcpAlgFxoGlobal_getBusydetect;

function AST_UcpAlgFxoGlobal_setBusydetect(value) { this._busydetect = value;}

AST_UcpAlgFxoGlobal.prototype.setBusydetect = AST_UcpAlgFxoGlobal_setBusydetect;
//
// Serialize {urn:ast}UcpAlgFxoGlobal
//
function AST_UcpAlgFxoGlobal_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:busycount>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._busycount);
     xml = xml + '</jns0:busycount>';
    }
    // block for local variables
    {
     if (this._busycountry == null) {
      xml = xml + '<jns0:busycountry xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:busycountry>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._busycountry);
      xml = xml + '</jns0:busycountry>';
     }
    }
    // block for local variables
    {
     if (this._silencethreshold == null) {
      xml = xml + '<jns0:silencethreshold xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:silencethreshold>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._silencethreshold);
      xml = xml + '</jns0:silencethreshold>';
     }
    }
    // block for local variables
    {
     if (this._maxsilence == null) {
      xml = xml + '<jns0:maxsilence xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:maxsilence>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._maxsilence);
      xml = xml + '</jns0:maxsilence>';
     }
    }
    // block for local variables
    {
     if (this._rxthreshold == null) {
      xml = xml + '<jns0:rxthreshold xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:rxthreshold>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._rxthreshold);
      xml = xml + '</jns0:rxthreshold>';
     }
    }
    // block for local variables
    {
     if (this._txthreshold == null) {
      xml = xml + '<jns0:txthreshold xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:txthreshold>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._txthreshold);
      xml = xml + '</jns0:txthreshold>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:silencedetect>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._silencedetect);
     xml = xml + '</jns0:silencedetect>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:busydetect>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._busydetect);
     xml = xml + '</jns0:busydetect>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_UcpAlgFxoGlobal.prototype.serialize = AST_UcpAlgFxoGlobal_serialize;

function AST_UcpAlgFxoGlobal_deserialize (cxfjsutils, element) {
    var newobject = new AST_UcpAlgFxoGlobal();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing busycount');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setBusycount(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing busycountry');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setBusycountry(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing silencethreshold');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSilencethreshold(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing maxsilence');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setMaxsilence(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing rxthreshold');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setRxthreshold(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing txthreshold');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setTxthreshold(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing silencedetect');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSilencedetect(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing busydetect');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setBusydetect(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SnmpAccess
//
function AST_SnmpAccess () {
    this.typeMarker = 'AST_SnmpAccess';
    this._read = '';
    this._write = '';
    this._notif = '';
}

//
// accessor is AST_SnmpAccess.prototype.getRead
// element get for read
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for read
// setter function is is AST_SnmpAccess.prototype.setRead
//
function AST_SnmpAccess_getRead() { return this._read;}

AST_SnmpAccess.prototype.getRead = AST_SnmpAccess_getRead;

function AST_SnmpAccess_setRead(value) { this._read = value;}

AST_SnmpAccess.prototype.setRead = AST_SnmpAccess_setRead;
//
// accessor is AST_SnmpAccess.prototype.getWrite
// element get for write
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for write
// setter function is is AST_SnmpAccess.prototype.setWrite
//
function AST_SnmpAccess_getWrite() { return this._write;}

AST_SnmpAccess.prototype.getWrite = AST_SnmpAccess_getWrite;

function AST_SnmpAccess_setWrite(value) { this._write = value;}

AST_SnmpAccess.prototype.setWrite = AST_SnmpAccess_setWrite;
//
// accessor is AST_SnmpAccess.prototype.getNotif
// element get for notif
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for notif
// setter function is is AST_SnmpAccess.prototype.setNotif
//
function AST_SnmpAccess_getNotif() { return this._notif;}

AST_SnmpAccess.prototype.getNotif = AST_SnmpAccess_getNotif;

function AST_SnmpAccess_setNotif(value) { this._notif = value;}

AST_SnmpAccess.prototype.setNotif = AST_SnmpAccess_setNotif;
//
// Serialize {urn:ast}SnmpAccess
//
function AST_SnmpAccess_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:read>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._read);
     xml = xml + '</jns0:read>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:write>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._write);
     xml = xml + '</jns0:write>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:notif>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._notif);
     xml = xml + '</jns0:notif>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SnmpAccess.prototype.serialize = AST_SnmpAccess_serialize;

function AST_SnmpAccess_deserialize (cxfjsutils, element) {
    var newobject = new AST_SnmpAccess();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing read');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setRead(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing write');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setWrite(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing notif');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setNotif(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}FxsSpeeddial
//
function AST_FxsSpeeddial () {
    this.typeMarker = 'AST_FxsSpeeddial';
    this._fxsport = '';
    this._dialnumber = null;
}

//
// accessor is AST_FxsSpeeddial.prototype.getFxsport
// element get for fxsport
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for fxsport
// setter function is is AST_FxsSpeeddial.prototype.setFxsport
//
function AST_FxsSpeeddial_getFxsport() { return this._fxsport;}

AST_FxsSpeeddial.prototype.getFxsport = AST_FxsSpeeddial_getFxsport;

function AST_FxsSpeeddial_setFxsport(value) { this._fxsport = value;}

AST_FxsSpeeddial.prototype.setFxsport = AST_FxsSpeeddial_setFxsport;
//
// accessor is AST_FxsSpeeddial.prototype.getDialnumber
// element get for dialnumber
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for dialnumber
// setter function is is AST_FxsSpeeddial.prototype.setDialnumber
//
function AST_FxsSpeeddial_getDialnumber() { return this._dialnumber;}

AST_FxsSpeeddial.prototype.getDialnumber = AST_FxsSpeeddial_getDialnumber;

function AST_FxsSpeeddial_setDialnumber(value) { this._dialnumber = value;}

AST_FxsSpeeddial.prototype.setDialnumber = AST_FxsSpeeddial_setDialnumber;
//
// Serialize {urn:ast}FxsSpeeddial
//
function AST_FxsSpeeddial_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:fxsport>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._fxsport);
     xml = xml + '</jns0:fxsport>';
    }
    // block for local variables
    {
     if (this._dialnumber == null) {
      xml = xml + '<jns0:dialnumber xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:dialnumber>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._dialnumber);
      xml = xml + '</jns0:dialnumber>';
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_FxsSpeeddial.prototype.serialize = AST_FxsSpeeddial_serialize;

function AST_FxsSpeeddial_deserialize (cxfjsutils, element) {
    var newobject = new AST_FxsSpeeddial();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fxsport');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setFxsport(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing dialnumber');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setDialnumber(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipAnalog
//
function AST_SipAnalog () {
    this.typeMarker = 'AST_SipAnalog';
    this._section = null;
    this._name = null;
    this._cidnumber = null;
    this._associatedchnnl = null;
    this._hostip = null;
    this._allow = null;
}

//
// accessor is AST_SipAnalog.prototype.getSection
// element get for section
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for section
// setter function is is AST_SipAnalog.prototype.setSection
//
function AST_SipAnalog_getSection() { return this._section;}

AST_SipAnalog.prototype.getSection = AST_SipAnalog_getSection;

function AST_SipAnalog_setSection(value) { this._section = value;}

AST_SipAnalog.prototype.setSection = AST_SipAnalog_setSection;
//
// accessor is AST_SipAnalog.prototype.getName
// element get for name
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for name
// setter function is is AST_SipAnalog.prototype.setName
//
function AST_SipAnalog_getName() { return this._name;}

AST_SipAnalog.prototype.getName = AST_SipAnalog_getName;

function AST_SipAnalog_setName(value) { this._name = value;}

AST_SipAnalog.prototype.setName = AST_SipAnalog_setName;
//
// accessor is AST_SipAnalog.prototype.getCidnumber
// element get for cidnumber
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for cidnumber
// setter function is is AST_SipAnalog.prototype.setCidnumber
//
function AST_SipAnalog_getCidnumber() { return this._cidnumber;}

AST_SipAnalog.prototype.getCidnumber = AST_SipAnalog_getCidnumber;

function AST_SipAnalog_setCidnumber(value) { this._cidnumber = value;}

AST_SipAnalog.prototype.setCidnumber = AST_SipAnalog_setCidnumber;
//
// accessor is AST_SipAnalog.prototype.getAssociatedchnnl
// element get for associatedchnnl
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for associatedchnnl
// setter function is is AST_SipAnalog.prototype.setAssociatedchnnl
//
function AST_SipAnalog_getAssociatedchnnl() { return this._associatedchnnl;}

AST_SipAnalog.prototype.getAssociatedchnnl = AST_SipAnalog_getAssociatedchnnl;

function AST_SipAnalog_setAssociatedchnnl(value) { this._associatedchnnl = value;}

AST_SipAnalog.prototype.setAssociatedchnnl = AST_SipAnalog_setAssociatedchnnl;
//
// accessor is AST_SipAnalog.prototype.getHostip
// element get for hostip
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for hostip
// setter function is is AST_SipAnalog.prototype.setHostip
//
function AST_SipAnalog_getHostip() { return this._hostip;}

AST_SipAnalog.prototype.getHostip = AST_SipAnalog_getHostip;

function AST_SipAnalog_setHostip(value) { this._hostip = value;}

AST_SipAnalog.prototype.setHostip = AST_SipAnalog_setHostip;
//
// accessor is AST_SipAnalog.prototype.getAllow
// element get for allow
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for allow
// setter function is is AST_SipAnalog.prototype.setAllow
//
function AST_SipAnalog_getAllow() { return this._allow;}

AST_SipAnalog.prototype.getAllow = AST_SipAnalog_getAllow;

function AST_SipAnalog_setAllow(value) { this._allow = value;}

AST_SipAnalog.prototype.setAllow = AST_SipAnalog_setAllow;
//
// Serialize {urn:ast}SipAnalog
//
function AST_SipAnalog_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._section == null) {
      xml = xml + '<jns0:section xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:section>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._section);
      xml = xml + '</jns0:section>';
     }
    }
    // block for local variables
    {
     if (this._name == null) {
      xml = xml + '<jns0:name xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:name>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._name);
      xml = xml + '</jns0:name>';
     }
    }
    // block for local variables
    {
     if (this._cidnumber == null) {
      xml = xml + '<jns0:cidnumber xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:cidnumber>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._cidnumber);
      xml = xml + '</jns0:cidnumber>';
     }
    }
    // block for local variables
    {
     if (this._associatedchnnl == null) {
      xml = xml + '<jns0:associatedchnnl xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:associatedchnnl>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._associatedchnnl);
      xml = xml + '</jns0:associatedchnnl>';
     }
    }
    // block for local variables
    {
     if (this._hostip == null) {
      xml = xml + '<jns0:hostip xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:hostip>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._hostip);
      xml = xml + '</jns0:hostip>';
     }
    }
    // block for local variables
    {
     if (this._allow == null) {
      xml = xml + '<jns0:allow xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:allow>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._allow);
      xml = xml + '</jns0:allow>';
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipAnalog.prototype.serialize = AST_SipAnalog_serialize;

function AST_SipAnalog_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipAnalog();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing section');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSection(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing name');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setName(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing cidnumber');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setCidnumber(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing associatedchnnl');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setAssociatedchnnl(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing hostip');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setHostip(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing allow');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setAllow(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipAna
//
function AST_SipAna () {
    this.typeMarker = 'AST_SipAna';
    this._channel = 0;
    this._associatedchnnl = null;
    this._signalling = '';
}

//
// accessor is AST_SipAna.prototype.getChannel
// element get for channel
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for channel
// setter function is is AST_SipAna.prototype.setChannel
//
function AST_SipAna_getChannel() { return this._channel;}

AST_SipAna.prototype.getChannel = AST_SipAna_getChannel;

function AST_SipAna_setChannel(value) { this._channel = value;}

AST_SipAna.prototype.setChannel = AST_SipAna_setChannel;
//
// accessor is AST_SipAna.prototype.getAssociatedchnnl
// element get for associatedchnnl
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for associatedchnnl
// setter function is is AST_SipAna.prototype.setAssociatedchnnl
//
function AST_SipAna_getAssociatedchnnl() { return this._associatedchnnl;}

AST_SipAna.prototype.getAssociatedchnnl = AST_SipAna_getAssociatedchnnl;

function AST_SipAna_setAssociatedchnnl(value) { this._associatedchnnl = value;}

AST_SipAna.prototype.setAssociatedchnnl = AST_SipAna_setAssociatedchnnl;
//
// accessor is AST_SipAna.prototype.getSignalling
// element get for signalling
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for signalling
// setter function is is AST_SipAna.prototype.setSignalling
//
function AST_SipAna_getSignalling() { return this._signalling;}

AST_SipAna.prototype.getSignalling = AST_SipAna_getSignalling;

function AST_SipAna_setSignalling(value) { this._signalling = value;}

AST_SipAna.prototype.setSignalling = AST_SipAna_setSignalling;
//
// Serialize {urn:ast}SipAna
//
function AST_SipAna_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:channel>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._channel);
     xml = xml + '</jns0:channel>';
    }
    // block for local variables
    {
     if (this._associatedchnnl == null) {
      xml = xml + '<jns0:associatedchnnl xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:associatedchnnl>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._associatedchnnl);
      xml = xml + '</jns0:associatedchnnl>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:signalling>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._signalling);
     xml = xml + '</jns0:signalling>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipAna.prototype.serialize = AST_SipAna_serialize;

function AST_SipAna_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipAna();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing channel');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setChannel(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing associatedchnnl');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setAssociatedchnnl(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing signalling');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSignalling(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SysInfoGet
//
function AST_SysInfoGet () {
    this.typeMarker = 'AST_SysInfoGet';
    this._combuf = null;
    this._info = null;
    this._date = null;
}

//
// accessor is AST_SysInfoGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_SysInfoGet.prototype.setCombuf
//
function AST_SysInfoGet_getCombuf() { return this._combuf;}

AST_SysInfoGet.prototype.getCombuf = AST_SysInfoGet_getCombuf;

function AST_SysInfoGet_setCombuf(value) { this._combuf = value;}

AST_SysInfoGet.prototype.setCombuf = AST_SysInfoGet_setCombuf;
//
// accessor is AST_SysInfoGet.prototype.getInfo
// element get for info
// - element type is {urn:ast}SysInfo
// - required element
//
// element set for info
// setter function is is AST_SysInfoGet.prototype.setInfo
//
function AST_SysInfoGet_getInfo() { return this._info;}

AST_SysInfoGet.prototype.getInfo = AST_SysInfoGet_getInfo;

function AST_SysInfoGet_setInfo(value) { this._info = value;}

AST_SysInfoGet.prototype.setInfo = AST_SysInfoGet_setInfo;
//
// accessor is AST_SysInfoGet.prototype.getDate
// element get for date
// - element type is {urn:ast}SysDate
// - required element
//
// element set for date
// setter function is is AST_SysInfoGet.prototype.setDate
//
function AST_SysInfoGet_getDate() { return this._date;}

AST_SysInfoGet.prototype.getDate = AST_SysInfoGet_getDate;

function AST_SysInfoGet_setDate(value) { this._date = value;}

AST_SysInfoGet.prototype.setDate = AST_SysInfoGet_setDate;
//
// Serialize {urn:ast}SysInfoGet
//
function AST_SysInfoGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._info.serialize(cxfjsutils, 'jns0:info', null);
    }
    // block for local variables
    {
     xml = xml + this._date.serialize(cxfjsutils, 'jns0:date', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SysInfoGet.prototype.serialize = AST_SysInfoGet_serialize;

function AST_SysInfoGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_SysInfoGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing info');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SysInfo_deserialize(cxfjsutils, curElement);
    }
    newobject.setInfo(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing date');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SysDate_deserialize(cxfjsutils, curElement);
    }
    newobject.setDate(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}NetworkDdnsSave
//
function AST_NetworkDdnsSave () {
    this.typeMarker = 'AST_NetworkDdnsSave';
    this._general = null;
    this._com = null;
}

//
// accessor is AST_NetworkDdnsSave.prototype.getGeneral
// element get for general
// - element type is {urn:ast}NetworkDdnsGeneral
// - required element
//
// element set for general
// setter function is is AST_NetworkDdnsSave.prototype.setGeneral
//
function AST_NetworkDdnsSave_getGeneral() { return this._general;}

AST_NetworkDdnsSave.prototype.getGeneral = AST_NetworkDdnsSave_getGeneral;

function AST_NetworkDdnsSave_setGeneral(value) { this._general = value;}

AST_NetworkDdnsSave.prototype.setGeneral = AST_NetworkDdnsSave_setGeneral;
//
// accessor is AST_NetworkDdnsSave.prototype.getCom
// element get for com
// - element type is {urn:ast}NetworkDdnsCom
// - required element
//
// element set for com
// setter function is is AST_NetworkDdnsSave.prototype.setCom
//
function AST_NetworkDdnsSave_getCom() { return this._com;}

AST_NetworkDdnsSave.prototype.getCom = AST_NetworkDdnsSave_getCom;

function AST_NetworkDdnsSave_setCom(value) { this._com = value;}

AST_NetworkDdnsSave.prototype.setCom = AST_NetworkDdnsSave_setCom;
//
// Serialize {urn:ast}NetworkDdnsSave
//
function AST_NetworkDdnsSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._general.serialize(cxfjsutils, 'jns0:general', null);
    }
    // block for local variables
    {
     xml = xml + this._com.serialize(cxfjsutils, 'jns0:com', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_NetworkDdnsSave.prototype.serialize = AST_NetworkDdnsSave_serialize;

function AST_NetworkDdnsSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_NetworkDdnsSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing general');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_NetworkDdnsGeneral_deserialize(cxfjsutils, curElement);
    }
    newobject.setGeneral(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing com');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_NetworkDdnsCom_deserialize(cxfjsutils, curElement);
    }
    newobject.setCom(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}ModuleBoardInfo
//
function AST_ModuleBoardInfo () {
    this.typeMarker = 'AST_ModuleBoardInfo';
    this._online = '';
    this._boardstacknum = '';
    this._version = null;
    this._buildtime = null;
}

//
// accessor is AST_ModuleBoardInfo.prototype.getOnline
// element get for online
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for online
// setter function is is AST_ModuleBoardInfo.prototype.setOnline
//
function AST_ModuleBoardInfo_getOnline() { return this._online;}

AST_ModuleBoardInfo.prototype.getOnline = AST_ModuleBoardInfo_getOnline;

function AST_ModuleBoardInfo_setOnline(value) { this._online = value;}

AST_ModuleBoardInfo.prototype.setOnline = AST_ModuleBoardInfo_setOnline;
//
// accessor is AST_ModuleBoardInfo.prototype.getBoardstacknum
// element get for boardstacknum
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for boardstacknum
// setter function is is AST_ModuleBoardInfo.prototype.setBoardstacknum
//
function AST_ModuleBoardInfo_getBoardstacknum() { return this._boardstacknum;}

AST_ModuleBoardInfo.prototype.getBoardstacknum = AST_ModuleBoardInfo_getBoardstacknum;

function AST_ModuleBoardInfo_setBoardstacknum(value) { this._boardstacknum = value;}

AST_ModuleBoardInfo.prototype.setBoardstacknum = AST_ModuleBoardInfo_setBoardstacknum;
//
// accessor is AST_ModuleBoardInfo.prototype.getVersion
// element get for version
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for version
// setter function is is AST_ModuleBoardInfo.prototype.setVersion
//
function AST_ModuleBoardInfo_getVersion() { return this._version;}

AST_ModuleBoardInfo.prototype.getVersion = AST_ModuleBoardInfo_getVersion;

function AST_ModuleBoardInfo_setVersion(value) { this._version = value;}

AST_ModuleBoardInfo.prototype.setVersion = AST_ModuleBoardInfo_setVersion;
//
// accessor is AST_ModuleBoardInfo.prototype.getBuildtime
// element get for buildtime
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for buildtime
// setter function is is AST_ModuleBoardInfo.prototype.setBuildtime
//
function AST_ModuleBoardInfo_getBuildtime() { return this._buildtime;}

AST_ModuleBoardInfo.prototype.getBuildtime = AST_ModuleBoardInfo_getBuildtime;

function AST_ModuleBoardInfo_setBuildtime(value) { this._buildtime = value;}

AST_ModuleBoardInfo.prototype.setBuildtime = AST_ModuleBoardInfo_setBuildtime;
//
// Serialize {urn:ast}ModuleBoardInfo
//
function AST_ModuleBoardInfo_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:online>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._online);
     xml = xml + '</jns0:online>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:boardstacknum>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._boardstacknum);
     xml = xml + '</jns0:boardstacknum>';
    }
    // block for local variables
    {
     if (this._version == null) {
      xml = xml + '<jns0:version xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:version>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._version);
      xml = xml + '</jns0:version>';
     }
    }
    // block for local variables
    {
     if (this._buildtime == null) {
      xml = xml + '<jns0:buildtime xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:buildtime>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._buildtime);
      xml = xml + '</jns0:buildtime>';
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_ModuleBoardInfo.prototype.serialize = AST_ModuleBoardInfo_serialize;

function AST_ModuleBoardInfo_deserialize (cxfjsutils, element) {
    var newobject = new AST_ModuleBoardInfo();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing online');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setOnline(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing boardstacknum');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setBoardstacknum(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing version');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setVersion(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing buildtime');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setBuildtime(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AnaArr
//
function AST_AnaArr () {
    this.typeMarker = 'AST_AnaArr';
    this._item = [];
}

//
// accessor is AST_AnaArr.prototype.getItem
// element get for item
// - element type is {urn:ast}Ana
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_AnaArr.prototype.setItem
//
function AST_AnaArr_getItem() { return this._item;}

AST_AnaArr.prototype.getItem = AST_AnaArr_getItem;

function AST_AnaArr_setItem(value) { this._item = value;}

AST_AnaArr.prototype.setItem = AST_AnaArr_setItem;
//
// Serialize {urn:ast}AnaArr
//
function AST_AnaArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AnaArr.prototype.serialize = AST_AnaArr_serialize;

function AST_AnaArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_AnaArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_Ana_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}LogCdrArr
//
function AST_LogCdrArr () {
    this.typeMarker = 'AST_LogCdrArr';
    this._item = [];
}

//
// accessor is AST_LogCdrArr.prototype.getItem
// element get for item
// - element type is {urn:ast}LogCdr
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_LogCdrArr.prototype.setItem
//
function AST_LogCdrArr_getItem() { return this._item;}

AST_LogCdrArr.prototype.getItem = AST_LogCdrArr_getItem;

function AST_LogCdrArr_setItem(value) { this._item = value;}

AST_LogCdrArr.prototype.setItem = AST_LogCdrArr_setItem;
//
// Serialize {urn:ast}LogCdrArr
//
function AST_LogCdrArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_LogCdrArr.prototype.serialize = AST_LogCdrArr_serialize;

function AST_LogCdrArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_LogCdrArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_LogCdr_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}ProvAnaBind
//
function AST_ProvAnaBind () {
    this.typeMarker = 'AST_ProvAnaBind';
    this._port = 0;
    this._sipport = 0;
    this._sipuser = null;
    this._sippwd = null;
    this._sipcontent = null;
    this._ip = null;
    this._picknum = null;
    this._pickuptimeout = 0;
    this._pickupsw = '';
    this._sipregsw = '';
}

//
// accessor is AST_ProvAnaBind.prototype.getPort
// element get for port
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for port
// setter function is is AST_ProvAnaBind.prototype.setPort
//
function AST_ProvAnaBind_getPort() { return this._port;}

AST_ProvAnaBind.prototype.getPort = AST_ProvAnaBind_getPort;

function AST_ProvAnaBind_setPort(value) { this._port = value;}

AST_ProvAnaBind.prototype.setPort = AST_ProvAnaBind_setPort;
//
// accessor is AST_ProvAnaBind.prototype.getSipport
// element get for sipport
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for sipport
// setter function is is AST_ProvAnaBind.prototype.setSipport
//
function AST_ProvAnaBind_getSipport() { return this._sipport;}

AST_ProvAnaBind.prototype.getSipport = AST_ProvAnaBind_getSipport;

function AST_ProvAnaBind_setSipport(value) { this._sipport = value;}

AST_ProvAnaBind.prototype.setSipport = AST_ProvAnaBind_setSipport;
//
// accessor is AST_ProvAnaBind.prototype.getSipuser
// element get for sipuser
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for sipuser
// setter function is is AST_ProvAnaBind.prototype.setSipuser
//
function AST_ProvAnaBind_getSipuser() { return this._sipuser;}

AST_ProvAnaBind.prototype.getSipuser = AST_ProvAnaBind_getSipuser;

function AST_ProvAnaBind_setSipuser(value) { this._sipuser = value;}

AST_ProvAnaBind.prototype.setSipuser = AST_ProvAnaBind_setSipuser;
//
// accessor is AST_ProvAnaBind.prototype.getSippwd
// element get for sippwd
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for sippwd
// setter function is is AST_ProvAnaBind.prototype.setSippwd
//
function AST_ProvAnaBind_getSippwd() { return this._sippwd;}

AST_ProvAnaBind.prototype.getSippwd = AST_ProvAnaBind_getSippwd;

function AST_ProvAnaBind_setSippwd(value) { this._sippwd = value;}

AST_ProvAnaBind.prototype.setSippwd = AST_ProvAnaBind_setSippwd;
//
// accessor is AST_ProvAnaBind.prototype.getSipcontent
// element get for sipcontent
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for sipcontent
// setter function is is AST_ProvAnaBind.prototype.setSipcontent
//
function AST_ProvAnaBind_getSipcontent() { return this._sipcontent;}

AST_ProvAnaBind.prototype.getSipcontent = AST_ProvAnaBind_getSipcontent;

function AST_ProvAnaBind_setSipcontent(value) { this._sipcontent = value;}

AST_ProvAnaBind.prototype.setSipcontent = AST_ProvAnaBind_setSipcontent;
//
// accessor is AST_ProvAnaBind.prototype.getIp
// element get for ip
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for ip
// setter function is is AST_ProvAnaBind.prototype.setIp
//
function AST_ProvAnaBind_getIp() { return this._ip;}

AST_ProvAnaBind.prototype.getIp = AST_ProvAnaBind_getIp;

function AST_ProvAnaBind_setIp(value) { this._ip = value;}

AST_ProvAnaBind.prototype.setIp = AST_ProvAnaBind_setIp;
//
// accessor is AST_ProvAnaBind.prototype.getPicknum
// element get for picknum
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for picknum
// setter function is is AST_ProvAnaBind.prototype.setPicknum
//
function AST_ProvAnaBind_getPicknum() { return this._picknum;}

AST_ProvAnaBind.prototype.getPicknum = AST_ProvAnaBind_getPicknum;

function AST_ProvAnaBind_setPicknum(value) { this._picknum = value;}

AST_ProvAnaBind.prototype.setPicknum = AST_ProvAnaBind_setPicknum;
//
// accessor is AST_ProvAnaBind.prototype.getPickuptimeout
// element get for pickuptimeout
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for pickuptimeout
// setter function is is AST_ProvAnaBind.prototype.setPickuptimeout
//
function AST_ProvAnaBind_getPickuptimeout() { return this._pickuptimeout;}

AST_ProvAnaBind.prototype.getPickuptimeout = AST_ProvAnaBind_getPickuptimeout;

function AST_ProvAnaBind_setPickuptimeout(value) { this._pickuptimeout = value;}

AST_ProvAnaBind.prototype.setPickuptimeout = AST_ProvAnaBind_setPickuptimeout;
//
// accessor is AST_ProvAnaBind.prototype.getPickupsw
// element get for pickupsw
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for pickupsw
// setter function is is AST_ProvAnaBind.prototype.setPickupsw
//
function AST_ProvAnaBind_getPickupsw() { return this._pickupsw;}

AST_ProvAnaBind.prototype.getPickupsw = AST_ProvAnaBind_getPickupsw;

function AST_ProvAnaBind_setPickupsw(value) { this._pickupsw = value;}

AST_ProvAnaBind.prototype.setPickupsw = AST_ProvAnaBind_setPickupsw;
//
// accessor is AST_ProvAnaBind.prototype.getSipregsw
// element get for sipregsw
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for sipregsw
// setter function is is AST_ProvAnaBind.prototype.setSipregsw
//
function AST_ProvAnaBind_getSipregsw() { return this._sipregsw;}

AST_ProvAnaBind.prototype.getSipregsw = AST_ProvAnaBind_getSipregsw;

function AST_ProvAnaBind_setSipregsw(value) { this._sipregsw = value;}

AST_ProvAnaBind.prototype.setSipregsw = AST_ProvAnaBind_setSipregsw;
//
// Serialize {urn:ast}ProvAnaBind
//
function AST_ProvAnaBind_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:port>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._port);
     xml = xml + '</jns0:port>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:sipport>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._sipport);
     xml = xml + '</jns0:sipport>';
    }
    // block for local variables
    {
     if (this._sipuser == null) {
      xml = xml + '<jns0:sipuser xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:sipuser>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._sipuser);
      xml = xml + '</jns0:sipuser>';
     }
    }
    // block for local variables
    {
     if (this._sippwd == null) {
      xml = xml + '<jns0:sippwd xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:sippwd>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._sippwd);
      xml = xml + '</jns0:sippwd>';
     }
    }
    // block for local variables
    {
     if (this._sipcontent == null) {
      xml = xml + '<jns0:sipcontent xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:sipcontent>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._sipcontent);
      xml = xml + '</jns0:sipcontent>';
     }
    }
    // block for local variables
    {
     if (this._ip == null) {
      xml = xml + '<jns0:ip xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:ip>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._ip);
      xml = xml + '</jns0:ip>';
     }
    }
    // block for local variables
    {
     if (this._picknum == null) {
      xml = xml + '<jns0:picknum xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:picknum>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._picknum);
      xml = xml + '</jns0:picknum>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:pickuptimeout>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._pickuptimeout);
     xml = xml + '</jns0:pickuptimeout>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:pickupsw>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._pickupsw);
     xml = xml + '</jns0:pickupsw>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:sipregsw>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._sipregsw);
     xml = xml + '</jns0:sipregsw>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_ProvAnaBind.prototype.serialize = AST_ProvAnaBind_serialize;

function AST_ProvAnaBind_deserialize (cxfjsutils, element) {
    var newobject = new AST_ProvAnaBind();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing port');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setPort(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sipport');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setSipport(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sipuser');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSipuser(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sippwd');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSippwd(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sipcontent');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSipcontent(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ip');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setIp(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing picknum');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setPicknum(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing pickuptimeout');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setPickuptimeout(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing pickupsw');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setPickupsw(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sipregsw');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSipregsw(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}NetworkOpenvpnGet
//
function AST_NetworkOpenvpnGet () {
    this.typeMarker = 'AST_NetworkOpenvpnGet';
    this._combuf = null;
    this._vpn = null;
}

//
// accessor is AST_NetworkOpenvpnGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_NetworkOpenvpnGet.prototype.setCombuf
//
function AST_NetworkOpenvpnGet_getCombuf() { return this._combuf;}

AST_NetworkOpenvpnGet.prototype.getCombuf = AST_NetworkOpenvpnGet_getCombuf;

function AST_NetworkOpenvpnGet_setCombuf(value) { this._combuf = value;}

AST_NetworkOpenvpnGet.prototype.setCombuf = AST_NetworkOpenvpnGet_setCombuf;
//
// accessor is AST_NetworkOpenvpnGet.prototype.getVpn
// element get for vpn
// - element type is {urn:ast}NetworkOpenvpn
// - required element
//
// element set for vpn
// setter function is is AST_NetworkOpenvpnGet.prototype.setVpn
//
function AST_NetworkOpenvpnGet_getVpn() { return this._vpn;}

AST_NetworkOpenvpnGet.prototype.getVpn = AST_NetworkOpenvpnGet_getVpn;

function AST_NetworkOpenvpnGet_setVpn(value) { this._vpn = value;}

AST_NetworkOpenvpnGet.prototype.setVpn = AST_NetworkOpenvpnGet_setVpn;
//
// Serialize {urn:ast}NetworkOpenvpnGet
//
function AST_NetworkOpenvpnGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._vpn.serialize(cxfjsutils, 'jns0:vpn', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_NetworkOpenvpnGet.prototype.serialize = AST_NetworkOpenvpnGet_serialize;

function AST_NetworkOpenvpnGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_NetworkOpenvpnGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing vpn');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_NetworkOpenvpn_deserialize(cxfjsutils, curElement);
    }
    newobject.setVpn(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AlgPickupChn
//
function AST_AlgPickupChn () {
    this.typeMarker = 'AST_AlgPickupChn';
    this._channel = 0;
    this._chnlpickuptimeout = 0;
    this._enablechnlpickup = '';
    this._chnlpickupnumber = null;
}

//
// accessor is AST_AlgPickupChn.prototype.getChannel
// element get for channel
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for channel
// setter function is is AST_AlgPickupChn.prototype.setChannel
//
function AST_AlgPickupChn_getChannel() { return this._channel;}

AST_AlgPickupChn.prototype.getChannel = AST_AlgPickupChn_getChannel;

function AST_AlgPickupChn_setChannel(value) { this._channel = value;}

AST_AlgPickupChn.prototype.setChannel = AST_AlgPickupChn_setChannel;
//
// accessor is AST_AlgPickupChn.prototype.getChnlpickuptimeout
// element get for chnlpickuptimeout
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for chnlpickuptimeout
// setter function is is AST_AlgPickupChn.prototype.setChnlpickuptimeout
//
function AST_AlgPickupChn_getChnlpickuptimeout() { return this._chnlpickuptimeout;}

AST_AlgPickupChn.prototype.getChnlpickuptimeout = AST_AlgPickupChn_getChnlpickuptimeout;

function AST_AlgPickupChn_setChnlpickuptimeout(value) { this._chnlpickuptimeout = value;}

AST_AlgPickupChn.prototype.setChnlpickuptimeout = AST_AlgPickupChn_setChnlpickuptimeout;
//
// accessor is AST_AlgPickupChn.prototype.getEnablechnlpickup
// element get for enablechnlpickup
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for enablechnlpickup
// setter function is is AST_AlgPickupChn.prototype.setEnablechnlpickup
//
function AST_AlgPickupChn_getEnablechnlpickup() { return this._enablechnlpickup;}

AST_AlgPickupChn.prototype.getEnablechnlpickup = AST_AlgPickupChn_getEnablechnlpickup;

function AST_AlgPickupChn_setEnablechnlpickup(value) { this._enablechnlpickup = value;}

AST_AlgPickupChn.prototype.setEnablechnlpickup = AST_AlgPickupChn_setEnablechnlpickup;
//
// accessor is AST_AlgPickupChn.prototype.getChnlpickupnumber
// element get for chnlpickupnumber
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for chnlpickupnumber
// setter function is is AST_AlgPickupChn.prototype.setChnlpickupnumber
//
function AST_AlgPickupChn_getChnlpickupnumber() { return this._chnlpickupnumber;}

AST_AlgPickupChn.prototype.getChnlpickupnumber = AST_AlgPickupChn_getChnlpickupnumber;

function AST_AlgPickupChn_setChnlpickupnumber(value) { this._chnlpickupnumber = value;}

AST_AlgPickupChn.prototype.setChnlpickupnumber = AST_AlgPickupChn_setChnlpickupnumber;
//
// Serialize {urn:ast}AlgPickupChn
//
function AST_AlgPickupChn_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:channel>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._channel);
     xml = xml + '</jns0:channel>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:chnlpickuptimeout>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._chnlpickuptimeout);
     xml = xml + '</jns0:chnlpickuptimeout>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:enablechnlpickup>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._enablechnlpickup);
     xml = xml + '</jns0:enablechnlpickup>';
    }
    // block for local variables
    {
     if (this._chnlpickupnumber == null) {
      xml = xml + '<jns0:chnlpickupnumber xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:chnlpickupnumber>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._chnlpickupnumber);
      xml = xml + '</jns0:chnlpickupnumber>';
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AlgPickupChn.prototype.serialize = AST_AlgPickupChn_serialize;

function AST_AlgPickupChn_deserialize (cxfjsutils, element) {
    var newobject = new AST_AlgPickupChn();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing channel');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setChannel(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing chnlpickuptimeout');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setChnlpickuptimeout(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing enablechnlpickup');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setEnablechnlpickup(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing chnlpickupnumber');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setChnlpickupnumber(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}NetWorkGetMac
//
function AST_NetWorkGetMac () {
    this.typeMarker = 'AST_NetWorkGetMac';
    this._combuf = null;
    this._vlanflag = '';
    this._lanmac = null;
    this._wanmac = null;
}

//
// accessor is AST_NetWorkGetMac.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_NetWorkGetMac.prototype.setCombuf
//
function AST_NetWorkGetMac_getCombuf() { return this._combuf;}

AST_NetWorkGetMac.prototype.getCombuf = AST_NetWorkGetMac_getCombuf;

function AST_NetWorkGetMac_setCombuf(value) { this._combuf = value;}

AST_NetWorkGetMac.prototype.setCombuf = AST_NetWorkGetMac_setCombuf;
//
// accessor is AST_NetWorkGetMac.prototype.getVlanflag
// element get for vlanflag
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for vlanflag
// setter function is is AST_NetWorkGetMac.prototype.setVlanflag
//
function AST_NetWorkGetMac_getVlanflag() { return this._vlanflag;}

AST_NetWorkGetMac.prototype.getVlanflag = AST_NetWorkGetMac_getVlanflag;

function AST_NetWorkGetMac_setVlanflag(value) { this._vlanflag = value;}

AST_NetWorkGetMac.prototype.setVlanflag = AST_NetWorkGetMac_setVlanflag;
//
// accessor is AST_NetWorkGetMac.prototype.getLanmac
// element get for lanmac
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for lanmac
// setter function is is AST_NetWorkGetMac.prototype.setLanmac
//
function AST_NetWorkGetMac_getLanmac() { return this._lanmac;}

AST_NetWorkGetMac.prototype.getLanmac = AST_NetWorkGetMac_getLanmac;

function AST_NetWorkGetMac_setLanmac(value) { this._lanmac = value;}

AST_NetWorkGetMac.prototype.setLanmac = AST_NetWorkGetMac_setLanmac;
//
// accessor is AST_NetWorkGetMac.prototype.getWanmac
// element get for wanmac
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for wanmac
// setter function is is AST_NetWorkGetMac.prototype.setWanmac
//
function AST_NetWorkGetMac_getWanmac() { return this._wanmac;}

AST_NetWorkGetMac.prototype.getWanmac = AST_NetWorkGetMac_getWanmac;

function AST_NetWorkGetMac_setWanmac(value) { this._wanmac = value;}

AST_NetWorkGetMac.prototype.setWanmac = AST_NetWorkGetMac_setWanmac;
//
// Serialize {urn:ast}NetWorkGetMac
//
function AST_NetWorkGetMac_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + '<jns0:vlanflag>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._vlanflag);
     xml = xml + '</jns0:vlanflag>';
    }
    // block for local variables
    {
     if (this._lanmac == null) {
      xml = xml + '<jns0:lanmac xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:lanmac>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._lanmac);
      xml = xml + '</jns0:lanmac>';
     }
    }
    // block for local variables
    {
     if (this._wanmac == null) {
      xml = xml + '<jns0:wanmac xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:wanmac>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._wanmac);
      xml = xml + '</jns0:wanmac>';
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_NetWorkGetMac.prototype.serialize = AST_NetWorkGetMac_serialize;

function AST_NetWorkGetMac_deserialize (cxfjsutils, element) {
    var newobject = new AST_NetWorkGetMac();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing vlanflag');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setVlanflag(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing lanmac');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setLanmac(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing wanmac');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setWanmac(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}UcpAlgCalllimitStatusArr
//
function AST_UcpAlgCalllimitStatusArr () {
    this.typeMarker = 'AST_UcpAlgCalllimitStatusArr';
    this._item = [];
}

//
// accessor is AST_UcpAlgCalllimitStatusArr.prototype.getItem
// element get for item
// - element type is {urn:ast}UcpAlgCalllimitStatus
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_UcpAlgCalllimitStatusArr.prototype.setItem
//
function AST_UcpAlgCalllimitStatusArr_getItem() { return this._item;}

AST_UcpAlgCalllimitStatusArr.prototype.getItem = AST_UcpAlgCalllimitStatusArr_getItem;

function AST_UcpAlgCalllimitStatusArr_setItem(value) { this._item = value;}

AST_UcpAlgCalllimitStatusArr.prototype.setItem = AST_UcpAlgCalllimitStatusArr_setItem;
//
// Serialize {urn:ast}UcpAlgCalllimitStatusArr
//
function AST_UcpAlgCalllimitStatusArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_UcpAlgCalllimitStatusArr.prototype.serialize = AST_UcpAlgCalllimitStatusArr_serialize;

function AST_UcpAlgCalllimitStatusArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_UcpAlgCalllimitStatusArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_UcpAlgCalllimitStatus_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}LookupGet
//
function AST_LookupGet () {
    this.typeMarker = 'AST_LookupGet';
    this._combuf = null;
    this._logs = null;
    this._nums = 0;
    this._commitsw = 0;
}

//
// accessor is AST_LookupGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_LookupGet.prototype.setCombuf
//
function AST_LookupGet_getCombuf() { return this._combuf;}

AST_LookupGet.prototype.getCombuf = AST_LookupGet_getCombuf;

function AST_LookupGet_setCombuf(value) { this._combuf = value;}

AST_LookupGet.prototype.setCombuf = AST_LookupGet_setCombuf;
//
// accessor is AST_LookupGet.prototype.getLogs
// element get for logs
// - element type is {urn:ast}LookupArr
// - required element
//
// element set for logs
// setter function is is AST_LookupGet.prototype.setLogs
//
function AST_LookupGet_getLogs() { return this._logs;}

AST_LookupGet.prototype.getLogs = AST_LookupGet_getLogs;

function AST_LookupGet_setLogs(value) { this._logs = value;}

AST_LookupGet.prototype.setLogs = AST_LookupGet_setLogs;
//
// accessor is AST_LookupGet.prototype.getNums
// element get for nums
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for nums
// setter function is is AST_LookupGet.prototype.setNums
//
function AST_LookupGet_getNums() { return this._nums;}

AST_LookupGet.prototype.getNums = AST_LookupGet_getNums;

function AST_LookupGet_setNums(value) { this._nums = value;}

AST_LookupGet.prototype.setNums = AST_LookupGet_setNums;
//
// accessor is AST_LookupGet.prototype.getCommitsw
// element get for commitsw
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for commitsw
// setter function is is AST_LookupGet.prototype.setCommitsw
//
function AST_LookupGet_getCommitsw() { return this._commitsw;}

AST_LookupGet.prototype.getCommitsw = AST_LookupGet_getCommitsw;

function AST_LookupGet_setCommitsw(value) { this._commitsw = value;}

AST_LookupGet.prototype.setCommitsw = AST_LookupGet_setCommitsw;
//
// Serialize {urn:ast}LookupGet
//
function AST_LookupGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._logs.serialize(cxfjsutils, 'jns0:logs', null);
    }
    // block for local variables
    {
     xml = xml + '<jns0:nums>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._nums);
     xml = xml + '</jns0:nums>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:commitsw>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._commitsw);
     xml = xml + '</jns0:commitsw>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_LookupGet.prototype.serialize = AST_LookupGet_serialize;

function AST_LookupGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_LookupGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing logs');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_LookupArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setLogs(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing nums');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setNums(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing commitsw');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setCommitsw(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}NetworkLanSave
//
function AST_NetworkLanSave () {
    this.typeMarker = 'AST_NetworkLanSave';
    this._lan = null;
    this._dns = null;
}

//
// accessor is AST_NetworkLanSave.prototype.getLan
// element get for lan
// - element type is {urn:ast}NetworkLan
// - required element
//
// element set for lan
// setter function is is AST_NetworkLanSave.prototype.setLan
//
function AST_NetworkLanSave_getLan() { return this._lan;}

AST_NetworkLanSave.prototype.getLan = AST_NetworkLanSave_getLan;

function AST_NetworkLanSave_setLan(value) { this._lan = value;}

AST_NetworkLanSave.prototype.setLan = AST_NetworkLanSave_setLan;
//
// accessor is AST_NetworkLanSave.prototype.getDns
// element get for dns
// - element type is {urn:ast}NetworkDns
// - required element
//
// element set for dns
// setter function is is AST_NetworkLanSave.prototype.setDns
//
function AST_NetworkLanSave_getDns() { return this._dns;}

AST_NetworkLanSave.prototype.getDns = AST_NetworkLanSave_getDns;

function AST_NetworkLanSave_setDns(value) { this._dns = value;}

AST_NetworkLanSave.prototype.setDns = AST_NetworkLanSave_setDns;
//
// Serialize {urn:ast}NetworkLanSave
//
function AST_NetworkLanSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._lan.serialize(cxfjsutils, 'jns0:lan', null);
    }
    // block for local variables
    {
     xml = xml + this._dns.serialize(cxfjsutils, 'jns0:dns', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_NetworkLanSave.prototype.serialize = AST_NetworkLanSave_serialize;

function AST_NetworkLanSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_NetworkLanSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing lan');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_NetworkLan_deserialize(cxfjsutils, curElement);
    }
    newobject.setLan(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing dns');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_NetworkDns_deserialize(cxfjsutils, curElement);
    }
    newobject.setDns(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RoutingGetArr
//
function AST_RoutingGetArr () {
    this.typeMarker = 'AST_RoutingGetArr';
    this._item = [];
}

//
// accessor is AST_RoutingGetArr.prototype.getItem
// element get for item
// - element type is {urn:ast}RoutingGet
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_RoutingGetArr.prototype.setItem
//
function AST_RoutingGetArr_getItem() { return this._item;}

AST_RoutingGetArr.prototype.getItem = AST_RoutingGetArr_getItem;

function AST_RoutingGetArr_setItem(value) { this._item = value;}

AST_RoutingGetArr.prototype.setItem = AST_RoutingGetArr_setItem;
//
// Serialize {urn:ast}RoutingGetArr
//
function AST_RoutingGetArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RoutingGetArr.prototype.serialize = AST_RoutingGetArr_serialize;

function AST_RoutingGetArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_RoutingGetArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_RoutingGet_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}UcpAlgCalllimit
//
function AST_UcpAlgCalllimit () {
    this.typeMarker = 'AST_UcpAlgCalllimit';
    this._channel = 0;
    this._sw = 0;
    this._hourcalls = 0;
    this._daycalls = 0;
    this._dayanwers = 0;
    this._calltime = 0;
}

//
// accessor is AST_UcpAlgCalllimit.prototype.getChannel
// element get for channel
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for channel
// setter function is is AST_UcpAlgCalllimit.prototype.setChannel
//
function AST_UcpAlgCalllimit_getChannel() { return this._channel;}

AST_UcpAlgCalllimit.prototype.getChannel = AST_UcpAlgCalllimit_getChannel;

function AST_UcpAlgCalllimit_setChannel(value) { this._channel = value;}

AST_UcpAlgCalllimit.prototype.setChannel = AST_UcpAlgCalllimit_setChannel;
//
// accessor is AST_UcpAlgCalllimit.prototype.getSw
// element get for sw
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for sw
// setter function is is AST_UcpAlgCalllimit.prototype.setSw
//
function AST_UcpAlgCalllimit_getSw() { return this._sw;}

AST_UcpAlgCalllimit.prototype.getSw = AST_UcpAlgCalllimit_getSw;

function AST_UcpAlgCalllimit_setSw(value) { this._sw = value;}

AST_UcpAlgCalllimit.prototype.setSw = AST_UcpAlgCalllimit_setSw;
//
// accessor is AST_UcpAlgCalllimit.prototype.getHourcalls
// element get for hourcalls
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for hourcalls
// setter function is is AST_UcpAlgCalllimit.prototype.setHourcalls
//
function AST_UcpAlgCalllimit_getHourcalls() { return this._hourcalls;}

AST_UcpAlgCalllimit.prototype.getHourcalls = AST_UcpAlgCalllimit_getHourcalls;

function AST_UcpAlgCalllimit_setHourcalls(value) { this._hourcalls = value;}

AST_UcpAlgCalllimit.prototype.setHourcalls = AST_UcpAlgCalllimit_setHourcalls;
//
// accessor is AST_UcpAlgCalllimit.prototype.getDaycalls
// element get for daycalls
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for daycalls
// setter function is is AST_UcpAlgCalllimit.prototype.setDaycalls
//
function AST_UcpAlgCalllimit_getDaycalls() { return this._daycalls;}

AST_UcpAlgCalllimit.prototype.getDaycalls = AST_UcpAlgCalllimit_getDaycalls;

function AST_UcpAlgCalllimit_setDaycalls(value) { this._daycalls = value;}

AST_UcpAlgCalllimit.prototype.setDaycalls = AST_UcpAlgCalllimit_setDaycalls;
//
// accessor is AST_UcpAlgCalllimit.prototype.getDayanwers
// element get for dayanwers
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for dayanwers
// setter function is is AST_UcpAlgCalllimit.prototype.setDayanwers
//
function AST_UcpAlgCalllimit_getDayanwers() { return this._dayanwers;}

AST_UcpAlgCalllimit.prototype.getDayanwers = AST_UcpAlgCalllimit_getDayanwers;

function AST_UcpAlgCalllimit_setDayanwers(value) { this._dayanwers = value;}

AST_UcpAlgCalllimit.prototype.setDayanwers = AST_UcpAlgCalllimit_setDayanwers;
//
// accessor is AST_UcpAlgCalllimit.prototype.getCalltime
// element get for calltime
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for calltime
// setter function is is AST_UcpAlgCalllimit.prototype.setCalltime
//
function AST_UcpAlgCalllimit_getCalltime() { return this._calltime;}

AST_UcpAlgCalllimit.prototype.getCalltime = AST_UcpAlgCalllimit_getCalltime;

function AST_UcpAlgCalllimit_setCalltime(value) { this._calltime = value;}

AST_UcpAlgCalllimit.prototype.setCalltime = AST_UcpAlgCalllimit_setCalltime;
//
// Serialize {urn:ast}UcpAlgCalllimit
//
function AST_UcpAlgCalllimit_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:channel>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._channel);
     xml = xml + '</jns0:channel>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:sw>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._sw);
     xml = xml + '</jns0:sw>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:hourcalls>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._hourcalls);
     xml = xml + '</jns0:hourcalls>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:daycalls>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._daycalls);
     xml = xml + '</jns0:daycalls>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:dayanwers>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._dayanwers);
     xml = xml + '</jns0:dayanwers>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:calltime>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._calltime);
     xml = xml + '</jns0:calltime>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_UcpAlgCalllimit.prototype.serialize = AST_UcpAlgCalllimit_serialize;

function AST_UcpAlgCalllimit_deserialize (cxfjsutils, element) {
    var newobject = new AST_UcpAlgCalllimit();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing channel');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setChannel(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sw');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setSw(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing hourcalls');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setHourcalls(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing daycalls');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setDaycalls(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing dayanwers');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setDayanwers(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing calltime');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setCalltime(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipBendSave
//
function AST_SipBendSave () {
    this.typeMarker = 'AST_SipBendSave';
    this._sip = null;
    this._ana = null;
}

//
// accessor is AST_SipBendSave.prototype.getSip
// element get for sip
// - element type is {urn:ast}SipBendArr
// - optional element
// - nillable
//
// element set for sip
// setter function is is AST_SipBendSave.prototype.setSip
//
function AST_SipBendSave_getSip() { return this._sip;}

AST_SipBendSave.prototype.getSip = AST_SipBendSave_getSip;

function AST_SipBendSave_setSip(value) { this._sip = value;}

AST_SipBendSave.prototype.setSip = AST_SipBendSave_setSip;
//
// accessor is AST_SipBendSave.prototype.getAna
// element get for ana
// - element type is {urn:ast}SipAnalogArr
// - optional element
// - nillable
//
// element set for ana
// setter function is is AST_SipBendSave.prototype.setAna
//
function AST_SipBendSave_getAna() { return this._ana;}

AST_SipBendSave.prototype.getAna = AST_SipBendSave_getAna;

function AST_SipBendSave_setAna(value) { this._ana = value;}

AST_SipBendSave.prototype.setAna = AST_SipBendSave_setAna;
//
// Serialize {urn:ast}SipBendSave
//
function AST_SipBendSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._sip != null) {
      if (this._sip == null) {
       xml = xml + '<jns0:sip xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._sip.serialize(cxfjsutils, 'jns0:sip', null);
      }
     }
    }
    // block for local variables
    {
     if (this._ana != null) {
      if (this._ana == null) {
       xml = xml + '<jns0:ana xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._ana.serialize(cxfjsutils, 'jns0:ana', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipBendSave.prototype.serialize = AST_SipBendSave_serialize;

function AST_SipBendSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipBendSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sip');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'sip')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SipBendArr_deserialize(cxfjsutils, curElement);
     }
     newobject.setSip(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ana');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'ana')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SipAnalogArr_deserialize(cxfjsutils, curElement);
     }
     newobject.setAna(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}ClientAdd
//
function AST_ClientAdd () {
    this.typeMarker = 'AST_ClientAdd';
    this._clientchannelstart = '';
    this._clientchannelnum = '';
    this._sigtype = null;
}

//
// accessor is AST_ClientAdd.prototype.getClientchannelstart
// element get for clientchannelstart
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedShort
// - required element
//
// element set for clientchannelstart
// setter function is is AST_ClientAdd.prototype.setClientchannelstart
//
function AST_ClientAdd_getClientchannelstart() { return this._clientchannelstart;}

AST_ClientAdd.prototype.getClientchannelstart = AST_ClientAdd_getClientchannelstart;

function AST_ClientAdd_setClientchannelstart(value) { this._clientchannelstart = value;}

AST_ClientAdd.prototype.setClientchannelstart = AST_ClientAdd_setClientchannelstart;
//
// accessor is AST_ClientAdd.prototype.getClientchannelnum
// element get for clientchannelnum
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedShort
// - required element
//
// element set for clientchannelnum
// setter function is is AST_ClientAdd.prototype.setClientchannelnum
//
function AST_ClientAdd_getClientchannelnum() { return this._clientchannelnum;}

AST_ClientAdd.prototype.getClientchannelnum = AST_ClientAdd_getClientchannelnum;

function AST_ClientAdd_setClientchannelnum(value) { this._clientchannelnum = value;}

AST_ClientAdd.prototype.setClientchannelnum = AST_ClientAdd_setClientchannelnum;
//
// accessor is AST_ClientAdd.prototype.getSigtype
// element get for sigtype
// - element type is {urn:ast}Array16OfunsignedByte
// - required element
// - nillable
//
// element set for sigtype
// setter function is is AST_ClientAdd.prototype.setSigtype
//
function AST_ClientAdd_getSigtype() { return this._sigtype;}

AST_ClientAdd.prototype.getSigtype = AST_ClientAdd_getSigtype;

function AST_ClientAdd_setSigtype(value) { this._sigtype = value;}

AST_ClientAdd.prototype.setSigtype = AST_ClientAdd_setSigtype;
//
// Serialize {urn:ast}ClientAdd
//
function AST_ClientAdd_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:clientchannelstart>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._clientchannelstart);
     xml = xml + '</jns0:clientchannelstart>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:clientchannelnum>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._clientchannelnum);
     xml = xml + '</jns0:clientchannelnum>';
    }
    // block for local variables
    {
     if (this._sigtype == null) {
      xml = xml + '<jns0:sigtype xsi:nil=\'true\'/>';
     } else {
      xml = xml + this._sigtype.serialize(cxfjsutils, 'jns0:sigtype', null);
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_ClientAdd.prototype.serialize = AST_ClientAdd_serialize;

function AST_ClientAdd_deserialize (cxfjsutils, element) {
    var newobject = new AST_ClientAdd();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing clientchannelstart');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setClientchannelstart(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing clientchannelnum');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setClientchannelnum(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sigtype');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_Array16OfunsignedByte_deserialize(cxfjsutils, curElement);
    }
    newobject.setSigtype(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AnaChn
//
function AST_AnaChn () {
    this.typeMarker = 'AST_AnaChn';
    this._status = null;
    this._line = null;
}

//
// accessor is AST_AnaChn.prototype.getStatus
// element get for status
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for status
// setter function is is AST_AnaChn.prototype.setStatus
//
function AST_AnaChn_getStatus() { return this._status;}

AST_AnaChn.prototype.getStatus = AST_AnaChn_getStatus;

function AST_AnaChn_setStatus(value) { this._status = value;}

AST_AnaChn.prototype.setStatus = AST_AnaChn_setStatus;
//
// accessor is AST_AnaChn.prototype.getLine
// element get for line
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for line
// setter function is is AST_AnaChn.prototype.setLine
//
function AST_AnaChn_getLine() { return this._line;}

AST_AnaChn.prototype.getLine = AST_AnaChn_getLine;

function AST_AnaChn_setLine(value) { this._line = value;}

AST_AnaChn.prototype.setLine = AST_AnaChn_setLine;
//
// Serialize {urn:ast}AnaChn
//
function AST_AnaChn_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._status != null) {
      if (this._status == null) {
       xml = xml + '<jns0:status xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:status>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._status);
       xml = xml + '</jns0:status>';
      }
     }
    }
    // block for local variables
    {
     if (this._line == null) {
      xml = xml + '<jns0:line xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:line>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._line);
      xml = xml + '</jns0:line>';
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AnaChn.prototype.serialize = AST_AnaChn_serialize;

function AST_AnaChn_deserialize (cxfjsutils, element) {
    var newobject = new AST_AnaChn();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing status');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'status')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setStatus(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing line');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setLine(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}NetworkWanGet
//
function AST_NetworkWanGet () {
    this.typeMarker = 'AST_NetworkWanGet';
    this._combuf = null;
    this._wan = null;
}

//
// accessor is AST_NetworkWanGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_NetworkWanGet.prototype.setCombuf
//
function AST_NetworkWanGet_getCombuf() { return this._combuf;}

AST_NetworkWanGet.prototype.getCombuf = AST_NetworkWanGet_getCombuf;

function AST_NetworkWanGet_setCombuf(value) { this._combuf = value;}

AST_NetworkWanGet.prototype.setCombuf = AST_NetworkWanGet_setCombuf;
//
// accessor is AST_NetworkWanGet.prototype.getWan
// element get for wan
// - element type is {urn:ast}NetworkWan
// - required element
//
// element set for wan
// setter function is is AST_NetworkWanGet.prototype.setWan
//
function AST_NetworkWanGet_getWan() { return this._wan;}

AST_NetworkWanGet.prototype.getWan = AST_NetworkWanGet_getWan;

function AST_NetworkWanGet_setWan(value) { this._wan = value;}

AST_NetworkWanGet.prototype.setWan = AST_NetworkWanGet_setWan;
//
// Serialize {urn:ast}NetworkWanGet
//
function AST_NetworkWanGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._wan.serialize(cxfjsutils, 'jns0:wan', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_NetworkWanGet.prototype.serialize = AST_NetworkWanGet_serialize;

function AST_NetworkWanGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_NetworkWanGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing wan');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_NetworkWan_deserialize(cxfjsutils, curElement);
    }
    newobject.setWan(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}UcpAlgFxoparam
//
function AST_UcpAlgFxoparam () {
    this.typeMarker = 'AST_UcpAlgFxoparam';
    this._glb = null;
    this._dahdi = null;
    this._busytones = null;
}

//
// accessor is AST_UcpAlgFxoparam.prototype.getGlb
// element get for glb
// - element type is {urn:ast}UcpAlgFxoGlobal
// - required element
//
// element set for glb
// setter function is is AST_UcpAlgFxoparam.prototype.setGlb
//
function AST_UcpAlgFxoparam_getGlb() { return this._glb;}

AST_UcpAlgFxoparam.prototype.getGlb = AST_UcpAlgFxoparam_getGlb;

function AST_UcpAlgFxoparam_setGlb(value) { this._glb = value;}

AST_UcpAlgFxoparam.prototype.setGlb = AST_UcpAlgFxoparam_setGlb;
//
// accessor is AST_UcpAlgFxoparam.prototype.getDahdi
// element get for dahdi
// - element type is {urn:ast}UcpAlgDahdiContent
// - required element
//
// element set for dahdi
// setter function is is AST_UcpAlgFxoparam.prototype.setDahdi
//
function AST_UcpAlgFxoparam_getDahdi() { return this._dahdi;}

AST_UcpAlgFxoparam.prototype.getDahdi = AST_UcpAlgFxoparam_getDahdi;

function AST_UcpAlgFxoparam_setDahdi(value) { this._dahdi = value;}

AST_UcpAlgFxoparam.prototype.setDahdi = AST_UcpAlgFxoparam_setDahdi;
//
// accessor is AST_UcpAlgFxoparam.prototype.getBusytones
// element get for busytones
// - element type is {urn:ast}AlgBusyTone
// - required element
//
// element set for busytones
// setter function is is AST_UcpAlgFxoparam.prototype.setBusytones
//
function AST_UcpAlgFxoparam_getBusytones() { return this._busytones;}

AST_UcpAlgFxoparam.prototype.getBusytones = AST_UcpAlgFxoparam_getBusytones;

function AST_UcpAlgFxoparam_setBusytones(value) { this._busytones = value;}

AST_UcpAlgFxoparam.prototype.setBusytones = AST_UcpAlgFxoparam_setBusytones;
//
// Serialize {urn:ast}UcpAlgFxoparam
//
function AST_UcpAlgFxoparam_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._glb.serialize(cxfjsutils, 'jns0:glb', null);
    }
    // block for local variables
    {
     xml = xml + this._dahdi.serialize(cxfjsutils, 'jns0:dahdi', null);
    }
    // block for local variables
    {
     xml = xml + this._busytones.serialize(cxfjsutils, 'jns0:busytones', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_UcpAlgFxoparam.prototype.serialize = AST_UcpAlgFxoparam_serialize;

function AST_UcpAlgFxoparam_deserialize (cxfjsutils, element) {
    var newobject = new AST_UcpAlgFxoparam();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing glb');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_UcpAlgFxoGlobal_deserialize(cxfjsutils, curElement);
    }
    newobject.setGlb(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing dahdi');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_UcpAlgDahdiContent_deserialize(cxfjsutils, curElement);
    }
    newobject.setDahdi(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing busytones');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_AlgBusyTone_deserialize(cxfjsutils, curElement);
    }
    newobject.setBusytones(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AnaGetAll
//
function AST_AnaGetAll () {
    this.typeMarker = 'AST_AnaGetAll';
    this._combuf = null;
    this._ana = null;
    this._chn = null;
    this._sip = null;
    this._routing = null;
    this._limitStatus = null;
}

//
// accessor is AST_AnaGetAll.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_AnaGetAll.prototype.setCombuf
//
function AST_AnaGetAll_getCombuf() { return this._combuf;}

AST_AnaGetAll.prototype.getCombuf = AST_AnaGetAll_getCombuf;

function AST_AnaGetAll_setCombuf(value) { this._combuf = value;}

AST_AnaGetAll.prototype.setCombuf = AST_AnaGetAll_setCombuf;
//
// accessor is AST_AnaGetAll.prototype.getAna
// element get for ana
// - element type is {urn:ast}AnaArr
// - required element
//
// element set for ana
// setter function is is AST_AnaGetAll.prototype.setAna
//
function AST_AnaGetAll_getAna() { return this._ana;}

AST_AnaGetAll.prototype.getAna = AST_AnaGetAll_getAna;

function AST_AnaGetAll_setAna(value) { this._ana = value;}

AST_AnaGetAll.prototype.setAna = AST_AnaGetAll_setAna;
//
// accessor is AST_AnaGetAll.prototype.getChn
// element get for chn
// - element type is {urn:ast}AnaChnArr
// - required element
//
// element set for chn
// setter function is is AST_AnaGetAll.prototype.setChn
//
function AST_AnaGetAll_getChn() { return this._chn;}

AST_AnaGetAll.prototype.getChn = AST_AnaGetAll_getChn;

function AST_AnaGetAll_setChn(value) { this._chn = value;}

AST_AnaGetAll.prototype.setChn = AST_AnaGetAll_setChn;
//
// accessor is AST_AnaGetAll.prototype.getSip
// element get for sip
// - element type is {urn:ast}SipGetArr
// - required element
//
// element set for sip
// setter function is is AST_AnaGetAll.prototype.setSip
//
function AST_AnaGetAll_getSip() { return this._sip;}

AST_AnaGetAll.prototype.getSip = AST_AnaGetAll_getSip;

function AST_AnaGetAll_setSip(value) { this._sip = value;}

AST_AnaGetAll.prototype.setSip = AST_AnaGetAll_setSip;
//
// accessor is AST_AnaGetAll.prototype.getRouting
// element get for routing
// - element type is {urn:ast}RoutingGetArr
// - required element
//
// element set for routing
// setter function is is AST_AnaGetAll.prototype.setRouting
//
function AST_AnaGetAll_getRouting() { return this._routing;}

AST_AnaGetAll.prototype.getRouting = AST_AnaGetAll_getRouting;

function AST_AnaGetAll_setRouting(value) { this._routing = value;}

AST_AnaGetAll.prototype.setRouting = AST_AnaGetAll_setRouting;
//
// accessor is AST_AnaGetAll.prototype.getLimitStatus
// element get for limitStatus
// - element type is {urn:ast}UcpAlgCalllimitStatusArr
// - required element
//
// element set for limitStatus
// setter function is is AST_AnaGetAll.prototype.setLimitStatus
//
function AST_AnaGetAll_getLimitStatus() { return this._limitStatus;}

AST_AnaGetAll.prototype.getLimitStatus = AST_AnaGetAll_getLimitStatus;

function AST_AnaGetAll_setLimitStatus(value) { this._limitStatus = value;}

AST_AnaGetAll.prototype.setLimitStatus = AST_AnaGetAll_setLimitStatus;
//
// Serialize {urn:ast}AnaGetAll
//
function AST_AnaGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._ana.serialize(cxfjsutils, 'jns0:ana', null);
    }
    // block for local variables
    {
     xml = xml + this._chn.serialize(cxfjsutils, 'jns0:chn', null);
    }
    // block for local variables
    {
     xml = xml + this._sip.serialize(cxfjsutils, 'jns0:sip', null);
    }
    // block for local variables
    {
     xml = xml + this._routing.serialize(cxfjsutils, 'jns0:routing', null);
    }
    // block for local variables
    {
     xml = xml + this._limitStatus.serialize(cxfjsutils, 'jns0:limitStatus', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AnaGetAll.prototype.serialize = AST_AnaGetAll_serialize;

function AST_AnaGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_AnaGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ana');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_AnaArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setAna(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing chn');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_AnaChnArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setChn(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sip');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SipGetArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setSip(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing routing');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_RoutingGetArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setRouting(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing limitStatus');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_UcpAlgCalllimitStatusArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setLimitStatus(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AnaFxsAll
//
function AST_AnaFxsAll () {
    this.typeMarker = 'AST_AnaFxsAll';
    this._item = [];
}

//
// accessor is AST_AnaFxsAll.prototype.getItem
// element get for item
// - element type is {urn:ast}AnaFxs
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_AnaFxsAll.prototype.setItem
//
function AST_AnaFxsAll_getItem() { return this._item;}

AST_AnaFxsAll.prototype.getItem = AST_AnaFxsAll_getItem;

function AST_AnaFxsAll_setItem(value) { this._item = value;}

AST_AnaFxsAll.prototype.setItem = AST_AnaFxsAll_setItem;
//
// Serialize {urn:ast}AnaFxsAll
//
function AST_AnaFxsAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AnaFxsAll.prototype.serialize = AST_AnaFxsAll_serialize;

function AST_AnaFxsAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_AnaFxsAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_AnaFxs_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}ModuleBoardGet
//
function AST_ModuleBoardGet () {
    this.typeMarker = 'AST_ModuleBoardGet';
    this._combuf = null;
    this._boardinfos = null;
}

//
// accessor is AST_ModuleBoardGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_ModuleBoardGet.prototype.setCombuf
//
function AST_ModuleBoardGet_getCombuf() { return this._combuf;}

AST_ModuleBoardGet.prototype.getCombuf = AST_ModuleBoardGet_getCombuf;

function AST_ModuleBoardGet_setCombuf(value) { this._combuf = value;}

AST_ModuleBoardGet.prototype.setCombuf = AST_ModuleBoardGet_setCombuf;
//
// accessor is AST_ModuleBoardGet.prototype.getBoardinfos
// element get for boardinfos
// - element type is {urn:ast}ModuleBoardInfoArr
// - required element
//
// element set for boardinfos
// setter function is is AST_ModuleBoardGet.prototype.setBoardinfos
//
function AST_ModuleBoardGet_getBoardinfos() { return this._boardinfos;}

AST_ModuleBoardGet.prototype.getBoardinfos = AST_ModuleBoardGet_getBoardinfos;

function AST_ModuleBoardGet_setBoardinfos(value) { this._boardinfos = value;}

AST_ModuleBoardGet.prototype.setBoardinfos = AST_ModuleBoardGet_setBoardinfos;
//
// Serialize {urn:ast}ModuleBoardGet
//
function AST_ModuleBoardGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._boardinfos.serialize(cxfjsutils, 'jns0:boardinfos', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_ModuleBoardGet.prototype.serialize = AST_ModuleBoardGet_serialize;

function AST_ModuleBoardGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_ModuleBoardGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing boardinfos');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_ModuleBoardInfoArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setBoardinfos(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}FileArr
//
function AST_FileArr () {
    this.typeMarker = 'AST_FileArr';
    this._item = [];
}

//
// accessor is AST_FileArr.prototype.getItem
// element get for item
// - element type is {urn:ast}File
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_FileArr.prototype.setItem
//
function AST_FileArr_getItem() { return this._item;}

AST_FileArr.prototype.getItem = AST_FileArr_getItem;

function AST_FileArr_setItem(value) { this._item = value;}

AST_FileArr.prototype.setItem = AST_FileArr_setItem;
//
// Serialize {urn:ast}FileArr
//
function AST_FileArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_FileArr.prototype.serialize = AST_FileArr_serialize;

function AST_FileArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_FileArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_File_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AdvAstSave
//
function AST_AdvAstSave () {
    this.typeMarker = 'AST_AdvAstSave';
    this._general = null;
}

//
// accessor is AST_AdvAstSave.prototype.getGeneral
// element get for general
// - element type is {urn:ast}AdvAstGeneral
// - required element
//
// element set for general
// setter function is is AST_AdvAstSave.prototype.setGeneral
//
function AST_AdvAstSave_getGeneral() { return this._general;}

AST_AdvAstSave.prototype.getGeneral = AST_AdvAstSave_getGeneral;

function AST_AdvAstSave_setGeneral(value) { this._general = value;}

AST_AdvAstSave.prototype.setGeneral = AST_AdvAstSave_setGeneral;
//
// Serialize {urn:ast}AdvAstSave
//
function AST_AdvAstSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._general.serialize(cxfjsutils, 'jns0:general', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AdvAstSave.prototype.serialize = AST_AdvAstSave_serialize;

function AST_AdvAstSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AdvAstSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing general');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_AdvAstGeneral_deserialize(cxfjsutils, curElement);
    }
    newobject.setGeneral(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}LogSettingSave
//
function AST_LogSettingSave () {
    this.typeMarker = 'AST_LogSettingSave';
    this._gw = null;
    this._monitor = null;
    this._sysklog = null;
    this._log4gw = null;
}

//
// accessor is AST_LogSettingSave.prototype.getGw
// element get for gw
// - element type is {urn:ast}LogGwContextArr
// - required element
//
// element set for gw
// setter function is is AST_LogSettingSave.prototype.setGw
//
function AST_LogSettingSave_getGw() { return this._gw;}

AST_LogSettingSave.prototype.getGw = AST_LogSettingSave_getGw;

function AST_LogSettingSave_setGw(value) { this._gw = value;}

AST_LogSettingSave.prototype.setGw = AST_LogSettingSave_setGw;
//
// accessor is AST_LogSettingSave.prototype.getMonitor
// element get for monitor
// - element type is {urn:ast}LogMorContextArr
// - required element
//
// element set for monitor
// setter function is is AST_LogSettingSave.prototype.setMonitor
//
function AST_LogSettingSave_getMonitor() { return this._monitor;}

AST_LogSettingSave.prototype.getMonitor = AST_LogSettingSave_getMonitor;

function AST_LogSettingSave_setMonitor(value) { this._monitor = value;}

AST_LogSettingSave.prototype.setMonitor = AST_LogSettingSave_setMonitor;
//
// accessor is AST_LogSettingSave.prototype.getSysklog
// element get for sysklog
// - element type is {urn:ast}LogGwSysklog
// - required element
//
// element set for sysklog
// setter function is is AST_LogSettingSave.prototype.setSysklog
//
function AST_LogSettingSave_getSysklog() { return this._sysklog;}

AST_LogSettingSave.prototype.getSysklog = AST_LogSettingSave_getSysklog;

function AST_LogSettingSave_setSysklog(value) { this._sysklog = value;}

AST_LogSettingSave.prototype.setSysklog = AST_LogSettingSave_setSysklog;
//
// accessor is AST_LogSettingSave.prototype.getLog4gw
// element get for log4gw
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for log4gw
// setter function is is AST_LogSettingSave.prototype.setLog4gw
//
function AST_LogSettingSave_getLog4gw() { return this._log4gw;}

AST_LogSettingSave.prototype.getLog4gw = AST_LogSettingSave_getLog4gw;

function AST_LogSettingSave_setLog4gw(value) { this._log4gw = value;}

AST_LogSettingSave.prototype.setLog4gw = AST_LogSettingSave_setLog4gw;
//
// Serialize {urn:ast}LogSettingSave
//
function AST_LogSettingSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._gw.serialize(cxfjsutils, 'jns0:gw', null);
    }
    // block for local variables
    {
     xml = xml + this._monitor.serialize(cxfjsutils, 'jns0:monitor', null);
    }
    // block for local variables
    {
     xml = xml + this._sysklog.serialize(cxfjsutils, 'jns0:sysklog', null);
    }
    // block for local variables
    {
     if (this._log4gw != null) {
      if (this._log4gw == null) {
       xml = xml + '<jns0:log4gw xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:log4gw>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._log4gw);
       xml = xml + '</jns0:log4gw>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_LogSettingSave.prototype.serialize = AST_LogSettingSave_serialize;

function AST_LogSettingSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_LogSettingSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing gw');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_LogGwContextArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setGw(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing monitor');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_LogMorContextArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setMonitor(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sysklog');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_LogGwSysklog_deserialize(cxfjsutils, curElement);
    }
    newobject.setSysklog(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing log4gw');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'log4gw')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setLog4gw(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SysInfo
//
function AST_SysInfo () {
    this.typeMarker = 'AST_SysInfo';
    this._version = null;
    this._modelname = null;
    this._systemuuid = null;
    this._stacknum = 0;
    this._buildtime = null;
    this._uptime = null;
    this._printData = null;
    this._printMen = null;
    this._compyinfo = null;
}

//
// accessor is AST_SysInfo.prototype.getVersion
// element get for version
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for version
// setter function is is AST_SysInfo.prototype.setVersion
//
function AST_SysInfo_getVersion() { return this._version;}

AST_SysInfo.prototype.getVersion = AST_SysInfo_getVersion;

function AST_SysInfo_setVersion(value) { this._version = value;}

AST_SysInfo.prototype.setVersion = AST_SysInfo_setVersion;
//
// accessor is AST_SysInfo.prototype.getModelname
// element get for modelname
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for modelname
// setter function is is AST_SysInfo.prototype.setModelname
//
function AST_SysInfo_getModelname() { return this._modelname;}

AST_SysInfo.prototype.getModelname = AST_SysInfo_getModelname;

function AST_SysInfo_setModelname(value) { this._modelname = value;}

AST_SysInfo.prototype.setModelname = AST_SysInfo_setModelname;
//
// accessor is AST_SysInfo.prototype.getSystemuuid
// element get for systemuuid
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for systemuuid
// setter function is is AST_SysInfo.prototype.setSystemuuid
//
function AST_SysInfo_getSystemuuid() { return this._systemuuid;}

AST_SysInfo.prototype.getSystemuuid = AST_SysInfo_getSystemuuid;

function AST_SysInfo_setSystemuuid(value) { this._systemuuid = value;}

AST_SysInfo.prototype.setSystemuuid = AST_SysInfo_setSystemuuid;
//
// accessor is AST_SysInfo.prototype.getStacknum
// element get for stacknum
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for stacknum
// setter function is is AST_SysInfo.prototype.setStacknum
//
function AST_SysInfo_getStacknum() { return this._stacknum;}

AST_SysInfo.prototype.getStacknum = AST_SysInfo_getStacknum;

function AST_SysInfo_setStacknum(value) { this._stacknum = value;}

AST_SysInfo.prototype.setStacknum = AST_SysInfo_setStacknum;
//
// accessor is AST_SysInfo.prototype.getBuildtime
// element get for buildtime
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for buildtime
// setter function is is AST_SysInfo.prototype.setBuildtime
//
function AST_SysInfo_getBuildtime() { return this._buildtime;}

AST_SysInfo.prototype.getBuildtime = AST_SysInfo_getBuildtime;

function AST_SysInfo_setBuildtime(value) { this._buildtime = value;}

AST_SysInfo.prototype.setBuildtime = AST_SysInfo_setBuildtime;
//
// accessor is AST_SysInfo.prototype.getUptime
// element get for uptime
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for uptime
// setter function is is AST_SysInfo.prototype.setUptime
//
function AST_SysInfo_getUptime() { return this._uptime;}

AST_SysInfo.prototype.getUptime = AST_SysInfo_getUptime;

function AST_SysInfo_setUptime(value) { this._uptime = value;}

AST_SysInfo.prototype.setUptime = AST_SysInfo_setUptime;
//
// accessor is AST_SysInfo.prototype.getPrintData
// element get for printData
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for printData
// setter function is is AST_SysInfo.prototype.setPrintData
//
function AST_SysInfo_getPrintData() { return this._printData;}

AST_SysInfo.prototype.getPrintData = AST_SysInfo_getPrintData;

function AST_SysInfo_setPrintData(value) { this._printData = value;}

AST_SysInfo.prototype.setPrintData = AST_SysInfo_setPrintData;
//
// accessor is AST_SysInfo.prototype.getPrintMen
// element get for printMen
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for printMen
// setter function is is AST_SysInfo.prototype.setPrintMen
//
function AST_SysInfo_getPrintMen() { return this._printMen;}

AST_SysInfo.prototype.getPrintMen = AST_SysInfo_getPrintMen;

function AST_SysInfo_setPrintMen(value) { this._printMen = value;}

AST_SysInfo.prototype.setPrintMen = AST_SysInfo_setPrintMen;
//
// accessor is AST_SysInfo.prototype.getCompyinfo
// element get for compyinfo
// - element type is {urn:ast}SysCompyInfo
// - required element
//
// element set for compyinfo
// setter function is is AST_SysInfo.prototype.setCompyinfo
//
function AST_SysInfo_getCompyinfo() { return this._compyinfo;}

AST_SysInfo.prototype.getCompyinfo = AST_SysInfo_getCompyinfo;

function AST_SysInfo_setCompyinfo(value) { this._compyinfo = value;}

AST_SysInfo.prototype.setCompyinfo = AST_SysInfo_setCompyinfo;
//
// Serialize {urn:ast}SysInfo
//
function AST_SysInfo_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._version == null) {
      xml = xml + '<jns0:version xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:version>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._version);
      xml = xml + '</jns0:version>';
     }
    }
    // block for local variables
    {
     if (this._modelname == null) {
      xml = xml + '<jns0:modelname xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:modelname>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._modelname);
      xml = xml + '</jns0:modelname>';
     }
    }
    // block for local variables
    {
     if (this._systemuuid == null) {
      xml = xml + '<jns0:systemuuid xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:systemuuid>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._systemuuid);
      xml = xml + '</jns0:systemuuid>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:stacknum>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._stacknum);
     xml = xml + '</jns0:stacknum>';
    }
    // block for local variables
    {
     if (this._buildtime != null) {
      if (this._buildtime == null) {
       xml = xml + '<jns0:buildtime xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:buildtime>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._buildtime);
       xml = xml + '</jns0:buildtime>';
      }
     }
    }
    // block for local variables
    {
     if (this._uptime != null) {
      if (this._uptime == null) {
       xml = xml + '<jns0:uptime xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:uptime>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._uptime);
       xml = xml + '</jns0:uptime>';
      }
     }
    }
    // block for local variables
    {
     if (this._printData != null) {
      if (this._printData == null) {
       xml = xml + '<jns0:printData xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:printData>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._printData);
       xml = xml + '</jns0:printData>';
      }
     }
    }
    // block for local variables
    {
     if (this._printMen != null) {
      if (this._printMen == null) {
       xml = xml + '<jns0:printMen xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:printMen>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._printMen);
       xml = xml + '</jns0:printMen>';
      }
     }
    }
    // block for local variables
    {
     xml = xml + this._compyinfo.serialize(cxfjsutils, 'jns0:compyinfo', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SysInfo.prototype.serialize = AST_SysInfo_serialize;

function AST_SysInfo_deserialize (cxfjsutils, element) {
    var newobject = new AST_SysInfo();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing version');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setVersion(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing modelname');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setModelname(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing systemuuid');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSystemuuid(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing stacknum');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setStacknum(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing buildtime');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'buildtime')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setBuildtime(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing uptime');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'uptime')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setUptime(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing printData');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'printData')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setPrintData(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing printMen');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'printMen')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setPrintMen(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing compyinfo');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SysCompyInfo_deserialize(cxfjsutils, curElement);
    }
    newobject.setCompyinfo(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}ClientRemove
//
function AST_ClientRemove () {
    this.typeMarker = 'AST_ClientRemove';
    this._clientchannelstart = '';
    this._clientchannelnum = '';
}

//
// accessor is AST_ClientRemove.prototype.getClientchannelstart
// element get for clientchannelstart
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedShort
// - required element
//
// element set for clientchannelstart
// setter function is is AST_ClientRemove.prototype.setClientchannelstart
//
function AST_ClientRemove_getClientchannelstart() { return this._clientchannelstart;}

AST_ClientRemove.prototype.getClientchannelstart = AST_ClientRemove_getClientchannelstart;

function AST_ClientRemove_setClientchannelstart(value) { this._clientchannelstart = value;}

AST_ClientRemove.prototype.setClientchannelstart = AST_ClientRemove_setClientchannelstart;
//
// accessor is AST_ClientRemove.prototype.getClientchannelnum
// element get for clientchannelnum
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedShort
// - required element
//
// element set for clientchannelnum
// setter function is is AST_ClientRemove.prototype.setClientchannelnum
//
function AST_ClientRemove_getClientchannelnum() { return this._clientchannelnum;}

AST_ClientRemove.prototype.getClientchannelnum = AST_ClientRemove_getClientchannelnum;

function AST_ClientRemove_setClientchannelnum(value) { this._clientchannelnum = value;}

AST_ClientRemove.prototype.setClientchannelnum = AST_ClientRemove_setClientchannelnum;
//
// Serialize {urn:ast}ClientRemove
//
function AST_ClientRemove_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:clientchannelstart>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._clientchannelstart);
     xml = xml + '</jns0:clientchannelstart>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:clientchannelnum>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._clientchannelnum);
     xml = xml + '</jns0:clientchannelnum>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_ClientRemove.prototype.serialize = AST_ClientRemove_serialize;

function AST_ClientRemove_deserialize (cxfjsutils, element) {
    var newobject = new AST_ClientRemove();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing clientchannelstart');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setClientchannelstart(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing clientchannelnum');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setClientchannelnum(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}LogCdr
//
function AST_LogCdr () {
    this.typeMarker = 'AST_LogCdr';
    this._num = 0;
    this._from = null;
    this._to = null;
    this._callee = null;
    this._caller = null;
    this._start = null;
    this._time = 0;
    this._result = null;
}

//
// accessor is AST_LogCdr.prototype.getNum
// element get for num
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for num
// setter function is is AST_LogCdr.prototype.setNum
//
function AST_LogCdr_getNum() { return this._num;}

AST_LogCdr.prototype.getNum = AST_LogCdr_getNum;

function AST_LogCdr_setNum(value) { this._num = value;}

AST_LogCdr.prototype.setNum = AST_LogCdr_setNum;
//
// accessor is AST_LogCdr.prototype.getFrom
// element get for from
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for from
// setter function is is AST_LogCdr.prototype.setFrom
//
function AST_LogCdr_getFrom() { return this._from;}

AST_LogCdr.prototype.getFrom = AST_LogCdr_getFrom;

function AST_LogCdr_setFrom(value) { this._from = value;}

AST_LogCdr.prototype.setFrom = AST_LogCdr_setFrom;
//
// accessor is AST_LogCdr.prototype.getTo
// element get for to
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for to
// setter function is is AST_LogCdr.prototype.setTo
//
function AST_LogCdr_getTo() { return this._to;}

AST_LogCdr.prototype.getTo = AST_LogCdr_getTo;

function AST_LogCdr_setTo(value) { this._to = value;}

AST_LogCdr.prototype.setTo = AST_LogCdr_setTo;
//
// accessor is AST_LogCdr.prototype.getCallee
// element get for callee
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for callee
// setter function is is AST_LogCdr.prototype.setCallee
//
function AST_LogCdr_getCallee() { return this._callee;}

AST_LogCdr.prototype.getCallee = AST_LogCdr_getCallee;

function AST_LogCdr_setCallee(value) { this._callee = value;}

AST_LogCdr.prototype.setCallee = AST_LogCdr_setCallee;
//
// accessor is AST_LogCdr.prototype.getCaller
// element get for caller
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for caller
// setter function is is AST_LogCdr.prototype.setCaller
//
function AST_LogCdr_getCaller() { return this._caller;}

AST_LogCdr.prototype.getCaller = AST_LogCdr_getCaller;

function AST_LogCdr_setCaller(value) { this._caller = value;}

AST_LogCdr.prototype.setCaller = AST_LogCdr_setCaller;
//
// accessor is AST_LogCdr.prototype.getStart
// element get for start
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for start
// setter function is is AST_LogCdr.prototype.setStart
//
function AST_LogCdr_getStart() { return this._start;}

AST_LogCdr.prototype.getStart = AST_LogCdr_getStart;

function AST_LogCdr_setStart(value) { this._start = value;}

AST_LogCdr.prototype.setStart = AST_LogCdr_setStart;
//
// accessor is AST_LogCdr.prototype.getTime
// element get for time
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for time
// setter function is is AST_LogCdr.prototype.setTime
//
function AST_LogCdr_getTime() { return this._time;}

AST_LogCdr.prototype.getTime = AST_LogCdr_getTime;

function AST_LogCdr_setTime(value) { this._time = value;}

AST_LogCdr.prototype.setTime = AST_LogCdr_setTime;
//
// accessor is AST_LogCdr.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for result
// setter function is is AST_LogCdr.prototype.setResult
//
function AST_LogCdr_getResult() { return this._result;}

AST_LogCdr.prototype.getResult = AST_LogCdr_getResult;

function AST_LogCdr_setResult(value) { this._result = value;}

AST_LogCdr.prototype.setResult = AST_LogCdr_setResult;
//
// Serialize {urn:ast}LogCdr
//
function AST_LogCdr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:num>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._num);
     xml = xml + '</jns0:num>';
    }
    // block for local variables
    {
     if (this._from != null) {
      if (this._from == null) {
       xml = xml + '<jns0:from xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:from>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._from);
       xml = xml + '</jns0:from>';
      }
     }
    }
    // block for local variables
    {
     if (this._to != null) {
      if (this._to == null) {
       xml = xml + '<jns0:to xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:to>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._to);
       xml = xml + '</jns0:to>';
      }
     }
    }
    // block for local variables
    {
     if (this._callee != null) {
      if (this._callee == null) {
       xml = xml + '<jns0:callee xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:callee>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._callee);
       xml = xml + '</jns0:callee>';
      }
     }
    }
    // block for local variables
    {
     if (this._caller != null) {
      if (this._caller == null) {
       xml = xml + '<jns0:caller xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:caller>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._caller);
       xml = xml + '</jns0:caller>';
      }
     }
    }
    // block for local variables
    {
     if (this._start != null) {
      if (this._start == null) {
       xml = xml + '<jns0:start xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:start>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._start);
       xml = xml + '</jns0:start>';
      }
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:time>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._time);
     xml = xml + '</jns0:time>';
    }
    // block for local variables
    {
     if (this._result != null) {
      if (this._result == null) {
       xml = xml + '<jns0:result xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:result>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._result);
       xml = xml + '</jns0:result>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_LogCdr.prototype.serialize = AST_LogCdr_serialize;

function AST_LogCdr_deserialize (cxfjsutils, element) {
    var newobject = new AST_LogCdr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing num');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setNum(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing from');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'from')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setFrom(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing to');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'to')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setTo(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing callee');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'callee')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setCallee(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing caller');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'caller')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setCaller(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing start');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'start')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setStart(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing time');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setTime(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'result')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setResult(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SnmpGet
//
function AST_SnmpGet () {
    this.typeMarker = 'AST_SnmpGet';
    this._combuf = null;
    this._snmp = null;
}

//
// accessor is AST_SnmpGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_SnmpGet.prototype.setCombuf
//
function AST_SnmpGet_getCombuf() { return this._combuf;}

AST_SnmpGet.prototype.getCombuf = AST_SnmpGet_getCombuf;

function AST_SnmpGet_setCombuf(value) { this._combuf = value;}

AST_SnmpGet.prototype.setCombuf = AST_SnmpGet_setCombuf;
//
// accessor is AST_SnmpGet.prototype.getSnmp
// element get for snmp
// - element type is {urn:ast}SnmpConfParam
// - required element
//
// element set for snmp
// setter function is is AST_SnmpGet.prototype.setSnmp
//
function AST_SnmpGet_getSnmp() { return this._snmp;}

AST_SnmpGet.prototype.getSnmp = AST_SnmpGet_getSnmp;

function AST_SnmpGet_setSnmp(value) { this._snmp = value;}

AST_SnmpGet.prototype.setSnmp = AST_SnmpGet_setSnmp;
//
// Serialize {urn:ast}SnmpGet
//
function AST_SnmpGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._snmp.serialize(cxfjsutils, 'jns0:snmp', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SnmpGet.prototype.serialize = AST_SnmpGet_serialize;

function AST_SnmpGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_SnmpGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing snmp');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SnmpConfParam_deserialize(cxfjsutils, curElement);
    }
    newobject.setSnmp(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RoutingAna
//
function AST_RoutingAna () {
    this.typeMarker = 'AST_RoutingAna';
    this._channel = 0;
    this._signalling = '';
}

//
// accessor is AST_RoutingAna.prototype.getChannel
// element get for channel
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for channel
// setter function is is AST_RoutingAna.prototype.setChannel
//
function AST_RoutingAna_getChannel() { return this._channel;}

AST_RoutingAna.prototype.getChannel = AST_RoutingAna_getChannel;

function AST_RoutingAna_setChannel(value) { this._channel = value;}

AST_RoutingAna.prototype.setChannel = AST_RoutingAna_setChannel;
//
// accessor is AST_RoutingAna.prototype.getSignalling
// element get for signalling
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for signalling
// setter function is is AST_RoutingAna.prototype.setSignalling
//
function AST_RoutingAna_getSignalling() { return this._signalling;}

AST_RoutingAna.prototype.getSignalling = AST_RoutingAna_getSignalling;

function AST_RoutingAna_setSignalling(value) { this._signalling = value;}

AST_RoutingAna.prototype.setSignalling = AST_RoutingAna_setSignalling;
//
// Serialize {urn:ast}RoutingAna
//
function AST_RoutingAna_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:channel>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._channel);
     xml = xml + '</jns0:channel>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:signalling>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._signalling);
     xml = xml + '</jns0:signalling>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RoutingAna.prototype.serialize = AST_RoutingAna_serialize;

function AST_RoutingAna_deserialize (cxfjsutils, element) {
    var newobject = new AST_RoutingAna();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing channel');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setChannel(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing signalling');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSignalling(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}UcpAlgFxsparam
//
function AST_UcpAlgFxsparam () {
    this.typeMarker = 'AST_UcpAlgFxsparam';
    this._sendcalleridaftertime = 0;
    this._startcode = null;
    this._stopcode = null;
    this._flashwink = '';
    this._sendcalleridafter = '';
    this._sendpolarityrev = '';
    this._enddialkey = '';
    this._ciddisplay = '';
    this._rxminflash = 0;
    this._rxflash = 0;
    this._dialdebounce = 0;
}

//
// accessor is AST_UcpAlgFxsparam.prototype.getSendcalleridaftertime
// element get for sendcalleridaftertime
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for sendcalleridaftertime
// setter function is is AST_UcpAlgFxsparam.prototype.setSendcalleridaftertime
//
function AST_UcpAlgFxsparam_getSendcalleridaftertime() { return this._sendcalleridaftertime;}

AST_UcpAlgFxsparam.prototype.getSendcalleridaftertime = AST_UcpAlgFxsparam_getSendcalleridaftertime;

function AST_UcpAlgFxsparam_setSendcalleridaftertime(value) { this._sendcalleridaftertime = value;}

AST_UcpAlgFxsparam.prototype.setSendcalleridaftertime = AST_UcpAlgFxsparam_setSendcalleridaftertime;
//
// accessor is AST_UcpAlgFxsparam.prototype.getStartcode
// element get for startcode
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for startcode
// setter function is is AST_UcpAlgFxsparam.prototype.setStartcode
//
function AST_UcpAlgFxsparam_getStartcode() { return this._startcode;}

AST_UcpAlgFxsparam.prototype.getStartcode = AST_UcpAlgFxsparam_getStartcode;

function AST_UcpAlgFxsparam_setStartcode(value) { this._startcode = value;}

AST_UcpAlgFxsparam.prototype.setStartcode = AST_UcpAlgFxsparam_setStartcode;
//
// accessor is AST_UcpAlgFxsparam.prototype.getStopcode
// element get for stopcode
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for stopcode
// setter function is is AST_UcpAlgFxsparam.prototype.setStopcode
//
function AST_UcpAlgFxsparam_getStopcode() { return this._stopcode;}

AST_UcpAlgFxsparam.prototype.getStopcode = AST_UcpAlgFxsparam_getStopcode;

function AST_UcpAlgFxsparam_setStopcode(value) { this._stopcode = value;}

AST_UcpAlgFxsparam.prototype.setStopcode = AST_UcpAlgFxsparam_setStopcode;
//
// accessor is AST_UcpAlgFxsparam.prototype.getFlashwink
// element get for flashwink
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for flashwink
// setter function is is AST_UcpAlgFxsparam.prototype.setFlashwink
//
function AST_UcpAlgFxsparam_getFlashwink() { return this._flashwink;}

AST_UcpAlgFxsparam.prototype.getFlashwink = AST_UcpAlgFxsparam_getFlashwink;

function AST_UcpAlgFxsparam_setFlashwink(value) { this._flashwink = value;}

AST_UcpAlgFxsparam.prototype.setFlashwink = AST_UcpAlgFxsparam_setFlashwink;
//
// accessor is AST_UcpAlgFxsparam.prototype.getSendcalleridafter
// element get for sendcalleridafter
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for sendcalleridafter
// setter function is is AST_UcpAlgFxsparam.prototype.setSendcalleridafter
//
function AST_UcpAlgFxsparam_getSendcalleridafter() { return this._sendcalleridafter;}

AST_UcpAlgFxsparam.prototype.getSendcalleridafter = AST_UcpAlgFxsparam_getSendcalleridafter;

function AST_UcpAlgFxsparam_setSendcalleridafter(value) { this._sendcalleridafter = value;}

AST_UcpAlgFxsparam.prototype.setSendcalleridafter = AST_UcpAlgFxsparam_setSendcalleridafter;
//
// accessor is AST_UcpAlgFxsparam.prototype.getSendpolarityrev
// element get for sendpolarityrev
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for sendpolarityrev
// setter function is is AST_UcpAlgFxsparam.prototype.setSendpolarityrev
//
function AST_UcpAlgFxsparam_getSendpolarityrev() { return this._sendpolarityrev;}

AST_UcpAlgFxsparam.prototype.getSendpolarityrev = AST_UcpAlgFxsparam_getSendpolarityrev;

function AST_UcpAlgFxsparam_setSendpolarityrev(value) { this._sendpolarityrev = value;}

AST_UcpAlgFxsparam.prototype.setSendpolarityrev = AST_UcpAlgFxsparam_setSendpolarityrev;
//
// accessor is AST_UcpAlgFxsparam.prototype.getEnddialkey
// element get for enddialkey
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for enddialkey
// setter function is is AST_UcpAlgFxsparam.prototype.setEnddialkey
//
function AST_UcpAlgFxsparam_getEnddialkey() { return this._enddialkey;}

AST_UcpAlgFxsparam.prototype.getEnddialkey = AST_UcpAlgFxsparam_getEnddialkey;

function AST_UcpAlgFxsparam_setEnddialkey(value) { this._enddialkey = value;}

AST_UcpAlgFxsparam.prototype.setEnddialkey = AST_UcpAlgFxsparam_setEnddialkey;
//
// accessor is AST_UcpAlgFxsparam.prototype.getCiddisplay
// element get for ciddisplay
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for ciddisplay
// setter function is is AST_UcpAlgFxsparam.prototype.setCiddisplay
//
function AST_UcpAlgFxsparam_getCiddisplay() { return this._ciddisplay;}

AST_UcpAlgFxsparam.prototype.getCiddisplay = AST_UcpAlgFxsparam_getCiddisplay;

function AST_UcpAlgFxsparam_setCiddisplay(value) { this._ciddisplay = value;}

AST_UcpAlgFxsparam.prototype.setCiddisplay = AST_UcpAlgFxsparam_setCiddisplay;
//
// accessor is AST_UcpAlgFxsparam.prototype.getRxminflash
// element get for rxminflash
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for rxminflash
// setter function is is AST_UcpAlgFxsparam.prototype.setRxminflash
//
function AST_UcpAlgFxsparam_getRxminflash() { return this._rxminflash;}

AST_UcpAlgFxsparam.prototype.getRxminflash = AST_UcpAlgFxsparam_getRxminflash;

function AST_UcpAlgFxsparam_setRxminflash(value) { this._rxminflash = value;}

AST_UcpAlgFxsparam.prototype.setRxminflash = AST_UcpAlgFxsparam_setRxminflash;
//
// accessor is AST_UcpAlgFxsparam.prototype.getRxflash
// element get for rxflash
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for rxflash
// setter function is is AST_UcpAlgFxsparam.prototype.setRxflash
//
function AST_UcpAlgFxsparam_getRxflash() { return this._rxflash;}

AST_UcpAlgFxsparam.prototype.getRxflash = AST_UcpAlgFxsparam_getRxflash;

function AST_UcpAlgFxsparam_setRxflash(value) { this._rxflash = value;}

AST_UcpAlgFxsparam.prototype.setRxflash = AST_UcpAlgFxsparam_setRxflash;
//
// accessor is AST_UcpAlgFxsparam.prototype.getDialdebounce
// element get for dialdebounce
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for dialdebounce
// setter function is is AST_UcpAlgFxsparam.prototype.setDialdebounce
//
function AST_UcpAlgFxsparam_getDialdebounce() { return this._dialdebounce;}

AST_UcpAlgFxsparam.prototype.getDialdebounce = AST_UcpAlgFxsparam_getDialdebounce;

function AST_UcpAlgFxsparam_setDialdebounce(value) { this._dialdebounce = value;}

AST_UcpAlgFxsparam.prototype.setDialdebounce = AST_UcpAlgFxsparam_setDialdebounce;
//
// Serialize {urn:ast}UcpAlgFxsparam
//
function AST_UcpAlgFxsparam_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:sendcalleridaftertime>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._sendcalleridaftertime);
     xml = xml + '</jns0:sendcalleridaftertime>';
    }
    // block for local variables
    {
     if (this._startcode == null) {
      xml = xml + '<jns0:startcode xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:startcode>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._startcode);
      xml = xml + '</jns0:startcode>';
     }
    }
    // block for local variables
    {
     if (this._stopcode == null) {
      xml = xml + '<jns0:stopcode xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:stopcode>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._stopcode);
      xml = xml + '</jns0:stopcode>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:flashwink>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._flashwink);
     xml = xml + '</jns0:flashwink>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:sendcalleridafter>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._sendcalleridafter);
     xml = xml + '</jns0:sendcalleridafter>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:sendpolarityrev>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._sendpolarityrev);
     xml = xml + '</jns0:sendpolarityrev>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:enddialkey>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._enddialkey);
     xml = xml + '</jns0:enddialkey>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:ciddisplay>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._ciddisplay);
     xml = xml + '</jns0:ciddisplay>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:rxminflash>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._rxminflash);
     xml = xml + '</jns0:rxminflash>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:rxflash>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._rxflash);
     xml = xml + '</jns0:rxflash>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:dialdebounce>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._dialdebounce);
     xml = xml + '</jns0:dialdebounce>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_UcpAlgFxsparam.prototype.serialize = AST_UcpAlgFxsparam_serialize;

function AST_UcpAlgFxsparam_deserialize (cxfjsutils, element) {
    var newobject = new AST_UcpAlgFxsparam();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sendcalleridaftertime');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setSendcalleridaftertime(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing startcode');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setStartcode(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing stopcode');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setStopcode(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing flashwink');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setFlashwink(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sendcalleridafter');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSendcalleridafter(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sendpolarityrev');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSendpolarityrev(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing enddialkey');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setEnddialkey(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ciddisplay');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setCiddisplay(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing rxminflash');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setRxminflash(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing rxflash');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setRxflash(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing dialdebounce');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setDialdebounce(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}Lookup
//
function AST_Lookup () {
    this.typeMarker = 'AST_Lookup';
    this._commit = null;
    this._data = null;
    this._message = null;
}

//
// accessor is AST_Lookup.prototype.getCommit
// element get for commit
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for commit
// setter function is is AST_Lookup.prototype.setCommit
//
function AST_Lookup_getCommit() { return this._commit;}

AST_Lookup.prototype.getCommit = AST_Lookup_getCommit;

function AST_Lookup_setCommit(value) { this._commit = value;}

AST_Lookup.prototype.setCommit = AST_Lookup_setCommit;
//
// accessor is AST_Lookup.prototype.getData
// element get for data
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for data
// setter function is is AST_Lookup.prototype.setData
//
function AST_Lookup_getData() { return this._data;}

AST_Lookup.prototype.getData = AST_Lookup_getData;

function AST_Lookup_setData(value) { this._data = value;}

AST_Lookup.prototype.setData = AST_Lookup_setData;
//
// accessor is AST_Lookup.prototype.getMessage
// element get for message
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for message
// setter function is is AST_Lookup.prototype.setMessage
//
function AST_Lookup_getMessage() { return this._message;}

AST_Lookup.prototype.getMessage = AST_Lookup_getMessage;

function AST_Lookup_setMessage(value) { this._message = value;}

AST_Lookup.prototype.setMessage = AST_Lookup_setMessage;
//
// Serialize {urn:ast}Lookup
//
function AST_Lookup_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._commit != null) {
      if (this._commit == null) {
       xml = xml + '<jns0:commit xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:commit>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._commit);
       xml = xml + '</jns0:commit>';
      }
     }
    }
    // block for local variables
    {
     if (this._data != null) {
      if (this._data == null) {
       xml = xml + '<jns0:data xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:data>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._data);
       xml = xml + '</jns0:data>';
      }
     }
    }
    // block for local variables
    {
     if (this._message != null) {
      if (this._message == null) {
       xml = xml + '<jns0:message xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:message>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._message);
       xml = xml + '</jns0:message>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_Lookup.prototype.serialize = AST_Lookup_serialize;

function AST_Lookup_deserialize (cxfjsutils, element) {
    var newobject = new AST_Lookup();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing commit');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'commit')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setCommit(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing data');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'data')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setData(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing message');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'message')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setMessage(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SnmpV3
//
function AST_SnmpV3 () {
    this.typeMarker = 'AST_SnmpV3';
    this._user = null;
    this._secgrp = null;
    this._view = null;
    this._access = null;
}

//
// accessor is AST_SnmpV3.prototype.getUser
// element get for user
// - element type is {urn:ast}SnmpUserAdd
// - required element
//
// element set for user
// setter function is is AST_SnmpV3.prototype.setUser
//
function AST_SnmpV3_getUser() { return this._user;}

AST_SnmpV3.prototype.getUser = AST_SnmpV3_getUser;

function AST_SnmpV3_setUser(value) { this._user = value;}

AST_SnmpV3.prototype.setUser = AST_SnmpV3_setUser;
//
// accessor is AST_SnmpV3.prototype.getSecgrp
// element get for secgrp
// - element type is {urn:ast}SnmpSecurityGroup
// - required element
//
// element set for secgrp
// setter function is is AST_SnmpV3.prototype.setSecgrp
//
function AST_SnmpV3_getSecgrp() { return this._secgrp;}

AST_SnmpV3.prototype.getSecgrp = AST_SnmpV3_getSecgrp;

function AST_SnmpV3_setSecgrp(value) { this._secgrp = value;}

AST_SnmpV3.prototype.setSecgrp = AST_SnmpV3_setSecgrp;
//
// accessor is AST_SnmpV3.prototype.getView
// element get for view
// - element type is {urn:ast}SnmpView
// - required element
//
// element set for view
// setter function is is AST_SnmpV3.prototype.setView
//
function AST_SnmpV3_getView() { return this._view;}

AST_SnmpV3.prototype.getView = AST_SnmpV3_getView;

function AST_SnmpV3_setView(value) { this._view = value;}

AST_SnmpV3.prototype.setView = AST_SnmpV3_setView;
//
// accessor is AST_SnmpV3.prototype.getAccess
// element get for access
// - element type is {urn:ast}SnmpAccess
// - required element
//
// element set for access
// setter function is is AST_SnmpV3.prototype.setAccess
//
function AST_SnmpV3_getAccess() { return this._access;}

AST_SnmpV3.prototype.getAccess = AST_SnmpV3_getAccess;

function AST_SnmpV3_setAccess(value) { this._access = value;}

AST_SnmpV3.prototype.setAccess = AST_SnmpV3_setAccess;
//
// Serialize {urn:ast}SnmpV3
//
function AST_SnmpV3_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._user.serialize(cxfjsutils, 'jns0:user', null);
    }
    // block for local variables
    {
     xml = xml + this._secgrp.serialize(cxfjsutils, 'jns0:secgrp', null);
    }
    // block for local variables
    {
     xml = xml + this._view.serialize(cxfjsutils, 'jns0:view', null);
    }
    // block for local variables
    {
     xml = xml + this._access.serialize(cxfjsutils, 'jns0:access', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SnmpV3.prototype.serialize = AST_SnmpV3_serialize;

function AST_SnmpV3_deserialize (cxfjsutils, element) {
    var newobject = new AST_SnmpV3();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing user');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SnmpUserAdd_deserialize(cxfjsutils, curElement);
    }
    newobject.setUser(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing secgrp');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SnmpSecurityGroup_deserialize(cxfjsutils, curElement);
    }
    newobject.setSecgrp(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing view');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SnmpView_deserialize(cxfjsutils, curElement);
    }
    newobject.setView(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing access');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SnmpAccess_deserialize(cxfjsutils, curElement);
    }
    newobject.setAccess(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RoutingGroupGetOne
//
function AST_RoutingGroupGetOne () {
    this.typeMarker = 'AST_RoutingGroupGetOne';
    this._combuf = null;
    this._sip = null;
    this._ana = null;
    this._group = null;
    this._groups = null;
}

//
// accessor is AST_RoutingGroupGetOne.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_RoutingGroupGetOne.prototype.setCombuf
//
function AST_RoutingGroupGetOne_getCombuf() { return this._combuf;}

AST_RoutingGroupGetOne.prototype.getCombuf = AST_RoutingGroupGetOne_getCombuf;

function AST_RoutingGroupGetOne_setCombuf(value) { this._combuf = value;}

AST_RoutingGroupGetOne.prototype.setCombuf = AST_RoutingGroupGetOne_setCombuf;
//
// accessor is AST_RoutingGroupGetOne.prototype.getSip
// element get for sip
// - element type is {urn:ast}SectionArr
// - required element
//
// element set for sip
// setter function is is AST_RoutingGroupGetOne.prototype.setSip
//
function AST_RoutingGroupGetOne_getSip() { return this._sip;}

AST_RoutingGroupGetOne.prototype.getSip = AST_RoutingGroupGetOne_getSip;

function AST_RoutingGroupGetOne_setSip(value) { this._sip = value;}

AST_RoutingGroupGetOne.prototype.setSip = AST_RoutingGroupGetOne_setSip;
//
// accessor is AST_RoutingGroupGetOne.prototype.getAna
// element get for ana
// - element type is {urn:ast}RoutingAnaArr
// - required element
//
// element set for ana
// setter function is is AST_RoutingGroupGetOne.prototype.setAna
//
function AST_RoutingGroupGetOne_getAna() { return this._ana;}

AST_RoutingGroupGetOne.prototype.getAna = AST_RoutingGroupGetOne_getAna;

function AST_RoutingGroupGetOne_setAna(value) { this._ana = value;}

AST_RoutingGroupGetOne.prototype.setAna = AST_RoutingGroupGetOne_setAna;
//
// accessor is AST_RoutingGroupGetOne.prototype.getGroup
// element get for group
// - element type is {urn:ast}RoutingGroup
// - required element
//
// element set for group
// setter function is is AST_RoutingGroupGetOne.prototype.setGroup
//
function AST_RoutingGroupGetOne_getGroup() { return this._group;}

AST_RoutingGroupGetOne.prototype.getGroup = AST_RoutingGroupGetOne_getGroup;

function AST_RoutingGroupGetOne_setGroup(value) { this._group = value;}

AST_RoutingGroupGetOne.prototype.setGroup = AST_RoutingGroupGetOne_setGroup;
//
// accessor is AST_RoutingGroupGetOne.prototype.getGroups
// element get for groups
// - element type is {urn:ast}SectionArr
// - required element
//
// element set for groups
// setter function is is AST_RoutingGroupGetOne.prototype.setGroups
//
function AST_RoutingGroupGetOne_getGroups() { return this._groups;}

AST_RoutingGroupGetOne.prototype.getGroups = AST_RoutingGroupGetOne_getGroups;

function AST_RoutingGroupGetOne_setGroups(value) { this._groups = value;}

AST_RoutingGroupGetOne.prototype.setGroups = AST_RoutingGroupGetOne_setGroups;
//
// Serialize {urn:ast}RoutingGroupGetOne
//
function AST_RoutingGroupGetOne_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._sip.serialize(cxfjsutils, 'jns0:sip', null);
    }
    // block for local variables
    {
     xml = xml + this._ana.serialize(cxfjsutils, 'jns0:ana', null);
    }
    // block for local variables
    {
     xml = xml + this._group.serialize(cxfjsutils, 'jns0:group', null);
    }
    // block for local variables
    {
     xml = xml + this._groups.serialize(cxfjsutils, 'jns0:groups', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RoutingGroupGetOne.prototype.serialize = AST_RoutingGroupGetOne_serialize;

function AST_RoutingGroupGetOne_deserialize (cxfjsutils, element) {
    var newobject = new AST_RoutingGroupGetOne();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sip');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SectionArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setSip(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ana');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_RoutingAnaArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setAna(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing group');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_RoutingGroup_deserialize(cxfjsutils, curElement);
    }
    newobject.setGroup(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing groups');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SectionArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setGroups(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipBatchGet
//
function AST_SipBatchGet () {
    this.typeMarker = 'AST_SipBatchGet';
    this._combuf = null;
    this._sip = null;
    this._ana = null;
}

//
// accessor is AST_SipBatchGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_SipBatchGet.prototype.setCombuf
//
function AST_SipBatchGet_getCombuf() { return this._combuf;}

AST_SipBatchGet.prototype.getCombuf = AST_SipBatchGet_getCombuf;

function AST_SipBatchGet_setCombuf(value) { this._combuf = value;}

AST_SipBatchGet.prototype.setCombuf = AST_SipBatchGet_setCombuf;
//
// accessor is AST_SipBatchGet.prototype.getSip
// element get for sip
// - element type is {urn:ast}SipBatchSipArr
// - required element
//
// element set for sip
// setter function is is AST_SipBatchGet.prototype.setSip
//
function AST_SipBatchGet_getSip() { return this._sip;}

AST_SipBatchGet.prototype.getSip = AST_SipBatchGet_getSip;

function AST_SipBatchGet_setSip(value) { this._sip = value;}

AST_SipBatchGet.prototype.setSip = AST_SipBatchGet_setSip;
//
// accessor is AST_SipBatchGet.prototype.getAna
// element get for ana
// - element type is {urn:ast}ChannelArr
// - required element
//
// element set for ana
// setter function is is AST_SipBatchGet.prototype.setAna
//
function AST_SipBatchGet_getAna() { return this._ana;}

AST_SipBatchGet.prototype.getAna = AST_SipBatchGet_getAna;

function AST_SipBatchGet_setAna(value) { this._ana = value;}

AST_SipBatchGet.prototype.setAna = AST_SipBatchGet_setAna;
//
// Serialize {urn:ast}SipBatchGet
//
function AST_SipBatchGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._sip.serialize(cxfjsutils, 'jns0:sip', null);
    }
    // block for local variables
    {
     xml = xml + this._ana.serialize(cxfjsutils, 'jns0:ana', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipBatchGet.prototype.serialize = AST_SipBatchGet_serialize;

function AST_SipBatchGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipBatchGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sip');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SipBatchSipArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setSip(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ana');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_ChannelArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setAna(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RegisterParaGet
//
function AST_RegisterParaGet () {
    this.typeMarker = 'AST_RegisterParaGet';
    this._combuf = null;
    this._channel = 0;
}

//
// accessor is AST_RegisterParaGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_RegisterParaGet.prototype.setCombuf
//
function AST_RegisterParaGet_getCombuf() { return this._combuf;}

AST_RegisterParaGet.prototype.getCombuf = AST_RegisterParaGet_getCombuf;

function AST_RegisterParaGet_setCombuf(value) { this._combuf = value;}

AST_RegisterParaGet.prototype.setCombuf = AST_RegisterParaGet_setCombuf;
//
// accessor is AST_RegisterParaGet.prototype.getChannel
// element get for channel
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for channel
// setter function is is AST_RegisterParaGet.prototype.setChannel
//
function AST_RegisterParaGet_getChannel() { return this._channel;}

AST_RegisterParaGet.prototype.getChannel = AST_RegisterParaGet_getChannel;

function AST_RegisterParaGet_setChannel(value) { this._channel = value;}

AST_RegisterParaGet.prototype.setChannel = AST_RegisterParaGet_setChannel;
//
// Serialize {urn:ast}RegisterParaGet
//
function AST_RegisterParaGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + '<jns0:channel>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._channel);
     xml = xml + '</jns0:channel>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RegisterParaGet.prototype.serialize = AST_RegisterParaGet_serialize;

function AST_RegisterParaGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_RegisterParaGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing channel');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setChannel(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}Array16OfunsignedByte
//
function AST_Array16OfunsignedByte () {
    this.typeMarker = 'AST_Array16OfunsignedByte';
}

//
// Serialize {urn:ast}Array16OfunsignedByte
//
function AST_Array16OfunsignedByte_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_Array16OfunsignedByte.prototype.serialize = AST_Array16OfunsignedByte_serialize;

function AST_Array16OfunsignedByte_deserialize (cxfjsutils, element) {
    var newobject = new AST_Array16OfunsignedByte();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AdvAstFileGet
//
function AST_AdvAstFileGet () {
    this.typeMarker = 'AST_AdvAstFileGet';
    this._combuf = null;
    this._files = null;
}

//
// accessor is AST_AdvAstFileGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_AdvAstFileGet.prototype.setCombuf
//
function AST_AdvAstFileGet_getCombuf() { return this._combuf;}

AST_AdvAstFileGet.prototype.getCombuf = AST_AdvAstFileGet_getCombuf;

function AST_AdvAstFileGet_setCombuf(value) { this._combuf = value;}

AST_AdvAstFileGet.prototype.setCombuf = AST_AdvAstFileGet_setCombuf;
//
// accessor is AST_AdvAstFileGet.prototype.getFiles
// element get for files
// - element type is {urn:ast}FileArr
// - required element
//
// element set for files
// setter function is is AST_AdvAstFileGet.prototype.setFiles
//
function AST_AdvAstFileGet_getFiles() { return this._files;}

AST_AdvAstFileGet.prototype.getFiles = AST_AdvAstFileGet_getFiles;

function AST_AdvAstFileGet_setFiles(value) { this._files = value;}

AST_AdvAstFileGet.prototype.setFiles = AST_AdvAstFileGet_setFiles;
//
// Serialize {urn:ast}AdvAstFileGet
//
function AST_AdvAstFileGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._files.serialize(cxfjsutils, 'jns0:files', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AdvAstFileGet.prototype.serialize = AST_AdvAstFileGet_serialize;

function AST_AdvAstFileGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AdvAstFileGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing files');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_FileArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setFiles(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}Result
//
function AST_Result () {
    this.typeMarker = 'AST_Result';
    this._res = 0;
    this._resStr = null;
}

//
// accessor is AST_Result.prototype.getRes
// element get for res
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for res
// setter function is is AST_Result.prototype.setRes
//
function AST_Result_getRes() { return this._res;}

AST_Result.prototype.getRes = AST_Result_getRes;

function AST_Result_setRes(value) { this._res = value;}

AST_Result.prototype.setRes = AST_Result_setRes;
//
// accessor is AST_Result.prototype.getResStr
// element get for resStr
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for resStr
// setter function is is AST_Result.prototype.setResStr
//
function AST_Result_getResStr() { return this._resStr;}

AST_Result.prototype.getResStr = AST_Result_getResStr;

function AST_Result_setResStr(value) { this._resStr = value;}

AST_Result.prototype.setResStr = AST_Result_setResStr;
//
// Serialize {urn:ast}Result
//
function AST_Result_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:res>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._res);
     xml = xml + '</jns0:res>';
    }
    // block for local variables
    {
     if (this._resStr != null) {
      if (this._resStr == null) {
       xml = xml + '<jns0:resStr xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:resStr>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._resStr);
       xml = xml + '</jns0:resStr>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_Result.prototype.serialize = AST_Result_serialize;

function AST_Result_deserialize (cxfjsutils, element) {
    var newobject = new AST_Result();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing res');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setRes(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing resStr');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'resStr')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setResStr(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}UcpAlgCalllimitGet
//
function AST_UcpAlgCalllimitGet () {
    this.typeMarker = 'AST_UcpAlgCalllimitGet';
    this._combuf = null;
    this._limit = null;
    this._status = null;
}

//
// accessor is AST_UcpAlgCalllimitGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_UcpAlgCalllimitGet.prototype.setCombuf
//
function AST_UcpAlgCalllimitGet_getCombuf() { return this._combuf;}

AST_UcpAlgCalllimitGet.prototype.getCombuf = AST_UcpAlgCalllimitGet_getCombuf;

function AST_UcpAlgCalllimitGet_setCombuf(value) { this._combuf = value;}

AST_UcpAlgCalllimitGet.prototype.setCombuf = AST_UcpAlgCalllimitGet_setCombuf;
//
// accessor is AST_UcpAlgCalllimitGet.prototype.getLimit
// element get for limit
// - element type is {urn:ast}UcpAlgCalllimitArr
// - required element
//
// element set for limit
// setter function is is AST_UcpAlgCalllimitGet.prototype.setLimit
//
function AST_UcpAlgCalllimitGet_getLimit() { return this._limit;}

AST_UcpAlgCalllimitGet.prototype.getLimit = AST_UcpAlgCalllimitGet_getLimit;

function AST_UcpAlgCalllimitGet_setLimit(value) { this._limit = value;}

AST_UcpAlgCalllimitGet.prototype.setLimit = AST_UcpAlgCalllimitGet_setLimit;
//
// accessor is AST_UcpAlgCalllimitGet.prototype.getStatus
// element get for status
// - element type is {urn:ast}UcpAlgCalllimitStatusArr
// - required element
//
// element set for status
// setter function is is AST_UcpAlgCalllimitGet.prototype.setStatus
//
function AST_UcpAlgCalllimitGet_getStatus() { return this._status;}

AST_UcpAlgCalllimitGet.prototype.getStatus = AST_UcpAlgCalllimitGet_getStatus;

function AST_UcpAlgCalllimitGet_setStatus(value) { this._status = value;}

AST_UcpAlgCalllimitGet.prototype.setStatus = AST_UcpAlgCalllimitGet_setStatus;
//
// Serialize {urn:ast}UcpAlgCalllimitGet
//
function AST_UcpAlgCalllimitGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._limit.serialize(cxfjsutils, 'jns0:limit', null);
    }
    // block for local variables
    {
     xml = xml + this._status.serialize(cxfjsutils, 'jns0:status', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_UcpAlgCalllimitGet.prototype.serialize = AST_UcpAlgCalllimitGet_serialize;

function AST_UcpAlgCalllimitGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_UcpAlgCalllimitGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing limit');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_UcpAlgCalllimitArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setLimit(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing status');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_UcpAlgCalllimitStatusArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setStatus(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}IoSettingsOne
//
function AST_IoSettingsOne () {
    this.typeMarker = 'AST_IoSettingsOne';
    this._iomode1 = '';
    this._iomode2 = '';
    this._level = null;
    this._dirction = null;
}

//
// accessor is AST_IoSettingsOne.prototype.getIomode1
// element get for iomode1
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for iomode1
// setter function is is AST_IoSettingsOne.prototype.setIomode1
//
function AST_IoSettingsOne_getIomode1() { return this._iomode1;}

AST_IoSettingsOne.prototype.getIomode1 = AST_IoSettingsOne_getIomode1;

function AST_IoSettingsOne_setIomode1(value) { this._iomode1 = value;}

AST_IoSettingsOne.prototype.setIomode1 = AST_IoSettingsOne_setIomode1;
//
// accessor is AST_IoSettingsOne.prototype.getIomode2
// element get for iomode2
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for iomode2
// setter function is is AST_IoSettingsOne.prototype.setIomode2
//
function AST_IoSettingsOne_getIomode2() { return this._iomode2;}

AST_IoSettingsOne.prototype.getIomode2 = AST_IoSettingsOne_getIomode2;

function AST_IoSettingsOne_setIomode2(value) { this._iomode2 = value;}

AST_IoSettingsOne.prototype.setIomode2 = AST_IoSettingsOne_setIomode2;
//
// accessor is AST_IoSettingsOne.prototype.getLevel
// element get for level
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for level
// setter function is is AST_IoSettingsOne.prototype.setLevel
//
function AST_IoSettingsOne_getLevel() { return this._level;}

AST_IoSettingsOne.prototype.getLevel = AST_IoSettingsOne_getLevel;

function AST_IoSettingsOne_setLevel(value) { this._level = value;}

AST_IoSettingsOne.prototype.setLevel = AST_IoSettingsOne_setLevel;
//
// accessor is AST_IoSettingsOne.prototype.getDirction
// element get for dirction
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for dirction
// setter function is is AST_IoSettingsOne.prototype.setDirction
//
function AST_IoSettingsOne_getDirction() { return this._dirction;}

AST_IoSettingsOne.prototype.getDirction = AST_IoSettingsOne_getDirction;

function AST_IoSettingsOne_setDirction(value) { this._dirction = value;}

AST_IoSettingsOne.prototype.setDirction = AST_IoSettingsOne_setDirction;
//
// Serialize {urn:ast}IoSettingsOne
//
function AST_IoSettingsOne_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:iomode1>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._iomode1);
     xml = xml + '</jns0:iomode1>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:iomode2>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._iomode2);
     xml = xml + '</jns0:iomode2>';
    }
    // block for local variables
    {
     if (this._level == null) {
      xml = xml + '<jns0:level xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:level>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._level);
      xml = xml + '</jns0:level>';
     }
    }
    // block for local variables
    {
     if (this._dirction == null) {
      xml = xml + '<jns0:dirction xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:dirction>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._dirction);
      xml = xml + '</jns0:dirction>';
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_IoSettingsOne.prototype.serialize = AST_IoSettingsOne_serialize;

function AST_IoSettingsOne_deserialize (cxfjsutils, element) {
    var newobject = new AST_IoSettingsOne();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing iomode1');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setIomode1(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing iomode2');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setIomode2(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing level');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setLevel(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing dirction');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setDirction(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}jConGetAll
//
function AST_jConGetAll () {
    this.typeMarker = 'AST_jConGetAll';
    this._boards = null;
    this._combuf = null;
}

//
// accessor is AST_jConGetAll.prototype.getBoards
// element get for boards
// - element type is {urn:ast}jConsBoard
// - required element
//
// element set for boards
// setter function is is AST_jConGetAll.prototype.setBoards
//
function AST_jConGetAll_getBoards() { return this._boards;}

AST_jConGetAll.prototype.getBoards = AST_jConGetAll_getBoards;

function AST_jConGetAll_setBoards(value) { this._boards = value;}

AST_jConGetAll.prototype.setBoards = AST_jConGetAll_setBoards;
//
// accessor is AST_jConGetAll.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_jConGetAll.prototype.setCombuf
//
function AST_jConGetAll_getCombuf() { return this._combuf;}

AST_jConGetAll.prototype.getCombuf = AST_jConGetAll_getCombuf;

function AST_jConGetAll_setCombuf(value) { this._combuf = value;}

AST_jConGetAll.prototype.setCombuf = AST_jConGetAll_setCombuf;
//
// Serialize {urn:ast}jConGetAll
//
function AST_jConGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._boards.serialize(cxfjsutils, 'jns0:boards', null);
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_jConGetAll.prototype.serialize = AST_jConGetAll_serialize;

function AST_jConGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_jConGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing boards');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_jConsBoard_deserialize(cxfjsutils, curElement);
    }
    newobject.setBoards(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipGetArr
//
function AST_SipGetArr () {
    this.typeMarker = 'AST_SipGetArr';
    this._item = [];
}

//
// accessor is AST_SipGetArr.prototype.getItem
// element get for item
// - element type is {urn:ast}SipGet
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_SipGetArr.prototype.setItem
//
function AST_SipGetArr_getItem() { return this._item;}

AST_SipGetArr.prototype.getItem = AST_SipGetArr_getItem;

function AST_SipGetArr_setItem(value) { this._item = value;}

AST_SipGetArr.prototype.setItem = AST_SipGetArr_setItem;
//
// Serialize {urn:ast}SipGetArr
//
function AST_SipGetArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipGetArr.prototype.serialize = AST_SipGetArr_serialize;

function AST_SipGetArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipGetArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_SipGet_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AlgFunkyGet
//
function AST_AlgFunkyGet () {
    this.typeMarker = 'AST_AlgFunkyGet';
    this._combuf = null;
    this._funky = null;
}

//
// accessor is AST_AlgFunkyGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_AlgFunkyGet.prototype.setCombuf
//
function AST_AlgFunkyGet_getCombuf() { return this._combuf;}

AST_AlgFunkyGet.prototype.getCombuf = AST_AlgFunkyGet_getCombuf;

function AST_AlgFunkyGet_setCombuf(value) { this._combuf = value;}

AST_AlgFunkyGet.prototype.setCombuf = AST_AlgFunkyGet_setCombuf;
//
// accessor is AST_AlgFunkyGet.prototype.getFunky
// element get for funky
// - element type is {urn:ast}AlgFunky
// - required element
//
// element set for funky
// setter function is is AST_AlgFunkyGet.prototype.setFunky
//
function AST_AlgFunkyGet_getFunky() { return this._funky;}

AST_AlgFunkyGet.prototype.getFunky = AST_AlgFunkyGet_getFunky;

function AST_AlgFunkyGet_setFunky(value) { this._funky = value;}

AST_AlgFunkyGet.prototype.setFunky = AST_AlgFunkyGet_setFunky;
//
// Serialize {urn:ast}AlgFunkyGet
//
function AST_AlgFunkyGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._funky.serialize(cxfjsutils, 'jns0:funky', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AlgFunkyGet.prototype.serialize = AST_AlgFunkyGet_serialize;

function AST_AlgFunkyGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AlgFunkyGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing funky');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_AlgFunky_deserialize(cxfjsutils, curElement);
    }
    newobject.setFunky(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RoutingGroup
//
function AST_RoutingGroup () {
    this.typeMarker = 'AST_RoutingGroup';
    this._section = null;
    this._members = null;
    this._order = '';
    this._type = '';
    this._policy = '';
}

//
// accessor is AST_RoutingGroup.prototype.getSection
// element get for section
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for section
// setter function is is AST_RoutingGroup.prototype.setSection
//
function AST_RoutingGroup_getSection() { return this._section;}

AST_RoutingGroup.prototype.getSection = AST_RoutingGroup_getSection;

function AST_RoutingGroup_setSection(value) { this._section = value;}

AST_RoutingGroup.prototype.setSection = AST_RoutingGroup_setSection;
//
// accessor is AST_RoutingGroup.prototype.getMembers
// element get for members
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for members
// setter function is is AST_RoutingGroup.prototype.setMembers
//
function AST_RoutingGroup_getMembers() { return this._members;}

AST_RoutingGroup.prototype.getMembers = AST_RoutingGroup_getMembers;

function AST_RoutingGroup_setMembers(value) { this._members = value;}

AST_RoutingGroup.prototype.setMembers = AST_RoutingGroup_setMembers;
//
// accessor is AST_RoutingGroup.prototype.getOrder
// element get for order
// - element type is {http://www.w3.org/2001/XMLSchema}short
// - required element
//
// element set for order
// setter function is is AST_RoutingGroup.prototype.setOrder
//
function AST_RoutingGroup_getOrder() { return this._order;}

AST_RoutingGroup.prototype.getOrder = AST_RoutingGroup_getOrder;

function AST_RoutingGroup_setOrder(value) { this._order = value;}

AST_RoutingGroup.prototype.setOrder = AST_RoutingGroup_setOrder;
//
// accessor is AST_RoutingGroup.prototype.getType
// element get for type
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for type
// setter function is is AST_RoutingGroup.prototype.setType
//
function AST_RoutingGroup_getType() { return this._type;}

AST_RoutingGroup.prototype.getType = AST_RoutingGroup_getType;

function AST_RoutingGroup_setType(value) { this._type = value;}

AST_RoutingGroup.prototype.setType = AST_RoutingGroup_setType;
//
// accessor is AST_RoutingGroup.prototype.getPolicy
// element get for policy
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for policy
// setter function is is AST_RoutingGroup.prototype.setPolicy
//
function AST_RoutingGroup_getPolicy() { return this._policy;}

AST_RoutingGroup.prototype.getPolicy = AST_RoutingGroup_getPolicy;

function AST_RoutingGroup_setPolicy(value) { this._policy = value;}

AST_RoutingGroup.prototype.setPolicy = AST_RoutingGroup_setPolicy;
//
// Serialize {urn:ast}RoutingGroup
//
function AST_RoutingGroup_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._section == null) {
      xml = xml + '<jns0:section xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:section>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._section);
      xml = xml + '</jns0:section>';
     }
    }
    // block for local variables
    {
     if (this._members != null) {
      if (this._members == null) {
       xml = xml + '<jns0:members xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:members>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._members);
       xml = xml + '</jns0:members>';
      }
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:order>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._order);
     xml = xml + '</jns0:order>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:type>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._type);
     xml = xml + '</jns0:type>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:policy>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._policy);
     xml = xml + '</jns0:policy>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RoutingGroup.prototype.serialize = AST_RoutingGroup_serialize;

function AST_RoutingGroup_deserialize (cxfjsutils, element) {
    var newobject = new AST_RoutingGroup();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing section');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSection(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing members');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'members')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setMembers(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing order');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setOrder(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing type');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setType(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing policy');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setPolicy(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}Ana
//
function AST_Ana () {
    this.typeMarker = 'AST_Ana';
    this._channel = 0;
    this._name = null;
    this._cidnumber = null;
    this._associatedchnnl = null;
    this._signalling = '';
}

//
// accessor is AST_Ana.prototype.getChannel
// element get for channel
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for channel
// setter function is is AST_Ana.prototype.setChannel
//
function AST_Ana_getChannel() { return this._channel;}

AST_Ana.prototype.getChannel = AST_Ana_getChannel;

function AST_Ana_setChannel(value) { this._channel = value;}

AST_Ana.prototype.setChannel = AST_Ana_setChannel;
//
// accessor is AST_Ana.prototype.getName
// element get for name
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for name
// setter function is is AST_Ana.prototype.setName
//
function AST_Ana_getName() { return this._name;}

AST_Ana.prototype.getName = AST_Ana_getName;

function AST_Ana_setName(value) { this._name = value;}

AST_Ana.prototype.setName = AST_Ana_setName;
//
// accessor is AST_Ana.prototype.getCidnumber
// element get for cidnumber
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for cidnumber
// setter function is is AST_Ana.prototype.setCidnumber
//
function AST_Ana_getCidnumber() { return this._cidnumber;}

AST_Ana.prototype.getCidnumber = AST_Ana_getCidnumber;

function AST_Ana_setCidnumber(value) { this._cidnumber = value;}

AST_Ana.prototype.setCidnumber = AST_Ana_setCidnumber;
//
// accessor is AST_Ana.prototype.getAssociatedchnnl
// element get for associatedchnnl
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for associatedchnnl
// setter function is is AST_Ana.prototype.setAssociatedchnnl
//
function AST_Ana_getAssociatedchnnl() { return this._associatedchnnl;}

AST_Ana.prototype.getAssociatedchnnl = AST_Ana_getAssociatedchnnl;

function AST_Ana_setAssociatedchnnl(value) { this._associatedchnnl = value;}

AST_Ana.prototype.setAssociatedchnnl = AST_Ana_setAssociatedchnnl;
//
// accessor is AST_Ana.prototype.getSignalling
// element get for signalling
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for signalling
// setter function is is AST_Ana.prototype.setSignalling
//
function AST_Ana_getSignalling() { return this._signalling;}

AST_Ana.prototype.getSignalling = AST_Ana_getSignalling;

function AST_Ana_setSignalling(value) { this._signalling = value;}

AST_Ana.prototype.setSignalling = AST_Ana_setSignalling;
//
// Serialize {urn:ast}Ana
//
function AST_Ana_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:channel>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._channel);
     xml = xml + '</jns0:channel>';
    }
    // block for local variables
    {
     if (this._name == null) {
      xml = xml + '<jns0:name xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:name>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._name);
      xml = xml + '</jns0:name>';
     }
    }
    // block for local variables
    {
     if (this._cidnumber == null) {
      xml = xml + '<jns0:cidnumber xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:cidnumber>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._cidnumber);
      xml = xml + '</jns0:cidnumber>';
     }
    }
    // block for local variables
    {
     if (this._associatedchnnl == null) {
      xml = xml + '<jns0:associatedchnnl xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:associatedchnnl>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._associatedchnnl);
      xml = xml + '</jns0:associatedchnnl>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:signalling>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._signalling);
     xml = xml + '</jns0:signalling>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_Ana.prototype.serialize = AST_Ana_serialize;

function AST_Ana_deserialize (cxfjsutils, element) {
    var newobject = new AST_Ana();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing channel');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setChannel(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing name');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setName(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing cidnumber');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setCidnumber(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing associatedchnnl');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setAssociatedchnnl(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing signalling');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSignalling(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipGetOne
//
function AST_SipGetOne () {
    this.typeMarker = 'AST_SipGetOne';
    this._combuf = null;
    this._context = null;
    this._siparr = null;
}

//
// accessor is AST_SipGetOne.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_SipGetOne.prototype.setCombuf
//
function AST_SipGetOne_getCombuf() { return this._combuf;}

AST_SipGetOne.prototype.getCombuf = AST_SipGetOne_getCombuf;

function AST_SipGetOne_setCombuf(value) { this._combuf = value;}

AST_SipGetOne.prototype.setCombuf = AST_SipGetOne_setCombuf;
//
// accessor is AST_SipGetOne.prototype.getContext
// element get for context
// - element type is {urn:ast}SipContext
// - required element
//
// element set for context
// setter function is is AST_SipGetOne.prototype.setContext
//
function AST_SipGetOne_getContext() { return this._context;}

AST_SipGetOne.prototype.getContext = AST_SipGetOne_getContext;

function AST_SipGetOne_setContext(value) { this._context = value;}

AST_SipGetOne.prototype.setContext = AST_SipGetOne_setContext;
//
// accessor is AST_SipGetOne.prototype.getSiparr
// element get for siparr
// - element type is {urn:ast}SipOneArr
// - required element
//
// element set for siparr
// setter function is is AST_SipGetOne.prototype.setSiparr
//
function AST_SipGetOne_getSiparr() { return this._siparr;}

AST_SipGetOne.prototype.getSiparr = AST_SipGetOne_getSiparr;

function AST_SipGetOne_setSiparr(value) { this._siparr = value;}

AST_SipGetOne.prototype.setSiparr = AST_SipGetOne_setSiparr;
//
// Serialize {urn:ast}SipGetOne
//
function AST_SipGetOne_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._context.serialize(cxfjsutils, 'jns0:context', null);
    }
    // block for local variables
    {
     xml = xml + this._siparr.serialize(cxfjsutils, 'jns0:siparr', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipGetOne.prototype.serialize = AST_SipGetOne_serialize;

function AST_SipGetOne_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipGetOne();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing context');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SipContext_deserialize(cxfjsutils, curElement);
    }
    newobject.setContext(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing siparr');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SipOneArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setSiparr(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}File
//
function AST_File () {
    this.typeMarker = 'AST_File';
    this._filesize = 0;
    this._filename = null;
}

//
// accessor is AST_File.prototype.getFilesize
// element get for filesize
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for filesize
// setter function is is AST_File.prototype.setFilesize
//
function AST_File_getFilesize() { return this._filesize;}

AST_File.prototype.getFilesize = AST_File_getFilesize;

function AST_File_setFilesize(value) { this._filesize = value;}

AST_File.prototype.setFilesize = AST_File_setFilesize;
//
// accessor is AST_File.prototype.getFilename
// element get for filename
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for filename
// setter function is is AST_File.prototype.setFilename
//
function AST_File_getFilename() { return this._filename;}

AST_File.prototype.getFilename = AST_File_getFilename;

function AST_File_setFilename(value) { this._filename = value;}

AST_File.prototype.setFilename = AST_File_setFilename;
//
// Serialize {urn:ast}File
//
function AST_File_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:filesize>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._filesize);
     xml = xml + '</jns0:filesize>';
    }
    // block for local variables
    {
     if (this._filename == null) {
      xml = xml + '<jns0:filename xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:filename>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._filename);
      xml = xml + '</jns0:filename>';
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_File.prototype.serialize = AST_File_serialize;

function AST_File_deserialize (cxfjsutils, element) {
    var newobject = new AST_File();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing filesize');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setFilesize(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing filename');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setFilename(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SnmpCommunity
//
function AST_SnmpCommunity () {
    this.typeMarker = 'AST_SnmpCommunity';
    this._name = null;
    this._souce = null;
    this._community = null;
}

//
// accessor is AST_SnmpCommunity.prototype.getName
// element get for name
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for name
// setter function is is AST_SnmpCommunity.prototype.setName
//
function AST_SnmpCommunity_getName() { return this._name;}

AST_SnmpCommunity.prototype.getName = AST_SnmpCommunity_getName;

function AST_SnmpCommunity_setName(value) { this._name = value;}

AST_SnmpCommunity.prototype.setName = AST_SnmpCommunity_setName;
//
// accessor is AST_SnmpCommunity.prototype.getSouce
// element get for souce
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for souce
// setter function is is AST_SnmpCommunity.prototype.setSouce
//
function AST_SnmpCommunity_getSouce() { return this._souce;}

AST_SnmpCommunity.prototype.getSouce = AST_SnmpCommunity_getSouce;

function AST_SnmpCommunity_setSouce(value) { this._souce = value;}

AST_SnmpCommunity.prototype.setSouce = AST_SnmpCommunity_setSouce;
//
// accessor is AST_SnmpCommunity.prototype.getCommunity
// element get for community
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for community
// setter function is is AST_SnmpCommunity.prototype.setCommunity
//
function AST_SnmpCommunity_getCommunity() { return this._community;}

AST_SnmpCommunity.prototype.getCommunity = AST_SnmpCommunity_getCommunity;

function AST_SnmpCommunity_setCommunity(value) { this._community = value;}

AST_SnmpCommunity.prototype.setCommunity = AST_SnmpCommunity_setCommunity;
//
// Serialize {urn:ast}SnmpCommunity
//
function AST_SnmpCommunity_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._name == null) {
      xml = xml + '<jns0:name xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:name>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._name);
      xml = xml + '</jns0:name>';
     }
    }
    // block for local variables
    {
     if (this._souce == null) {
      xml = xml + '<jns0:souce xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:souce>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._souce);
      xml = xml + '</jns0:souce>';
     }
    }
    // block for local variables
    {
     if (this._community == null) {
      xml = xml + '<jns0:community xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:community>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._community);
      xml = xml + '</jns0:community>';
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SnmpCommunity.prototype.serialize = AST_SnmpCommunity_serialize;

function AST_SnmpCommunity_deserialize (cxfjsutils, element) {
    var newobject = new AST_SnmpCommunity();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing name');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setName(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing souce');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSouce(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing community');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setCommunity(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipGet
//
function AST_SipGet () {
    this.typeMarker = 'AST_SipGet';
    this._section = null;
    this._username = null;
}

//
// accessor is AST_SipGet.prototype.getSection
// element get for section
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for section
// setter function is is AST_SipGet.prototype.setSection
//
function AST_SipGet_getSection() { return this._section;}

AST_SipGet.prototype.getSection = AST_SipGet_getSection;

function AST_SipGet_setSection(value) { this._section = value;}

AST_SipGet.prototype.setSection = AST_SipGet_setSection;
//
// accessor is AST_SipGet.prototype.getUsername
// element get for username
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for username
// setter function is is AST_SipGet.prototype.setUsername
//
function AST_SipGet_getUsername() { return this._username;}

AST_SipGet.prototype.getUsername = AST_SipGet_getUsername;

function AST_SipGet_setUsername(value) { this._username = value;}

AST_SipGet.prototype.setUsername = AST_SipGet_setUsername;
//
// Serialize {urn:ast}SipGet
//
function AST_SipGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._section == null) {
      xml = xml + '<jns0:section xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:section>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._section);
      xml = xml + '</jns0:section>';
     }
    }
    // block for local variables
    {
     if (this._username == null) {
      xml = xml + '<jns0:username xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:username>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._username);
      xml = xml + '</jns0:username>';
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipGet.prototype.serialize = AST_SipGet_serialize;

function AST_SipGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing section');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSection(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing username');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setUsername(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}TagGet
//
function AST_TagGet () {
    this.typeMarker = 'AST_TagGet';
    this._combuf = null;
    this._tags = null;
    this._nums = 0;
    this._commitsw = 0;
}

//
// accessor is AST_TagGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_TagGet.prototype.setCombuf
//
function AST_TagGet_getCombuf() { return this._combuf;}

AST_TagGet.prototype.getCombuf = AST_TagGet_getCombuf;

function AST_TagGet_setCombuf(value) { this._combuf = value;}

AST_TagGet.prototype.setCombuf = AST_TagGet_setCombuf;
//
// accessor is AST_TagGet.prototype.getTags
// element get for tags
// - element type is {urn:ast}SectionArr
// - required element
//
// element set for tags
// setter function is is AST_TagGet.prototype.setTags
//
function AST_TagGet_getTags() { return this._tags;}

AST_TagGet.prototype.getTags = AST_TagGet_getTags;

function AST_TagGet_setTags(value) { this._tags = value;}

AST_TagGet.prototype.setTags = AST_TagGet_setTags;
//
// accessor is AST_TagGet.prototype.getNums
// element get for nums
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for nums
// setter function is is AST_TagGet.prototype.setNums
//
function AST_TagGet_getNums() { return this._nums;}

AST_TagGet.prototype.getNums = AST_TagGet_getNums;

function AST_TagGet_setNums(value) { this._nums = value;}

AST_TagGet.prototype.setNums = AST_TagGet_setNums;
//
// accessor is AST_TagGet.prototype.getCommitsw
// element get for commitsw
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for commitsw
// setter function is is AST_TagGet.prototype.setCommitsw
//
function AST_TagGet_getCommitsw() { return this._commitsw;}

AST_TagGet.prototype.getCommitsw = AST_TagGet_getCommitsw;

function AST_TagGet_setCommitsw(value) { this._commitsw = value;}

AST_TagGet.prototype.setCommitsw = AST_TagGet_setCommitsw;
//
// Serialize {urn:ast}TagGet
//
function AST_TagGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._tags.serialize(cxfjsutils, 'jns0:tags', null);
    }
    // block for local variables
    {
     xml = xml + '<jns0:nums>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._nums);
     xml = xml + '</jns0:nums>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:commitsw>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._commitsw);
     xml = xml + '</jns0:commitsw>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_TagGet.prototype.serialize = AST_TagGet_serialize;

function AST_TagGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_TagGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing tags');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SectionArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setTags(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing nums');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setNums(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing commitsw');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setCommitsw(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}NetworkWan
//
function AST_NetworkWan () {
    this.typeMarker = 'AST_NetworkWan';
    this._mac = null;
    this._ipaddr = null;
    this._netmask = null;
    this._gateway = null;
    this._portname = null;
    this._type = '';
}

//
// accessor is AST_NetworkWan.prototype.getMac
// element get for mac
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for mac
// setter function is is AST_NetworkWan.prototype.setMac
//
function AST_NetworkWan_getMac() { return this._mac;}

AST_NetworkWan.prototype.getMac = AST_NetworkWan_getMac;

function AST_NetworkWan_setMac(value) { this._mac = value;}

AST_NetworkWan.prototype.setMac = AST_NetworkWan_setMac;
//
// accessor is AST_NetworkWan.prototype.getIpaddr
// element get for ipaddr
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for ipaddr
// setter function is is AST_NetworkWan.prototype.setIpaddr
//
function AST_NetworkWan_getIpaddr() { return this._ipaddr;}

AST_NetworkWan.prototype.getIpaddr = AST_NetworkWan_getIpaddr;

function AST_NetworkWan_setIpaddr(value) { this._ipaddr = value;}

AST_NetworkWan.prototype.setIpaddr = AST_NetworkWan_setIpaddr;
//
// accessor is AST_NetworkWan.prototype.getNetmask
// element get for netmask
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for netmask
// setter function is is AST_NetworkWan.prototype.setNetmask
//
function AST_NetworkWan_getNetmask() { return this._netmask;}

AST_NetworkWan.prototype.getNetmask = AST_NetworkWan_getNetmask;

function AST_NetworkWan_setNetmask(value) { this._netmask = value;}

AST_NetworkWan.prototype.setNetmask = AST_NetworkWan_setNetmask;
//
// accessor is AST_NetworkWan.prototype.getGateway
// element get for gateway
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for gateway
// setter function is is AST_NetworkWan.prototype.setGateway
//
function AST_NetworkWan_getGateway() { return this._gateway;}

AST_NetworkWan.prototype.getGateway = AST_NetworkWan_getGateway;

function AST_NetworkWan_setGateway(value) { this._gateway = value;}

AST_NetworkWan.prototype.setGateway = AST_NetworkWan_setGateway;
//
// accessor is AST_NetworkWan.prototype.getPortname
// element get for portname
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for portname
// setter function is is AST_NetworkWan.prototype.setPortname
//
function AST_NetworkWan_getPortname() { return this._portname;}

AST_NetworkWan.prototype.getPortname = AST_NetworkWan_getPortname;

function AST_NetworkWan_setPortname(value) { this._portname = value;}

AST_NetworkWan.prototype.setPortname = AST_NetworkWan_setPortname;
//
// accessor is AST_NetworkWan.prototype.getType
// element get for type
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for type
// setter function is is AST_NetworkWan.prototype.setType
//
function AST_NetworkWan_getType() { return this._type;}

AST_NetworkWan.prototype.getType = AST_NetworkWan_getType;

function AST_NetworkWan_setType(value) { this._type = value;}

AST_NetworkWan.prototype.setType = AST_NetworkWan_setType;
//
// Serialize {urn:ast}NetworkWan
//
function AST_NetworkWan_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._mac == null) {
      xml = xml + '<jns0:mac xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:mac>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._mac);
      xml = xml + '</jns0:mac>';
     }
    }
    // block for local variables
    {
     if (this._ipaddr == null) {
      xml = xml + '<jns0:ipaddr xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:ipaddr>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._ipaddr);
      xml = xml + '</jns0:ipaddr>';
     }
    }
    // block for local variables
    {
     if (this._netmask == null) {
      xml = xml + '<jns0:netmask xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:netmask>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._netmask);
      xml = xml + '</jns0:netmask>';
     }
    }
    // block for local variables
    {
     if (this._gateway == null) {
      xml = xml + '<jns0:gateway xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:gateway>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._gateway);
      xml = xml + '</jns0:gateway>';
     }
    }
    // block for local variables
    {
     if (this._portname == null) {
      xml = xml + '<jns0:portname xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:portname>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._portname);
      xml = xml + '</jns0:portname>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:type>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._type);
     xml = xml + '</jns0:type>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_NetworkWan.prototype.serialize = AST_NetworkWan_serialize;

function AST_NetworkWan_deserialize (cxfjsutils, element) {
    var newobject = new AST_NetworkWan();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing mac');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setMac(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ipaddr');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setIpaddr(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing netmask');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setNetmask(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing gateway');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setGateway(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing portname');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setPortname(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing type');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setType(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}Channel
//
function AST_Channel () {
    this.typeMarker = 'AST_Channel';
    this._channel = 0;
}

//
// accessor is AST_Channel.prototype.getChannel
// element get for channel
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for channel
// setter function is is AST_Channel.prototype.setChannel
//
function AST_Channel_getChannel() { return this._channel;}

AST_Channel.prototype.getChannel = AST_Channel_getChannel;

function AST_Channel_setChannel(value) { this._channel = value;}

AST_Channel.prototype.setChannel = AST_Channel_setChannel;
//
// Serialize {urn:ast}Channel
//
function AST_Channel_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:channel>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._channel);
     xml = xml + '</jns0:channel>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_Channel.prototype.serialize = AST_Channel_serialize;

function AST_Channel_deserialize (cxfjsutils, element) {
    var newobject = new AST_Channel();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing channel');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setChannel(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}keyboards
//
function AST_keyboards () {
    this.typeMarker = 'AST_keyboards';
    this._key = null;
}

//
// accessor is AST_keyboards.prototype.getKey
// element get for key
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for key
// setter function is is AST_keyboards.prototype.setKey
//
function AST_keyboards_getKey() { return this._key;}

AST_keyboards.prototype.getKey = AST_keyboards_getKey;

function AST_keyboards_setKey(value) { this._key = value;}

AST_keyboards.prototype.setKey = AST_keyboards_setKey;
//
// Serialize {urn:ast}keyboards
//
function AST_keyboards_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._key == null) {
      xml = xml + '<jns0:key xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:key>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._key);
      xml = xml + '</jns0:key>';
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_keyboards.prototype.serialize = AST_keyboards_serialize;

function AST_keyboards_deserialize (cxfjsutils, element) {
    var newobject = new AST_keyboards();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing key');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setKey(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipGen
//
function AST_SipGen () {
    this.typeMarker = 'AST_SipGen';
    this._tlsbindport = 0;
    this._tlsenable = '';
    this._tlsdontverifyserver = '';
    this._tlsclientmethod = '';
}

//
// accessor is AST_SipGen.prototype.getTlsbindport
// element get for tlsbindport
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for tlsbindport
// setter function is is AST_SipGen.prototype.setTlsbindport
//
function AST_SipGen_getTlsbindport() { return this._tlsbindport;}

AST_SipGen.prototype.getTlsbindport = AST_SipGen_getTlsbindport;

function AST_SipGen_setTlsbindport(value) { this._tlsbindport = value;}

AST_SipGen.prototype.setTlsbindport = AST_SipGen_setTlsbindport;
//
// accessor is AST_SipGen.prototype.getTlsenable
// element get for tlsenable
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for tlsenable
// setter function is is AST_SipGen.prototype.setTlsenable
//
function AST_SipGen_getTlsenable() { return this._tlsenable;}

AST_SipGen.prototype.getTlsenable = AST_SipGen_getTlsenable;

function AST_SipGen_setTlsenable(value) { this._tlsenable = value;}

AST_SipGen.prototype.setTlsenable = AST_SipGen_setTlsenable;
//
// accessor is AST_SipGen.prototype.getTlsdontverifyserver
// element get for tlsdontverifyserver
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for tlsdontverifyserver
// setter function is is AST_SipGen.prototype.setTlsdontverifyserver
//
function AST_SipGen_getTlsdontverifyserver() { return this._tlsdontverifyserver;}

AST_SipGen.prototype.getTlsdontverifyserver = AST_SipGen_getTlsdontverifyserver;

function AST_SipGen_setTlsdontverifyserver(value) { this._tlsdontverifyserver = value;}

AST_SipGen.prototype.setTlsdontverifyserver = AST_SipGen_setTlsdontverifyserver;
//
// accessor is AST_SipGen.prototype.getTlsclientmethod
// element get for tlsclientmethod
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for tlsclientmethod
// setter function is is AST_SipGen.prototype.setTlsclientmethod
//
function AST_SipGen_getTlsclientmethod() { return this._tlsclientmethod;}

AST_SipGen.prototype.getTlsclientmethod = AST_SipGen_getTlsclientmethod;

function AST_SipGen_setTlsclientmethod(value) { this._tlsclientmethod = value;}

AST_SipGen.prototype.setTlsclientmethod = AST_SipGen_setTlsclientmethod;
//
// Serialize {urn:ast}SipGen
//
function AST_SipGen_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:tlsbindport>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._tlsbindport);
     xml = xml + '</jns0:tlsbindport>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:tlsenable>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._tlsenable);
     xml = xml + '</jns0:tlsenable>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:tlsdontverifyserver>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._tlsdontverifyserver);
     xml = xml + '</jns0:tlsdontverifyserver>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:tlsclientmethod>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._tlsclientmethod);
     xml = xml + '</jns0:tlsclientmethod>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipGen.prototype.serialize = AST_SipGen_serialize;

function AST_SipGen_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipGen();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing tlsbindport');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setTlsbindport(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing tlsenable');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setTlsenable(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing tlsdontverifyserver');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setTlsdontverifyserver(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing tlsclientmethod');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setTlsclientmethod(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RoutingRulesGetAll
//
function AST_RoutingRulesGetAll () {
    this.typeMarker = 'AST_RoutingRulesGetAll';
    this._combuf = null;
    this._ruls = null;
}

//
// accessor is AST_RoutingRulesGetAll.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_RoutingRulesGetAll.prototype.setCombuf
//
function AST_RoutingRulesGetAll_getCombuf() { return this._combuf;}

AST_RoutingRulesGetAll.prototype.getCombuf = AST_RoutingRulesGetAll_getCombuf;

function AST_RoutingRulesGetAll_setCombuf(value) { this._combuf = value;}

AST_RoutingRulesGetAll.prototype.setCombuf = AST_RoutingRulesGetAll_setCombuf;
//
// accessor is AST_RoutingRulesGetAll.prototype.getRuls
// element get for ruls
// - element type is {urn:ast}RoutingRulesArr
// - required element
//
// element set for ruls
// setter function is is AST_RoutingRulesGetAll.prototype.setRuls
//
function AST_RoutingRulesGetAll_getRuls() { return this._ruls;}

AST_RoutingRulesGetAll.prototype.getRuls = AST_RoutingRulesGetAll_getRuls;

function AST_RoutingRulesGetAll_setRuls(value) { this._ruls = value;}

AST_RoutingRulesGetAll.prototype.setRuls = AST_RoutingRulesGetAll_setRuls;
//
// Serialize {urn:ast}RoutingRulesGetAll
//
function AST_RoutingRulesGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._ruls.serialize(cxfjsutils, 'jns0:ruls', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RoutingRulesGetAll.prototype.serialize = AST_RoutingRulesGetAll_serialize;

function AST_RoutingRulesGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_RoutingRulesGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ruls');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_RoutingRulesArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setRuls(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}UcpAlgFxoparamGetAll
//
function AST_UcpAlgFxoparamGetAll () {
    this.typeMarker = 'AST_UcpAlgFxoparamGetAll';
    this._combuf = null;
    this._fxo = null;
}

//
// accessor is AST_UcpAlgFxoparamGetAll.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_UcpAlgFxoparamGetAll.prototype.setCombuf
//
function AST_UcpAlgFxoparamGetAll_getCombuf() { return this._combuf;}

AST_UcpAlgFxoparamGetAll.prototype.getCombuf = AST_UcpAlgFxoparamGetAll_getCombuf;

function AST_UcpAlgFxoparamGetAll_setCombuf(value) { this._combuf = value;}

AST_UcpAlgFxoparamGetAll.prototype.setCombuf = AST_UcpAlgFxoparamGetAll_setCombuf;
//
// accessor is AST_UcpAlgFxoparamGetAll.prototype.getFxo
// element get for fxo
// - element type is {urn:ast}UcpAlgFxoparam
// - required element
//
// element set for fxo
// setter function is is AST_UcpAlgFxoparamGetAll.prototype.setFxo
//
function AST_UcpAlgFxoparamGetAll_getFxo() { return this._fxo;}

AST_UcpAlgFxoparamGetAll.prototype.getFxo = AST_UcpAlgFxoparamGetAll_getFxo;

function AST_UcpAlgFxoparamGetAll_setFxo(value) { this._fxo = value;}

AST_UcpAlgFxoparamGetAll.prototype.setFxo = AST_UcpAlgFxoparamGetAll_setFxo;
//
// Serialize {urn:ast}UcpAlgFxoparamGetAll
//
function AST_UcpAlgFxoparamGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._fxo.serialize(cxfjsutils, 'jns0:fxo', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_UcpAlgFxoparamGetAll.prototype.serialize = AST_UcpAlgFxoparamGetAll_serialize;

function AST_UcpAlgFxoparamGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_UcpAlgFxoparamGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fxo');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_UcpAlgFxoparam_deserialize(cxfjsutils, curElement);
    }
    newobject.setFxo(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipSecSave
//
function AST_SipSecSave () {
    this.typeMarker = 'AST_SipSecSave';
    this._sipgen = null;
}

//
// accessor is AST_SipSecSave.prototype.getSipgen
// element get for sipgen
// - element type is {urn:ast}SipGen
// - required element
//
// element set for sipgen
// setter function is is AST_SipSecSave.prototype.setSipgen
//
function AST_SipSecSave_getSipgen() { return this._sipgen;}

AST_SipSecSave.prototype.getSipgen = AST_SipSecSave_getSipgen;

function AST_SipSecSave_setSipgen(value) { this._sipgen = value;}

AST_SipSecSave.prototype.setSipgen = AST_SipSecSave_setSipgen;
//
// Serialize {urn:ast}SipSecSave
//
function AST_SipSecSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._sipgen.serialize(cxfjsutils, 'jns0:sipgen', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipSecSave.prototype.serialize = AST_SipSecSave_serialize;

function AST_SipSecSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipSecSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sipgen');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SipGen_deserialize(cxfjsutils, curElement);
    }
    newobject.setSipgen(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SysLoginSsh
//
function AST_SysLoginSsh () {
    this.typeMarker = 'AST_SysLoginSsh';
    this._user = null;
    this._password = null;
    this._sw = '';
}

//
// accessor is AST_SysLoginSsh.prototype.getUser
// element get for user
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for user
// setter function is is AST_SysLoginSsh.prototype.setUser
//
function AST_SysLoginSsh_getUser() { return this._user;}

AST_SysLoginSsh.prototype.getUser = AST_SysLoginSsh_getUser;

function AST_SysLoginSsh_setUser(value) { this._user = value;}

AST_SysLoginSsh.prototype.setUser = AST_SysLoginSsh_setUser;
//
// accessor is AST_SysLoginSsh.prototype.getPassword
// element get for password
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for password
// setter function is is AST_SysLoginSsh.prototype.setPassword
//
function AST_SysLoginSsh_getPassword() { return this._password;}

AST_SysLoginSsh.prototype.getPassword = AST_SysLoginSsh_getPassword;

function AST_SysLoginSsh_setPassword(value) { this._password = value;}

AST_SysLoginSsh.prototype.setPassword = AST_SysLoginSsh_setPassword;
//
// accessor is AST_SysLoginSsh.prototype.getSw
// element get for sw
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for sw
// setter function is is AST_SysLoginSsh.prototype.setSw
//
function AST_SysLoginSsh_getSw() { return this._sw;}

AST_SysLoginSsh.prototype.getSw = AST_SysLoginSsh_getSw;

function AST_SysLoginSsh_setSw(value) { this._sw = value;}

AST_SysLoginSsh.prototype.setSw = AST_SysLoginSsh_setSw;
//
// Serialize {urn:ast}SysLoginSsh
//
function AST_SysLoginSsh_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._user == null) {
      xml = xml + '<jns0:user xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:user>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._user);
      xml = xml + '</jns0:user>';
     }
    }
    // block for local variables
    {
     if (this._password == null) {
      xml = xml + '<jns0:password xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:password>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._password);
      xml = xml + '</jns0:password>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:sw>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._sw);
     xml = xml + '</jns0:sw>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SysLoginSsh.prototype.serialize = AST_SysLoginSsh_serialize;

function AST_SysLoginSsh_deserialize (cxfjsutils, element) {
    var newobject = new AST_SysLoginSsh();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing user');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setUser(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing password');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setPassword(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sw');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSw(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AutoCallChn
//
function AST_AutoCallChn () {
    this.typeMarker = 'AST_AutoCallChn';
    this._channel = 0;
    this._name = null;
    this._signalling = '';
}

//
// accessor is AST_AutoCallChn.prototype.getChannel
// element get for channel
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for channel
// setter function is is AST_AutoCallChn.prototype.setChannel
//
function AST_AutoCallChn_getChannel() { return this._channel;}

AST_AutoCallChn.prototype.getChannel = AST_AutoCallChn_getChannel;

function AST_AutoCallChn_setChannel(value) { this._channel = value;}

AST_AutoCallChn.prototype.setChannel = AST_AutoCallChn_setChannel;
//
// accessor is AST_AutoCallChn.prototype.getName
// element get for name
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for name
// setter function is is AST_AutoCallChn.prototype.setName
//
function AST_AutoCallChn_getName() { return this._name;}

AST_AutoCallChn.prototype.getName = AST_AutoCallChn_getName;

function AST_AutoCallChn_setName(value) { this._name = value;}

AST_AutoCallChn.prototype.setName = AST_AutoCallChn_setName;
//
// accessor is AST_AutoCallChn.prototype.getSignalling
// element get for signalling
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for signalling
// setter function is is AST_AutoCallChn.prototype.setSignalling
//
function AST_AutoCallChn_getSignalling() { return this._signalling;}

AST_AutoCallChn.prototype.getSignalling = AST_AutoCallChn_getSignalling;

function AST_AutoCallChn_setSignalling(value) { this._signalling = value;}

AST_AutoCallChn.prototype.setSignalling = AST_AutoCallChn_setSignalling;
//
// Serialize {urn:ast}AutoCallChn
//
function AST_AutoCallChn_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:channel>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._channel);
     xml = xml + '</jns0:channel>';
    }
    // block for local variables
    {
     if (this._name == null) {
      xml = xml + '<jns0:name xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:name>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._name);
      xml = xml + '</jns0:name>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:signalling>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._signalling);
     xml = xml + '</jns0:signalling>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AutoCallChn.prototype.serialize = AST_AutoCallChn_serialize;

function AST_AutoCallChn_deserialize (cxfjsutils, element) {
    var newobject = new AST_AutoCallChn();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing channel');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setChannel(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing name');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setName(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing signalling');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSignalling(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}LogGwContext
//
function AST_LogGwContext () {
    this.typeMarker = 'AST_LogGwContext';
    this._section = null;
    this._rswitch = '';
}

//
// accessor is AST_LogGwContext.prototype.getSection
// element get for section
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for section
// setter function is is AST_LogGwContext.prototype.setSection
//
function AST_LogGwContext_getSection() { return this._section;}

AST_LogGwContext.prototype.getSection = AST_LogGwContext_getSection;

function AST_LogGwContext_setSection(value) { this._section = value;}

AST_LogGwContext.prototype.setSection = AST_LogGwContext_setSection;
//
// accessor is AST_LogGwContext.prototype.getRswitch
// element get for rswitch
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for rswitch
// setter function is is AST_LogGwContext.prototype.setRswitch
//
function AST_LogGwContext_getRswitch() { return this._rswitch;}

AST_LogGwContext.prototype.getRswitch = AST_LogGwContext_getRswitch;

function AST_LogGwContext_setRswitch(value) { this._rswitch = value;}

AST_LogGwContext.prototype.setRswitch = AST_LogGwContext_setRswitch;
//
// Serialize {urn:ast}LogGwContext
//
function AST_LogGwContext_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._section == null) {
      xml = xml + '<jns0:section xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:section>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._section);
      xml = xml + '</jns0:section>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:rswitch>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._rswitch);
     xml = xml + '</jns0:rswitch>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_LogGwContext.prototype.serialize = AST_LogGwContext_serialize;

function AST_LogGwContext_deserialize (cxfjsutils, element) {
    var newobject = new AST_LogGwContext();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing section');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSection(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing rswitch');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setRswitch(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}Anainfo
//
function AST_Anainfo () {
    this.typeMarker = 'AST_Anainfo';
    this._channel = 0;
    this._name = null;
    this._line = null;
    this._callerid = null;
    this._status = null;
    this._signalling = '';
}

//
// accessor is AST_Anainfo.prototype.getChannel
// element get for channel
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for channel
// setter function is is AST_Anainfo.prototype.setChannel
//
function AST_Anainfo_getChannel() { return this._channel;}

AST_Anainfo.prototype.getChannel = AST_Anainfo_getChannel;

function AST_Anainfo_setChannel(value) { this._channel = value;}

AST_Anainfo.prototype.setChannel = AST_Anainfo_setChannel;
//
// accessor is AST_Anainfo.prototype.getName
// element get for name
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for name
// setter function is is AST_Anainfo.prototype.setName
//
function AST_Anainfo_getName() { return this._name;}

AST_Anainfo.prototype.getName = AST_Anainfo_getName;

function AST_Anainfo_setName(value) { this._name = value;}

AST_Anainfo.prototype.setName = AST_Anainfo_setName;
//
// accessor is AST_Anainfo.prototype.getLine
// element get for line
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for line
// setter function is is AST_Anainfo.prototype.setLine
//
function AST_Anainfo_getLine() { return this._line;}

AST_Anainfo.prototype.getLine = AST_Anainfo_getLine;

function AST_Anainfo_setLine(value) { this._line = value;}

AST_Anainfo.prototype.setLine = AST_Anainfo_setLine;
//
// accessor is AST_Anainfo.prototype.getCallerid
// element get for callerid
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for callerid
// setter function is is AST_Anainfo.prototype.setCallerid
//
function AST_Anainfo_getCallerid() { return this._callerid;}

AST_Anainfo.prototype.getCallerid = AST_Anainfo_getCallerid;

function AST_Anainfo_setCallerid(value) { this._callerid = value;}

AST_Anainfo.prototype.setCallerid = AST_Anainfo_setCallerid;
//
// accessor is AST_Anainfo.prototype.getStatus
// element get for status
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for status
// setter function is is AST_Anainfo.prototype.setStatus
//
function AST_Anainfo_getStatus() { return this._status;}

AST_Anainfo.prototype.getStatus = AST_Anainfo_getStatus;

function AST_Anainfo_setStatus(value) { this._status = value;}

AST_Anainfo.prototype.setStatus = AST_Anainfo_setStatus;
//
// accessor is AST_Anainfo.prototype.getSignalling
// element get for signalling
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for signalling
// setter function is is AST_Anainfo.prototype.setSignalling
//
function AST_Anainfo_getSignalling() { return this._signalling;}

AST_Anainfo.prototype.getSignalling = AST_Anainfo_getSignalling;

function AST_Anainfo_setSignalling(value) { this._signalling = value;}

AST_Anainfo.prototype.setSignalling = AST_Anainfo_setSignalling;
//
// Serialize {urn:ast}Anainfo
//
function AST_Anainfo_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:channel>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._channel);
     xml = xml + '</jns0:channel>';
    }
    // block for local variables
    {
     if (this._name == null) {
      xml = xml + '<jns0:name xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:name>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._name);
      xml = xml + '</jns0:name>';
     }
    }
    // block for local variables
    {
     if (this._line == null) {
      xml = xml + '<jns0:line xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:line>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._line);
      xml = xml + '</jns0:line>';
     }
    }
    // block for local variables
    {
     if (this._callerid == null) {
      xml = xml + '<jns0:callerid xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:callerid>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._callerid);
      xml = xml + '</jns0:callerid>';
     }
    }
    // block for local variables
    {
     if (this._status != null) {
      if (this._status == null) {
       xml = xml + '<jns0:status xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:status>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._status);
       xml = xml + '</jns0:status>';
      }
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:signalling>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._signalling);
     xml = xml + '</jns0:signalling>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_Anainfo.prototype.serialize = AST_Anainfo_serialize;

function AST_Anainfo_deserialize (cxfjsutils, element) {
    var newobject = new AST_Anainfo();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing channel');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setChannel(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing name');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setName(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing line');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setLine(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing callerid');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setCallerid(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing status');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'status')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setStatus(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing signalling');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSignalling(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}UcpNetworkRules
//
function AST_UcpNetworkRules () {
    this.typeMarker = 'AST_UcpNetworkRules';
    this._name = null;
    this._port1 = 0;
    this._port2 = 0;
    this._ip = null;
    this._mask = null;
    this._order = '';
    this._proto = '';
    this._actions = '';
}

//
// accessor is AST_UcpNetworkRules.prototype.getName
// element get for name
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for name
// setter function is is AST_UcpNetworkRules.prototype.setName
//
function AST_UcpNetworkRules_getName() { return this._name;}

AST_UcpNetworkRules.prototype.getName = AST_UcpNetworkRules_getName;

function AST_UcpNetworkRules_setName(value) { this._name = value;}

AST_UcpNetworkRules.prototype.setName = AST_UcpNetworkRules_setName;
//
// accessor is AST_UcpNetworkRules.prototype.getPort1
// element get for port1
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for port1
// setter function is is AST_UcpNetworkRules.prototype.setPort1
//
function AST_UcpNetworkRules_getPort1() { return this._port1;}

AST_UcpNetworkRules.prototype.getPort1 = AST_UcpNetworkRules_getPort1;

function AST_UcpNetworkRules_setPort1(value) { this._port1 = value;}

AST_UcpNetworkRules.prototype.setPort1 = AST_UcpNetworkRules_setPort1;
//
// accessor is AST_UcpNetworkRules.prototype.getPort2
// element get for port2
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for port2
// setter function is is AST_UcpNetworkRules.prototype.setPort2
//
function AST_UcpNetworkRules_getPort2() { return this._port2;}

AST_UcpNetworkRules.prototype.getPort2 = AST_UcpNetworkRules_getPort2;

function AST_UcpNetworkRules_setPort2(value) { this._port2 = value;}

AST_UcpNetworkRules.prototype.setPort2 = AST_UcpNetworkRules_setPort2;
//
// accessor is AST_UcpNetworkRules.prototype.getIp
// element get for ip
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for ip
// setter function is is AST_UcpNetworkRules.prototype.setIp
//
function AST_UcpNetworkRules_getIp() { return this._ip;}

AST_UcpNetworkRules.prototype.getIp = AST_UcpNetworkRules_getIp;

function AST_UcpNetworkRules_setIp(value) { this._ip = value;}

AST_UcpNetworkRules.prototype.setIp = AST_UcpNetworkRules_setIp;
//
// accessor is AST_UcpNetworkRules.prototype.getMask
// element get for mask
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for mask
// setter function is is AST_UcpNetworkRules.prototype.setMask
//
function AST_UcpNetworkRules_getMask() { return this._mask;}

AST_UcpNetworkRules.prototype.getMask = AST_UcpNetworkRules_getMask;

function AST_UcpNetworkRules_setMask(value) { this._mask = value;}

AST_UcpNetworkRules.prototype.setMask = AST_UcpNetworkRules_setMask;
//
// accessor is AST_UcpNetworkRules.prototype.getOrder
// element get for order
// - element type is {http://www.w3.org/2001/XMLSchema}short
// - required element
//
// element set for order
// setter function is is AST_UcpNetworkRules.prototype.setOrder
//
function AST_UcpNetworkRules_getOrder() { return this._order;}

AST_UcpNetworkRules.prototype.getOrder = AST_UcpNetworkRules_getOrder;

function AST_UcpNetworkRules_setOrder(value) { this._order = value;}

AST_UcpNetworkRules.prototype.setOrder = AST_UcpNetworkRules_setOrder;
//
// accessor is AST_UcpNetworkRules.prototype.getProto
// element get for proto
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for proto
// setter function is is AST_UcpNetworkRules.prototype.setProto
//
function AST_UcpNetworkRules_getProto() { return this._proto;}

AST_UcpNetworkRules.prototype.getProto = AST_UcpNetworkRules_getProto;

function AST_UcpNetworkRules_setProto(value) { this._proto = value;}

AST_UcpNetworkRules.prototype.setProto = AST_UcpNetworkRules_setProto;
//
// accessor is AST_UcpNetworkRules.prototype.getActions
// element get for actions
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for actions
// setter function is is AST_UcpNetworkRules.prototype.setActions
//
function AST_UcpNetworkRules_getActions() { return this._actions;}

AST_UcpNetworkRules.prototype.getActions = AST_UcpNetworkRules_getActions;

function AST_UcpNetworkRules_setActions(value) { this._actions = value;}

AST_UcpNetworkRules.prototype.setActions = AST_UcpNetworkRules_setActions;
//
// Serialize {urn:ast}UcpNetworkRules
//
function AST_UcpNetworkRules_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._name == null) {
      xml = xml + '<jns0:name xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:name>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._name);
      xml = xml + '</jns0:name>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:port1>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._port1);
     xml = xml + '</jns0:port1>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:port2>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._port2);
     xml = xml + '</jns0:port2>';
    }
    // block for local variables
    {
     if (this._ip == null) {
      xml = xml + '<jns0:ip xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:ip>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._ip);
      xml = xml + '</jns0:ip>';
     }
    }
    // block for local variables
    {
     if (this._mask == null) {
      xml = xml + '<jns0:mask xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:mask>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._mask);
      xml = xml + '</jns0:mask>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:order>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._order);
     xml = xml + '</jns0:order>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:proto>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._proto);
     xml = xml + '</jns0:proto>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:actions>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._actions);
     xml = xml + '</jns0:actions>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_UcpNetworkRules.prototype.serialize = AST_UcpNetworkRules_serialize;

function AST_UcpNetworkRules_deserialize (cxfjsutils, element) {
    var newobject = new AST_UcpNetworkRules();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing name');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setName(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing port1');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setPort1(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing port2');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setPort2(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ip');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setIp(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing mask');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setMask(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing order');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setOrder(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing proto');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setProto(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing actions');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setActions(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipNewGet
//
function AST_SipNewGet () {
    this.typeMarker = 'AST_SipNewGet';
    this._combuf = null;
    this._siparr = null;
    this._context = null;
}

//
// accessor is AST_SipNewGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_SipNewGet.prototype.setCombuf
//
function AST_SipNewGet_getCombuf() { return this._combuf;}

AST_SipNewGet.prototype.getCombuf = AST_SipNewGet_getCombuf;

function AST_SipNewGet_setCombuf(value) { this._combuf = value;}

AST_SipNewGet.prototype.setCombuf = AST_SipNewGet_setCombuf;
//
// accessor is AST_SipNewGet.prototype.getSiparr
// element get for siparr
// - element type is {urn:ast}SipOneArr
// - required element
//
// element set for siparr
// setter function is is AST_SipNewGet.prototype.setSiparr
//
function AST_SipNewGet_getSiparr() { return this._siparr;}

AST_SipNewGet.prototype.getSiparr = AST_SipNewGet_getSiparr;

function AST_SipNewGet_setSiparr(value) { this._siparr = value;}

AST_SipNewGet.prototype.setSiparr = AST_SipNewGet_setSiparr;
//
// accessor is AST_SipNewGet.prototype.getContext
// element get for context
// - element type is {urn:ast}SipContext
// - required element
//
// element set for context
// setter function is is AST_SipNewGet.prototype.setContext
//
function AST_SipNewGet_getContext() { return this._context;}

AST_SipNewGet.prototype.getContext = AST_SipNewGet_getContext;

function AST_SipNewGet_setContext(value) { this._context = value;}

AST_SipNewGet.prototype.setContext = AST_SipNewGet_setContext;
//
// Serialize {urn:ast}SipNewGet
//
function AST_SipNewGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._siparr.serialize(cxfjsutils, 'jns0:siparr', null);
    }
    // block for local variables
    {
     xml = xml + this._context.serialize(cxfjsutils, 'jns0:context', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipNewGet.prototype.serialize = AST_SipNewGet_serialize;

function AST_SipNewGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipNewGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing siparr');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SipOneArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setSiparr(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing context');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SipContext_deserialize(cxfjsutils, curElement);
    }
    newobject.setContext(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AutoCallTest
//
function AST_AutoCallTest () {
    this.typeMarker = 'AST_AutoCallTest';
    this._ana = null;
}

//
// accessor is AST_AutoCallTest.prototype.getAna
// element get for ana
// - element type is {urn:ast}AutoCallChnArr
// - required element
//
// element set for ana
// setter function is is AST_AutoCallTest.prototype.setAna
//
function AST_AutoCallTest_getAna() { return this._ana;}

AST_AutoCallTest.prototype.getAna = AST_AutoCallTest_getAna;

function AST_AutoCallTest_setAna(value) { this._ana = value;}

AST_AutoCallTest.prototype.setAna = AST_AutoCallTest_setAna;
//
// Serialize {urn:ast}AutoCallTest
//
function AST_AutoCallTest_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._ana.serialize(cxfjsutils, 'jns0:ana', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AutoCallTest.prototype.serialize = AST_AutoCallTest_serialize;

function AST_AutoCallTest_deserialize (cxfjsutils, element) {
    var newobject = new AST_AutoCallTest();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ana');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_AutoCallChnArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setAna(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}FxsGroupDialArr
//
function AST_FxsGroupDialArr () {
    this.typeMarker = 'AST_FxsGroupDialArr';
    this._item = [];
}

//
// accessor is AST_FxsGroupDialArr.prototype.getItem
// element get for item
// - element type is {urn:ast}FxsGroupDial
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_FxsGroupDialArr.prototype.setItem
//
function AST_FxsGroupDialArr_getItem() { return this._item;}

AST_FxsGroupDialArr.prototype.getItem = AST_FxsGroupDialArr_getItem;

function AST_FxsGroupDialArr_setItem(value) { this._item = value;}

AST_FxsGroupDialArr.prototype.setItem = AST_FxsGroupDialArr_setItem;
//
// Serialize {urn:ast}FxsGroupDialArr
//
function AST_FxsGroupDialArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_FxsGroupDialArr.prototype.serialize = AST_FxsGroupDialArr_serialize;

function AST_FxsGroupDialArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_FxsGroupDialArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_FxsGroupDial_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AdvTr069Save
//
function AST_AdvTr069Save () {
    this.typeMarker = 'AST_AdvTr069Save';
    this._general = null;
}

//
// accessor is AST_AdvTr069Save.prototype.getGeneral
// element get for general
// - element type is {urn:ast}AdvTr069General
// - required element
//
// element set for general
// setter function is is AST_AdvTr069Save.prototype.setGeneral
//
function AST_AdvTr069Save_getGeneral() { return this._general;}

AST_AdvTr069Save.prototype.getGeneral = AST_AdvTr069Save_getGeneral;

function AST_AdvTr069Save_setGeneral(value) { this._general = value;}

AST_AdvTr069Save.prototype.setGeneral = AST_AdvTr069Save_setGeneral;
//
// Serialize {urn:ast}AdvTr069Save
//
function AST_AdvTr069Save_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._general.serialize(cxfjsutils, 'jns0:general', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AdvTr069Save.prototype.serialize = AST_AdvTr069Save_serialize;

function AST_AdvTr069Save_deserialize (cxfjsutils, element) {
    var newobject = new AST_AdvTr069Save();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing general');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_AdvTr069General_deserialize(cxfjsutils, curElement);
    }
    newobject.setGeneral(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AnaContextFxoks
//
function AST_AnaContextFxoks () {
    this.typeMarker = 'AST_AnaContextFxoks';
    this._name = null;
    this._rxgain = null;
    this._txgain = null;
    this._ringtimeout = 0;
    this._cidsignalling = '';
    this._dnd = '';
    this._callwaiting = '';
    this._threewaycalling = '';
    this._associatedchnnl = null;
    this._failoverfxo = null;
    this._cidnumber = 0;
    this._internalnumber = 0;
    this._fullname = null;
    this._callforwardexten = null;
    this._transfer = '';
    this._callforward = '';
    this._answerswitch = '';
    this._hangupswitch = '';
    this._speeddailtimeout = 0;
    this._telephonetype = 0;
}

//
// accessor is AST_AnaContextFxoks.prototype.getName
// element get for name
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for name
// setter function is is AST_AnaContextFxoks.prototype.setName
//
function AST_AnaContextFxoks_getName() { return this._name;}

AST_AnaContextFxoks.prototype.getName = AST_AnaContextFxoks_getName;

function AST_AnaContextFxoks_setName(value) { this._name = value;}

AST_AnaContextFxoks.prototype.setName = AST_AnaContextFxoks_setName;
//
// accessor is AST_AnaContextFxoks.prototype.getRxgain
// element get for rxgain
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for rxgain
// setter function is is AST_AnaContextFxoks.prototype.setRxgain
//
function AST_AnaContextFxoks_getRxgain() { return this._rxgain;}

AST_AnaContextFxoks.prototype.getRxgain = AST_AnaContextFxoks_getRxgain;

function AST_AnaContextFxoks_setRxgain(value) { this._rxgain = value;}

AST_AnaContextFxoks.prototype.setRxgain = AST_AnaContextFxoks_setRxgain;
//
// accessor is AST_AnaContextFxoks.prototype.getTxgain
// element get for txgain
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for txgain
// setter function is is AST_AnaContextFxoks.prototype.setTxgain
//
function AST_AnaContextFxoks_getTxgain() { return this._txgain;}

AST_AnaContextFxoks.prototype.getTxgain = AST_AnaContextFxoks_getTxgain;

function AST_AnaContextFxoks_setTxgain(value) { this._txgain = value;}

AST_AnaContextFxoks.prototype.setTxgain = AST_AnaContextFxoks_setTxgain;
//
// accessor is AST_AnaContextFxoks.prototype.getRingtimeout
// element get for ringtimeout
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for ringtimeout
// setter function is is AST_AnaContextFxoks.prototype.setRingtimeout
//
function AST_AnaContextFxoks_getRingtimeout() { return this._ringtimeout;}

AST_AnaContextFxoks.prototype.getRingtimeout = AST_AnaContextFxoks_getRingtimeout;

function AST_AnaContextFxoks_setRingtimeout(value) { this._ringtimeout = value;}

AST_AnaContextFxoks.prototype.setRingtimeout = AST_AnaContextFxoks_setRingtimeout;
//
// accessor is AST_AnaContextFxoks.prototype.getCidsignalling
// element get for cidsignalling
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for cidsignalling
// setter function is is AST_AnaContextFxoks.prototype.setCidsignalling
//
function AST_AnaContextFxoks_getCidsignalling() { return this._cidsignalling;}

AST_AnaContextFxoks.prototype.getCidsignalling = AST_AnaContextFxoks_getCidsignalling;

function AST_AnaContextFxoks_setCidsignalling(value) { this._cidsignalling = value;}

AST_AnaContextFxoks.prototype.setCidsignalling = AST_AnaContextFxoks_setCidsignalling;
//
// accessor is AST_AnaContextFxoks.prototype.getDnd
// element get for dnd
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for dnd
// setter function is is AST_AnaContextFxoks.prototype.setDnd
//
function AST_AnaContextFxoks_getDnd() { return this._dnd;}

AST_AnaContextFxoks.prototype.getDnd = AST_AnaContextFxoks_getDnd;

function AST_AnaContextFxoks_setDnd(value) { this._dnd = value;}

AST_AnaContextFxoks.prototype.setDnd = AST_AnaContextFxoks_setDnd;
//
// accessor is AST_AnaContextFxoks.prototype.getCallwaiting
// element get for callwaiting
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for callwaiting
// setter function is is AST_AnaContextFxoks.prototype.setCallwaiting
//
function AST_AnaContextFxoks_getCallwaiting() { return this._callwaiting;}

AST_AnaContextFxoks.prototype.getCallwaiting = AST_AnaContextFxoks_getCallwaiting;

function AST_AnaContextFxoks_setCallwaiting(value) { this._callwaiting = value;}

AST_AnaContextFxoks.prototype.setCallwaiting = AST_AnaContextFxoks_setCallwaiting;
//
// accessor is AST_AnaContextFxoks.prototype.getThreewaycalling
// element get for threewaycalling
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for threewaycalling
// setter function is is AST_AnaContextFxoks.prototype.setThreewaycalling
//
function AST_AnaContextFxoks_getThreewaycalling() { return this._threewaycalling;}

AST_AnaContextFxoks.prototype.getThreewaycalling = AST_AnaContextFxoks_getThreewaycalling;

function AST_AnaContextFxoks_setThreewaycalling(value) { this._threewaycalling = value;}

AST_AnaContextFxoks.prototype.setThreewaycalling = AST_AnaContextFxoks_setThreewaycalling;
//
// accessor is AST_AnaContextFxoks.prototype.getAssociatedchnnl
// element get for associatedchnnl
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for associatedchnnl
// setter function is is AST_AnaContextFxoks.prototype.setAssociatedchnnl
//
function AST_AnaContextFxoks_getAssociatedchnnl() { return this._associatedchnnl;}

AST_AnaContextFxoks.prototype.getAssociatedchnnl = AST_AnaContextFxoks_getAssociatedchnnl;

function AST_AnaContextFxoks_setAssociatedchnnl(value) { this._associatedchnnl = value;}

AST_AnaContextFxoks.prototype.setAssociatedchnnl = AST_AnaContextFxoks_setAssociatedchnnl;
//
// accessor is AST_AnaContextFxoks.prototype.getFailoverfxo
// element get for failoverfxo
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for failoverfxo
// setter function is is AST_AnaContextFxoks.prototype.setFailoverfxo
//
function AST_AnaContextFxoks_getFailoverfxo() { return this._failoverfxo;}

AST_AnaContextFxoks.prototype.getFailoverfxo = AST_AnaContextFxoks_getFailoverfxo;

function AST_AnaContextFxoks_setFailoverfxo(value) { this._failoverfxo = value;}

AST_AnaContextFxoks.prototype.setFailoverfxo = AST_AnaContextFxoks_setFailoverfxo;
//
// accessor is AST_AnaContextFxoks.prototype.getCidnumber
// element get for cidnumber
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for cidnumber
// setter function is is AST_AnaContextFxoks.prototype.setCidnumber
//
function AST_AnaContextFxoks_getCidnumber() { return this._cidnumber;}

AST_AnaContextFxoks.prototype.getCidnumber = AST_AnaContextFxoks_getCidnumber;

function AST_AnaContextFxoks_setCidnumber(value) { this._cidnumber = value;}

AST_AnaContextFxoks.prototype.setCidnumber = AST_AnaContextFxoks_setCidnumber;
//
// accessor is AST_AnaContextFxoks.prototype.getInternalnumber
// element get for internalnumber
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for internalnumber
// setter function is is AST_AnaContextFxoks.prototype.setInternalnumber
//
function AST_AnaContextFxoks_getInternalnumber() { return this._internalnumber;}

AST_AnaContextFxoks.prototype.getInternalnumber = AST_AnaContextFxoks_getInternalnumber;

function AST_AnaContextFxoks_setInternalnumber(value) { this._internalnumber = value;}

AST_AnaContextFxoks.prototype.setInternalnumber = AST_AnaContextFxoks_setInternalnumber;
//
// accessor is AST_AnaContextFxoks.prototype.getFullname
// element get for fullname
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for fullname
// setter function is is AST_AnaContextFxoks.prototype.setFullname
//
function AST_AnaContextFxoks_getFullname() { return this._fullname;}

AST_AnaContextFxoks.prototype.getFullname = AST_AnaContextFxoks_getFullname;

function AST_AnaContextFxoks_setFullname(value) { this._fullname = value;}

AST_AnaContextFxoks.prototype.setFullname = AST_AnaContextFxoks_setFullname;
//
// accessor is AST_AnaContextFxoks.prototype.getCallforwardexten
// element get for callforwardexten
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for callforwardexten
// setter function is is AST_AnaContextFxoks.prototype.setCallforwardexten
//
function AST_AnaContextFxoks_getCallforwardexten() { return this._callforwardexten;}

AST_AnaContextFxoks.prototype.getCallforwardexten = AST_AnaContextFxoks_getCallforwardexten;

function AST_AnaContextFxoks_setCallforwardexten(value) { this._callforwardexten = value;}

AST_AnaContextFxoks.prototype.setCallforwardexten = AST_AnaContextFxoks_setCallforwardexten;
//
// accessor is AST_AnaContextFxoks.prototype.getTransfer
// element get for transfer
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for transfer
// setter function is is AST_AnaContextFxoks.prototype.setTransfer
//
function AST_AnaContextFxoks_getTransfer() { return this._transfer;}

AST_AnaContextFxoks.prototype.getTransfer = AST_AnaContextFxoks_getTransfer;

function AST_AnaContextFxoks_setTransfer(value) { this._transfer = value;}

AST_AnaContextFxoks.prototype.setTransfer = AST_AnaContextFxoks_setTransfer;
//
// accessor is AST_AnaContextFxoks.prototype.getCallforward
// element get for callforward
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for callforward
// setter function is is AST_AnaContextFxoks.prototype.setCallforward
//
function AST_AnaContextFxoks_getCallforward() { return this._callforward;}

AST_AnaContextFxoks.prototype.getCallforward = AST_AnaContextFxoks_getCallforward;

function AST_AnaContextFxoks_setCallforward(value) { this._callforward = value;}

AST_AnaContextFxoks.prototype.setCallforward = AST_AnaContextFxoks_setCallforward;
//
// accessor is AST_AnaContextFxoks.prototype.getAnswerswitch
// element get for answerswitch
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for answerswitch
// setter function is is AST_AnaContextFxoks.prototype.setAnswerswitch
//
function AST_AnaContextFxoks_getAnswerswitch() { return this._answerswitch;}

AST_AnaContextFxoks.prototype.getAnswerswitch = AST_AnaContextFxoks_getAnswerswitch;

function AST_AnaContextFxoks_setAnswerswitch(value) { this._answerswitch = value;}

AST_AnaContextFxoks.prototype.setAnswerswitch = AST_AnaContextFxoks_setAnswerswitch;
//
// accessor is AST_AnaContextFxoks.prototype.getHangupswitch
// element get for hangupswitch
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for hangupswitch
// setter function is is AST_AnaContextFxoks.prototype.setHangupswitch
//
function AST_AnaContextFxoks_getHangupswitch() { return this._hangupswitch;}

AST_AnaContextFxoks.prototype.getHangupswitch = AST_AnaContextFxoks_getHangupswitch;

function AST_AnaContextFxoks_setHangupswitch(value) { this._hangupswitch = value;}

AST_AnaContextFxoks.prototype.setHangupswitch = AST_AnaContextFxoks_setHangupswitch;
//
// accessor is AST_AnaContextFxoks.prototype.getSpeeddailtimeout
// element get for speeddailtimeout
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for speeddailtimeout
// setter function is is AST_AnaContextFxoks.prototype.setSpeeddailtimeout
//
function AST_AnaContextFxoks_getSpeeddailtimeout() { return this._speeddailtimeout;}

AST_AnaContextFxoks.prototype.getSpeeddailtimeout = AST_AnaContextFxoks_getSpeeddailtimeout;

function AST_AnaContextFxoks_setSpeeddailtimeout(value) { this._speeddailtimeout = value;}

AST_AnaContextFxoks.prototype.setSpeeddailtimeout = AST_AnaContextFxoks_setSpeeddailtimeout;
//
// accessor is AST_AnaContextFxoks.prototype.getTelephonetype
// element get for telephonetype
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for telephonetype
// setter function is is AST_AnaContextFxoks.prototype.setTelephonetype
//
function AST_AnaContextFxoks_getTelephonetype() { return this._telephonetype;}

AST_AnaContextFxoks.prototype.getTelephonetype = AST_AnaContextFxoks_getTelephonetype;

function AST_AnaContextFxoks_setTelephonetype(value) { this._telephonetype = value;}

AST_AnaContextFxoks.prototype.setTelephonetype = AST_AnaContextFxoks_setTelephonetype;
//
// Serialize {urn:ast}AnaContextFxoks
//
function AST_AnaContextFxoks_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._name == null) {
      xml = xml + '<jns0:name xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:name>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._name);
      xml = xml + '</jns0:name>';
     }
    }
    // block for local variables
    {
     if (this._rxgain == null) {
      xml = xml + '<jns0:rxgain xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:rxgain>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._rxgain);
      xml = xml + '</jns0:rxgain>';
     }
    }
    // block for local variables
    {
     if (this._txgain == null) {
      xml = xml + '<jns0:txgain xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:txgain>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._txgain);
      xml = xml + '</jns0:txgain>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:ringtimeout>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._ringtimeout);
     xml = xml + '</jns0:ringtimeout>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:cidsignalling>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._cidsignalling);
     xml = xml + '</jns0:cidsignalling>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:dnd>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._dnd);
     xml = xml + '</jns0:dnd>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:callwaiting>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._callwaiting);
     xml = xml + '</jns0:callwaiting>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:threewaycalling>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._threewaycalling);
     xml = xml + '</jns0:threewaycalling>';
    }
    // block for local variables
    {
     if (this._associatedchnnl == null) {
      xml = xml + '<jns0:associatedchnnl xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:associatedchnnl>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._associatedchnnl);
      xml = xml + '</jns0:associatedchnnl>';
     }
    }
    // block for local variables
    {
     if (this._failoverfxo == null) {
      xml = xml + '<jns0:failoverfxo xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:failoverfxo>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._failoverfxo);
      xml = xml + '</jns0:failoverfxo>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:cidnumber>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._cidnumber);
     xml = xml + '</jns0:cidnumber>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:internalnumber>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._internalnumber);
     xml = xml + '</jns0:internalnumber>';
    }
    // block for local variables
    {
     if (this._fullname == null) {
      xml = xml + '<jns0:fullname xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:fullname>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._fullname);
      xml = xml + '</jns0:fullname>';
     }
    }
    // block for local variables
    {
     if (this._callforwardexten == null) {
      xml = xml + '<jns0:callforwardexten xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:callforwardexten>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._callforwardexten);
      xml = xml + '</jns0:callforwardexten>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:transfer>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._transfer);
     xml = xml + '</jns0:transfer>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:callforward>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._callforward);
     xml = xml + '</jns0:callforward>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:answerswitch>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._answerswitch);
     xml = xml + '</jns0:answerswitch>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:hangupswitch>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._hangupswitch);
     xml = xml + '</jns0:hangupswitch>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:speeddailtimeout>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._speeddailtimeout);
     xml = xml + '</jns0:speeddailtimeout>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:telephonetype>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._telephonetype);
     xml = xml + '</jns0:telephonetype>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AnaContextFxoks.prototype.serialize = AST_AnaContextFxoks_serialize;

function AST_AnaContextFxoks_deserialize (cxfjsutils, element) {
    var newobject = new AST_AnaContextFxoks();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing name');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setName(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing rxgain');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setRxgain(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing txgain');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setTxgain(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ringtimeout');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setRingtimeout(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing cidsignalling');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setCidsignalling(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing dnd');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setDnd(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing callwaiting');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setCallwaiting(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing threewaycalling');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setThreewaycalling(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing associatedchnnl');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setAssociatedchnnl(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing failoverfxo');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setFailoverfxo(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing cidnumber');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setCidnumber(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing internalnumber');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setInternalnumber(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fullname');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setFullname(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing callforwardexten');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setCallforwardexten(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing transfer');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setTransfer(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing callforward');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setCallforward(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing answerswitch');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setAnswerswitch(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing hangupswitch');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setHangupswitch(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing speeddailtimeout');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setSpeeddailtimeout(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing telephonetype');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setTelephonetype(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipContext
//
function AST_SipContext () {
    this.typeMarker = 'AST_SipContext';
    this._username = null;
    this._secret = null;
    this._allowanonymous = '';
    this._registration = '';
    this._transport = '';
    this._nat = '';
    this._host = null;
    this._backup = null;
    this._auth = null;
    this._registerextension = null;
    this._registeruser = null;
    this._fromuser = null;
    this._fromdomain = null;
    this._qualifyfreq = 0;
    this._outboundproxy = null;
    this._port = '';
    this._outboundproxyport = '';
    this._mwi = '';
    this._vosencrypt = '';
    this._qualify = '';
    this._registeryenable = '';
    this._registerystring = null;
    this._calllimit = 0;
    this._enableoutboundtohost = '';
    this._dtmfmode = '';
    this._trustrpid = '';
    this._sendrpid = '';
    this._rpidformat = '';
    this._callingpres = '';
    this._progressinband = '';
    this._allowoverlap = '';
    this._usereqphone = '';
    this._useq850reason = '';
    this._honorsdpversion = '';
    this._allowtransfer = '';
    this._maxforwards = 0;
    this._timert1 = 0;
    this._timerb = 0;
    this._sessionminse = 0;
    this._sessionexpires = 0;
    this._promiscredir = '';
    this._registertrying = '';
    this._sessiontimers = '';
    this._sessionrefresher = '';
    this._allow = null;
    this._tlsprivatekey = null;
    this._tlsenable = '';
    this._tlsverify = '';
    this._tlssetup = '';
    this._encryption = '';
    this._order = '';
    this._md5 = '';
    this._stunflag = '';
}

//
// accessor is AST_SipContext.prototype.getUsername
// element get for username
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for username
// setter function is is AST_SipContext.prototype.setUsername
//
function AST_SipContext_getUsername() { return this._username;}

AST_SipContext.prototype.getUsername = AST_SipContext_getUsername;

function AST_SipContext_setUsername(value) { this._username = value;}

AST_SipContext.prototype.setUsername = AST_SipContext_setUsername;
//
// accessor is AST_SipContext.prototype.getSecret
// element get for secret
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for secret
// setter function is is AST_SipContext.prototype.setSecret
//
function AST_SipContext_getSecret() { return this._secret;}

AST_SipContext.prototype.getSecret = AST_SipContext_getSecret;

function AST_SipContext_setSecret(value) { this._secret = value;}

AST_SipContext.prototype.setSecret = AST_SipContext_setSecret;
//
// accessor is AST_SipContext.prototype.getAllowanonymous
// element get for allowanonymous
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for allowanonymous
// setter function is is AST_SipContext.prototype.setAllowanonymous
//
function AST_SipContext_getAllowanonymous() { return this._allowanonymous;}

AST_SipContext.prototype.getAllowanonymous = AST_SipContext_getAllowanonymous;

function AST_SipContext_setAllowanonymous(value) { this._allowanonymous = value;}

AST_SipContext.prototype.setAllowanonymous = AST_SipContext_setAllowanonymous;
//
// accessor is AST_SipContext.prototype.getRegistration
// element get for registration
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for registration
// setter function is is AST_SipContext.prototype.setRegistration
//
function AST_SipContext_getRegistration() { return this._registration;}

AST_SipContext.prototype.getRegistration = AST_SipContext_getRegistration;

function AST_SipContext_setRegistration(value) { this._registration = value;}

AST_SipContext.prototype.setRegistration = AST_SipContext_setRegistration;
//
// accessor is AST_SipContext.prototype.getTransport
// element get for transport
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for transport
// setter function is is AST_SipContext.prototype.setTransport
//
function AST_SipContext_getTransport() { return this._transport;}

AST_SipContext.prototype.getTransport = AST_SipContext_getTransport;

function AST_SipContext_setTransport(value) { this._transport = value;}

AST_SipContext.prototype.setTransport = AST_SipContext_setTransport;
//
// accessor is AST_SipContext.prototype.getNat
// element get for nat
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for nat
// setter function is is AST_SipContext.prototype.setNat
//
function AST_SipContext_getNat() { return this._nat;}

AST_SipContext.prototype.getNat = AST_SipContext_getNat;

function AST_SipContext_setNat(value) { this._nat = value;}

AST_SipContext.prototype.setNat = AST_SipContext_setNat;
//
// accessor is AST_SipContext.prototype.getHost
// element get for host
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for host
// setter function is is AST_SipContext.prototype.setHost
//
function AST_SipContext_getHost() { return this._host;}

AST_SipContext.prototype.getHost = AST_SipContext_getHost;

function AST_SipContext_setHost(value) { this._host = value;}

AST_SipContext.prototype.setHost = AST_SipContext_setHost;
//
// accessor is AST_SipContext.prototype.getBackup
// element get for backup
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for backup
// setter function is is AST_SipContext.prototype.setBackup
//
function AST_SipContext_getBackup() { return this._backup;}

AST_SipContext.prototype.getBackup = AST_SipContext_getBackup;

function AST_SipContext_setBackup(value) { this._backup = value;}

AST_SipContext.prototype.setBackup = AST_SipContext_setBackup;
//
// accessor is AST_SipContext.prototype.getAuth
// element get for auth
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for auth
// setter function is is AST_SipContext.prototype.setAuth
//
function AST_SipContext_getAuth() { return this._auth;}

AST_SipContext.prototype.getAuth = AST_SipContext_getAuth;

function AST_SipContext_setAuth(value) { this._auth = value;}

AST_SipContext.prototype.setAuth = AST_SipContext_setAuth;
//
// accessor is AST_SipContext.prototype.getRegisterextension
// element get for registerextension
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for registerextension
// setter function is is AST_SipContext.prototype.setRegisterextension
//
function AST_SipContext_getRegisterextension() { return this._registerextension;}

AST_SipContext.prototype.getRegisterextension = AST_SipContext_getRegisterextension;

function AST_SipContext_setRegisterextension(value) { this._registerextension = value;}

AST_SipContext.prototype.setRegisterextension = AST_SipContext_setRegisterextension;
//
// accessor is AST_SipContext.prototype.getRegisteruser
// element get for registeruser
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for registeruser
// setter function is is AST_SipContext.prototype.setRegisteruser
//
function AST_SipContext_getRegisteruser() { return this._registeruser;}

AST_SipContext.prototype.getRegisteruser = AST_SipContext_getRegisteruser;

function AST_SipContext_setRegisteruser(value) { this._registeruser = value;}

AST_SipContext.prototype.setRegisteruser = AST_SipContext_setRegisteruser;
//
// accessor is AST_SipContext.prototype.getFromuser
// element get for fromuser
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for fromuser
// setter function is is AST_SipContext.prototype.setFromuser
//
function AST_SipContext_getFromuser() { return this._fromuser;}

AST_SipContext.prototype.getFromuser = AST_SipContext_getFromuser;

function AST_SipContext_setFromuser(value) { this._fromuser = value;}

AST_SipContext.prototype.setFromuser = AST_SipContext_setFromuser;
//
// accessor is AST_SipContext.prototype.getFromdomain
// element get for fromdomain
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for fromdomain
// setter function is is AST_SipContext.prototype.setFromdomain
//
function AST_SipContext_getFromdomain() { return this._fromdomain;}

AST_SipContext.prototype.getFromdomain = AST_SipContext_getFromdomain;

function AST_SipContext_setFromdomain(value) { this._fromdomain = value;}

AST_SipContext.prototype.setFromdomain = AST_SipContext_setFromdomain;
//
// accessor is AST_SipContext.prototype.getQualifyfreq
// element get for qualifyfreq
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for qualifyfreq
// setter function is is AST_SipContext.prototype.setQualifyfreq
//
function AST_SipContext_getQualifyfreq() { return this._qualifyfreq;}

AST_SipContext.prototype.getQualifyfreq = AST_SipContext_getQualifyfreq;

function AST_SipContext_setQualifyfreq(value) { this._qualifyfreq = value;}

AST_SipContext.prototype.setQualifyfreq = AST_SipContext_setQualifyfreq;
//
// accessor is AST_SipContext.prototype.getOutboundproxy
// element get for outboundproxy
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for outboundproxy
// setter function is is AST_SipContext.prototype.setOutboundproxy
//
function AST_SipContext_getOutboundproxy() { return this._outboundproxy;}

AST_SipContext.prototype.getOutboundproxy = AST_SipContext_getOutboundproxy;

function AST_SipContext_setOutboundproxy(value) { this._outboundproxy = value;}

AST_SipContext.prototype.setOutboundproxy = AST_SipContext_setOutboundproxy;
//
// accessor is AST_SipContext.prototype.getPort
// element get for port
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedShort
// - required element
//
// element set for port
// setter function is is AST_SipContext.prototype.setPort
//
function AST_SipContext_getPort() { return this._port;}

AST_SipContext.prototype.getPort = AST_SipContext_getPort;

function AST_SipContext_setPort(value) { this._port = value;}

AST_SipContext.prototype.setPort = AST_SipContext_setPort;
//
// accessor is AST_SipContext.prototype.getOutboundproxyport
// element get for outboundproxyport
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedShort
// - required element
//
// element set for outboundproxyport
// setter function is is AST_SipContext.prototype.setOutboundproxyport
//
function AST_SipContext_getOutboundproxyport() { return this._outboundproxyport;}

AST_SipContext.prototype.getOutboundproxyport = AST_SipContext_getOutboundproxyport;

function AST_SipContext_setOutboundproxyport(value) { this._outboundproxyport = value;}

AST_SipContext.prototype.setOutboundproxyport = AST_SipContext_setOutboundproxyport;
//
// accessor is AST_SipContext.prototype.getMwi
// element get for mwi
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for mwi
// setter function is is AST_SipContext.prototype.setMwi
//
function AST_SipContext_getMwi() { return this._mwi;}

AST_SipContext.prototype.getMwi = AST_SipContext_getMwi;

function AST_SipContext_setMwi(value) { this._mwi = value;}

AST_SipContext.prototype.setMwi = AST_SipContext_setMwi;
//
// accessor is AST_SipContext.prototype.getVosencrypt
// element get for vosencrypt
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for vosencrypt
// setter function is is AST_SipContext.prototype.setVosencrypt
//
function AST_SipContext_getVosencrypt() { return this._vosencrypt;}

AST_SipContext.prototype.getVosencrypt = AST_SipContext_getVosencrypt;

function AST_SipContext_setVosencrypt(value) { this._vosencrypt = value;}

AST_SipContext.prototype.setVosencrypt = AST_SipContext_setVosencrypt;
//
// accessor is AST_SipContext.prototype.getQualify
// element get for qualify
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for qualify
// setter function is is AST_SipContext.prototype.setQualify
//
function AST_SipContext_getQualify() { return this._qualify;}

AST_SipContext.prototype.getQualify = AST_SipContext_getQualify;

function AST_SipContext_setQualify(value) { this._qualify = value;}

AST_SipContext.prototype.setQualify = AST_SipContext_setQualify;
//
// accessor is AST_SipContext.prototype.getRegisteryenable
// element get for registeryenable
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for registeryenable
// setter function is is AST_SipContext.prototype.setRegisteryenable
//
function AST_SipContext_getRegisteryenable() { return this._registeryenable;}

AST_SipContext.prototype.getRegisteryenable = AST_SipContext_getRegisteryenable;

function AST_SipContext_setRegisteryenable(value) { this._registeryenable = value;}

AST_SipContext.prototype.setRegisteryenable = AST_SipContext_setRegisteryenable;
//
// accessor is AST_SipContext.prototype.getRegisterystring
// element get for registerystring
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for registerystring
// setter function is is AST_SipContext.prototype.setRegisterystring
//
function AST_SipContext_getRegisterystring() { return this._registerystring;}

AST_SipContext.prototype.getRegisterystring = AST_SipContext_getRegisterystring;

function AST_SipContext_setRegisterystring(value) { this._registerystring = value;}

AST_SipContext.prototype.setRegisterystring = AST_SipContext_setRegisterystring;
//
// accessor is AST_SipContext.prototype.getCalllimit
// element get for calllimit
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for calllimit
// setter function is is AST_SipContext.prototype.setCalllimit
//
function AST_SipContext_getCalllimit() { return this._calllimit;}

AST_SipContext.prototype.getCalllimit = AST_SipContext_getCalllimit;

function AST_SipContext_setCalllimit(value) { this._calllimit = value;}

AST_SipContext.prototype.setCalllimit = AST_SipContext_setCalllimit;
//
// accessor is AST_SipContext.prototype.getEnableoutboundtohost
// element get for enableoutboundtohost
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for enableoutboundtohost
// setter function is is AST_SipContext.prototype.setEnableoutboundtohost
//
function AST_SipContext_getEnableoutboundtohost() { return this._enableoutboundtohost;}

AST_SipContext.prototype.getEnableoutboundtohost = AST_SipContext_getEnableoutboundtohost;

function AST_SipContext_setEnableoutboundtohost(value) { this._enableoutboundtohost = value;}

AST_SipContext.prototype.setEnableoutboundtohost = AST_SipContext_setEnableoutboundtohost;
//
// accessor is AST_SipContext.prototype.getDtmfmode
// element get for dtmfmode
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for dtmfmode
// setter function is is AST_SipContext.prototype.setDtmfmode
//
function AST_SipContext_getDtmfmode() { return this._dtmfmode;}

AST_SipContext.prototype.getDtmfmode = AST_SipContext_getDtmfmode;

function AST_SipContext_setDtmfmode(value) { this._dtmfmode = value;}

AST_SipContext.prototype.setDtmfmode = AST_SipContext_setDtmfmode;
//
// accessor is AST_SipContext.prototype.getTrustrpid
// element get for trustrpid
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for trustrpid
// setter function is is AST_SipContext.prototype.setTrustrpid
//
function AST_SipContext_getTrustrpid() { return this._trustrpid;}

AST_SipContext.prototype.getTrustrpid = AST_SipContext_getTrustrpid;

function AST_SipContext_setTrustrpid(value) { this._trustrpid = value;}

AST_SipContext.prototype.setTrustrpid = AST_SipContext_setTrustrpid;
//
// accessor is AST_SipContext.prototype.getSendrpid
// element get for sendrpid
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for sendrpid
// setter function is is AST_SipContext.prototype.setSendrpid
//
function AST_SipContext_getSendrpid() { return this._sendrpid;}

AST_SipContext.prototype.getSendrpid = AST_SipContext_getSendrpid;

function AST_SipContext_setSendrpid(value) { this._sendrpid = value;}

AST_SipContext.prototype.setSendrpid = AST_SipContext_setSendrpid;
//
// accessor is AST_SipContext.prototype.getRpidformat
// element get for rpidformat
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for rpidformat
// setter function is is AST_SipContext.prototype.setRpidformat
//
function AST_SipContext_getRpidformat() { return this._rpidformat;}

AST_SipContext.prototype.getRpidformat = AST_SipContext_getRpidformat;

function AST_SipContext_setRpidformat(value) { this._rpidformat = value;}

AST_SipContext.prototype.setRpidformat = AST_SipContext_setRpidformat;
//
// accessor is AST_SipContext.prototype.getCallingpres
// element get for callingpres
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for callingpres
// setter function is is AST_SipContext.prototype.setCallingpres
//
function AST_SipContext_getCallingpres() { return this._callingpres;}

AST_SipContext.prototype.getCallingpres = AST_SipContext_getCallingpres;

function AST_SipContext_setCallingpres(value) { this._callingpres = value;}

AST_SipContext.prototype.setCallingpres = AST_SipContext_setCallingpres;
//
// accessor is AST_SipContext.prototype.getProgressinband
// element get for progressinband
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for progressinband
// setter function is is AST_SipContext.prototype.setProgressinband
//
function AST_SipContext_getProgressinband() { return this._progressinband;}

AST_SipContext.prototype.getProgressinband = AST_SipContext_getProgressinband;

function AST_SipContext_setProgressinband(value) { this._progressinband = value;}

AST_SipContext.prototype.setProgressinband = AST_SipContext_setProgressinband;
//
// accessor is AST_SipContext.prototype.getAllowoverlap
// element get for allowoverlap
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for allowoverlap
// setter function is is AST_SipContext.prototype.setAllowoverlap
//
function AST_SipContext_getAllowoverlap() { return this._allowoverlap;}

AST_SipContext.prototype.getAllowoverlap = AST_SipContext_getAllowoverlap;

function AST_SipContext_setAllowoverlap(value) { this._allowoverlap = value;}

AST_SipContext.prototype.setAllowoverlap = AST_SipContext_setAllowoverlap;
//
// accessor is AST_SipContext.prototype.getUsereqphone
// element get for usereqphone
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for usereqphone
// setter function is is AST_SipContext.prototype.setUsereqphone
//
function AST_SipContext_getUsereqphone() { return this._usereqphone;}

AST_SipContext.prototype.getUsereqphone = AST_SipContext_getUsereqphone;

function AST_SipContext_setUsereqphone(value) { this._usereqphone = value;}

AST_SipContext.prototype.setUsereqphone = AST_SipContext_setUsereqphone;
//
// accessor is AST_SipContext.prototype.getUseq850reason
// element get for useq850reason
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for useq850reason
// setter function is is AST_SipContext.prototype.setUseq850reason
//
function AST_SipContext_getUseq850reason() { return this._useq850reason;}

AST_SipContext.prototype.getUseq850reason = AST_SipContext_getUseq850reason;

function AST_SipContext_setUseq850reason(value) { this._useq850reason = value;}

AST_SipContext.prototype.setUseq850reason = AST_SipContext_setUseq850reason;
//
// accessor is AST_SipContext.prototype.getHonorsdpversion
// element get for honorsdpversion
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for honorsdpversion
// setter function is is AST_SipContext.prototype.setHonorsdpversion
//
function AST_SipContext_getHonorsdpversion() { return this._honorsdpversion;}

AST_SipContext.prototype.getHonorsdpversion = AST_SipContext_getHonorsdpversion;

function AST_SipContext_setHonorsdpversion(value) { this._honorsdpversion = value;}

AST_SipContext.prototype.setHonorsdpversion = AST_SipContext_setHonorsdpversion;
//
// accessor is AST_SipContext.prototype.getAllowtransfer
// element get for allowtransfer
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for allowtransfer
// setter function is is AST_SipContext.prototype.setAllowtransfer
//
function AST_SipContext_getAllowtransfer() { return this._allowtransfer;}

AST_SipContext.prototype.getAllowtransfer = AST_SipContext_getAllowtransfer;

function AST_SipContext_setAllowtransfer(value) { this._allowtransfer = value;}

AST_SipContext.prototype.setAllowtransfer = AST_SipContext_setAllowtransfer;
//
// accessor is AST_SipContext.prototype.getMaxforwards
// element get for maxforwards
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for maxforwards
// setter function is is AST_SipContext.prototype.setMaxforwards
//
function AST_SipContext_getMaxforwards() { return this._maxforwards;}

AST_SipContext.prototype.getMaxforwards = AST_SipContext_getMaxforwards;

function AST_SipContext_setMaxforwards(value) { this._maxforwards = value;}

AST_SipContext.prototype.setMaxforwards = AST_SipContext_setMaxforwards;
//
// accessor is AST_SipContext.prototype.getTimert1
// element get for timert1
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for timert1
// setter function is is AST_SipContext.prototype.setTimert1
//
function AST_SipContext_getTimert1() { return this._timert1;}

AST_SipContext.prototype.getTimert1 = AST_SipContext_getTimert1;

function AST_SipContext_setTimert1(value) { this._timert1 = value;}

AST_SipContext.prototype.setTimert1 = AST_SipContext_setTimert1;
//
// accessor is AST_SipContext.prototype.getTimerb
// element get for timerb
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for timerb
// setter function is is AST_SipContext.prototype.setTimerb
//
function AST_SipContext_getTimerb() { return this._timerb;}

AST_SipContext.prototype.getTimerb = AST_SipContext_getTimerb;

function AST_SipContext_setTimerb(value) { this._timerb = value;}

AST_SipContext.prototype.setTimerb = AST_SipContext_setTimerb;
//
// accessor is AST_SipContext.prototype.getSessionminse
// element get for sessionminse
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for sessionminse
// setter function is is AST_SipContext.prototype.setSessionminse
//
function AST_SipContext_getSessionminse() { return this._sessionminse;}

AST_SipContext.prototype.getSessionminse = AST_SipContext_getSessionminse;

function AST_SipContext_setSessionminse(value) { this._sessionminse = value;}

AST_SipContext.prototype.setSessionminse = AST_SipContext_setSessionminse;
//
// accessor is AST_SipContext.prototype.getSessionexpires
// element get for sessionexpires
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for sessionexpires
// setter function is is AST_SipContext.prototype.setSessionexpires
//
function AST_SipContext_getSessionexpires() { return this._sessionexpires;}

AST_SipContext.prototype.getSessionexpires = AST_SipContext_getSessionexpires;

function AST_SipContext_setSessionexpires(value) { this._sessionexpires = value;}

AST_SipContext.prototype.setSessionexpires = AST_SipContext_setSessionexpires;
//
// accessor is AST_SipContext.prototype.getPromiscredir
// element get for promiscredir
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for promiscredir
// setter function is is AST_SipContext.prototype.setPromiscredir
//
function AST_SipContext_getPromiscredir() { return this._promiscredir;}

AST_SipContext.prototype.getPromiscredir = AST_SipContext_getPromiscredir;

function AST_SipContext_setPromiscredir(value) { this._promiscredir = value;}

AST_SipContext.prototype.setPromiscredir = AST_SipContext_setPromiscredir;
//
// accessor is AST_SipContext.prototype.getRegistertrying
// element get for registertrying
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for registertrying
// setter function is is AST_SipContext.prototype.setRegistertrying
//
function AST_SipContext_getRegistertrying() { return this._registertrying;}

AST_SipContext.prototype.getRegistertrying = AST_SipContext_getRegistertrying;

function AST_SipContext_setRegistertrying(value) { this._registertrying = value;}

AST_SipContext.prototype.setRegistertrying = AST_SipContext_setRegistertrying;
//
// accessor is AST_SipContext.prototype.getSessiontimers
// element get for sessiontimers
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for sessiontimers
// setter function is is AST_SipContext.prototype.setSessiontimers
//
function AST_SipContext_getSessiontimers() { return this._sessiontimers;}

AST_SipContext.prototype.getSessiontimers = AST_SipContext_getSessiontimers;

function AST_SipContext_setSessiontimers(value) { this._sessiontimers = value;}

AST_SipContext.prototype.setSessiontimers = AST_SipContext_setSessiontimers;
//
// accessor is AST_SipContext.prototype.getSessionrefresher
// element get for sessionrefresher
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for sessionrefresher
// setter function is is AST_SipContext.prototype.setSessionrefresher
//
function AST_SipContext_getSessionrefresher() { return this._sessionrefresher;}

AST_SipContext.prototype.getSessionrefresher = AST_SipContext_getSessionrefresher;

function AST_SipContext_setSessionrefresher(value) { this._sessionrefresher = value;}

AST_SipContext.prototype.setSessionrefresher = AST_SipContext_setSessionrefresher;
//
// accessor is AST_SipContext.prototype.getAllow
// element get for allow
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for allow
// setter function is is AST_SipContext.prototype.setAllow
//
function AST_SipContext_getAllow() { return this._allow;}

AST_SipContext.prototype.getAllow = AST_SipContext_getAllow;

function AST_SipContext_setAllow(value) { this._allow = value;}

AST_SipContext.prototype.setAllow = AST_SipContext_setAllow;
//
// accessor is AST_SipContext.prototype.getTlsprivatekey
// element get for tlsprivatekey
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for tlsprivatekey
// setter function is is AST_SipContext.prototype.setTlsprivatekey
//
function AST_SipContext_getTlsprivatekey() { return this._tlsprivatekey;}

AST_SipContext.prototype.getTlsprivatekey = AST_SipContext_getTlsprivatekey;

function AST_SipContext_setTlsprivatekey(value) { this._tlsprivatekey = value;}

AST_SipContext.prototype.setTlsprivatekey = AST_SipContext_setTlsprivatekey;
//
// accessor is AST_SipContext.prototype.getTlsenable
// element get for tlsenable
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for tlsenable
// setter function is is AST_SipContext.prototype.setTlsenable
//
function AST_SipContext_getTlsenable() { return this._tlsenable;}

AST_SipContext.prototype.getTlsenable = AST_SipContext_getTlsenable;

function AST_SipContext_setTlsenable(value) { this._tlsenable = value;}

AST_SipContext.prototype.setTlsenable = AST_SipContext_setTlsenable;
//
// accessor is AST_SipContext.prototype.getTlsverify
// element get for tlsverify
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for tlsverify
// setter function is is AST_SipContext.prototype.setTlsverify
//
function AST_SipContext_getTlsverify() { return this._tlsverify;}

AST_SipContext.prototype.getTlsverify = AST_SipContext_getTlsverify;

function AST_SipContext_setTlsverify(value) { this._tlsverify = value;}

AST_SipContext.prototype.setTlsverify = AST_SipContext_setTlsverify;
//
// accessor is AST_SipContext.prototype.getTlssetup
// element get for tlssetup
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for tlssetup
// setter function is is AST_SipContext.prototype.setTlssetup
//
function AST_SipContext_getTlssetup() { return this._tlssetup;}

AST_SipContext.prototype.getTlssetup = AST_SipContext_getTlssetup;

function AST_SipContext_setTlssetup(value) { this._tlssetup = value;}

AST_SipContext.prototype.setTlssetup = AST_SipContext_setTlssetup;
//
// accessor is AST_SipContext.prototype.getEncryption
// element get for encryption
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for encryption
// setter function is is AST_SipContext.prototype.setEncryption
//
function AST_SipContext_getEncryption() { return this._encryption;}

AST_SipContext.prototype.getEncryption = AST_SipContext_getEncryption;

function AST_SipContext_setEncryption(value) { this._encryption = value;}

AST_SipContext.prototype.setEncryption = AST_SipContext_setEncryption;
//
// accessor is AST_SipContext.prototype.getOrder
// element get for order
// - element type is {http://www.w3.org/2001/XMLSchema}short
// - required element
//
// element set for order
// setter function is is AST_SipContext.prototype.setOrder
//
function AST_SipContext_getOrder() { return this._order;}

AST_SipContext.prototype.getOrder = AST_SipContext_getOrder;

function AST_SipContext_setOrder(value) { this._order = value;}

AST_SipContext.prototype.setOrder = AST_SipContext_setOrder;
//
// accessor is AST_SipContext.prototype.getMd5
// element get for md5
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
//
// element set for md5
// setter function is is AST_SipContext.prototype.setMd5
//
function AST_SipContext_getMd5() { return this._md5;}

AST_SipContext.prototype.getMd5 = AST_SipContext_getMd5;

function AST_SipContext_setMd5(value) { this._md5 = value;}

AST_SipContext.prototype.setMd5 = AST_SipContext_setMd5;
//
// accessor is AST_SipContext.prototype.getStunflag
// element get for stunflag
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for stunflag
// setter function is is AST_SipContext.prototype.setStunflag
//
function AST_SipContext_getStunflag() { return this._stunflag;}

AST_SipContext.prototype.getStunflag = AST_SipContext_getStunflag;

function AST_SipContext_setStunflag(value) { this._stunflag = value;}

AST_SipContext.prototype.setStunflag = AST_SipContext_setStunflag;
//
// Serialize {urn:ast}SipContext
//
function AST_SipContext_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._username == null) {
      xml = xml + '<jns0:username xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:username>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._username);
      xml = xml + '</jns0:username>';
     }
    }
    // block for local variables
    {
     if (this._secret == null) {
      xml = xml + '<jns0:secret xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:secret>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._secret);
      xml = xml + '</jns0:secret>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:allowanonymous>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._allowanonymous);
     xml = xml + '</jns0:allowanonymous>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:registration>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._registration);
     xml = xml + '</jns0:registration>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:transport>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._transport);
     xml = xml + '</jns0:transport>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:nat>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._nat);
     xml = xml + '</jns0:nat>';
    }
    // block for local variables
    {
     if (this._host == null) {
      xml = xml + '<jns0:host xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:host>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._host);
      xml = xml + '</jns0:host>';
     }
    }
    // block for local variables
    {
     if (this._backup == null) {
      xml = xml + '<jns0:backup xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:backup>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._backup);
      xml = xml + '</jns0:backup>';
     }
    }
    // block for local variables
    {
     if (this._auth == null) {
      xml = xml + '<jns0:auth xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:auth>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._auth);
      xml = xml + '</jns0:auth>';
     }
    }
    // block for local variables
    {
     if (this._registerextension == null) {
      xml = xml + '<jns0:registerextension xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:registerextension>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._registerextension);
      xml = xml + '</jns0:registerextension>';
     }
    }
    // block for local variables
    {
     if (this._registeruser == null) {
      xml = xml + '<jns0:registeruser xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:registeruser>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._registeruser);
      xml = xml + '</jns0:registeruser>';
     }
    }
    // block for local variables
    {
     if (this._fromuser == null) {
      xml = xml + '<jns0:fromuser xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:fromuser>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._fromuser);
      xml = xml + '</jns0:fromuser>';
     }
    }
    // block for local variables
    {
     if (this._fromdomain == null) {
      xml = xml + '<jns0:fromdomain xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:fromdomain>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._fromdomain);
      xml = xml + '</jns0:fromdomain>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:qualifyfreq>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._qualifyfreq);
     xml = xml + '</jns0:qualifyfreq>';
    }
    // block for local variables
    {
     if (this._outboundproxy == null) {
      xml = xml + '<jns0:outboundproxy xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:outboundproxy>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._outboundproxy);
      xml = xml + '</jns0:outboundproxy>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:port>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._port);
     xml = xml + '</jns0:port>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:outboundproxyport>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._outboundproxyport);
     xml = xml + '</jns0:outboundproxyport>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:mwi>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._mwi);
     xml = xml + '</jns0:mwi>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:vosencrypt>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._vosencrypt);
     xml = xml + '</jns0:vosencrypt>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:qualify>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._qualify);
     xml = xml + '</jns0:qualify>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:registeryenable>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._registeryenable);
     xml = xml + '</jns0:registeryenable>';
    }
    // block for local variables
    {
     if (this._registerystring == null) {
      xml = xml + '<jns0:registerystring xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:registerystring>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._registerystring);
      xml = xml + '</jns0:registerystring>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:calllimit>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._calllimit);
     xml = xml + '</jns0:calllimit>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:enableoutboundtohost>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._enableoutboundtohost);
     xml = xml + '</jns0:enableoutboundtohost>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:dtmfmode>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._dtmfmode);
     xml = xml + '</jns0:dtmfmode>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:trustrpid>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._trustrpid);
     xml = xml + '</jns0:trustrpid>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:sendrpid>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._sendrpid);
     xml = xml + '</jns0:sendrpid>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:rpidformat>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._rpidformat);
     xml = xml + '</jns0:rpidformat>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:callingpres>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._callingpres);
     xml = xml + '</jns0:callingpres>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:progressinband>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._progressinband);
     xml = xml + '</jns0:progressinband>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:allowoverlap>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._allowoverlap);
     xml = xml + '</jns0:allowoverlap>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:usereqphone>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._usereqphone);
     xml = xml + '</jns0:usereqphone>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:useq850reason>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._useq850reason);
     xml = xml + '</jns0:useq850reason>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:honorsdpversion>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._honorsdpversion);
     xml = xml + '</jns0:honorsdpversion>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:allowtransfer>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._allowtransfer);
     xml = xml + '</jns0:allowtransfer>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:maxforwards>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._maxforwards);
     xml = xml + '</jns0:maxforwards>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:timert1>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._timert1);
     xml = xml + '</jns0:timert1>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:timerb>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._timerb);
     xml = xml + '</jns0:timerb>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:sessionminse>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._sessionminse);
     xml = xml + '</jns0:sessionminse>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:sessionexpires>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._sessionexpires);
     xml = xml + '</jns0:sessionexpires>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:promiscredir>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._promiscredir);
     xml = xml + '</jns0:promiscredir>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:registertrying>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._registertrying);
     xml = xml + '</jns0:registertrying>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:sessiontimers>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._sessiontimers);
     xml = xml + '</jns0:sessiontimers>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:sessionrefresher>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._sessionrefresher);
     xml = xml + '</jns0:sessionrefresher>';
    }
    // block for local variables
    {
     if (this._allow == null) {
      xml = xml + '<jns0:allow xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:allow>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._allow);
      xml = xml + '</jns0:allow>';
     }
    }
    // block for local variables
    {
     if (this._tlsprivatekey == null) {
      xml = xml + '<jns0:tlsprivatekey xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:tlsprivatekey>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._tlsprivatekey);
      xml = xml + '</jns0:tlsprivatekey>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:tlsenable>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._tlsenable);
     xml = xml + '</jns0:tlsenable>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:tlsverify>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._tlsverify);
     xml = xml + '</jns0:tlsverify>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:tlssetup>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._tlssetup);
     xml = xml + '</jns0:tlssetup>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:encryption>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._encryption);
     xml = xml + '</jns0:encryption>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:order>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._order);
     xml = xml + '</jns0:order>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:md5>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._md5);
     xml = xml + '</jns0:md5>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:stunflag>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._stunflag);
     xml = xml + '</jns0:stunflag>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipContext.prototype.serialize = AST_SipContext_serialize;

function AST_SipContext_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipContext();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing username');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setUsername(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing secret');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSecret(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing allowanonymous');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setAllowanonymous(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing registration');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setRegistration(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing transport');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setTransport(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing nat');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setNat(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing host');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setHost(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing backup');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setBackup(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing auth');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setAuth(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing registerextension');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setRegisterextension(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing registeruser');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setRegisteruser(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fromuser');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setFromuser(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fromdomain');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setFromdomain(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing qualifyfreq');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setQualifyfreq(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing outboundproxy');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setOutboundproxy(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing port');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setPort(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing outboundproxyport');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setOutboundproxyport(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing mwi');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setMwi(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing vosencrypt');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setVosencrypt(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing qualify');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setQualify(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing registeryenable');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setRegisteryenable(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing registerystring');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setRegisterystring(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing calllimit');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setCalllimit(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing enableoutboundtohost');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setEnableoutboundtohost(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing dtmfmode');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setDtmfmode(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing trustrpid');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setTrustrpid(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sendrpid');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSendrpid(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing rpidformat');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setRpidformat(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing callingpres');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setCallingpres(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing progressinband');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setProgressinband(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing allowoverlap');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setAllowoverlap(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing usereqphone');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setUsereqphone(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing useq850reason');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setUseq850reason(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing honorsdpversion');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setHonorsdpversion(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing allowtransfer');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setAllowtransfer(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing maxforwards');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setMaxforwards(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing timert1');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setTimert1(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing timerb');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setTimerb(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sessionminse');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setSessionminse(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sessionexpires');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setSessionexpires(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing promiscredir');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setPromiscredir(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing registertrying');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setRegistertrying(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sessiontimers');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSessiontimers(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sessionrefresher');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSessionrefresher(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing allow');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setAllow(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing tlsprivatekey');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setTlsprivatekey(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing tlsenable');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setTlsenable(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing tlsverify');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setTlsverify(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing tlssetup');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setTlssetup(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing encryption');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setEncryption(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing order');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setOrder(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing md5');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setMd5(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing stunflag');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setStunflag(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RoutingAdvSave
//
function AST_RoutingAdvSave () {
    this.typeMarker = 'AST_RoutingAdvSave';
    this._FlexRoutingSw = '';
    this._InternalCallSw = '';
    this._InternalSipCallSw = '';
}

//
// accessor is AST_RoutingAdvSave.prototype.getFlexRoutingSw
// element get for FlexRoutingSw
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for FlexRoutingSw
// setter function is is AST_RoutingAdvSave.prototype.setFlexRoutingSw
//
function AST_RoutingAdvSave_getFlexRoutingSw() { return this._FlexRoutingSw;}

AST_RoutingAdvSave.prototype.getFlexRoutingSw = AST_RoutingAdvSave_getFlexRoutingSw;

function AST_RoutingAdvSave_setFlexRoutingSw(value) { this._FlexRoutingSw = value;}

AST_RoutingAdvSave.prototype.setFlexRoutingSw = AST_RoutingAdvSave_setFlexRoutingSw;
//
// accessor is AST_RoutingAdvSave.prototype.getInternalCallSw
// element get for InternalCallSw
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for InternalCallSw
// setter function is is AST_RoutingAdvSave.prototype.setInternalCallSw
//
function AST_RoutingAdvSave_getInternalCallSw() { return this._InternalCallSw;}

AST_RoutingAdvSave.prototype.getInternalCallSw = AST_RoutingAdvSave_getInternalCallSw;

function AST_RoutingAdvSave_setInternalCallSw(value) { this._InternalCallSw = value;}

AST_RoutingAdvSave.prototype.setInternalCallSw = AST_RoutingAdvSave_setInternalCallSw;
//
// accessor is AST_RoutingAdvSave.prototype.getInternalSipCallSw
// element get for InternalSipCallSw
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for InternalSipCallSw
// setter function is is AST_RoutingAdvSave.prototype.setInternalSipCallSw
//
function AST_RoutingAdvSave_getInternalSipCallSw() { return this._InternalSipCallSw;}

AST_RoutingAdvSave.prototype.getInternalSipCallSw = AST_RoutingAdvSave_getInternalSipCallSw;

function AST_RoutingAdvSave_setInternalSipCallSw(value) { this._InternalSipCallSw = value;}

AST_RoutingAdvSave.prototype.setInternalSipCallSw = AST_RoutingAdvSave_setInternalSipCallSw;
//
// Serialize {urn:ast}RoutingAdvSave
//
function AST_RoutingAdvSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:FlexRoutingSw>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._FlexRoutingSw);
     xml = xml + '</jns0:FlexRoutingSw>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:InternalCallSw>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._InternalCallSw);
     xml = xml + '</jns0:InternalCallSw>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:InternalSipCallSw>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._InternalSipCallSw);
     xml = xml + '</jns0:InternalSipCallSw>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RoutingAdvSave.prototype.serialize = AST_RoutingAdvSave_serialize;

function AST_RoutingAdvSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_RoutingAdvSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing FlexRoutingSw');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setFlexRoutingSw(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing InternalCallSw');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setInternalCallSw(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing InternalSipCallSw');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setInternalSipCallSw(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}ChannelArr
//
function AST_ChannelArr () {
    this.typeMarker = 'AST_ChannelArr';
    this._item = [];
}

//
// accessor is AST_ChannelArr.prototype.getItem
// element get for item
// - element type is {urn:ast}Channel
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_ChannelArr.prototype.setItem
//
function AST_ChannelArr_getItem() { return this._item;}

AST_ChannelArr.prototype.getItem = AST_ChannelArr_getItem;

function AST_ChannelArr_setItem(value) { this._item = value;}

AST_ChannelArr.prototype.setItem = AST_ChannelArr_setItem;
//
// Serialize {urn:ast}ChannelArr
//
function AST_ChannelArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_ChannelArr.prototype.serialize = AST_ChannelArr_serialize;

function AST_ChannelArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_ChannelArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_Channel_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipAnalogArr
//
function AST_SipAnalogArr () {
    this.typeMarker = 'AST_SipAnalogArr';
    this._item = [];
}

//
// accessor is AST_SipAnalogArr.prototype.getItem
// element get for item
// - element type is {urn:ast}SipAnalog
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_SipAnalogArr.prototype.setItem
//
function AST_SipAnalogArr_getItem() { return this._item;}

AST_SipAnalogArr.prototype.getItem = AST_SipAnalogArr_getItem;

function AST_SipAnalogArr_setItem(value) { this._item = value;}

AST_SipAnalogArr.prototype.setItem = AST_SipAnalogArr_setItem;
//
// Serialize {urn:ast}SipAnalogArr
//
function AST_SipAnalogArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipAnalogArr.prototype.serialize = AST_SipAnalogArr_serialize;

function AST_SipAnalogArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipAnalogArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_SipAnalog_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AdvCloudGet
//
function AST_AdvCloudGet () {
    this.typeMarker = 'AST_AdvCloudGet';
    this._combuf = null;
    this._general = null;
}

//
// accessor is AST_AdvCloudGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_AdvCloudGet.prototype.setCombuf
//
function AST_AdvCloudGet_getCombuf() { return this._combuf;}

AST_AdvCloudGet.prototype.getCombuf = AST_AdvCloudGet_getCombuf;

function AST_AdvCloudGet_setCombuf(value) { this._combuf = value;}

AST_AdvCloudGet.prototype.setCombuf = AST_AdvCloudGet_setCombuf;
//
// accessor is AST_AdvCloudGet.prototype.getGeneral
// element get for general
// - element type is {urn:ast}AdvCloudGeneral
// - required element
//
// element set for general
// setter function is is AST_AdvCloudGet.prototype.setGeneral
//
function AST_AdvCloudGet_getGeneral() { return this._general;}

AST_AdvCloudGet.prototype.getGeneral = AST_AdvCloudGet_getGeneral;

function AST_AdvCloudGet_setGeneral(value) { this._general = value;}

AST_AdvCloudGet.prototype.setGeneral = AST_AdvCloudGet_setGeneral;
//
// Serialize {urn:ast}AdvCloudGet
//
function AST_AdvCloudGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._general.serialize(cxfjsutils, 'jns0:general', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AdvCloudGet.prototype.serialize = AST_AdvCloudGet_serialize;

function AST_AdvCloudGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AdvCloudGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing general');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_AdvCloudGeneral_deserialize(cxfjsutils, curElement);
    }
    newobject.setGeneral(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipAdvSTUN
//
function AST_SipAdvSTUN () {
    this.typeMarker = 'AST_SipAdvSTUN';
    this._enable = '';
    this._port = '';
    this._reflesh = 0;
    this._server = null;
}

//
// accessor is AST_SipAdvSTUN.prototype.getEnable
// element get for enable
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for enable
// setter function is is AST_SipAdvSTUN.prototype.setEnable
//
function AST_SipAdvSTUN_getEnable() { return this._enable;}

AST_SipAdvSTUN.prototype.getEnable = AST_SipAdvSTUN_getEnable;

function AST_SipAdvSTUN_setEnable(value) { this._enable = value;}

AST_SipAdvSTUN.prototype.setEnable = AST_SipAdvSTUN_setEnable;
//
// accessor is AST_SipAdvSTUN.prototype.getPort
// element get for port
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedShort
// - required element
//
// element set for port
// setter function is is AST_SipAdvSTUN.prototype.setPort
//
function AST_SipAdvSTUN_getPort() { return this._port;}

AST_SipAdvSTUN.prototype.getPort = AST_SipAdvSTUN_getPort;

function AST_SipAdvSTUN_setPort(value) { this._port = value;}

AST_SipAdvSTUN.prototype.setPort = AST_SipAdvSTUN_setPort;
//
// accessor is AST_SipAdvSTUN.prototype.getReflesh
// element get for reflesh
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for reflesh
// setter function is is AST_SipAdvSTUN.prototype.setReflesh
//
function AST_SipAdvSTUN_getReflesh() { return this._reflesh;}

AST_SipAdvSTUN.prototype.getReflesh = AST_SipAdvSTUN_getReflesh;

function AST_SipAdvSTUN_setReflesh(value) { this._reflesh = value;}

AST_SipAdvSTUN.prototype.setReflesh = AST_SipAdvSTUN_setReflesh;
//
// accessor is AST_SipAdvSTUN.prototype.getServer
// element get for server
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for server
// setter function is is AST_SipAdvSTUN.prototype.setServer
//
function AST_SipAdvSTUN_getServer() { return this._server;}

AST_SipAdvSTUN.prototype.getServer = AST_SipAdvSTUN_getServer;

function AST_SipAdvSTUN_setServer(value) { this._server = value;}

AST_SipAdvSTUN.prototype.setServer = AST_SipAdvSTUN_setServer;
//
// Serialize {urn:ast}SipAdvSTUN
//
function AST_SipAdvSTUN_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:enable>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._enable);
     xml = xml + '</jns0:enable>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:port>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._port);
     xml = xml + '</jns0:port>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:reflesh>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._reflesh);
     xml = xml + '</jns0:reflesh>';
    }
    // block for local variables
    {
     if (this._server == null) {
      xml = xml + '<jns0:server xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:server>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._server);
      xml = xml + '</jns0:server>';
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipAdvSTUN.prototype.serialize = AST_SipAdvSTUN_serialize;

function AST_SipAdvSTUN_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipAdvSTUN();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing enable');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setEnable(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing port');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setPort(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing reflesh');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setReflesh(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing server');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setServer(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipBatch
//
function AST_SipBatch () {
    this.typeMarker = 'AST_SipBatch';
    this._section = null;
    this._username = null;
    this._secret = null;
    this._host = null;
    this._port = 0;
    this._md5 = '';
    this._order = '';
    this._registration = '';
}

//
// accessor is AST_SipBatch.prototype.getSection
// element get for section
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for section
// setter function is is AST_SipBatch.prototype.setSection
//
function AST_SipBatch_getSection() { return this._section;}

AST_SipBatch.prototype.getSection = AST_SipBatch_getSection;

function AST_SipBatch_setSection(value) { this._section = value;}

AST_SipBatch.prototype.setSection = AST_SipBatch_setSection;
//
// accessor is AST_SipBatch.prototype.getUsername
// element get for username
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for username
// setter function is is AST_SipBatch.prototype.setUsername
//
function AST_SipBatch_getUsername() { return this._username;}

AST_SipBatch.prototype.getUsername = AST_SipBatch_getUsername;

function AST_SipBatch_setUsername(value) { this._username = value;}

AST_SipBatch.prototype.setUsername = AST_SipBatch_setUsername;
//
// accessor is AST_SipBatch.prototype.getSecret
// element get for secret
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for secret
// setter function is is AST_SipBatch.prototype.setSecret
//
function AST_SipBatch_getSecret() { return this._secret;}

AST_SipBatch.prototype.getSecret = AST_SipBatch_getSecret;

function AST_SipBatch_setSecret(value) { this._secret = value;}

AST_SipBatch.prototype.setSecret = AST_SipBatch_setSecret;
//
// accessor is AST_SipBatch.prototype.getHost
// element get for host
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for host
// setter function is is AST_SipBatch.prototype.setHost
//
function AST_SipBatch_getHost() { return this._host;}

AST_SipBatch.prototype.getHost = AST_SipBatch_getHost;

function AST_SipBatch_setHost(value) { this._host = value;}

AST_SipBatch.prototype.setHost = AST_SipBatch_setHost;
//
// accessor is AST_SipBatch.prototype.getPort
// element get for port
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for port
// setter function is is AST_SipBatch.prototype.setPort
//
function AST_SipBatch_getPort() { return this._port;}

AST_SipBatch.prototype.getPort = AST_SipBatch_getPort;

function AST_SipBatch_setPort(value) { this._port = value;}

AST_SipBatch.prototype.setPort = AST_SipBatch_setPort;
//
// accessor is AST_SipBatch.prototype.getMd5
// element get for md5
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
//
// element set for md5
// setter function is is AST_SipBatch.prototype.setMd5
//
function AST_SipBatch_getMd5() { return this._md5;}

AST_SipBatch.prototype.getMd5 = AST_SipBatch_getMd5;

function AST_SipBatch_setMd5(value) { this._md5 = value;}

AST_SipBatch.prototype.setMd5 = AST_SipBatch_setMd5;
//
// accessor is AST_SipBatch.prototype.getOrder
// element get for order
// - element type is {http://www.w3.org/2001/XMLSchema}short
// - required element
//
// element set for order
// setter function is is AST_SipBatch.prototype.setOrder
//
function AST_SipBatch_getOrder() { return this._order;}

AST_SipBatch.prototype.getOrder = AST_SipBatch_getOrder;

function AST_SipBatch_setOrder(value) { this._order = value;}

AST_SipBatch.prototype.setOrder = AST_SipBatch_setOrder;
//
// accessor is AST_SipBatch.prototype.getRegistration
// element get for registration
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for registration
// setter function is is AST_SipBatch.prototype.setRegistration
//
function AST_SipBatch_getRegistration() { return this._registration;}

AST_SipBatch.prototype.getRegistration = AST_SipBatch_getRegistration;

function AST_SipBatch_setRegistration(value) { this._registration = value;}

AST_SipBatch.prototype.setRegistration = AST_SipBatch_setRegistration;
//
// Serialize {urn:ast}SipBatch
//
function AST_SipBatch_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._section == null) {
      xml = xml + '<jns0:section xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:section>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._section);
      xml = xml + '</jns0:section>';
     }
    }
    // block for local variables
    {
     if (this._username == null) {
      xml = xml + '<jns0:username xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:username>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._username);
      xml = xml + '</jns0:username>';
     }
    }
    // block for local variables
    {
     if (this._secret == null) {
      xml = xml + '<jns0:secret xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:secret>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._secret);
      xml = xml + '</jns0:secret>';
     }
    }
    // block for local variables
    {
     if (this._host == null) {
      xml = xml + '<jns0:host xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:host>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._host);
      xml = xml + '</jns0:host>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:port>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._port);
     xml = xml + '</jns0:port>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:md5>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._md5);
     xml = xml + '</jns0:md5>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:order>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._order);
     xml = xml + '</jns0:order>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:registration>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._registration);
     xml = xml + '</jns0:registration>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipBatch.prototype.serialize = AST_SipBatch_serialize;

function AST_SipBatch_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipBatch();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing section');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSection(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing username');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setUsername(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing secret');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSecret(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing host');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setHost(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing port');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setPort(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing md5');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setMd5(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing order');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setOrder(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing registration');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setRegistration(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}NetworkTookitGet
//
function AST_NetworkTookitGet () {
    this.typeMarker = 'AST_NetworkTookitGet';
    this._combuf = null;
    this._ethname = null;
    this._sections = null;
}

//
// accessor is AST_NetworkTookitGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_NetworkTookitGet.prototype.setCombuf
//
function AST_NetworkTookitGet_getCombuf() { return this._combuf;}

AST_NetworkTookitGet.prototype.getCombuf = AST_NetworkTookitGet_getCombuf;

function AST_NetworkTookitGet_setCombuf(value) { this._combuf = value;}

AST_NetworkTookitGet.prototype.setCombuf = AST_NetworkTookitGet_setCombuf;
//
// accessor is AST_NetworkTookitGet.prototype.getEthname
// element get for ethname
// - element type is {urn:ast}NetworkEthName
// - required element
//
// element set for ethname
// setter function is is AST_NetworkTookitGet.prototype.setEthname
//
function AST_NetworkTookitGet_getEthname() { return this._ethname;}

AST_NetworkTookitGet.prototype.getEthname = AST_NetworkTookitGet_getEthname;

function AST_NetworkTookitGet_setEthname(value) { this._ethname = value;}

AST_NetworkTookitGet.prototype.setEthname = AST_NetworkTookitGet_setEthname;
//
// accessor is AST_NetworkTookitGet.prototype.getSections
// element get for sections
// - element type is {urn:ast}ChannelArr
// - required element
//
// element set for sections
// setter function is is AST_NetworkTookitGet.prototype.setSections
//
function AST_NetworkTookitGet_getSections() { return this._sections;}

AST_NetworkTookitGet.prototype.getSections = AST_NetworkTookitGet_getSections;

function AST_NetworkTookitGet_setSections(value) { this._sections = value;}

AST_NetworkTookitGet.prototype.setSections = AST_NetworkTookitGet_setSections;
//
// Serialize {urn:ast}NetworkTookitGet
//
function AST_NetworkTookitGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._ethname.serialize(cxfjsutils, 'jns0:ethname', null);
    }
    // block for local variables
    {
     xml = xml + this._sections.serialize(cxfjsutils, 'jns0:sections', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_NetworkTookitGet.prototype.serialize = AST_NetworkTookitGet_serialize;

function AST_NetworkTookitGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_NetworkTookitGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ethname');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_NetworkEthName_deserialize(cxfjsutils, curElement);
    }
    newobject.setEthname(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sections');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_ChannelArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setSections(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AlgGlbGetAll
//
function AST_AlgGlbGetAll () {
    this.typeMarker = 'AST_AlgGlbGetAll';
    this._combuf = null;
    this._global = null;
    this._fax = null;
    this._glb = null;
    this._busytones = null;
}

//
// accessor is AST_AlgGlbGetAll.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_AlgGlbGetAll.prototype.setCombuf
//
function AST_AlgGlbGetAll_getCombuf() { return this._combuf;}

AST_AlgGlbGetAll.prototype.getCombuf = AST_AlgGlbGetAll_getCombuf;

function AST_AlgGlbGetAll_setCombuf(value) { this._combuf = value;}

AST_AlgGlbGetAll.prototype.setCombuf = AST_AlgGlbGetAll_setCombuf;
//
// accessor is AST_AlgGlbGetAll.prototype.getGlobal
// element get for global
// - element type is {urn:ast}AlgGlobal
// - required element
//
// element set for global
// setter function is is AST_AlgGlbGetAll.prototype.setGlobal
//
function AST_AlgGlbGetAll_getGlobal() { return this._global;}

AST_AlgGlbGetAll.prototype.getGlobal = AST_AlgGlbGetAll_getGlobal;

function AST_AlgGlbGetAll_setGlobal(value) { this._global = value;}

AST_AlgGlbGetAll.prototype.setGlobal = AST_AlgGlbGetAll_setGlobal;
//
// accessor is AST_AlgGlbGetAll.prototype.getFax
// element get for fax
// - element type is {urn:ast}AlgFax
// - required element
//
// element set for fax
// setter function is is AST_AlgGlbGetAll.prototype.setFax
//
function AST_AlgGlbGetAll_getFax() { return this._fax;}

AST_AlgGlbGetAll.prototype.getFax = AST_AlgGlbGetAll_getFax;

function AST_AlgGlbGetAll_setFax(value) { this._fax = value;}

AST_AlgGlbGetAll.prototype.setFax = AST_AlgGlbGetAll_setFax;
//
// accessor is AST_AlgGlbGetAll.prototype.getGlb
// element get for glb
// - element type is {urn:ast}AlgGlb
// - required element
//
// element set for glb
// setter function is is AST_AlgGlbGetAll.prototype.setGlb
//
function AST_AlgGlbGetAll_getGlb() { return this._glb;}

AST_AlgGlbGetAll.prototype.getGlb = AST_AlgGlbGetAll_getGlb;

function AST_AlgGlbGetAll_setGlb(value) { this._glb = value;}

AST_AlgGlbGetAll.prototype.setGlb = AST_AlgGlbGetAll_setGlb;
//
// accessor is AST_AlgGlbGetAll.prototype.getBusytones
// element get for busytones
// - element type is {urn:ast}AlgBusyTone
// - required element
//
// element set for busytones
// setter function is is AST_AlgGlbGetAll.prototype.setBusytones
//
function AST_AlgGlbGetAll_getBusytones() { return this._busytones;}

AST_AlgGlbGetAll.prototype.getBusytones = AST_AlgGlbGetAll_getBusytones;

function AST_AlgGlbGetAll_setBusytones(value) { this._busytones = value;}

AST_AlgGlbGetAll.prototype.setBusytones = AST_AlgGlbGetAll_setBusytones;
//
// Serialize {urn:ast}AlgGlbGetAll
//
function AST_AlgGlbGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._global.serialize(cxfjsutils, 'jns0:global', null);
    }
    // block for local variables
    {
     xml = xml + this._fax.serialize(cxfjsutils, 'jns0:fax', null);
    }
    // block for local variables
    {
     xml = xml + this._glb.serialize(cxfjsutils, 'jns0:glb', null);
    }
    // block for local variables
    {
     xml = xml + this._busytones.serialize(cxfjsutils, 'jns0:busytones', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AlgGlbGetAll.prototype.serialize = AST_AlgGlbGetAll_serialize;

function AST_AlgGlbGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_AlgGlbGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing global');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_AlgGlobal_deserialize(cxfjsutils, curElement);
    }
    newobject.setGlobal(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fax');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_AlgFax_deserialize(cxfjsutils, curElement);
    }
    newobject.setFax(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing glb');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_AlgGlb_deserialize(cxfjsutils, curElement);
    }
    newobject.setGlb(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing busytones');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_AlgBusyTone_deserialize(cxfjsutils, curElement);
    }
    newobject.setBusytones(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}NetworkWanSave
//
function AST_NetworkWanSave () {
    this.typeMarker = 'AST_NetworkWanSave';
    this._wan = null;
}

//
// accessor is AST_NetworkWanSave.prototype.getWan
// element get for wan
// - element type is {urn:ast}NetworkWan
// - required element
//
// element set for wan
// setter function is is AST_NetworkWanSave.prototype.setWan
//
function AST_NetworkWanSave_getWan() { return this._wan;}

AST_NetworkWanSave.prototype.getWan = AST_NetworkWanSave_getWan;

function AST_NetworkWanSave_setWan(value) { this._wan = value;}

AST_NetworkWanSave.prototype.setWan = AST_NetworkWanSave_setWan;
//
// Serialize {urn:ast}NetworkWanSave
//
function AST_NetworkWanSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._wan.serialize(cxfjsutils, 'jns0:wan', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_NetworkWanSave.prototype.serialize = AST_NetworkWanSave_serialize;

function AST_NetworkWanSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_NetworkWanSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing wan');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_NetworkWan_deserialize(cxfjsutils, curElement);
    }
    newobject.setWan(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SnmpSecurityGroup
//
function AST_SnmpSecurityGroup () {
    this.typeMarker = 'AST_SnmpSecurityGroup';
    this._name = null;
}

//
// accessor is AST_SnmpSecurityGroup.prototype.getName
// element get for name
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for name
// setter function is is AST_SnmpSecurityGroup.prototype.setName
//
function AST_SnmpSecurityGroup_getName() { return this._name;}

AST_SnmpSecurityGroup.prototype.getName = AST_SnmpSecurityGroup_getName;

function AST_SnmpSecurityGroup_setName(value) { this._name = value;}

AST_SnmpSecurityGroup.prototype.setName = AST_SnmpSecurityGroup_setName;
//
// Serialize {urn:ast}SnmpSecurityGroup
//
function AST_SnmpSecurityGroup_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._name == null) {
      xml = xml + '<jns0:name xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:name>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._name);
      xml = xml + '</jns0:name>';
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SnmpSecurityGroup.prototype.serialize = AST_SnmpSecurityGroup_serialize;

function AST_SnmpSecurityGroup_deserialize (cxfjsutils, element) {
    var newobject = new AST_SnmpSecurityGroup();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing name');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setName(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SectionArr
//
function AST_SectionArr () {
    this.typeMarker = 'AST_SectionArr';
    this._item = [];
}

//
// accessor is AST_SectionArr.prototype.getItem
// element get for item
// - element type is {urn:ast}Section
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_SectionArr.prototype.setItem
//
function AST_SectionArr_getItem() { return this._item;}

AST_SectionArr.prototype.getItem = AST_SectionArr_getItem;

function AST_SectionArr_setItem(value) { this._item = value;}

AST_SectionArr.prototype.setItem = AST_SectionArr_setItem;
//
// Serialize {urn:ast}SectionArr
//
function AST_SectionArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SectionArr.prototype.serialize = AST_SectionArr_serialize;

function AST_SectionArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_SectionArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_Section_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AutoProvisionGet
//
function AST_AutoProvisionGet () {
    this.typeMarker = 'AST_AutoProvisionGet';
    this._combuf = null;
    this._autoupdate = null;
}

//
// accessor is AST_AutoProvisionGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_AutoProvisionGet.prototype.setCombuf
//
function AST_AutoProvisionGet_getCombuf() { return this._combuf;}

AST_AutoProvisionGet.prototype.getCombuf = AST_AutoProvisionGet_getCombuf;

function AST_AutoProvisionGet_setCombuf(value) { this._combuf = value;}

AST_AutoProvisionGet.prototype.setCombuf = AST_AutoProvisionGet_setCombuf;
//
// accessor is AST_AutoProvisionGet.prototype.getAutoupdate
// element get for autoupdate
// - element type is {urn:ast}AutoProvision
// - required element
//
// element set for autoupdate
// setter function is is AST_AutoProvisionGet.prototype.setAutoupdate
//
function AST_AutoProvisionGet_getAutoupdate() { return this._autoupdate;}

AST_AutoProvisionGet.prototype.getAutoupdate = AST_AutoProvisionGet_getAutoupdate;

function AST_AutoProvisionGet_setAutoupdate(value) { this._autoupdate = value;}

AST_AutoProvisionGet.prototype.setAutoupdate = AST_AutoProvisionGet_setAutoupdate;
//
// Serialize {urn:ast}AutoProvisionGet
//
function AST_AutoProvisionGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._autoupdate.serialize(cxfjsutils, 'jns0:autoupdate', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AutoProvisionGet.prototype.serialize = AST_AutoProvisionGet_serialize;

function AST_AutoProvisionGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AutoProvisionGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing autoupdate');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_AutoProvision_deserialize(cxfjsutils, curElement);
    }
    newobject.setAutoupdate(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}NetworkDdnsComArr
//
function AST_NetworkDdnsComArr () {
    this.typeMarker = 'AST_NetworkDdnsComArr';
    this._item = [];
}

//
// accessor is AST_NetworkDdnsComArr.prototype.getItem
// element get for item
// - element type is {urn:ast}NetworkDdnsCom
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_NetworkDdnsComArr.prototype.setItem
//
function AST_NetworkDdnsComArr_getItem() { return this._item;}

AST_NetworkDdnsComArr.prototype.getItem = AST_NetworkDdnsComArr_getItem;

function AST_NetworkDdnsComArr_setItem(value) { this._item = value;}

AST_NetworkDdnsComArr.prototype.setItem = AST_NetworkDdnsComArr_setItem;
//
// Serialize {urn:ast}NetworkDdnsComArr
//
function AST_NetworkDdnsComArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_NetworkDdnsComArr.prototype.serialize = AST_NetworkDdnsComArr_serialize;

function AST_NetworkDdnsComArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_NetworkDdnsComArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_NetworkDdnsCom_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipAdvGet
//
function AST_SipAdvGet () {
    this.typeMarker = 'AST_SipAdvGet';
    this._combuf = null;
    this._sipadv = null;
    this._siprtp = null;
}

//
// accessor is AST_SipAdvGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_SipAdvGet.prototype.setCombuf
//
function AST_SipAdvGet_getCombuf() { return this._combuf;}

AST_SipAdvGet.prototype.getCombuf = AST_SipAdvGet_getCombuf;

function AST_SipAdvGet_setCombuf(value) { this._combuf = value;}

AST_SipAdvGet.prototype.setCombuf = AST_SipAdvGet_setCombuf;
//
// accessor is AST_SipAdvGet.prototype.getSipadv
// element get for sipadv
// - element type is {urn:ast}SipAdv
// - required element
//
// element set for sipadv
// setter function is is AST_SipAdvGet.prototype.setSipadv
//
function AST_SipAdvGet_getSipadv() { return this._sipadv;}

AST_SipAdvGet.prototype.getSipadv = AST_SipAdvGet_getSipadv;

function AST_SipAdvGet_setSipadv(value) { this._sipadv = value;}

AST_SipAdvGet.prototype.setSipadv = AST_SipAdvGet_setSipadv;
//
// accessor is AST_SipAdvGet.prototype.getSiprtp
// element get for siprtp
// - element type is {urn:ast}SipRtp
// - required element
//
// element set for siprtp
// setter function is is AST_SipAdvGet.prototype.setSiprtp
//
function AST_SipAdvGet_getSiprtp() { return this._siprtp;}

AST_SipAdvGet.prototype.getSiprtp = AST_SipAdvGet_getSiprtp;

function AST_SipAdvGet_setSiprtp(value) { this._siprtp = value;}

AST_SipAdvGet.prototype.setSiprtp = AST_SipAdvGet_setSiprtp;
//
// Serialize {urn:ast}SipAdvGet
//
function AST_SipAdvGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._sipadv.serialize(cxfjsutils, 'jns0:sipadv', null);
    }
    // block for local variables
    {
     xml = xml + this._siprtp.serialize(cxfjsutils, 'jns0:siprtp', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipAdvGet.prototype.serialize = AST_SipAdvGet_serialize;

function AST_SipAdvGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipAdvGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sipadv');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SipAdv_deserialize(cxfjsutils, curElement);
    }
    newobject.setSipadv(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing siprtp');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SipRtp_deserialize(cxfjsutils, curElement);
    }
    newobject.setSiprtp(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SysTimeSave
//
function AST_SysTimeSave () {
    this.typeMarker = 'AST_SysTimeSave';
    this._time = null;
    this._tz = null;
}

//
// accessor is AST_SysTimeSave.prototype.getTime
// element get for time
// - element type is {urn:ast}SysTime
// - required element
//
// element set for time
// setter function is is AST_SysTimeSave.prototype.setTime
//
function AST_SysTimeSave_getTime() { return this._time;}

AST_SysTimeSave.prototype.getTime = AST_SysTimeSave_getTime;

function AST_SysTimeSave_setTime(value) { this._time = value;}

AST_SysTimeSave.prototype.setTime = AST_SysTimeSave_setTime;
//
// accessor is AST_SysTimeSave.prototype.getTz
// element get for tz
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for tz
// setter function is is AST_SysTimeSave.prototype.setTz
//
function AST_SysTimeSave_getTz() { return this._tz;}

AST_SysTimeSave.prototype.getTz = AST_SysTimeSave_getTz;

function AST_SysTimeSave_setTz(value) { this._tz = value;}

AST_SysTimeSave.prototype.setTz = AST_SysTimeSave_setTz;
//
// Serialize {urn:ast}SysTimeSave
//
function AST_SysTimeSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._time.serialize(cxfjsutils, 'jns0:time', null);
    }
    // block for local variables
    {
     if (this._tz != null) {
      if (this._tz == null) {
       xml = xml + '<jns0:tz xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:tz>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._tz);
       xml = xml + '</jns0:tz>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SysTimeSave.prototype.serialize = AST_SysTimeSave_serialize;

function AST_SysTimeSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_SysTimeSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing time');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SysTime_deserialize(cxfjsutils, curElement);
    }
    newobject.setTime(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing tz');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'tz')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setTz(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AdvCloudGeneral
//
function AST_AdvCloudGeneral () {
    this.typeMarker = 'AST_AdvCloudGeneral';
    this._username = null;
    this._secret = null;
    this._country = null;
    this._url = null;
    this._enabled = '';
}

//
// accessor is AST_AdvCloudGeneral.prototype.getUsername
// element get for username
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for username
// setter function is is AST_AdvCloudGeneral.prototype.setUsername
//
function AST_AdvCloudGeneral_getUsername() { return this._username;}

AST_AdvCloudGeneral.prototype.getUsername = AST_AdvCloudGeneral_getUsername;

function AST_AdvCloudGeneral_setUsername(value) { this._username = value;}

AST_AdvCloudGeneral.prototype.setUsername = AST_AdvCloudGeneral_setUsername;
//
// accessor is AST_AdvCloudGeneral.prototype.getSecret
// element get for secret
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for secret
// setter function is is AST_AdvCloudGeneral.prototype.setSecret
//
function AST_AdvCloudGeneral_getSecret() { return this._secret;}

AST_AdvCloudGeneral.prototype.getSecret = AST_AdvCloudGeneral_getSecret;

function AST_AdvCloudGeneral_setSecret(value) { this._secret = value;}

AST_AdvCloudGeneral.prototype.setSecret = AST_AdvCloudGeneral_setSecret;
//
// accessor is AST_AdvCloudGeneral.prototype.getCountry
// element get for country
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for country
// setter function is is AST_AdvCloudGeneral.prototype.setCountry
//
function AST_AdvCloudGeneral_getCountry() { return this._country;}

AST_AdvCloudGeneral.prototype.getCountry = AST_AdvCloudGeneral_getCountry;

function AST_AdvCloudGeneral_setCountry(value) { this._country = value;}

AST_AdvCloudGeneral.prototype.setCountry = AST_AdvCloudGeneral_setCountry;
//
// accessor is AST_AdvCloudGeneral.prototype.getUrl
// element get for url
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for url
// setter function is is AST_AdvCloudGeneral.prototype.setUrl
//
function AST_AdvCloudGeneral_getUrl() { return this._url;}

AST_AdvCloudGeneral.prototype.getUrl = AST_AdvCloudGeneral_getUrl;

function AST_AdvCloudGeneral_setUrl(value) { this._url = value;}

AST_AdvCloudGeneral.prototype.setUrl = AST_AdvCloudGeneral_setUrl;
//
// accessor is AST_AdvCloudGeneral.prototype.getEnabled
// element get for enabled
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for enabled
// setter function is is AST_AdvCloudGeneral.prototype.setEnabled
//
function AST_AdvCloudGeneral_getEnabled() { return this._enabled;}

AST_AdvCloudGeneral.prototype.getEnabled = AST_AdvCloudGeneral_getEnabled;

function AST_AdvCloudGeneral_setEnabled(value) { this._enabled = value;}

AST_AdvCloudGeneral.prototype.setEnabled = AST_AdvCloudGeneral_setEnabled;
//
// Serialize {urn:ast}AdvCloudGeneral
//
function AST_AdvCloudGeneral_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._username == null) {
      xml = xml + '<jns0:username xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:username>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._username);
      xml = xml + '</jns0:username>';
     }
    }
    // block for local variables
    {
     if (this._secret == null) {
      xml = xml + '<jns0:secret xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:secret>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._secret);
      xml = xml + '</jns0:secret>';
     }
    }
    // block for local variables
    {
     if (this._country == null) {
      xml = xml + '<jns0:country xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:country>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._country);
      xml = xml + '</jns0:country>';
     }
    }
    // block for local variables
    {
     if (this._url == null) {
      xml = xml + '<jns0:url xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:url>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._url);
      xml = xml + '</jns0:url>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:enabled>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._enabled);
     xml = xml + '</jns0:enabled>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AdvCloudGeneral.prototype.serialize = AST_AdvCloudGeneral_serialize;

function AST_AdvCloudGeneral_deserialize (cxfjsutils, element) {
    var newobject = new AST_AdvCloudGeneral();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing username');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setUsername(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing secret');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSecret(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing country');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setCountry(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing url');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setUrl(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing enabled');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setEnabled(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipBendArr
//
function AST_SipBendArr () {
    this.typeMarker = 'AST_SipBendArr';
    this._item = [];
}

//
// accessor is AST_SipBendArr.prototype.getItem
// element get for item
// - element type is {urn:ast}SipBend
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_SipBendArr.prototype.setItem
//
function AST_SipBendArr_getItem() { return this._item;}

AST_SipBendArr.prototype.getItem = AST_SipBendArr_getItem;

function AST_SipBendArr_setItem(value) { this._item = value;}

AST_SipBendArr.prototype.setItem = AST_SipBendArr_setItem;
//
// Serialize {urn:ast}SipBendArr
//
function AST_SipBendArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipBendArr.prototype.serialize = AST_SipBendArr_serialize;

function AST_SipBendArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipBendArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_SipBend_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipAdv
//
function AST_SipAdv () {
    this.typeMarker = 'AST_SipAdv';
    this._udpbindport = '';
    this._tcpbindport = '';
    this._tcpauthtimeout = 0;
    this._tcpauthlimit = 0;
    this._tcpenable = '';
    this._srvlookup = '';
    this._subevent = '';
    this._matchexternaddrlocally = '';
    this._localnet = '';
    this._dynamicexcludestatic = '';
    this._pedantic = '';
    this._compactheaders = '';
    this._shrinkcallerid = '';
    this._externtcpport = '';
    this._matchauthusername = '';
    this._domainasrealm = '';
    this._externaddr = null;
    this._externhost = null;
    this._externrefresh = null;
    this._rtptimeout = 0;
    this._sdpowner = null;
    this._disallowedmethods = null;
    this._maxexpiry = 0;
    this._minexpiry = 0;
    this._defaultexpiry = 0;
    this._registertimeout = 0;
    this._registerattempts = 0;
    this._alwaysauthreject = '';
    this._authoptionsrequest = '';
    this._allowguest = '';
    this._prematuremedia = '';
    this._realm = null;
    this._tossip = null;
    this._tosaudio = null;
    this._sipto = '';
    this._directmedia = '';
    this._matchingpriority = 0;
    this._calleeid1 = '';
    this._calleeid2 = '';
    this._hangupcausecode = 0;
    this._allowcidnamefromdomin = 0;
    this._stun = null;
}

//
// accessor is AST_SipAdv.prototype.getUdpbindport
// element get for udpbindport
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedShort
// - required element
//
// element set for udpbindport
// setter function is is AST_SipAdv.prototype.setUdpbindport
//
function AST_SipAdv_getUdpbindport() { return this._udpbindport;}

AST_SipAdv.prototype.getUdpbindport = AST_SipAdv_getUdpbindport;

function AST_SipAdv_setUdpbindport(value) { this._udpbindport = value;}

AST_SipAdv.prototype.setUdpbindport = AST_SipAdv_setUdpbindport;
//
// accessor is AST_SipAdv.prototype.getTcpbindport
// element get for tcpbindport
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedShort
// - required element
//
// element set for tcpbindport
// setter function is is AST_SipAdv.prototype.setTcpbindport
//
function AST_SipAdv_getTcpbindport() { return this._tcpbindport;}

AST_SipAdv.prototype.getTcpbindport = AST_SipAdv_getTcpbindport;

function AST_SipAdv_setTcpbindport(value) { this._tcpbindport = value;}

AST_SipAdv.prototype.setTcpbindport = AST_SipAdv_setTcpbindport;
//
// accessor is AST_SipAdv.prototype.getTcpauthtimeout
// element get for tcpauthtimeout
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for tcpauthtimeout
// setter function is is AST_SipAdv.prototype.setTcpauthtimeout
//
function AST_SipAdv_getTcpauthtimeout() { return this._tcpauthtimeout;}

AST_SipAdv.prototype.getTcpauthtimeout = AST_SipAdv_getTcpauthtimeout;

function AST_SipAdv_setTcpauthtimeout(value) { this._tcpauthtimeout = value;}

AST_SipAdv.prototype.setTcpauthtimeout = AST_SipAdv_setTcpauthtimeout;
//
// accessor is AST_SipAdv.prototype.getTcpauthlimit
// element get for tcpauthlimit
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for tcpauthlimit
// setter function is is AST_SipAdv.prototype.setTcpauthlimit
//
function AST_SipAdv_getTcpauthlimit() { return this._tcpauthlimit;}

AST_SipAdv.prototype.getTcpauthlimit = AST_SipAdv_getTcpauthlimit;

function AST_SipAdv_setTcpauthlimit(value) { this._tcpauthlimit = value;}

AST_SipAdv.prototype.setTcpauthlimit = AST_SipAdv_setTcpauthlimit;
//
// accessor is AST_SipAdv.prototype.getTcpenable
// element get for tcpenable
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for tcpenable
// setter function is is AST_SipAdv.prototype.setTcpenable
//
function AST_SipAdv_getTcpenable() { return this._tcpenable;}

AST_SipAdv.prototype.getTcpenable = AST_SipAdv_getTcpenable;

function AST_SipAdv_setTcpenable(value) { this._tcpenable = value;}

AST_SipAdv.prototype.setTcpenable = AST_SipAdv_setTcpenable;
//
// accessor is AST_SipAdv.prototype.getSrvlookup
// element get for srvlookup
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for srvlookup
// setter function is is AST_SipAdv.prototype.setSrvlookup
//
function AST_SipAdv_getSrvlookup() { return this._srvlookup;}

AST_SipAdv.prototype.getSrvlookup = AST_SipAdv_getSrvlookup;

function AST_SipAdv_setSrvlookup(value) { this._srvlookup = value;}

AST_SipAdv.prototype.setSrvlookup = AST_SipAdv_setSrvlookup;
//
// accessor is AST_SipAdv.prototype.getSubevent
// element get for subevent
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for subevent
// setter function is is AST_SipAdv.prototype.setSubevent
//
function AST_SipAdv_getSubevent() { return this._subevent;}

AST_SipAdv.prototype.getSubevent = AST_SipAdv_getSubevent;

function AST_SipAdv_setSubevent(value) { this._subevent = value;}

AST_SipAdv.prototype.setSubevent = AST_SipAdv_setSubevent;
//
// accessor is AST_SipAdv.prototype.getMatchexternaddrlocally
// element get for matchexternaddrlocally
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for matchexternaddrlocally
// setter function is is AST_SipAdv.prototype.setMatchexternaddrlocally
//
function AST_SipAdv_getMatchexternaddrlocally() { return this._matchexternaddrlocally;}

AST_SipAdv.prototype.getMatchexternaddrlocally = AST_SipAdv_getMatchexternaddrlocally;

function AST_SipAdv_setMatchexternaddrlocally(value) { this._matchexternaddrlocally = value;}

AST_SipAdv.prototype.setMatchexternaddrlocally = AST_SipAdv_setMatchexternaddrlocally;
//
// accessor is AST_SipAdv.prototype.getLocalnet
// element get for localnet
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
//
// element set for localnet
// setter function is is AST_SipAdv.prototype.setLocalnet
//
function AST_SipAdv_getLocalnet() { return this._localnet;}

AST_SipAdv.prototype.getLocalnet = AST_SipAdv_getLocalnet;

function AST_SipAdv_setLocalnet(value) { this._localnet = value;}

AST_SipAdv.prototype.setLocalnet = AST_SipAdv_setLocalnet;
//
// accessor is AST_SipAdv.prototype.getDynamicexcludestatic
// element get for dynamicexcludestatic
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for dynamicexcludestatic
// setter function is is AST_SipAdv.prototype.setDynamicexcludestatic
//
function AST_SipAdv_getDynamicexcludestatic() { return this._dynamicexcludestatic;}

AST_SipAdv.prototype.getDynamicexcludestatic = AST_SipAdv_getDynamicexcludestatic;

function AST_SipAdv_setDynamicexcludestatic(value) { this._dynamicexcludestatic = value;}

AST_SipAdv.prototype.setDynamicexcludestatic = AST_SipAdv_setDynamicexcludestatic;
//
// accessor is AST_SipAdv.prototype.getPedantic
// element get for pedantic
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for pedantic
// setter function is is AST_SipAdv.prototype.setPedantic
//
function AST_SipAdv_getPedantic() { return this._pedantic;}

AST_SipAdv.prototype.getPedantic = AST_SipAdv_getPedantic;

function AST_SipAdv_setPedantic(value) { this._pedantic = value;}

AST_SipAdv.prototype.setPedantic = AST_SipAdv_setPedantic;
//
// accessor is AST_SipAdv.prototype.getCompactheaders
// element get for compactheaders
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for compactheaders
// setter function is is AST_SipAdv.prototype.setCompactheaders
//
function AST_SipAdv_getCompactheaders() { return this._compactheaders;}

AST_SipAdv.prototype.getCompactheaders = AST_SipAdv_getCompactheaders;

function AST_SipAdv_setCompactheaders(value) { this._compactheaders = value;}

AST_SipAdv.prototype.setCompactheaders = AST_SipAdv_setCompactheaders;
//
// accessor is AST_SipAdv.prototype.getShrinkcallerid
// element get for shrinkcallerid
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for shrinkcallerid
// setter function is is AST_SipAdv.prototype.setShrinkcallerid
//
function AST_SipAdv_getShrinkcallerid() { return this._shrinkcallerid;}

AST_SipAdv.prototype.getShrinkcallerid = AST_SipAdv_getShrinkcallerid;

function AST_SipAdv_setShrinkcallerid(value) { this._shrinkcallerid = value;}

AST_SipAdv.prototype.setShrinkcallerid = AST_SipAdv_setShrinkcallerid;
//
// accessor is AST_SipAdv.prototype.getExterntcpport
// element get for externtcpport
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedShort
// - required element
//
// element set for externtcpport
// setter function is is AST_SipAdv.prototype.setExterntcpport
//
function AST_SipAdv_getExterntcpport() { return this._externtcpport;}

AST_SipAdv.prototype.getExterntcpport = AST_SipAdv_getExterntcpport;

function AST_SipAdv_setExterntcpport(value) { this._externtcpport = value;}

AST_SipAdv.prototype.setExterntcpport = AST_SipAdv_setExterntcpport;
//
// accessor is AST_SipAdv.prototype.getMatchauthusername
// element get for matchauthusername
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for matchauthusername
// setter function is is AST_SipAdv.prototype.setMatchauthusername
//
function AST_SipAdv_getMatchauthusername() { return this._matchauthusername;}

AST_SipAdv.prototype.getMatchauthusername = AST_SipAdv_getMatchauthusername;

function AST_SipAdv_setMatchauthusername(value) { this._matchauthusername = value;}

AST_SipAdv.prototype.setMatchauthusername = AST_SipAdv_setMatchauthusername;
//
// accessor is AST_SipAdv.prototype.getDomainasrealm
// element get for domainasrealm
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for domainasrealm
// setter function is is AST_SipAdv.prototype.setDomainasrealm
//
function AST_SipAdv_getDomainasrealm() { return this._domainasrealm;}

AST_SipAdv.prototype.getDomainasrealm = AST_SipAdv_getDomainasrealm;

function AST_SipAdv_setDomainasrealm(value) { this._domainasrealm = value;}

AST_SipAdv.prototype.setDomainasrealm = AST_SipAdv_setDomainasrealm;
//
// accessor is AST_SipAdv.prototype.getExternaddr
// element get for externaddr
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for externaddr
// setter function is is AST_SipAdv.prototype.setExternaddr
//
function AST_SipAdv_getExternaddr() { return this._externaddr;}

AST_SipAdv.prototype.getExternaddr = AST_SipAdv_getExternaddr;

function AST_SipAdv_setExternaddr(value) { this._externaddr = value;}

AST_SipAdv.prototype.setExternaddr = AST_SipAdv_setExternaddr;
//
// accessor is AST_SipAdv.prototype.getExternhost
// element get for externhost
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for externhost
// setter function is is AST_SipAdv.prototype.setExternhost
//
function AST_SipAdv_getExternhost() { return this._externhost;}

AST_SipAdv.prototype.getExternhost = AST_SipAdv_getExternhost;

function AST_SipAdv_setExternhost(value) { this._externhost = value;}

AST_SipAdv.prototype.setExternhost = AST_SipAdv_setExternhost;
//
// accessor is AST_SipAdv.prototype.getExternrefresh
// element get for externrefresh
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for externrefresh
// setter function is is AST_SipAdv.prototype.setExternrefresh
//
function AST_SipAdv_getExternrefresh() { return this._externrefresh;}

AST_SipAdv.prototype.getExternrefresh = AST_SipAdv_getExternrefresh;

function AST_SipAdv_setExternrefresh(value) { this._externrefresh = value;}

AST_SipAdv.prototype.setExternrefresh = AST_SipAdv_setExternrefresh;
//
// accessor is AST_SipAdv.prototype.getRtptimeout
// element get for rtptimeout
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for rtptimeout
// setter function is is AST_SipAdv.prototype.setRtptimeout
//
function AST_SipAdv_getRtptimeout() { return this._rtptimeout;}

AST_SipAdv.prototype.getRtptimeout = AST_SipAdv_getRtptimeout;

function AST_SipAdv_setRtptimeout(value) { this._rtptimeout = value;}

AST_SipAdv.prototype.setRtptimeout = AST_SipAdv_setRtptimeout;
//
// accessor is AST_SipAdv.prototype.getSdpowner
// element get for sdpowner
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for sdpowner
// setter function is is AST_SipAdv.prototype.setSdpowner
//
function AST_SipAdv_getSdpowner() { return this._sdpowner;}

AST_SipAdv.prototype.getSdpowner = AST_SipAdv_getSdpowner;

function AST_SipAdv_setSdpowner(value) { this._sdpowner = value;}

AST_SipAdv.prototype.setSdpowner = AST_SipAdv_setSdpowner;
//
// accessor is AST_SipAdv.prototype.getDisallowedmethods
// element get for disallowedmethods
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for disallowedmethods
// setter function is is AST_SipAdv.prototype.setDisallowedmethods
//
function AST_SipAdv_getDisallowedmethods() { return this._disallowedmethods;}

AST_SipAdv.prototype.getDisallowedmethods = AST_SipAdv_getDisallowedmethods;

function AST_SipAdv_setDisallowedmethods(value) { this._disallowedmethods = value;}

AST_SipAdv.prototype.setDisallowedmethods = AST_SipAdv_setDisallowedmethods;
//
// accessor is AST_SipAdv.prototype.getMaxexpiry
// element get for maxexpiry
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for maxexpiry
// setter function is is AST_SipAdv.prototype.setMaxexpiry
//
function AST_SipAdv_getMaxexpiry() { return this._maxexpiry;}

AST_SipAdv.prototype.getMaxexpiry = AST_SipAdv_getMaxexpiry;

function AST_SipAdv_setMaxexpiry(value) { this._maxexpiry = value;}

AST_SipAdv.prototype.setMaxexpiry = AST_SipAdv_setMaxexpiry;
//
// accessor is AST_SipAdv.prototype.getMinexpiry
// element get for minexpiry
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for minexpiry
// setter function is is AST_SipAdv.prototype.setMinexpiry
//
function AST_SipAdv_getMinexpiry() { return this._minexpiry;}

AST_SipAdv.prototype.getMinexpiry = AST_SipAdv_getMinexpiry;

function AST_SipAdv_setMinexpiry(value) { this._minexpiry = value;}

AST_SipAdv.prototype.setMinexpiry = AST_SipAdv_setMinexpiry;
//
// accessor is AST_SipAdv.prototype.getDefaultexpiry
// element get for defaultexpiry
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for defaultexpiry
// setter function is is AST_SipAdv.prototype.setDefaultexpiry
//
function AST_SipAdv_getDefaultexpiry() { return this._defaultexpiry;}

AST_SipAdv.prototype.getDefaultexpiry = AST_SipAdv_getDefaultexpiry;

function AST_SipAdv_setDefaultexpiry(value) { this._defaultexpiry = value;}

AST_SipAdv.prototype.setDefaultexpiry = AST_SipAdv_setDefaultexpiry;
//
// accessor is AST_SipAdv.prototype.getRegistertimeout
// element get for registertimeout
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for registertimeout
// setter function is is AST_SipAdv.prototype.setRegistertimeout
//
function AST_SipAdv_getRegistertimeout() { return this._registertimeout;}

AST_SipAdv.prototype.getRegistertimeout = AST_SipAdv_getRegistertimeout;

function AST_SipAdv_setRegistertimeout(value) { this._registertimeout = value;}

AST_SipAdv.prototype.setRegistertimeout = AST_SipAdv_setRegistertimeout;
//
// accessor is AST_SipAdv.prototype.getRegisterattempts
// element get for registerattempts
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for registerattempts
// setter function is is AST_SipAdv.prototype.setRegisterattempts
//
function AST_SipAdv_getRegisterattempts() { return this._registerattempts;}

AST_SipAdv.prototype.getRegisterattempts = AST_SipAdv_getRegisterattempts;

function AST_SipAdv_setRegisterattempts(value) { this._registerattempts = value;}

AST_SipAdv.prototype.setRegisterattempts = AST_SipAdv_setRegisterattempts;
//
// accessor is AST_SipAdv.prototype.getAlwaysauthreject
// element get for alwaysauthreject
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for alwaysauthreject
// setter function is is AST_SipAdv.prototype.setAlwaysauthreject
//
function AST_SipAdv_getAlwaysauthreject() { return this._alwaysauthreject;}

AST_SipAdv.prototype.getAlwaysauthreject = AST_SipAdv_getAlwaysauthreject;

function AST_SipAdv_setAlwaysauthreject(value) { this._alwaysauthreject = value;}

AST_SipAdv.prototype.setAlwaysauthreject = AST_SipAdv_setAlwaysauthreject;
//
// accessor is AST_SipAdv.prototype.getAuthoptionsrequest
// element get for authoptionsrequest
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for authoptionsrequest
// setter function is is AST_SipAdv.prototype.setAuthoptionsrequest
//
function AST_SipAdv_getAuthoptionsrequest() { return this._authoptionsrequest;}

AST_SipAdv.prototype.getAuthoptionsrequest = AST_SipAdv_getAuthoptionsrequest;

function AST_SipAdv_setAuthoptionsrequest(value) { this._authoptionsrequest = value;}

AST_SipAdv.prototype.setAuthoptionsrequest = AST_SipAdv_setAuthoptionsrequest;
//
// accessor is AST_SipAdv.prototype.getAllowguest
// element get for allowguest
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for allowguest
// setter function is is AST_SipAdv.prototype.setAllowguest
//
function AST_SipAdv_getAllowguest() { return this._allowguest;}

AST_SipAdv.prototype.getAllowguest = AST_SipAdv_getAllowguest;

function AST_SipAdv_setAllowguest(value) { this._allowguest = value;}

AST_SipAdv.prototype.setAllowguest = AST_SipAdv_setAllowguest;
//
// accessor is AST_SipAdv.prototype.getPrematuremedia
// element get for prematuremedia
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for prematuremedia
// setter function is is AST_SipAdv.prototype.setPrematuremedia
//
function AST_SipAdv_getPrematuremedia() { return this._prematuremedia;}

AST_SipAdv.prototype.getPrematuremedia = AST_SipAdv_getPrematuremedia;

function AST_SipAdv_setPrematuremedia(value) { this._prematuremedia = value;}

AST_SipAdv.prototype.setPrematuremedia = AST_SipAdv_setPrematuremedia;
//
// accessor is AST_SipAdv.prototype.getRealm
// element get for realm
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for realm
// setter function is is AST_SipAdv.prototype.setRealm
//
function AST_SipAdv_getRealm() { return this._realm;}

AST_SipAdv.prototype.getRealm = AST_SipAdv_getRealm;

function AST_SipAdv_setRealm(value) { this._realm = value;}

AST_SipAdv.prototype.setRealm = AST_SipAdv_setRealm;
//
// accessor is AST_SipAdv.prototype.getTossip
// element get for tossip
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for tossip
// setter function is is AST_SipAdv.prototype.setTossip
//
function AST_SipAdv_getTossip() { return this._tossip;}

AST_SipAdv.prototype.getTossip = AST_SipAdv_getTossip;

function AST_SipAdv_setTossip(value) { this._tossip = value;}

AST_SipAdv.prototype.setTossip = AST_SipAdv_setTossip;
//
// accessor is AST_SipAdv.prototype.getTosaudio
// element get for tosaudio
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for tosaudio
// setter function is is AST_SipAdv.prototype.setTosaudio
//
function AST_SipAdv_getTosaudio() { return this._tosaudio;}

AST_SipAdv.prototype.getTosaudio = AST_SipAdv_getTosaudio;

function AST_SipAdv_setTosaudio(value) { this._tosaudio = value;}

AST_SipAdv.prototype.setTosaudio = AST_SipAdv_setTosaudio;
//
// accessor is AST_SipAdv.prototype.getSipto
// element get for sipto
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for sipto
// setter function is is AST_SipAdv.prototype.setSipto
//
function AST_SipAdv_getSipto() { return this._sipto;}

AST_SipAdv.prototype.getSipto = AST_SipAdv_getSipto;

function AST_SipAdv_setSipto(value) { this._sipto = value;}

AST_SipAdv.prototype.setSipto = AST_SipAdv_setSipto;
//
// accessor is AST_SipAdv.prototype.getDirectmedia
// element get for directmedia
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for directmedia
// setter function is is AST_SipAdv.prototype.setDirectmedia
//
function AST_SipAdv_getDirectmedia() { return this._directmedia;}

AST_SipAdv.prototype.getDirectmedia = AST_SipAdv_getDirectmedia;

function AST_SipAdv_setDirectmedia(value) { this._directmedia = value;}

AST_SipAdv.prototype.setDirectmedia = AST_SipAdv_setDirectmedia;
//
// accessor is AST_SipAdv.prototype.getMatchingpriority
// element get for matchingpriority
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for matchingpriority
// setter function is is AST_SipAdv.prototype.setMatchingpriority
//
function AST_SipAdv_getMatchingpriority() { return this._matchingpriority;}

AST_SipAdv.prototype.getMatchingpriority = AST_SipAdv_getMatchingpriority;

function AST_SipAdv_setMatchingpriority(value) { this._matchingpriority = value;}

AST_SipAdv.prototype.setMatchingpriority = AST_SipAdv_setMatchingpriority;
//
// accessor is AST_SipAdv.prototype.getCalleeid1
// element get for calleeid1
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for calleeid1
// setter function is is AST_SipAdv.prototype.setCalleeid1
//
function AST_SipAdv_getCalleeid1() { return this._calleeid1;}

AST_SipAdv.prototype.getCalleeid1 = AST_SipAdv_getCalleeid1;

function AST_SipAdv_setCalleeid1(value) { this._calleeid1 = value;}

AST_SipAdv.prototype.setCalleeid1 = AST_SipAdv_setCalleeid1;
//
// accessor is AST_SipAdv.prototype.getCalleeid2
// element get for calleeid2
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for calleeid2
// setter function is is AST_SipAdv.prototype.setCalleeid2
//
function AST_SipAdv_getCalleeid2() { return this._calleeid2;}

AST_SipAdv.prototype.getCalleeid2 = AST_SipAdv_getCalleeid2;

function AST_SipAdv_setCalleeid2(value) { this._calleeid2 = value;}

AST_SipAdv.prototype.setCalleeid2 = AST_SipAdv_setCalleeid2;
//
// accessor is AST_SipAdv.prototype.getHangupcausecode
// element get for hangupcausecode
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for hangupcausecode
// setter function is is AST_SipAdv.prototype.setHangupcausecode
//
function AST_SipAdv_getHangupcausecode() { return this._hangupcausecode;}

AST_SipAdv.prototype.getHangupcausecode = AST_SipAdv_getHangupcausecode;

function AST_SipAdv_setHangupcausecode(value) { this._hangupcausecode = value;}

AST_SipAdv.prototype.setHangupcausecode = AST_SipAdv_setHangupcausecode;
//
// accessor is AST_SipAdv.prototype.getAllowcidnamefromdomin
// element get for allowcidnamefromdomin
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for allowcidnamefromdomin
// setter function is is AST_SipAdv.prototype.setAllowcidnamefromdomin
//
function AST_SipAdv_getAllowcidnamefromdomin() { return this._allowcidnamefromdomin;}

AST_SipAdv.prototype.getAllowcidnamefromdomin = AST_SipAdv_getAllowcidnamefromdomin;

function AST_SipAdv_setAllowcidnamefromdomin(value) { this._allowcidnamefromdomin = value;}

AST_SipAdv.prototype.setAllowcidnamefromdomin = AST_SipAdv_setAllowcidnamefromdomin;
//
// accessor is AST_SipAdv.prototype.getStun
// element get for stun
// - element type is {urn:ast}SipAdvSTUN
// - required element
//
// element set for stun
// setter function is is AST_SipAdv.prototype.setStun
//
function AST_SipAdv_getStun() { return this._stun;}

AST_SipAdv.prototype.getStun = AST_SipAdv_getStun;

function AST_SipAdv_setStun(value) { this._stun = value;}

AST_SipAdv.prototype.setStun = AST_SipAdv_setStun;
//
// Serialize {urn:ast}SipAdv
//
function AST_SipAdv_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:udpbindport>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._udpbindport);
     xml = xml + '</jns0:udpbindport>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:tcpbindport>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._tcpbindport);
     xml = xml + '</jns0:tcpbindport>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:tcpauthtimeout>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._tcpauthtimeout);
     xml = xml + '</jns0:tcpauthtimeout>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:tcpauthlimit>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._tcpauthlimit);
     xml = xml + '</jns0:tcpauthlimit>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:tcpenable>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._tcpenable);
     xml = xml + '</jns0:tcpenable>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:srvlookup>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._srvlookup);
     xml = xml + '</jns0:srvlookup>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:subevent>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._subevent);
     xml = xml + '</jns0:subevent>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:matchexternaddrlocally>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._matchexternaddrlocally);
     xml = xml + '</jns0:matchexternaddrlocally>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:localnet>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._localnet);
     xml = xml + '</jns0:localnet>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:dynamicexcludestatic>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._dynamicexcludestatic);
     xml = xml + '</jns0:dynamicexcludestatic>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:pedantic>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._pedantic);
     xml = xml + '</jns0:pedantic>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:compactheaders>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._compactheaders);
     xml = xml + '</jns0:compactheaders>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:shrinkcallerid>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._shrinkcallerid);
     xml = xml + '</jns0:shrinkcallerid>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:externtcpport>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._externtcpport);
     xml = xml + '</jns0:externtcpport>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:matchauthusername>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._matchauthusername);
     xml = xml + '</jns0:matchauthusername>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:domainasrealm>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._domainasrealm);
     xml = xml + '</jns0:domainasrealm>';
    }
    // block for local variables
    {
     if (this._externaddr == null) {
      xml = xml + '<jns0:externaddr xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:externaddr>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._externaddr);
      xml = xml + '</jns0:externaddr>';
     }
    }
    // block for local variables
    {
     if (this._externhost == null) {
      xml = xml + '<jns0:externhost xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:externhost>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._externhost);
      xml = xml + '</jns0:externhost>';
     }
    }
    // block for local variables
    {
     if (this._externrefresh == null) {
      xml = xml + '<jns0:externrefresh xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:externrefresh>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._externrefresh);
      xml = xml + '</jns0:externrefresh>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:rtptimeout>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._rtptimeout);
     xml = xml + '</jns0:rtptimeout>';
    }
    // block for local variables
    {
     if (this._sdpowner == null) {
      xml = xml + '<jns0:sdpowner xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:sdpowner>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._sdpowner);
      xml = xml + '</jns0:sdpowner>';
     }
    }
    // block for local variables
    {
     if (this._disallowedmethods == null) {
      xml = xml + '<jns0:disallowedmethods xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:disallowedmethods>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._disallowedmethods);
      xml = xml + '</jns0:disallowedmethods>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:maxexpiry>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._maxexpiry);
     xml = xml + '</jns0:maxexpiry>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:minexpiry>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._minexpiry);
     xml = xml + '</jns0:minexpiry>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:defaultexpiry>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._defaultexpiry);
     xml = xml + '</jns0:defaultexpiry>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:registertimeout>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._registertimeout);
     xml = xml + '</jns0:registertimeout>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:registerattempts>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._registerattempts);
     xml = xml + '</jns0:registerattempts>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:alwaysauthreject>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._alwaysauthreject);
     xml = xml + '</jns0:alwaysauthreject>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:authoptionsrequest>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._authoptionsrequest);
     xml = xml + '</jns0:authoptionsrequest>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:allowguest>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._allowguest);
     xml = xml + '</jns0:allowguest>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:prematuremedia>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._prematuremedia);
     xml = xml + '</jns0:prematuremedia>';
    }
    // block for local variables
    {
     if (this._realm == null) {
      xml = xml + '<jns0:realm xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:realm>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._realm);
      xml = xml + '</jns0:realm>';
     }
    }
    // block for local variables
    {
     if (this._tossip == null) {
      xml = xml + '<jns0:tossip xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:tossip>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._tossip);
      xml = xml + '</jns0:tossip>';
     }
    }
    // block for local variables
    {
     if (this._tosaudio == null) {
      xml = xml + '<jns0:tosaudio xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:tosaudio>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._tosaudio);
      xml = xml + '</jns0:tosaudio>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:sipto>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._sipto);
     xml = xml + '</jns0:sipto>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:directmedia>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._directmedia);
     xml = xml + '</jns0:directmedia>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:matchingpriority>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._matchingpriority);
     xml = xml + '</jns0:matchingpriority>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:calleeid1>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._calleeid1);
     xml = xml + '</jns0:calleeid1>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:calleeid2>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._calleeid2);
     xml = xml + '</jns0:calleeid2>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:hangupcausecode>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._hangupcausecode);
     xml = xml + '</jns0:hangupcausecode>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:allowcidnamefromdomin>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._allowcidnamefromdomin);
     xml = xml + '</jns0:allowcidnamefromdomin>';
    }
    // block for local variables
    {
     xml = xml + this._stun.serialize(cxfjsutils, 'jns0:stun', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipAdv.prototype.serialize = AST_SipAdv_serialize;

function AST_SipAdv_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipAdv();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing udpbindport');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setUdpbindport(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing tcpbindport');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setTcpbindport(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing tcpauthtimeout');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setTcpauthtimeout(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing tcpauthlimit');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setTcpauthlimit(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing tcpenable');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setTcpenable(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing srvlookup');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSrvlookup(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing subevent');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSubevent(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing matchexternaddrlocally');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setMatchexternaddrlocally(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing localnet');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setLocalnet(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing dynamicexcludestatic');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setDynamicexcludestatic(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing pedantic');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setPedantic(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing compactheaders');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setCompactheaders(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing shrinkcallerid');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setShrinkcallerid(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing externtcpport');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setExterntcpport(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing matchauthusername');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setMatchauthusername(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing domainasrealm');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setDomainasrealm(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing externaddr');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setExternaddr(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing externhost');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setExternhost(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing externrefresh');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setExternrefresh(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing rtptimeout');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setRtptimeout(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sdpowner');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSdpowner(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing disallowedmethods');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setDisallowedmethods(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing maxexpiry');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setMaxexpiry(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing minexpiry');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setMinexpiry(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing defaultexpiry');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setDefaultexpiry(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing registertimeout');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setRegistertimeout(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing registerattempts');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setRegisterattempts(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing alwaysauthreject');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setAlwaysauthreject(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing authoptionsrequest');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setAuthoptionsrequest(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing allowguest');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setAllowguest(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing prematuremedia');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setPrematuremedia(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing realm');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setRealm(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing tossip');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setTossip(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing tosaudio');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setTosaudio(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sipto');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSipto(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing directmedia');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setDirectmedia(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing matchingpriority');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setMatchingpriority(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing calleeid1');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setCalleeid1(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing calleeid2');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setCalleeid2(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing hangupcausecode');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setHangupcausecode(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing allowcidnamefromdomin');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setAllowcidnamefromdomin(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing stun');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SipAdvSTUN_deserialize(cxfjsutils, curElement);
    }
    newobject.setStun(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipFxoBindingGet
//
function AST_SipFxoBindingGet () {
    this.typeMarker = 'AST_SipFxoBindingGet';
    this._combuf = null;
    this._sip = null;
    this._ana = null;
    this._roules = null;
}

//
// accessor is AST_SipFxoBindingGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_SipFxoBindingGet.prototype.setCombuf
//
function AST_SipFxoBindingGet_getCombuf() { return this._combuf;}

AST_SipFxoBindingGet.prototype.getCombuf = AST_SipFxoBindingGet_getCombuf;

function AST_SipFxoBindingGet_setCombuf(value) { this._combuf = value;}

AST_SipFxoBindingGet.prototype.setCombuf = AST_SipFxoBindingGet_setCombuf;
//
// accessor is AST_SipFxoBindingGet.prototype.getSip
// element get for sip
// - element type is {urn:ast}SectionArr
// - required element
//
// element set for sip
// setter function is is AST_SipFxoBindingGet.prototype.setSip
//
function AST_SipFxoBindingGet_getSip() { return this._sip;}

AST_SipFxoBindingGet.prototype.getSip = AST_SipFxoBindingGet_getSip;

function AST_SipFxoBindingGet_setSip(value) { this._sip = value;}

AST_SipFxoBindingGet.prototype.setSip = AST_SipFxoBindingGet_setSip;
//
// accessor is AST_SipFxoBindingGet.prototype.getAna
// element get for ana
// - element type is {urn:ast}SipAnaArr
// - required element
//
// element set for ana
// setter function is is AST_SipFxoBindingGet.prototype.setAna
//
function AST_SipFxoBindingGet_getAna() { return this._ana;}

AST_SipFxoBindingGet.prototype.getAna = AST_SipFxoBindingGet_getAna;

function AST_SipFxoBindingGet_setAna(value) { this._ana = value;}

AST_SipFxoBindingGet.prototype.setAna = AST_SipFxoBindingGet_setAna;
//
// accessor is AST_SipFxoBindingGet.prototype.getRoules
// element get for roules
// - element type is {urn:ast}RoutingGetArr
// - required element
//
// element set for roules
// setter function is is AST_SipFxoBindingGet.prototype.setRoules
//
function AST_SipFxoBindingGet_getRoules() { return this._roules;}

AST_SipFxoBindingGet.prototype.getRoules = AST_SipFxoBindingGet_getRoules;

function AST_SipFxoBindingGet_setRoules(value) { this._roules = value;}

AST_SipFxoBindingGet.prototype.setRoules = AST_SipFxoBindingGet_setRoules;
//
// Serialize {urn:ast}SipFxoBindingGet
//
function AST_SipFxoBindingGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._sip.serialize(cxfjsutils, 'jns0:sip', null);
    }
    // block for local variables
    {
     xml = xml + this._ana.serialize(cxfjsutils, 'jns0:ana', null);
    }
    // block for local variables
    {
     xml = xml + this._roules.serialize(cxfjsutils, 'jns0:roules', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipFxoBindingGet.prototype.serialize = AST_SipFxoBindingGet_serialize;

function AST_SipFxoBindingGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipFxoBindingGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sip');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SectionArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setSip(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ana');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SipAnaArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setAna(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing roules');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_RoutingGetArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setRoules(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}FxsGroupDial
//
function AST_FxsGroupDial () {
    this.typeMarker = 'AST_FxsGroupDial';
    this._members = null;
    this._dialtimeout = 0;
    this._dialnumber = null;
}

//
// accessor is AST_FxsGroupDial.prototype.getMembers
// element get for members
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for members
// setter function is is AST_FxsGroupDial.prototype.setMembers
//
function AST_FxsGroupDial_getMembers() { return this._members;}

AST_FxsGroupDial.prototype.getMembers = AST_FxsGroupDial_getMembers;

function AST_FxsGroupDial_setMembers(value) { this._members = value;}

AST_FxsGroupDial.prototype.setMembers = AST_FxsGroupDial_setMembers;
//
// accessor is AST_FxsGroupDial.prototype.getDialtimeout
// element get for dialtimeout
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for dialtimeout
// setter function is is AST_FxsGroupDial.prototype.setDialtimeout
//
function AST_FxsGroupDial_getDialtimeout() { return this._dialtimeout;}

AST_FxsGroupDial.prototype.getDialtimeout = AST_FxsGroupDial_getDialtimeout;

function AST_FxsGroupDial_setDialtimeout(value) { this._dialtimeout = value;}

AST_FxsGroupDial.prototype.setDialtimeout = AST_FxsGroupDial_setDialtimeout;
//
// accessor is AST_FxsGroupDial.prototype.getDialnumber
// element get for dialnumber
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for dialnumber
// setter function is is AST_FxsGroupDial.prototype.setDialnumber
//
function AST_FxsGroupDial_getDialnumber() { return this._dialnumber;}

AST_FxsGroupDial.prototype.getDialnumber = AST_FxsGroupDial_getDialnumber;

function AST_FxsGroupDial_setDialnumber(value) { this._dialnumber = value;}

AST_FxsGroupDial.prototype.setDialnumber = AST_FxsGroupDial_setDialnumber;
//
// Serialize {urn:ast}FxsGroupDial
//
function AST_FxsGroupDial_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._members != null) {
      if (this._members == null) {
       xml = xml + '<jns0:members xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:members>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._members);
       xml = xml + '</jns0:members>';
      }
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:dialtimeout>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._dialtimeout);
     xml = xml + '</jns0:dialtimeout>';
    }
    // block for local variables
    {
     if (this._dialnumber == null) {
      xml = xml + '<jns0:dialnumber xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:dialnumber>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._dialnumber);
      xml = xml + '</jns0:dialnumber>';
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_FxsGroupDial.prototype.serialize = AST_FxsGroupDial_serialize;

function AST_FxsGroupDial_deserialize (cxfjsutils, element) {
    var newobject = new AST_FxsGroupDial();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing members');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'members')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setMembers(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing dialtimeout');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setDialtimeout(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing dialnumber');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setDialnumber(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AlgPickupChnArr
//
function AST_AlgPickupChnArr () {
    this.typeMarker = 'AST_AlgPickupChnArr';
    this._item = [];
}

//
// accessor is AST_AlgPickupChnArr.prototype.getItem
// element get for item
// - element type is {urn:ast}AlgPickupChn
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_AlgPickupChnArr.prototype.setItem
//
function AST_AlgPickupChnArr_getItem() { return this._item;}

AST_AlgPickupChnArr.prototype.getItem = AST_AlgPickupChnArr_getItem;

function AST_AlgPickupChnArr_setItem(value) { this._item = value;}

AST_AlgPickupChnArr.prototype.setItem = AST_AlgPickupChnArr_setItem;
//
// Serialize {urn:ast}AlgPickupChnArr
//
function AST_AlgPickupChnArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AlgPickupChnArr.prototype.serialize = AST_AlgPickupChnArr_serialize;

function AST_AlgPickupChnArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_AlgPickupChnArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_AlgPickupChn_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AutoProvision
//
function AST_AutoProvision () {
    this.typeMarker = 'AST_AutoProvision';
    this._enable = '';
    this._cfgenable = '';
    this._dhcpoption66 = '';
    this._mode = '';
    this._serverurl = null;
}

//
// accessor is AST_AutoProvision.prototype.getEnable
// element get for enable
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for enable
// setter function is is AST_AutoProvision.prototype.setEnable
//
function AST_AutoProvision_getEnable() { return this._enable;}

AST_AutoProvision.prototype.getEnable = AST_AutoProvision_getEnable;

function AST_AutoProvision_setEnable(value) { this._enable = value;}

AST_AutoProvision.prototype.setEnable = AST_AutoProvision_setEnable;
//
// accessor is AST_AutoProvision.prototype.getCfgenable
// element get for cfgenable
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for cfgenable
// setter function is is AST_AutoProvision.prototype.setCfgenable
//
function AST_AutoProvision_getCfgenable() { return this._cfgenable;}

AST_AutoProvision.prototype.getCfgenable = AST_AutoProvision_getCfgenable;

function AST_AutoProvision_setCfgenable(value) { this._cfgenable = value;}

AST_AutoProvision.prototype.setCfgenable = AST_AutoProvision_setCfgenable;
//
// accessor is AST_AutoProvision.prototype.getDhcpoption66
// element get for dhcpoption66
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for dhcpoption66
// setter function is is AST_AutoProvision.prototype.setDhcpoption66
//
function AST_AutoProvision_getDhcpoption66() { return this._dhcpoption66;}

AST_AutoProvision.prototype.getDhcpoption66 = AST_AutoProvision_getDhcpoption66;

function AST_AutoProvision_setDhcpoption66(value) { this._dhcpoption66 = value;}

AST_AutoProvision.prototype.setDhcpoption66 = AST_AutoProvision_setDhcpoption66;
//
// accessor is AST_AutoProvision.prototype.getMode
// element get for mode
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for mode
// setter function is is AST_AutoProvision.prototype.setMode
//
function AST_AutoProvision_getMode() { return this._mode;}

AST_AutoProvision.prototype.getMode = AST_AutoProvision_getMode;

function AST_AutoProvision_setMode(value) { this._mode = value;}

AST_AutoProvision.prototype.setMode = AST_AutoProvision_setMode;
//
// accessor is AST_AutoProvision.prototype.getServerurl
// element get for serverurl
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for serverurl
// setter function is is AST_AutoProvision.prototype.setServerurl
//
function AST_AutoProvision_getServerurl() { return this._serverurl;}

AST_AutoProvision.prototype.getServerurl = AST_AutoProvision_getServerurl;

function AST_AutoProvision_setServerurl(value) { this._serverurl = value;}

AST_AutoProvision.prototype.setServerurl = AST_AutoProvision_setServerurl;
//
// Serialize {urn:ast}AutoProvision
//
function AST_AutoProvision_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:enable>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._enable);
     xml = xml + '</jns0:enable>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:cfgenable>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._cfgenable);
     xml = xml + '</jns0:cfgenable>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:dhcpoption66>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._dhcpoption66);
     xml = xml + '</jns0:dhcpoption66>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:mode>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._mode);
     xml = xml + '</jns0:mode>';
    }
    // block for local variables
    {
     if (this._serverurl == null) {
      xml = xml + '<jns0:serverurl xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:serverurl>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._serverurl);
      xml = xml + '</jns0:serverurl>';
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AutoProvision.prototype.serialize = AST_AutoProvision_serialize;

function AST_AutoProvision_deserialize (cxfjsutils, element) {
    var newobject = new AST_AutoProvision();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing enable');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setEnable(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing cfgenable');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setCfgenable(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing dhcpoption66');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setDhcpoption66(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing mode');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setMode(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing serverurl');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setServerurl(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RoutingAdvGet
//
function AST_RoutingAdvGet () {
    this.typeMarker = 'AST_RoutingAdvGet';
    this._combuf = null;
    this._FlexRoutingSw = '';
    this._InternalCallSw = '';
    this._InternalSipCallSw = '';
}

//
// accessor is AST_RoutingAdvGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_RoutingAdvGet.prototype.setCombuf
//
function AST_RoutingAdvGet_getCombuf() { return this._combuf;}

AST_RoutingAdvGet.prototype.getCombuf = AST_RoutingAdvGet_getCombuf;

function AST_RoutingAdvGet_setCombuf(value) { this._combuf = value;}

AST_RoutingAdvGet.prototype.setCombuf = AST_RoutingAdvGet_setCombuf;
//
// accessor is AST_RoutingAdvGet.prototype.getFlexRoutingSw
// element get for FlexRoutingSw
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for FlexRoutingSw
// setter function is is AST_RoutingAdvGet.prototype.setFlexRoutingSw
//
function AST_RoutingAdvGet_getFlexRoutingSw() { return this._FlexRoutingSw;}

AST_RoutingAdvGet.prototype.getFlexRoutingSw = AST_RoutingAdvGet_getFlexRoutingSw;

function AST_RoutingAdvGet_setFlexRoutingSw(value) { this._FlexRoutingSw = value;}

AST_RoutingAdvGet.prototype.setFlexRoutingSw = AST_RoutingAdvGet_setFlexRoutingSw;
//
// accessor is AST_RoutingAdvGet.prototype.getInternalCallSw
// element get for InternalCallSw
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for InternalCallSw
// setter function is is AST_RoutingAdvGet.prototype.setInternalCallSw
//
function AST_RoutingAdvGet_getInternalCallSw() { return this._InternalCallSw;}

AST_RoutingAdvGet.prototype.getInternalCallSw = AST_RoutingAdvGet_getInternalCallSw;

function AST_RoutingAdvGet_setInternalCallSw(value) { this._InternalCallSw = value;}

AST_RoutingAdvGet.prototype.setInternalCallSw = AST_RoutingAdvGet_setInternalCallSw;
//
// accessor is AST_RoutingAdvGet.prototype.getInternalSipCallSw
// element get for InternalSipCallSw
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for InternalSipCallSw
// setter function is is AST_RoutingAdvGet.prototype.setInternalSipCallSw
//
function AST_RoutingAdvGet_getInternalSipCallSw() { return this._InternalSipCallSw;}

AST_RoutingAdvGet.prototype.getInternalSipCallSw = AST_RoutingAdvGet_getInternalSipCallSw;

function AST_RoutingAdvGet_setInternalSipCallSw(value) { this._InternalSipCallSw = value;}

AST_RoutingAdvGet.prototype.setInternalSipCallSw = AST_RoutingAdvGet_setInternalSipCallSw;
//
// Serialize {urn:ast}RoutingAdvGet
//
function AST_RoutingAdvGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + '<jns0:FlexRoutingSw>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._FlexRoutingSw);
     xml = xml + '</jns0:FlexRoutingSw>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:InternalCallSw>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._InternalCallSw);
     xml = xml + '</jns0:InternalCallSw>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:InternalSipCallSw>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._InternalSipCallSw);
     xml = xml + '</jns0:InternalSipCallSw>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RoutingAdvGet.prototype.serialize = AST_RoutingAdvGet_serialize;

function AST_RoutingAdvGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_RoutingAdvGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing FlexRoutingSw');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setFlexRoutingSw(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing InternalCallSw');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setInternalCallSw(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing InternalSipCallSw');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setInternalSipCallSw(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}UcpAlgDriverParam
//
function AST_UcpAlgDriverParam () {
    this.typeMarker = 'AST_UcpAlgDriverParam';
    this._opermode = null;
    this._cidbuflen = 0;
    this._cutcidbufheadlen = 0;
    this._fixedtimepolarity = 0;
    this._fxstxgain = 0;
    this._fxsrxgain = 0;
    this._fxorxgain = 0;
    this._fxotxgain = 0;
    this._Currentthreshold = 0;
    this._cidbeforering = '';
    this._codec = '';
}

//
// accessor is AST_UcpAlgDriverParam.prototype.getOpermode
// element get for opermode
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for opermode
// setter function is is AST_UcpAlgDriverParam.prototype.setOpermode
//
function AST_UcpAlgDriverParam_getOpermode() { return this._opermode;}

AST_UcpAlgDriverParam.prototype.getOpermode = AST_UcpAlgDriverParam_getOpermode;

function AST_UcpAlgDriverParam_setOpermode(value) { this._opermode = value;}

AST_UcpAlgDriverParam.prototype.setOpermode = AST_UcpAlgDriverParam_setOpermode;
//
// accessor is AST_UcpAlgDriverParam.prototype.getCidbuflen
// element get for cidbuflen
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for cidbuflen
// setter function is is AST_UcpAlgDriverParam.prototype.setCidbuflen
//
function AST_UcpAlgDriverParam_getCidbuflen() { return this._cidbuflen;}

AST_UcpAlgDriverParam.prototype.getCidbuflen = AST_UcpAlgDriverParam_getCidbuflen;

function AST_UcpAlgDriverParam_setCidbuflen(value) { this._cidbuflen = value;}

AST_UcpAlgDriverParam.prototype.setCidbuflen = AST_UcpAlgDriverParam_setCidbuflen;
//
// accessor is AST_UcpAlgDriverParam.prototype.getCutcidbufheadlen
// element get for cutcidbufheadlen
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for cutcidbufheadlen
// setter function is is AST_UcpAlgDriverParam.prototype.setCutcidbufheadlen
//
function AST_UcpAlgDriverParam_getCutcidbufheadlen() { return this._cutcidbufheadlen;}

AST_UcpAlgDriverParam.prototype.getCutcidbufheadlen = AST_UcpAlgDriverParam_getCutcidbufheadlen;

function AST_UcpAlgDriverParam_setCutcidbufheadlen(value) { this._cutcidbufheadlen = value;}

AST_UcpAlgDriverParam.prototype.setCutcidbufheadlen = AST_UcpAlgDriverParam_setCutcidbufheadlen;
//
// accessor is AST_UcpAlgDriverParam.prototype.getFixedtimepolarity
// element get for fixedtimepolarity
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for fixedtimepolarity
// setter function is is AST_UcpAlgDriverParam.prototype.setFixedtimepolarity
//
function AST_UcpAlgDriverParam_getFixedtimepolarity() { return this._fixedtimepolarity;}

AST_UcpAlgDriverParam.prototype.getFixedtimepolarity = AST_UcpAlgDriverParam_getFixedtimepolarity;

function AST_UcpAlgDriverParam_setFixedtimepolarity(value) { this._fixedtimepolarity = value;}

AST_UcpAlgDriverParam.prototype.setFixedtimepolarity = AST_UcpAlgDriverParam_setFixedtimepolarity;
//
// accessor is AST_UcpAlgDriverParam.prototype.getFxstxgain
// element get for fxstxgain
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for fxstxgain
// setter function is is AST_UcpAlgDriverParam.prototype.setFxstxgain
//
function AST_UcpAlgDriverParam_getFxstxgain() { return this._fxstxgain;}

AST_UcpAlgDriverParam.prototype.getFxstxgain = AST_UcpAlgDriverParam_getFxstxgain;

function AST_UcpAlgDriverParam_setFxstxgain(value) { this._fxstxgain = value;}

AST_UcpAlgDriverParam.prototype.setFxstxgain = AST_UcpAlgDriverParam_setFxstxgain;
//
// accessor is AST_UcpAlgDriverParam.prototype.getFxsrxgain
// element get for fxsrxgain
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for fxsrxgain
// setter function is is AST_UcpAlgDriverParam.prototype.setFxsrxgain
//
function AST_UcpAlgDriverParam_getFxsrxgain() { return this._fxsrxgain;}

AST_UcpAlgDriverParam.prototype.getFxsrxgain = AST_UcpAlgDriverParam_getFxsrxgain;

function AST_UcpAlgDriverParam_setFxsrxgain(value) { this._fxsrxgain = value;}

AST_UcpAlgDriverParam.prototype.setFxsrxgain = AST_UcpAlgDriverParam_setFxsrxgain;
//
// accessor is AST_UcpAlgDriverParam.prototype.getFxorxgain
// element get for fxorxgain
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for fxorxgain
// setter function is is AST_UcpAlgDriverParam.prototype.setFxorxgain
//
function AST_UcpAlgDriverParam_getFxorxgain() { return this._fxorxgain;}

AST_UcpAlgDriverParam.prototype.getFxorxgain = AST_UcpAlgDriverParam_getFxorxgain;

function AST_UcpAlgDriverParam_setFxorxgain(value) { this._fxorxgain = value;}

AST_UcpAlgDriverParam.prototype.setFxorxgain = AST_UcpAlgDriverParam_setFxorxgain;
//
// accessor is AST_UcpAlgDriverParam.prototype.getFxotxgain
// element get for fxotxgain
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for fxotxgain
// setter function is is AST_UcpAlgDriverParam.prototype.setFxotxgain
//
function AST_UcpAlgDriverParam_getFxotxgain() { return this._fxotxgain;}

AST_UcpAlgDriverParam.prototype.getFxotxgain = AST_UcpAlgDriverParam_getFxotxgain;

function AST_UcpAlgDriverParam_setFxotxgain(value) { this._fxotxgain = value;}

AST_UcpAlgDriverParam.prototype.setFxotxgain = AST_UcpAlgDriverParam_setFxotxgain;
//
// accessor is AST_UcpAlgDriverParam.prototype.getCurrentthreshold
// element get for Currentthreshold
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for Currentthreshold
// setter function is is AST_UcpAlgDriverParam.prototype.setCurrentthreshold
//
function AST_UcpAlgDriverParam_getCurrentthreshold() { return this._Currentthreshold;}

AST_UcpAlgDriverParam.prototype.getCurrentthreshold = AST_UcpAlgDriverParam_getCurrentthreshold;

function AST_UcpAlgDriverParam_setCurrentthreshold(value) { this._Currentthreshold = value;}

AST_UcpAlgDriverParam.prototype.setCurrentthreshold = AST_UcpAlgDriverParam_setCurrentthreshold;
//
// accessor is AST_UcpAlgDriverParam.prototype.getCidbeforering
// element get for cidbeforering
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for cidbeforering
// setter function is is AST_UcpAlgDriverParam.prototype.setCidbeforering
//
function AST_UcpAlgDriverParam_getCidbeforering() { return this._cidbeforering;}

AST_UcpAlgDriverParam.prototype.getCidbeforering = AST_UcpAlgDriverParam_getCidbeforering;

function AST_UcpAlgDriverParam_setCidbeforering(value) { this._cidbeforering = value;}

AST_UcpAlgDriverParam.prototype.setCidbeforering = AST_UcpAlgDriverParam_setCidbeforering;
//
// accessor is AST_UcpAlgDriverParam.prototype.getCodec
// element get for codec
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for codec
// setter function is is AST_UcpAlgDriverParam.prototype.setCodec
//
function AST_UcpAlgDriverParam_getCodec() { return this._codec;}

AST_UcpAlgDriverParam.prototype.getCodec = AST_UcpAlgDriverParam_getCodec;

function AST_UcpAlgDriverParam_setCodec(value) { this._codec = value;}

AST_UcpAlgDriverParam.prototype.setCodec = AST_UcpAlgDriverParam_setCodec;
//
// Serialize {urn:ast}UcpAlgDriverParam
//
function AST_UcpAlgDriverParam_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._opermode == null) {
      xml = xml + '<jns0:opermode xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:opermode>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._opermode);
      xml = xml + '</jns0:opermode>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:cidbuflen>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._cidbuflen);
     xml = xml + '</jns0:cidbuflen>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:cutcidbufheadlen>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._cutcidbufheadlen);
     xml = xml + '</jns0:cutcidbufheadlen>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:fixedtimepolarity>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._fixedtimepolarity);
     xml = xml + '</jns0:fixedtimepolarity>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:fxstxgain>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._fxstxgain);
     xml = xml + '</jns0:fxstxgain>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:fxsrxgain>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._fxsrxgain);
     xml = xml + '</jns0:fxsrxgain>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:fxorxgain>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._fxorxgain);
     xml = xml + '</jns0:fxorxgain>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:fxotxgain>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._fxotxgain);
     xml = xml + '</jns0:fxotxgain>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:Currentthreshold>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._Currentthreshold);
     xml = xml + '</jns0:Currentthreshold>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:cidbeforering>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._cidbeforering);
     xml = xml + '</jns0:cidbeforering>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:codec>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._codec);
     xml = xml + '</jns0:codec>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_UcpAlgDriverParam.prototype.serialize = AST_UcpAlgDriverParam_serialize;

function AST_UcpAlgDriverParam_deserialize (cxfjsutils, element) {
    var newobject = new AST_UcpAlgDriverParam();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing opermode');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setOpermode(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing cidbuflen');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setCidbuflen(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing cutcidbufheadlen');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setCutcidbufheadlen(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fixedtimepolarity');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setFixedtimepolarity(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fxstxgain');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setFxstxgain(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fxsrxgain');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setFxsrxgain(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fxorxgain');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setFxorxgain(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fxotxgain');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setFxotxgain(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing Currentthreshold');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setCurrentthreshold(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing cidbeforering');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setCidbeforering(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing codec');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setCodec(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RoutingGet
//
function AST_RoutingGet () {
    this.typeMarker = 'AST_RoutingGet';
    this._section = null;
    this._fromchannel = null;
    this._tochannel = null;
}

//
// accessor is AST_RoutingGet.prototype.getSection
// element get for section
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for section
// setter function is is AST_RoutingGet.prototype.setSection
//
function AST_RoutingGet_getSection() { return this._section;}

AST_RoutingGet.prototype.getSection = AST_RoutingGet_getSection;

function AST_RoutingGet_setSection(value) { this._section = value;}

AST_RoutingGet.prototype.setSection = AST_RoutingGet_setSection;
//
// accessor is AST_RoutingGet.prototype.getFromchannel
// element get for fromchannel
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for fromchannel
// setter function is is AST_RoutingGet.prototype.setFromchannel
//
function AST_RoutingGet_getFromchannel() { return this._fromchannel;}

AST_RoutingGet.prototype.getFromchannel = AST_RoutingGet_getFromchannel;

function AST_RoutingGet_setFromchannel(value) { this._fromchannel = value;}

AST_RoutingGet.prototype.setFromchannel = AST_RoutingGet_setFromchannel;
//
// accessor is AST_RoutingGet.prototype.getTochannel
// element get for tochannel
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for tochannel
// setter function is is AST_RoutingGet.prototype.setTochannel
//
function AST_RoutingGet_getTochannel() { return this._tochannel;}

AST_RoutingGet.prototype.getTochannel = AST_RoutingGet_getTochannel;

function AST_RoutingGet_setTochannel(value) { this._tochannel = value;}

AST_RoutingGet.prototype.setTochannel = AST_RoutingGet_setTochannel;
//
// Serialize {urn:ast}RoutingGet
//
function AST_RoutingGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._section == null) {
      xml = xml + '<jns0:section xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:section>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._section);
      xml = xml + '</jns0:section>';
     }
    }
    // block for local variables
    {
     if (this._fromchannel == null) {
      xml = xml + '<jns0:fromchannel xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:fromchannel>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._fromchannel);
      xml = xml + '</jns0:fromchannel>';
     }
    }
    // block for local variables
    {
     if (this._tochannel != null) {
      if (this._tochannel == null) {
       xml = xml + '<jns0:tochannel xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:tochannel>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._tochannel);
       xml = xml + '</jns0:tochannel>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RoutingGet.prototype.serialize = AST_RoutingGet_serialize;

function AST_RoutingGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_RoutingGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing section');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSection(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fromchannel');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setFromchannel(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing tochannel');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'tochannel')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setTochannel(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}LogCdrGet
//
function AST_LogCdrGet () {
    this.typeMarker = 'AST_LogCdrGet';
    this._combuf = null;
    this._cdrs = null;
    this._num = 0;
}

//
// accessor is AST_LogCdrGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_LogCdrGet.prototype.setCombuf
//
function AST_LogCdrGet_getCombuf() { return this._combuf;}

AST_LogCdrGet.prototype.getCombuf = AST_LogCdrGet_getCombuf;

function AST_LogCdrGet_setCombuf(value) { this._combuf = value;}

AST_LogCdrGet.prototype.setCombuf = AST_LogCdrGet_setCombuf;
//
// accessor is AST_LogCdrGet.prototype.getCdrs
// element get for cdrs
// - element type is {urn:ast}LogCdrArr
// - required element
//
// element set for cdrs
// setter function is is AST_LogCdrGet.prototype.setCdrs
//
function AST_LogCdrGet_getCdrs() { return this._cdrs;}

AST_LogCdrGet.prototype.getCdrs = AST_LogCdrGet_getCdrs;

function AST_LogCdrGet_setCdrs(value) { this._cdrs = value;}

AST_LogCdrGet.prototype.setCdrs = AST_LogCdrGet_setCdrs;
//
// accessor is AST_LogCdrGet.prototype.getNum
// element get for num
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for num
// setter function is is AST_LogCdrGet.prototype.setNum
//
function AST_LogCdrGet_getNum() { return this._num;}

AST_LogCdrGet.prototype.getNum = AST_LogCdrGet_getNum;

function AST_LogCdrGet_setNum(value) { this._num = value;}

AST_LogCdrGet.prototype.setNum = AST_LogCdrGet_setNum;
//
// Serialize {urn:ast}LogCdrGet
//
function AST_LogCdrGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._cdrs.serialize(cxfjsutils, 'jns0:cdrs', null);
    }
    // block for local variables
    {
     xml = xml + '<jns0:num>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._num);
     xml = xml + '</jns0:num>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_LogCdrGet.prototype.serialize = AST_LogCdrGet_serialize;

function AST_LogCdrGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_LogCdrGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing cdrs');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_LogCdrArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setCdrs(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing num');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setNum(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}DHCPUpdateGet
//
function AST_DHCPUpdateGet () {
    this.typeMarker = 'AST_DHCPUpdateGet';
    this._combuf = null;
    this._enable = '';
}

//
// accessor is AST_DHCPUpdateGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_DHCPUpdateGet.prototype.setCombuf
//
function AST_DHCPUpdateGet_getCombuf() { return this._combuf;}

AST_DHCPUpdateGet.prototype.getCombuf = AST_DHCPUpdateGet_getCombuf;

function AST_DHCPUpdateGet_setCombuf(value) { this._combuf = value;}

AST_DHCPUpdateGet.prototype.setCombuf = AST_DHCPUpdateGet_setCombuf;
//
// accessor is AST_DHCPUpdateGet.prototype.getEnable
// element get for enable
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for enable
// setter function is is AST_DHCPUpdateGet.prototype.setEnable
//
function AST_DHCPUpdateGet_getEnable() { return this._enable;}

AST_DHCPUpdateGet.prototype.getEnable = AST_DHCPUpdateGet_getEnable;

function AST_DHCPUpdateGet_setEnable(value) { this._enable = value;}

AST_DHCPUpdateGet.prototype.setEnable = AST_DHCPUpdateGet_setEnable;
//
// Serialize {urn:ast}DHCPUpdateGet
//
function AST_DHCPUpdateGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + '<jns0:enable>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._enable);
     xml = xml + '</jns0:enable>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_DHCPUpdateGet.prototype.serialize = AST_DHCPUpdateGet_serialize;

function AST_DHCPUpdateGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_DHCPUpdateGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing enable');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setEnable(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AdvTr069General
//
function AST_AdvTr069General () {
    this.typeMarker = 'AST_AdvTr069General';
    this._acsurl = null;
    this._acsusername = null;
    this._acspassword = null;
    this._provisioningcode = null;
    this._modelname = null;
    this._requestusername = null;
    this._requestpasswd = null;
    this._requesturl = null;
    this._periodicinterval = 0;
    this._periodicenable = '';
    this._enabled = '';
}

//
// accessor is AST_AdvTr069General.prototype.getAcsurl
// element get for acsurl
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for acsurl
// setter function is is AST_AdvTr069General.prototype.setAcsurl
//
function AST_AdvTr069General_getAcsurl() { return this._acsurl;}

AST_AdvTr069General.prototype.getAcsurl = AST_AdvTr069General_getAcsurl;

function AST_AdvTr069General_setAcsurl(value) { this._acsurl = value;}

AST_AdvTr069General.prototype.setAcsurl = AST_AdvTr069General_setAcsurl;
//
// accessor is AST_AdvTr069General.prototype.getAcsusername
// element get for acsusername
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for acsusername
// setter function is is AST_AdvTr069General.prototype.setAcsusername
//
function AST_AdvTr069General_getAcsusername() { return this._acsusername;}

AST_AdvTr069General.prototype.getAcsusername = AST_AdvTr069General_getAcsusername;

function AST_AdvTr069General_setAcsusername(value) { this._acsusername = value;}

AST_AdvTr069General.prototype.setAcsusername = AST_AdvTr069General_setAcsusername;
//
// accessor is AST_AdvTr069General.prototype.getAcspassword
// element get for acspassword
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for acspassword
// setter function is is AST_AdvTr069General.prototype.setAcspassword
//
function AST_AdvTr069General_getAcspassword() { return this._acspassword;}

AST_AdvTr069General.prototype.getAcspassword = AST_AdvTr069General_getAcspassword;

function AST_AdvTr069General_setAcspassword(value) { this._acspassword = value;}

AST_AdvTr069General.prototype.setAcspassword = AST_AdvTr069General_setAcspassword;
//
// accessor is AST_AdvTr069General.prototype.getProvisioningcode
// element get for provisioningcode
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for provisioningcode
// setter function is is AST_AdvTr069General.prototype.setProvisioningcode
//
function AST_AdvTr069General_getProvisioningcode() { return this._provisioningcode;}

AST_AdvTr069General.prototype.getProvisioningcode = AST_AdvTr069General_getProvisioningcode;

function AST_AdvTr069General_setProvisioningcode(value) { this._provisioningcode = value;}

AST_AdvTr069General.prototype.setProvisioningcode = AST_AdvTr069General_setProvisioningcode;
//
// accessor is AST_AdvTr069General.prototype.getModelname
// element get for modelname
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for modelname
// setter function is is AST_AdvTr069General.prototype.setModelname
//
function AST_AdvTr069General_getModelname() { return this._modelname;}

AST_AdvTr069General.prototype.getModelname = AST_AdvTr069General_getModelname;

function AST_AdvTr069General_setModelname(value) { this._modelname = value;}

AST_AdvTr069General.prototype.setModelname = AST_AdvTr069General_setModelname;
//
// accessor is AST_AdvTr069General.prototype.getRequestusername
// element get for requestusername
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for requestusername
// setter function is is AST_AdvTr069General.prototype.setRequestusername
//
function AST_AdvTr069General_getRequestusername() { return this._requestusername;}

AST_AdvTr069General.prototype.getRequestusername = AST_AdvTr069General_getRequestusername;

function AST_AdvTr069General_setRequestusername(value) { this._requestusername = value;}

AST_AdvTr069General.prototype.setRequestusername = AST_AdvTr069General_setRequestusername;
//
// accessor is AST_AdvTr069General.prototype.getRequestpasswd
// element get for requestpasswd
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for requestpasswd
// setter function is is AST_AdvTr069General.prototype.setRequestpasswd
//
function AST_AdvTr069General_getRequestpasswd() { return this._requestpasswd;}

AST_AdvTr069General.prototype.getRequestpasswd = AST_AdvTr069General_getRequestpasswd;

function AST_AdvTr069General_setRequestpasswd(value) { this._requestpasswd = value;}

AST_AdvTr069General.prototype.setRequestpasswd = AST_AdvTr069General_setRequestpasswd;
//
// accessor is AST_AdvTr069General.prototype.getRequesturl
// element get for requesturl
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for requesturl
// setter function is is AST_AdvTr069General.prototype.setRequesturl
//
function AST_AdvTr069General_getRequesturl() { return this._requesturl;}

AST_AdvTr069General.prototype.getRequesturl = AST_AdvTr069General_getRequesturl;

function AST_AdvTr069General_setRequesturl(value) { this._requesturl = value;}

AST_AdvTr069General.prototype.setRequesturl = AST_AdvTr069General_setRequesturl;
//
// accessor is AST_AdvTr069General.prototype.getPeriodicinterval
// element get for periodicinterval
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for periodicinterval
// setter function is is AST_AdvTr069General.prototype.setPeriodicinterval
//
function AST_AdvTr069General_getPeriodicinterval() { return this._periodicinterval;}

AST_AdvTr069General.prototype.getPeriodicinterval = AST_AdvTr069General_getPeriodicinterval;

function AST_AdvTr069General_setPeriodicinterval(value) { this._periodicinterval = value;}

AST_AdvTr069General.prototype.setPeriodicinterval = AST_AdvTr069General_setPeriodicinterval;
//
// accessor is AST_AdvTr069General.prototype.getPeriodicenable
// element get for periodicenable
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for periodicenable
// setter function is is AST_AdvTr069General.prototype.setPeriodicenable
//
function AST_AdvTr069General_getPeriodicenable() { return this._periodicenable;}

AST_AdvTr069General.prototype.getPeriodicenable = AST_AdvTr069General_getPeriodicenable;

function AST_AdvTr069General_setPeriodicenable(value) { this._periodicenable = value;}

AST_AdvTr069General.prototype.setPeriodicenable = AST_AdvTr069General_setPeriodicenable;
//
// accessor is AST_AdvTr069General.prototype.getEnabled
// element get for enabled
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for enabled
// setter function is is AST_AdvTr069General.prototype.setEnabled
//
function AST_AdvTr069General_getEnabled() { return this._enabled;}

AST_AdvTr069General.prototype.getEnabled = AST_AdvTr069General_getEnabled;

function AST_AdvTr069General_setEnabled(value) { this._enabled = value;}

AST_AdvTr069General.prototype.setEnabled = AST_AdvTr069General_setEnabled;
//
// Serialize {urn:ast}AdvTr069General
//
function AST_AdvTr069General_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._acsurl == null) {
      xml = xml + '<jns0:acsurl xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:acsurl>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._acsurl);
      xml = xml + '</jns0:acsurl>';
     }
    }
    // block for local variables
    {
     if (this._acsusername == null) {
      xml = xml + '<jns0:acsusername xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:acsusername>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._acsusername);
      xml = xml + '</jns0:acsusername>';
     }
    }
    // block for local variables
    {
     if (this._acspassword == null) {
      xml = xml + '<jns0:acspassword xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:acspassword>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._acspassword);
      xml = xml + '</jns0:acspassword>';
     }
    }
    // block for local variables
    {
     if (this._provisioningcode == null) {
      xml = xml + '<jns0:provisioningcode xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:provisioningcode>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._provisioningcode);
      xml = xml + '</jns0:provisioningcode>';
     }
    }
    // block for local variables
    {
     if (this._modelname == null) {
      xml = xml + '<jns0:modelname xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:modelname>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._modelname);
      xml = xml + '</jns0:modelname>';
     }
    }
    // block for local variables
    {
     if (this._requestusername == null) {
      xml = xml + '<jns0:requestusername xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:requestusername>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._requestusername);
      xml = xml + '</jns0:requestusername>';
     }
    }
    // block for local variables
    {
     if (this._requestpasswd == null) {
      xml = xml + '<jns0:requestpasswd xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:requestpasswd>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._requestpasswd);
      xml = xml + '</jns0:requestpasswd>';
     }
    }
    // block for local variables
    {
     if (this._requesturl == null) {
      xml = xml + '<jns0:requesturl xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:requesturl>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._requesturl);
      xml = xml + '</jns0:requesturl>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:periodicinterval>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._periodicinterval);
     xml = xml + '</jns0:periodicinterval>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:periodicenable>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._periodicenable);
     xml = xml + '</jns0:periodicenable>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:enabled>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._enabled);
     xml = xml + '</jns0:enabled>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AdvTr069General.prototype.serialize = AST_AdvTr069General_serialize;

function AST_AdvTr069General_deserialize (cxfjsutils, element) {
    var newobject = new AST_AdvTr069General();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing acsurl');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setAcsurl(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing acsusername');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setAcsusername(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing acspassword');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setAcspassword(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing provisioningcode');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setProvisioningcode(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing modelname');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setModelname(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing requestusername');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setRequestusername(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing requestpasswd');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setRequestpasswd(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing requesturl');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setRequesturl(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing periodicinterval');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setPeriodicinterval(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing periodicenable');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setPeriodicenable(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing enabled');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setEnabled(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}OEMSettingInfoSave
//
function AST_OEMSettingInfoSave () {
    this.typeMarker = 'AST_OEMSettingInfoSave';
    this._save = null;
}

//
// accessor is AST_OEMSettingInfoSave.prototype.getSave
// element get for save
// - element type is {urn:ast}OEMSettingInfo
// - required element
//
// element set for save
// setter function is is AST_OEMSettingInfoSave.prototype.setSave
//
function AST_OEMSettingInfoSave_getSave() { return this._save;}

AST_OEMSettingInfoSave.prototype.getSave = AST_OEMSettingInfoSave_getSave;

function AST_OEMSettingInfoSave_setSave(value) { this._save = value;}

AST_OEMSettingInfoSave.prototype.setSave = AST_OEMSettingInfoSave_setSave;
//
// Serialize {urn:ast}OEMSettingInfoSave
//
function AST_OEMSettingInfoSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_OEMSettingInfoSave.prototype.serialize = AST_OEMSettingInfoSave_serialize;

function AST_OEMSettingInfoSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_OEMSettingInfoSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_OEMSettingInfo_deserialize(cxfjsutils, curElement);
    }
    newobject.setSave(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AlgGlb
//
function AST_AlgGlb () {
    this.typeMarker = 'AST_AlgGlb';
    this._country = null;
    this._ringcadence = null;
    this._dial = null;
    this._ring = null;
    this._busy = null;
    this._callwaiting = null;
    this._congestion = null;
    this._dialrecall = null;
    this._record = null;
    this._info = null;
    this._stutter = null;
}

//
// accessor is AST_AlgGlb.prototype.getCountry
// element get for country
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for country
// setter function is is AST_AlgGlb.prototype.setCountry
//
function AST_AlgGlb_getCountry() { return this._country;}

AST_AlgGlb.prototype.getCountry = AST_AlgGlb_getCountry;

function AST_AlgGlb_setCountry(value) { this._country = value;}

AST_AlgGlb.prototype.setCountry = AST_AlgGlb_setCountry;
//
// accessor is AST_AlgGlb.prototype.getRingcadence
// element get for ringcadence
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for ringcadence
// setter function is is AST_AlgGlb.prototype.setRingcadence
//
function AST_AlgGlb_getRingcadence() { return this._ringcadence;}

AST_AlgGlb.prototype.getRingcadence = AST_AlgGlb_getRingcadence;

function AST_AlgGlb_setRingcadence(value) { this._ringcadence = value;}

AST_AlgGlb.prototype.setRingcadence = AST_AlgGlb_setRingcadence;
//
// accessor is AST_AlgGlb.prototype.getDial
// element get for dial
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for dial
// setter function is is AST_AlgGlb.prototype.setDial
//
function AST_AlgGlb_getDial() { return this._dial;}

AST_AlgGlb.prototype.getDial = AST_AlgGlb_getDial;

function AST_AlgGlb_setDial(value) { this._dial = value;}

AST_AlgGlb.prototype.setDial = AST_AlgGlb_setDial;
//
// accessor is AST_AlgGlb.prototype.getRing
// element get for ring
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for ring
// setter function is is AST_AlgGlb.prototype.setRing
//
function AST_AlgGlb_getRing() { return this._ring;}

AST_AlgGlb.prototype.getRing = AST_AlgGlb_getRing;

function AST_AlgGlb_setRing(value) { this._ring = value;}

AST_AlgGlb.prototype.setRing = AST_AlgGlb_setRing;
//
// accessor is AST_AlgGlb.prototype.getBusy
// element get for busy
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for busy
// setter function is is AST_AlgGlb.prototype.setBusy
//
function AST_AlgGlb_getBusy() { return this._busy;}

AST_AlgGlb.prototype.getBusy = AST_AlgGlb_getBusy;

function AST_AlgGlb_setBusy(value) { this._busy = value;}

AST_AlgGlb.prototype.setBusy = AST_AlgGlb_setBusy;
//
// accessor is AST_AlgGlb.prototype.getCallwaiting
// element get for callwaiting
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for callwaiting
// setter function is is AST_AlgGlb.prototype.setCallwaiting
//
function AST_AlgGlb_getCallwaiting() { return this._callwaiting;}

AST_AlgGlb.prototype.getCallwaiting = AST_AlgGlb_getCallwaiting;

function AST_AlgGlb_setCallwaiting(value) { this._callwaiting = value;}

AST_AlgGlb.prototype.setCallwaiting = AST_AlgGlb_setCallwaiting;
//
// accessor is AST_AlgGlb.prototype.getCongestion
// element get for congestion
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for congestion
// setter function is is AST_AlgGlb.prototype.setCongestion
//
function AST_AlgGlb_getCongestion() { return this._congestion;}

AST_AlgGlb.prototype.getCongestion = AST_AlgGlb_getCongestion;

function AST_AlgGlb_setCongestion(value) { this._congestion = value;}

AST_AlgGlb.prototype.setCongestion = AST_AlgGlb_setCongestion;
//
// accessor is AST_AlgGlb.prototype.getDialrecall
// element get for dialrecall
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for dialrecall
// setter function is is AST_AlgGlb.prototype.setDialrecall
//
function AST_AlgGlb_getDialrecall() { return this._dialrecall;}

AST_AlgGlb.prototype.getDialrecall = AST_AlgGlb_getDialrecall;

function AST_AlgGlb_setDialrecall(value) { this._dialrecall = value;}

AST_AlgGlb.prototype.setDialrecall = AST_AlgGlb_setDialrecall;
//
// accessor is AST_AlgGlb.prototype.getRecord
// element get for record
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for record
// setter function is is AST_AlgGlb.prototype.setRecord
//
function AST_AlgGlb_getRecord() { return this._record;}

AST_AlgGlb.prototype.getRecord = AST_AlgGlb_getRecord;

function AST_AlgGlb_setRecord(value) { this._record = value;}

AST_AlgGlb.prototype.setRecord = AST_AlgGlb_setRecord;
//
// accessor is AST_AlgGlb.prototype.getInfo
// element get for info
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for info
// setter function is is AST_AlgGlb.prototype.setInfo
//
function AST_AlgGlb_getInfo() { return this._info;}

AST_AlgGlb.prototype.getInfo = AST_AlgGlb_getInfo;

function AST_AlgGlb_setInfo(value) { this._info = value;}

AST_AlgGlb.prototype.setInfo = AST_AlgGlb_setInfo;
//
// accessor is AST_AlgGlb.prototype.getStutter
// element get for stutter
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for stutter
// setter function is is AST_AlgGlb.prototype.setStutter
//
function AST_AlgGlb_getStutter() { return this._stutter;}

AST_AlgGlb.prototype.getStutter = AST_AlgGlb_getStutter;

function AST_AlgGlb_setStutter(value) { this._stutter = value;}

AST_AlgGlb.prototype.setStutter = AST_AlgGlb_setStutter;
//
// Serialize {urn:ast}AlgGlb
//
function AST_AlgGlb_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._country != null) {
      if (this._country == null) {
       xml = xml + '<jns0:country xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:country>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._country);
       xml = xml + '</jns0:country>';
      }
     }
    }
    // block for local variables
    {
     if (this._ringcadence != null) {
      if (this._ringcadence == null) {
       xml = xml + '<jns0:ringcadence xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:ringcadence>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._ringcadence);
       xml = xml + '</jns0:ringcadence>';
      }
     }
    }
    // block for local variables
    {
     if (this._dial != null) {
      if (this._dial == null) {
       xml = xml + '<jns0:dial xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:dial>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._dial);
       xml = xml + '</jns0:dial>';
      }
     }
    }
    // block for local variables
    {
     if (this._ring != null) {
      if (this._ring == null) {
       xml = xml + '<jns0:ring xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:ring>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._ring);
       xml = xml + '</jns0:ring>';
      }
     }
    }
    // block for local variables
    {
     if (this._busy != null) {
      if (this._busy == null) {
       xml = xml + '<jns0:busy xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:busy>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._busy);
       xml = xml + '</jns0:busy>';
      }
     }
    }
    // block for local variables
    {
     if (this._callwaiting != null) {
      if (this._callwaiting == null) {
       xml = xml + '<jns0:callwaiting xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:callwaiting>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._callwaiting);
       xml = xml + '</jns0:callwaiting>';
      }
     }
    }
    // block for local variables
    {
     if (this._congestion != null) {
      if (this._congestion == null) {
       xml = xml + '<jns0:congestion xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:congestion>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._congestion);
       xml = xml + '</jns0:congestion>';
      }
     }
    }
    // block for local variables
    {
     if (this._dialrecall != null) {
      if (this._dialrecall == null) {
       xml = xml + '<jns0:dialrecall xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:dialrecall>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._dialrecall);
       xml = xml + '</jns0:dialrecall>';
      }
     }
    }
    // block for local variables
    {
     if (this._record != null) {
      if (this._record == null) {
       xml = xml + '<jns0:record xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:record>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._record);
       xml = xml + '</jns0:record>';
      }
     }
    }
    // block for local variables
    {
     if (this._info != null) {
      if (this._info == null) {
       xml = xml + '<jns0:info xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:info>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._info);
       xml = xml + '</jns0:info>';
      }
     }
    }
    // block for local variables
    {
     if (this._stutter != null) {
      if (this._stutter == null) {
       xml = xml + '<jns0:stutter xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:stutter>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._stutter);
       xml = xml + '</jns0:stutter>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AlgGlb.prototype.serialize = AST_AlgGlb_serialize;

function AST_AlgGlb_deserialize (cxfjsutils, element) {
    var newobject = new AST_AlgGlb();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing country');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'country')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setCountry(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ringcadence');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'ringcadence')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setRingcadence(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing dial');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'dial')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setDial(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ring');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'ring')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setRing(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing busy');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'busy')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setBusy(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing callwaiting');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'callwaiting')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setCallwaiting(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing congestion');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'congestion')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setCongestion(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing dialrecall');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'dialrecall')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setDialrecall(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing record');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'record')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setRecord(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing info');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'info')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setInfo(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing stutter');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'stutter')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setStutter(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}Line
//
function AST_Line () {
    this.typeMarker = 'AST_Line';
    this._key = null;
    this._value = null;
}

//
// accessor is AST_Line.prototype.getKey
// element get for key
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for key
// setter function is is AST_Line.prototype.setKey
//
function AST_Line_getKey() { return this._key;}

AST_Line.prototype.getKey = AST_Line_getKey;

function AST_Line_setKey(value) { this._key = value;}

AST_Line.prototype.setKey = AST_Line_setKey;
//
// accessor is AST_Line.prototype.getValue
// element get for value
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for value
// setter function is is AST_Line.prototype.setValue
//
function AST_Line_getValue() { return this._value;}

AST_Line.prototype.getValue = AST_Line_getValue;

function AST_Line_setValue(value) { this._value = value;}

AST_Line.prototype.setValue = AST_Line_setValue;
//
// Serialize {urn:ast}Line
//
function AST_Line_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._key == null) {
      xml = xml + '<jns0:key xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:key>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._key);
      xml = xml + '</jns0:key>';
     }
    }
    // block for local variables
    {
     if (this._value == null) {
      xml = xml + '<jns0:value xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:value>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._value);
      xml = xml + '</jns0:value>';
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_Line.prototype.serialize = AST_Line_serialize;

function AST_Line_deserialize (cxfjsutils, element) {
    var newobject = new AST_Line();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing key');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setKey(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing value');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setValue(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AlgFunky
//
function AST_AlgFunky () {
    this.typeMarker = 'AST_AlgFunky';
    this._blindtransfer = null;
    this._askedtransfer = null;
    this._enable = '';
}

//
// accessor is AST_AlgFunky.prototype.getBlindtransfer
// element get for blindtransfer
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for blindtransfer
// setter function is is AST_AlgFunky.prototype.setBlindtransfer
//
function AST_AlgFunky_getBlindtransfer() { return this._blindtransfer;}

AST_AlgFunky.prototype.getBlindtransfer = AST_AlgFunky_getBlindtransfer;

function AST_AlgFunky_setBlindtransfer(value) { this._blindtransfer = value;}

AST_AlgFunky.prototype.setBlindtransfer = AST_AlgFunky_setBlindtransfer;
//
// accessor is AST_AlgFunky.prototype.getAskedtransfer
// element get for askedtransfer
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for askedtransfer
// setter function is is AST_AlgFunky.prototype.setAskedtransfer
//
function AST_AlgFunky_getAskedtransfer() { return this._askedtransfer;}

AST_AlgFunky.prototype.getAskedtransfer = AST_AlgFunky_getAskedtransfer;

function AST_AlgFunky_setAskedtransfer(value) { this._askedtransfer = value;}

AST_AlgFunky.prototype.setAskedtransfer = AST_AlgFunky_setAskedtransfer;
//
// accessor is AST_AlgFunky.prototype.getEnable
// element get for enable
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for enable
// setter function is is AST_AlgFunky.prototype.setEnable
//
function AST_AlgFunky_getEnable() { return this._enable;}

AST_AlgFunky.prototype.getEnable = AST_AlgFunky_getEnable;

function AST_AlgFunky_setEnable(value) { this._enable = value;}

AST_AlgFunky.prototype.setEnable = AST_AlgFunky_setEnable;
//
// Serialize {urn:ast}AlgFunky
//
function AST_AlgFunky_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._blindtransfer == null) {
      xml = xml + '<jns0:blindtransfer xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:blindtransfer>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._blindtransfer);
      xml = xml + '</jns0:blindtransfer>';
     }
    }
    // block for local variables
    {
     if (this._askedtransfer == null) {
      xml = xml + '<jns0:askedtransfer xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:askedtransfer>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._askedtransfer);
      xml = xml + '</jns0:askedtransfer>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:enable>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._enable);
     xml = xml + '</jns0:enable>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AlgFunky.prototype.serialize = AST_AlgFunky_serialize;

function AST_AlgFunky_deserialize (cxfjsutils, element) {
    var newobject = new AST_AlgFunky();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing blindtransfer');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setBlindtransfer(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing askedtransfer');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setAskedtransfer(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing enable');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setEnable(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}LogGwContextArr
//
function AST_LogGwContextArr () {
    this.typeMarker = 'AST_LogGwContextArr';
    this._item = [];
}

//
// accessor is AST_LogGwContextArr.prototype.getItem
// element get for item
// - element type is {urn:ast}LogGwContext
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_LogGwContextArr.prototype.setItem
//
function AST_LogGwContextArr_getItem() { return this._item;}

AST_LogGwContextArr.prototype.getItem = AST_LogGwContextArr_getItem;

function AST_LogGwContextArr_setItem(value) { this._item = value;}

AST_LogGwContextArr.prototype.setItem = AST_LogGwContextArr_setItem;
//
// Serialize {urn:ast}LogGwContextArr
//
function AST_LogGwContextArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_LogGwContextArr.prototype.serialize = AST_LogGwContextArr_serialize;

function AST_LogGwContextArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_LogGwContextArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_LogGwContext_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AlgPickupGet
//
function AST_AlgPickupGet () {
    this.typeMarker = 'AST_AlgPickupGet';
    this._combuf = null;
    this._pickup = null;
    this._pickchn = null;
}

//
// accessor is AST_AlgPickupGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_AlgPickupGet.prototype.setCombuf
//
function AST_AlgPickupGet_getCombuf() { return this._combuf;}

AST_AlgPickupGet.prototype.getCombuf = AST_AlgPickupGet_getCombuf;

function AST_AlgPickupGet_setCombuf(value) { this._combuf = value;}

AST_AlgPickupGet.prototype.setCombuf = AST_AlgPickupGet_setCombuf;
//
// accessor is AST_AlgPickupGet.prototype.getPickup
// element get for pickup
// - element type is {urn:ast}AlgPickup
// - required element
//
// element set for pickup
// setter function is is AST_AlgPickupGet.prototype.setPickup
//
function AST_AlgPickupGet_getPickup() { return this._pickup;}

AST_AlgPickupGet.prototype.getPickup = AST_AlgPickupGet_getPickup;

function AST_AlgPickupGet_setPickup(value) { this._pickup = value;}

AST_AlgPickupGet.prototype.setPickup = AST_AlgPickupGet_setPickup;
//
// accessor is AST_AlgPickupGet.prototype.getPickchn
// element get for pickchn
// - element type is {urn:ast}AlgPickupChnArr
// - required element
//
// element set for pickchn
// setter function is is AST_AlgPickupGet.prototype.setPickchn
//
function AST_AlgPickupGet_getPickchn() { return this._pickchn;}

AST_AlgPickupGet.prototype.getPickchn = AST_AlgPickupGet_getPickchn;

function AST_AlgPickupGet_setPickchn(value) { this._pickchn = value;}

AST_AlgPickupGet.prototype.setPickchn = AST_AlgPickupGet_setPickchn;
//
// Serialize {urn:ast}AlgPickupGet
//
function AST_AlgPickupGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._pickup.serialize(cxfjsutils, 'jns0:pickup', null);
    }
    // block for local variables
    {
     xml = xml + this._pickchn.serialize(cxfjsutils, 'jns0:pickchn', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AlgPickupGet.prototype.serialize = AST_AlgPickupGet_serialize;

function AST_AlgPickupGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AlgPickupGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing pickup');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_AlgPickup_deserialize(cxfjsutils, curElement);
    }
    newobject.setPickup(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing pickchn');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_AlgPickupChnArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setPickchn(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}NetworkGet
//
function AST_NetworkGet () {
    this.typeMarker = 'AST_NetworkGet';
    this._networktype = '';
    this._factorymac = null;
    this._vlanflag = '';
    this._stacknum = 0;
    this._combuf = null;
    this._lan = null;
    this._wan = null;
    this._dns = null;
}

//
// accessor is AST_NetworkGet.prototype.getNetworktype
// element get for networktype
// - element type is {http://www.w3.org/2001/XMLSchema}byte
// - required element
//
// element set for networktype
// setter function is is AST_NetworkGet.prototype.setNetworktype
//
function AST_NetworkGet_getNetworktype() { return this._networktype;}

AST_NetworkGet.prototype.getNetworktype = AST_NetworkGet_getNetworktype;

function AST_NetworkGet_setNetworktype(value) { this._networktype = value;}

AST_NetworkGet.prototype.setNetworktype = AST_NetworkGet_setNetworktype;
//
// accessor is AST_NetworkGet.prototype.getFactorymac
// element get for factorymac
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for factorymac
// setter function is is AST_NetworkGet.prototype.setFactorymac
//
function AST_NetworkGet_getFactorymac() { return this._factorymac;}

AST_NetworkGet.prototype.getFactorymac = AST_NetworkGet_getFactorymac;

function AST_NetworkGet_setFactorymac(value) { this._factorymac = value;}

AST_NetworkGet.prototype.setFactorymac = AST_NetworkGet_setFactorymac;
//
// accessor is AST_NetworkGet.prototype.getVlanflag
// element get for vlanflag
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for vlanflag
// setter function is is AST_NetworkGet.prototype.setVlanflag
//
function AST_NetworkGet_getVlanflag() { return this._vlanflag;}

AST_NetworkGet.prototype.getVlanflag = AST_NetworkGet_getVlanflag;

function AST_NetworkGet_setVlanflag(value) { this._vlanflag = value;}

AST_NetworkGet.prototype.setVlanflag = AST_NetworkGet_setVlanflag;
//
// accessor is AST_NetworkGet.prototype.getStacknum
// element get for stacknum
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for stacknum
// setter function is is AST_NetworkGet.prototype.setStacknum
//
function AST_NetworkGet_getStacknum() { return this._stacknum;}

AST_NetworkGet.prototype.getStacknum = AST_NetworkGet_getStacknum;

function AST_NetworkGet_setStacknum(value) { this._stacknum = value;}

AST_NetworkGet.prototype.setStacknum = AST_NetworkGet_setStacknum;
//
// accessor is AST_NetworkGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_NetworkGet.prototype.setCombuf
//
function AST_NetworkGet_getCombuf() { return this._combuf;}

AST_NetworkGet.prototype.getCombuf = AST_NetworkGet_getCombuf;

function AST_NetworkGet_setCombuf(value) { this._combuf = value;}

AST_NetworkGet.prototype.setCombuf = AST_NetworkGet_setCombuf;
//
// accessor is AST_NetworkGet.prototype.getLan
// element get for lan
// - element type is {urn:ast}NetworkLan
// - required element
//
// element set for lan
// setter function is is AST_NetworkGet.prototype.setLan
//
function AST_NetworkGet_getLan() { return this._lan;}

AST_NetworkGet.prototype.getLan = AST_NetworkGet_getLan;

function AST_NetworkGet_setLan(value) { this._lan = value;}

AST_NetworkGet.prototype.setLan = AST_NetworkGet_setLan;
//
// accessor is AST_NetworkGet.prototype.getWan
// element get for wan
// - element type is {urn:ast}NetworkWan
// - required element
//
// element set for wan
// setter function is is AST_NetworkGet.prototype.setWan
//
function AST_NetworkGet_getWan() { return this._wan;}

AST_NetworkGet.prototype.getWan = AST_NetworkGet_getWan;

function AST_NetworkGet_setWan(value) { this._wan = value;}

AST_NetworkGet.prototype.setWan = AST_NetworkGet_setWan;
//
// accessor is AST_NetworkGet.prototype.getDns
// element get for dns
// - element type is {urn:ast}NetworkDns
// - required element
//
// element set for dns
// setter function is is AST_NetworkGet.prototype.setDns
//
function AST_NetworkGet_getDns() { return this._dns;}

AST_NetworkGet.prototype.getDns = AST_NetworkGet_getDns;

function AST_NetworkGet_setDns(value) { this._dns = value;}

AST_NetworkGet.prototype.setDns = AST_NetworkGet_setDns;
//
// Serialize {urn:ast}NetworkGet
//
function AST_NetworkGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:networktype>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._networktype);
     xml = xml + '</jns0:networktype>';
    }
    // block for local variables
    {
     if (this._factorymac == null) {
      xml = xml + '<jns0:factorymac xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:factorymac>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._factorymac);
      xml = xml + '</jns0:factorymac>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:vlanflag>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._vlanflag);
     xml = xml + '</jns0:vlanflag>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:stacknum>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._stacknum);
     xml = xml + '</jns0:stacknum>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._lan.serialize(cxfjsutils, 'jns0:lan', null);
    }
    // block for local variables
    {
     xml = xml + this._wan.serialize(cxfjsutils, 'jns0:wan', null);
    }
    // block for local variables
    {
     xml = xml + this._dns.serialize(cxfjsutils, 'jns0:dns', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_NetworkGet.prototype.serialize = AST_NetworkGet_serialize;

function AST_NetworkGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_NetworkGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing networktype');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setNetworktype(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing factorymac');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setFactorymac(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing vlanflag');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setVlanflag(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing stacknum');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setStacknum(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing lan');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_NetworkLan_deserialize(cxfjsutils, curElement);
    }
    newobject.setLan(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing wan');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_NetworkWan_deserialize(cxfjsutils, curElement);
    }
    newobject.setWan(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing dns');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_NetworkDns_deserialize(cxfjsutils, curElement);
    }
    newobject.setDns(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}UcpAlgGlobal
//
function AST_UcpAlgGlobal () {
    this.typeMarker = 'AST_UcpAlgGlobal';
    this._toneduration = null;
    this._toneinterval = null;
    this._dialtimeout = 0;
    this._mode = null;
    this._rate = null;
    this._echocancel = 0;
    this._echotype = '';
    this._ecm = '';
    this._sigfxs = '';
}

//
// accessor is AST_UcpAlgGlobal.prototype.getToneduration
// element get for toneduration
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for toneduration
// setter function is is AST_UcpAlgGlobal.prototype.setToneduration
//
function AST_UcpAlgGlobal_getToneduration() { return this._toneduration;}

AST_UcpAlgGlobal.prototype.getToneduration = AST_UcpAlgGlobal_getToneduration;

function AST_UcpAlgGlobal_setToneduration(value) { this._toneduration = value;}

AST_UcpAlgGlobal.prototype.setToneduration = AST_UcpAlgGlobal_setToneduration;
//
// accessor is AST_UcpAlgGlobal.prototype.getToneinterval
// element get for toneinterval
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for toneinterval
// setter function is is AST_UcpAlgGlobal.prototype.setToneinterval
//
function AST_UcpAlgGlobal_getToneinterval() { return this._toneinterval;}

AST_UcpAlgGlobal.prototype.getToneinterval = AST_UcpAlgGlobal_getToneinterval;

function AST_UcpAlgGlobal_setToneinterval(value) { this._toneinterval = value;}

AST_UcpAlgGlobal.prototype.setToneinterval = AST_UcpAlgGlobal_setToneinterval;
//
// accessor is AST_UcpAlgGlobal.prototype.getDialtimeout
// element get for dialtimeout
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for dialtimeout
// setter function is is AST_UcpAlgGlobal.prototype.setDialtimeout
//
function AST_UcpAlgGlobal_getDialtimeout() { return this._dialtimeout;}

AST_UcpAlgGlobal.prototype.getDialtimeout = AST_UcpAlgGlobal_getDialtimeout;

function AST_UcpAlgGlobal_setDialtimeout(value) { this._dialtimeout = value;}

AST_UcpAlgGlobal.prototype.setDialtimeout = AST_UcpAlgGlobal_setDialtimeout;
//
// accessor is AST_UcpAlgGlobal.prototype.getMode
// element get for mode
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for mode
// setter function is is AST_UcpAlgGlobal.prototype.setMode
//
function AST_UcpAlgGlobal_getMode() { return this._mode;}

AST_UcpAlgGlobal.prototype.getMode = AST_UcpAlgGlobal_getMode;

function AST_UcpAlgGlobal_setMode(value) { this._mode = value;}

AST_UcpAlgGlobal.prototype.setMode = AST_UcpAlgGlobal_setMode;
//
// accessor is AST_UcpAlgGlobal.prototype.getRate
// element get for rate
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for rate
// setter function is is AST_UcpAlgGlobal.prototype.setRate
//
function AST_UcpAlgGlobal_getRate() { return this._rate;}

AST_UcpAlgGlobal.prototype.getRate = AST_UcpAlgGlobal_getRate;

function AST_UcpAlgGlobal_setRate(value) { this._rate = value;}

AST_UcpAlgGlobal.prototype.setRate = AST_UcpAlgGlobal_setRate;
//
// accessor is AST_UcpAlgGlobal.prototype.getEchocancel
// element get for echocancel
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for echocancel
// setter function is is AST_UcpAlgGlobal.prototype.setEchocancel
//
function AST_UcpAlgGlobal_getEchocancel() { return this._echocancel;}

AST_UcpAlgGlobal.prototype.getEchocancel = AST_UcpAlgGlobal_getEchocancel;

function AST_UcpAlgGlobal_setEchocancel(value) { this._echocancel = value;}

AST_UcpAlgGlobal.prototype.setEchocancel = AST_UcpAlgGlobal_setEchocancel;
//
// accessor is AST_UcpAlgGlobal.prototype.getEchotype
// element get for echotype
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for echotype
// setter function is is AST_UcpAlgGlobal.prototype.setEchotype
//
function AST_UcpAlgGlobal_getEchotype() { return this._echotype;}

AST_UcpAlgGlobal.prototype.getEchotype = AST_UcpAlgGlobal_getEchotype;

function AST_UcpAlgGlobal_setEchotype(value) { this._echotype = value;}

AST_UcpAlgGlobal.prototype.setEchotype = AST_UcpAlgGlobal_setEchotype;
//
// accessor is AST_UcpAlgGlobal.prototype.getEcm
// element get for ecm
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for ecm
// setter function is is AST_UcpAlgGlobal.prototype.setEcm
//
function AST_UcpAlgGlobal_getEcm() { return this._ecm;}

AST_UcpAlgGlobal.prototype.getEcm = AST_UcpAlgGlobal_getEcm;

function AST_UcpAlgGlobal_setEcm(value) { this._ecm = value;}

AST_UcpAlgGlobal.prototype.setEcm = AST_UcpAlgGlobal_setEcm;
//
// accessor is AST_UcpAlgGlobal.prototype.getSigfxs
// element get for sigfxs
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for sigfxs
// setter function is is AST_UcpAlgGlobal.prototype.setSigfxs
//
function AST_UcpAlgGlobal_getSigfxs() { return this._sigfxs;}

AST_UcpAlgGlobal.prototype.getSigfxs = AST_UcpAlgGlobal_getSigfxs;

function AST_UcpAlgGlobal_setSigfxs(value) { this._sigfxs = value;}

AST_UcpAlgGlobal.prototype.setSigfxs = AST_UcpAlgGlobal_setSigfxs;
//
// Serialize {urn:ast}UcpAlgGlobal
//
function AST_UcpAlgGlobal_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._toneduration == null) {
      xml = xml + '<jns0:toneduration xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:toneduration>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._toneduration);
      xml = xml + '</jns0:toneduration>';
     }
    }
    // block for local variables
    {
     if (this._toneinterval == null) {
      xml = xml + '<jns0:toneinterval xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:toneinterval>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._toneinterval);
      xml = xml + '</jns0:toneinterval>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:dialtimeout>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._dialtimeout);
     xml = xml + '</jns0:dialtimeout>';
    }
    // block for local variables
    {
     if (this._mode == null) {
      xml = xml + '<jns0:mode xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:mode>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._mode);
      xml = xml + '</jns0:mode>';
     }
    }
    // block for local variables
    {
     if (this._rate == null) {
      xml = xml + '<jns0:rate xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:rate>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._rate);
      xml = xml + '</jns0:rate>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:echocancel>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._echocancel);
     xml = xml + '</jns0:echocancel>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:echotype>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._echotype);
     xml = xml + '</jns0:echotype>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:ecm>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._ecm);
     xml = xml + '</jns0:ecm>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:sigfxs>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._sigfxs);
     xml = xml + '</jns0:sigfxs>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_UcpAlgGlobal.prototype.serialize = AST_UcpAlgGlobal_serialize;

function AST_UcpAlgGlobal_deserialize (cxfjsutils, element) {
    var newobject = new AST_UcpAlgGlobal();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing toneduration');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setToneduration(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing toneinterval');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setToneinterval(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing dialtimeout');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setDialtimeout(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing mode');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setMode(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing rate');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setRate(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing echocancel');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setEchocancel(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing echotype');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setEchotype(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ecm');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setEcm(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sigfxs');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSigfxs(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipOneArr
//
function AST_SipOneArr () {
    this.typeMarker = 'AST_SipOneArr';
    this._item = [];
}

//
// accessor is AST_SipOneArr.prototype.getItem
// element get for item
// - element type is {urn:ast}SipOne
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_SipOneArr.prototype.setItem
//
function AST_SipOneArr_getItem() { return this._item;}

AST_SipOneArr.prototype.getItem = AST_SipOneArr_getItem;

function AST_SipOneArr_setItem(value) { this._item = value;}

AST_SipOneArr.prototype.setItem = AST_SipOneArr_setItem;
//
// Serialize {urn:ast}SipOneArr
//
function AST_SipOneArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipOneArr.prototype.serialize = AST_SipOneArr_serialize;

function AST_SipOneArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipOneArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_SipOne_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}LogMorContext
//
function AST_LogMorContext () {
    this.typeMarker = 'AST_LogMorContext';
    this._section = null;
    this._maxsize = null;
    this._autocleansw = '';
}

//
// accessor is AST_LogMorContext.prototype.getSection
// element get for section
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for section
// setter function is is AST_LogMorContext.prototype.setSection
//
function AST_LogMorContext_getSection() { return this._section;}

AST_LogMorContext.prototype.getSection = AST_LogMorContext_getSection;

function AST_LogMorContext_setSection(value) { this._section = value;}

AST_LogMorContext.prototype.setSection = AST_LogMorContext_setSection;
//
// accessor is AST_LogMorContext.prototype.getMaxsize
// element get for maxsize
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for maxsize
// setter function is is AST_LogMorContext.prototype.setMaxsize
//
function AST_LogMorContext_getMaxsize() { return this._maxsize;}

AST_LogMorContext.prototype.getMaxsize = AST_LogMorContext_getMaxsize;

function AST_LogMorContext_setMaxsize(value) { this._maxsize = value;}

AST_LogMorContext.prototype.setMaxsize = AST_LogMorContext_setMaxsize;
//
// accessor is AST_LogMorContext.prototype.getAutocleansw
// element get for autocleansw
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for autocleansw
// setter function is is AST_LogMorContext.prototype.setAutocleansw
//
function AST_LogMorContext_getAutocleansw() { return this._autocleansw;}

AST_LogMorContext.prototype.getAutocleansw = AST_LogMorContext_getAutocleansw;

function AST_LogMorContext_setAutocleansw(value) { this._autocleansw = value;}

AST_LogMorContext.prototype.setAutocleansw = AST_LogMorContext_setAutocleansw;
//
// Serialize {urn:ast}LogMorContext
//
function AST_LogMorContext_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._section == null) {
      xml = xml + '<jns0:section xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:section>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._section);
      xml = xml + '</jns0:section>';
     }
    }
    // block for local variables
    {
     if (this._maxsize == null) {
      xml = xml + '<jns0:maxsize xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:maxsize>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._maxsize);
      xml = xml + '</jns0:maxsize>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:autocleansw>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._autocleansw);
     xml = xml + '</jns0:autocleansw>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_LogMorContext.prototype.serialize = AST_LogMorContext_serialize;

function AST_LogMorContext_deserialize (cxfjsutils, element) {
    var newobject = new AST_LogMorContext();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing section');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSection(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing maxsize');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setMaxsize(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing autocleansw');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setAutocleansw(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RelayGetOne
//
function AST_RelayGetOne () {
    this.typeMarker = 'AST_RelayGetOne';
    this._relay = null;
    this._combuf = null;
}

//
// accessor is AST_RelayGetOne.prototype.getRelay
// element get for relay
// - element type is {urn:ast}Relay
// - required element
//
// element set for relay
// setter function is is AST_RelayGetOne.prototype.setRelay
//
function AST_RelayGetOne_getRelay() { return this._relay;}

AST_RelayGetOne.prototype.getRelay = AST_RelayGetOne_getRelay;

function AST_RelayGetOne_setRelay(value) { this._relay = value;}

AST_RelayGetOne.prototype.setRelay = AST_RelayGetOne_setRelay;
//
// accessor is AST_RelayGetOne.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_RelayGetOne.prototype.setCombuf
//
function AST_RelayGetOne_getCombuf() { return this._combuf;}

AST_RelayGetOne.prototype.getCombuf = AST_RelayGetOne_getCombuf;

function AST_RelayGetOne_setCombuf(value) { this._combuf = value;}

AST_RelayGetOne.prototype.setCombuf = AST_RelayGetOne_setCombuf;
//
// Serialize {urn:ast}RelayGetOne
//
function AST_RelayGetOne_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._relay.serialize(cxfjsutils, 'jns0:relay', null);
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RelayGetOne.prototype.serialize = AST_RelayGetOne_serialize;

function AST_RelayGetOne_deserialize (cxfjsutils, element) {
    var newobject = new AST_RelayGetOne();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing relay');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_Relay_deserialize(cxfjsutils, curElement);
    }
    newobject.setRelay(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}OEMSettingInfo
//
function AST_OEMSettingInfo () {
    this.typeMarker = 'AST_OEMSettingInfo';
    this._sw = '';
    this._modelname = null;
    this._tel = null;
    this._fax = null;
    this._email = null;
    this._website = null;
    this._address = null;
    this._copyright = null;
    this._headerimagepath = null;
    this._footerimagepath = null;
}

//
// accessor is AST_OEMSettingInfo.prototype.getSw
// element get for sw
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for sw
// setter function is is AST_OEMSettingInfo.prototype.setSw
//
function AST_OEMSettingInfo_getSw() { return this._sw;}

AST_OEMSettingInfo.prototype.getSw = AST_OEMSettingInfo_getSw;

function AST_OEMSettingInfo_setSw(value) { this._sw = value;}

AST_OEMSettingInfo.prototype.setSw = AST_OEMSettingInfo_setSw;
//
// accessor is AST_OEMSettingInfo.prototype.getModelname
// element get for modelname
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for modelname
// setter function is is AST_OEMSettingInfo.prototype.setModelname
//
function AST_OEMSettingInfo_getModelname() { return this._modelname;}

AST_OEMSettingInfo.prototype.getModelname = AST_OEMSettingInfo_getModelname;

function AST_OEMSettingInfo_setModelname(value) { this._modelname = value;}

AST_OEMSettingInfo.prototype.setModelname = AST_OEMSettingInfo_setModelname;
//
// accessor is AST_OEMSettingInfo.prototype.getTel
// element get for tel
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for tel
// setter function is is AST_OEMSettingInfo.prototype.setTel
//
function AST_OEMSettingInfo_getTel() { return this._tel;}

AST_OEMSettingInfo.prototype.getTel = AST_OEMSettingInfo_getTel;

function AST_OEMSettingInfo_setTel(value) { this._tel = value;}

AST_OEMSettingInfo.prototype.setTel = AST_OEMSettingInfo_setTel;
//
// accessor is AST_OEMSettingInfo.prototype.getFax
// element get for fax
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for fax
// setter function is is AST_OEMSettingInfo.prototype.setFax
//
function AST_OEMSettingInfo_getFax() { return this._fax;}

AST_OEMSettingInfo.prototype.getFax = AST_OEMSettingInfo_getFax;

function AST_OEMSettingInfo_setFax(value) { this._fax = value;}

AST_OEMSettingInfo.prototype.setFax = AST_OEMSettingInfo_setFax;
//
// accessor is AST_OEMSettingInfo.prototype.getEmail
// element get for email
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for email
// setter function is is AST_OEMSettingInfo.prototype.setEmail
//
function AST_OEMSettingInfo_getEmail() { return this._email;}

AST_OEMSettingInfo.prototype.getEmail = AST_OEMSettingInfo_getEmail;

function AST_OEMSettingInfo_setEmail(value) { this._email = value;}

AST_OEMSettingInfo.prototype.setEmail = AST_OEMSettingInfo_setEmail;
//
// accessor is AST_OEMSettingInfo.prototype.getWebsite
// element get for website
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for website
// setter function is is AST_OEMSettingInfo.prototype.setWebsite
//
function AST_OEMSettingInfo_getWebsite() { return this._website;}

AST_OEMSettingInfo.prototype.getWebsite = AST_OEMSettingInfo_getWebsite;

function AST_OEMSettingInfo_setWebsite(value) { this._website = value;}

AST_OEMSettingInfo.prototype.setWebsite = AST_OEMSettingInfo_setWebsite;
//
// accessor is AST_OEMSettingInfo.prototype.getAddress
// element get for address
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for address
// setter function is is AST_OEMSettingInfo.prototype.setAddress
//
function AST_OEMSettingInfo_getAddress() { return this._address;}

AST_OEMSettingInfo.prototype.getAddress = AST_OEMSettingInfo_getAddress;

function AST_OEMSettingInfo_setAddress(value) { this._address = value;}

AST_OEMSettingInfo.prototype.setAddress = AST_OEMSettingInfo_setAddress;
//
// accessor is AST_OEMSettingInfo.prototype.getCopyright
// element get for copyright
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for copyright
// setter function is is AST_OEMSettingInfo.prototype.setCopyright
//
function AST_OEMSettingInfo_getCopyright() { return this._copyright;}

AST_OEMSettingInfo.prototype.getCopyright = AST_OEMSettingInfo_getCopyright;

function AST_OEMSettingInfo_setCopyright(value) { this._copyright = value;}

AST_OEMSettingInfo.prototype.setCopyright = AST_OEMSettingInfo_setCopyright;
//
// accessor is AST_OEMSettingInfo.prototype.getHeaderimagepath
// element get for headerimagepath
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for headerimagepath
// setter function is is AST_OEMSettingInfo.prototype.setHeaderimagepath
//
function AST_OEMSettingInfo_getHeaderimagepath() { return this._headerimagepath;}

AST_OEMSettingInfo.prototype.getHeaderimagepath = AST_OEMSettingInfo_getHeaderimagepath;

function AST_OEMSettingInfo_setHeaderimagepath(value) { this._headerimagepath = value;}

AST_OEMSettingInfo.prototype.setHeaderimagepath = AST_OEMSettingInfo_setHeaderimagepath;
//
// accessor is AST_OEMSettingInfo.prototype.getFooterimagepath
// element get for footerimagepath
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for footerimagepath
// setter function is is AST_OEMSettingInfo.prototype.setFooterimagepath
//
function AST_OEMSettingInfo_getFooterimagepath() { return this._footerimagepath;}

AST_OEMSettingInfo.prototype.getFooterimagepath = AST_OEMSettingInfo_getFooterimagepath;

function AST_OEMSettingInfo_setFooterimagepath(value) { this._footerimagepath = value;}

AST_OEMSettingInfo.prototype.setFooterimagepath = AST_OEMSettingInfo_setFooterimagepath;
//
// Serialize {urn:ast}OEMSettingInfo
//
function AST_OEMSettingInfo_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:sw>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._sw);
     xml = xml + '</jns0:sw>';
    }
    // block for local variables
    {
     if (this._modelname == null) {
      xml = xml + '<jns0:modelname xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:modelname>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._modelname);
      xml = xml + '</jns0:modelname>';
     }
    }
    // block for local variables
    {
     if (this._tel == null) {
      xml = xml + '<jns0:tel xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:tel>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._tel);
      xml = xml + '</jns0:tel>';
     }
    }
    // block for local variables
    {
     if (this._fax == null) {
      xml = xml + '<jns0:fax xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:fax>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._fax);
      xml = xml + '</jns0:fax>';
     }
    }
    // block for local variables
    {
     if (this._email == null) {
      xml = xml + '<jns0:email xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:email>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._email);
      xml = xml + '</jns0:email>';
     }
    }
    // block for local variables
    {
     if (this._website == null) {
      xml = xml + '<jns0:website xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:website>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._website);
      xml = xml + '</jns0:website>';
     }
    }
    // block for local variables
    {
     if (this._address == null) {
      xml = xml + '<jns0:address xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:address>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._address);
      xml = xml + '</jns0:address>';
     }
    }
    // block for local variables
    {
     if (this._copyright == null) {
      xml = xml + '<jns0:copyright xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:copyright>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._copyright);
      xml = xml + '</jns0:copyright>';
     }
    }
    // block for local variables
    {
     if (this._headerimagepath == null) {
      xml = xml + '<jns0:headerimagepath xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:headerimagepath>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._headerimagepath);
      xml = xml + '</jns0:headerimagepath>';
     }
    }
    // block for local variables
    {
     if (this._footerimagepath == null) {
      xml = xml + '<jns0:footerimagepath xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:footerimagepath>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._footerimagepath);
      xml = xml + '</jns0:footerimagepath>';
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_OEMSettingInfo.prototype.serialize = AST_OEMSettingInfo_serialize;

function AST_OEMSettingInfo_deserialize (cxfjsutils, element) {
    var newobject = new AST_OEMSettingInfo();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sw');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSw(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing modelname');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setModelname(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing tel');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setTel(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fax');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setFax(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing email');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setEmail(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing website');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setWebsite(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing address');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setAddress(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing copyright');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setCopyright(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing headerimagepath');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setHeaderimagepath(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing footerimagepath');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setFooterimagepath(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AdvAstGetAll
//
function AST_AdvAstGetAll () {
    this.typeMarker = 'AST_AdvAstGetAll';
    this._combuf = null;
    this._general = null;
}

//
// accessor is AST_AdvAstGetAll.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_AdvAstGetAll.prototype.setCombuf
//
function AST_AdvAstGetAll_getCombuf() { return this._combuf;}

AST_AdvAstGetAll.prototype.getCombuf = AST_AdvAstGetAll_getCombuf;

function AST_AdvAstGetAll_setCombuf(value) { this._combuf = value;}

AST_AdvAstGetAll.prototype.setCombuf = AST_AdvAstGetAll_setCombuf;
//
// accessor is AST_AdvAstGetAll.prototype.getGeneral
// element get for general
// - element type is {urn:ast}AdvAstGeneral
// - required element
//
// element set for general
// setter function is is AST_AdvAstGetAll.prototype.setGeneral
//
function AST_AdvAstGetAll_getGeneral() { return this._general;}

AST_AdvAstGetAll.prototype.getGeneral = AST_AdvAstGetAll_getGeneral;

function AST_AdvAstGetAll_setGeneral(value) { this._general = value;}

AST_AdvAstGetAll.prototype.setGeneral = AST_AdvAstGetAll_setGeneral;
//
// Serialize {urn:ast}AdvAstGetAll
//
function AST_AdvAstGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._general.serialize(cxfjsutils, 'jns0:general', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AdvAstGetAll.prototype.serialize = AST_AdvAstGetAll_serialize;

function AST_AdvAstGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_AdvAstGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing general');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_AdvAstGeneral_deserialize(cxfjsutils, curElement);
    }
    newobject.setGeneral(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipAnaArr
//
function AST_SipAnaArr () {
    this.typeMarker = 'AST_SipAnaArr';
    this._item = [];
}

//
// accessor is AST_SipAnaArr.prototype.getItem
// element get for item
// - element type is {urn:ast}SipAna
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_SipAnaArr.prototype.setItem
//
function AST_SipAnaArr_getItem() { return this._item;}

AST_SipAnaArr.prototype.getItem = AST_SipAnaArr_getItem;

function AST_SipAnaArr_setItem(value) { this._item = value;}

AST_SipAnaArr.prototype.setItem = AST_SipAnaArr_setItem;
//
// Serialize {urn:ast}SipAnaArr
//
function AST_SipAnaArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipAnaArr.prototype.serialize = AST_SipAnaArr_serialize;

function AST_SipAnaArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipAnaArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_SipAna_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AnaChnArr
//
function AST_AnaChnArr () {
    this.typeMarker = 'AST_AnaChnArr';
    this._item = [];
}

//
// accessor is AST_AnaChnArr.prototype.getItem
// element get for item
// - element type is {urn:ast}AnaChn
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_AnaChnArr.prototype.setItem
//
function AST_AnaChnArr_getItem() { return this._item;}

AST_AnaChnArr.prototype.getItem = AST_AnaChnArr_getItem;

function AST_AnaChnArr_setItem(value) { this._item = value;}

AST_AnaChnArr.prototype.setItem = AST_AnaChnArr_setItem;
//
// Serialize {urn:ast}AnaChnArr
//
function AST_AnaChnArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AnaChnArr.prototype.serialize = AST_AnaChnArr_serialize;

function AST_AnaChnArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_AnaChnArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_AnaChn_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}UcpAlgGlbGetAll
//
function AST_UcpAlgGlbGetAll () {
    this.typeMarker = 'AST_UcpAlgGlbGetAll';
    this._combuf = null;
    this._global = null;
    this._glb = null;
}

//
// accessor is AST_UcpAlgGlbGetAll.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_UcpAlgGlbGetAll.prototype.setCombuf
//
function AST_UcpAlgGlbGetAll_getCombuf() { return this._combuf;}

AST_UcpAlgGlbGetAll.prototype.getCombuf = AST_UcpAlgGlbGetAll_getCombuf;

function AST_UcpAlgGlbGetAll_setCombuf(value) { this._combuf = value;}

AST_UcpAlgGlbGetAll.prototype.setCombuf = AST_UcpAlgGlbGetAll_setCombuf;
//
// accessor is AST_UcpAlgGlbGetAll.prototype.getGlobal
// element get for global
// - element type is {urn:ast}UcpAlgGlobal
// - required element
//
// element set for global
// setter function is is AST_UcpAlgGlbGetAll.prototype.setGlobal
//
function AST_UcpAlgGlbGetAll_getGlobal() { return this._global;}

AST_UcpAlgGlbGetAll.prototype.getGlobal = AST_UcpAlgGlbGetAll_getGlobal;

function AST_UcpAlgGlbGetAll_setGlobal(value) { this._global = value;}

AST_UcpAlgGlbGetAll.prototype.setGlobal = AST_UcpAlgGlbGetAll_setGlobal;
//
// accessor is AST_UcpAlgGlbGetAll.prototype.getGlb
// element get for glb
// - element type is {urn:ast}AlgGlb
// - required element
//
// element set for glb
// setter function is is AST_UcpAlgGlbGetAll.prototype.setGlb
//
function AST_UcpAlgGlbGetAll_getGlb() { return this._glb;}

AST_UcpAlgGlbGetAll.prototype.getGlb = AST_UcpAlgGlbGetAll_getGlb;

function AST_UcpAlgGlbGetAll_setGlb(value) { this._glb = value;}

AST_UcpAlgGlbGetAll.prototype.setGlb = AST_UcpAlgGlbGetAll_setGlb;
//
// Serialize {urn:ast}UcpAlgGlbGetAll
//
function AST_UcpAlgGlbGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._global.serialize(cxfjsutils, 'jns0:global', null);
    }
    // block for local variables
    {
     xml = xml + this._glb.serialize(cxfjsutils, 'jns0:glb', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_UcpAlgGlbGetAll.prototype.serialize = AST_UcpAlgGlbGetAll_serialize;

function AST_UcpAlgGlbGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_UcpAlgGlbGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing global');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_UcpAlgGlobal_deserialize(cxfjsutils, curElement);
    }
    newobject.setGlobal(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing glb');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_AlgGlb_deserialize(cxfjsutils, curElement);
    }
    newobject.setGlb(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SnmpUserAdd
//
function AST_SnmpUserAdd () {
    this.typeMarker = 'AST_SnmpUserAdd';
    this._username = null;
    this._authcode = null;
    this._privcode = null;
    this._authproctol = '';
    this._privproctol = '';
}

//
// accessor is AST_SnmpUserAdd.prototype.getUsername
// element get for username
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for username
// setter function is is AST_SnmpUserAdd.prototype.setUsername
//
function AST_SnmpUserAdd_getUsername() { return this._username;}

AST_SnmpUserAdd.prototype.getUsername = AST_SnmpUserAdd_getUsername;

function AST_SnmpUserAdd_setUsername(value) { this._username = value;}

AST_SnmpUserAdd.prototype.setUsername = AST_SnmpUserAdd_setUsername;
//
// accessor is AST_SnmpUserAdd.prototype.getAuthcode
// element get for authcode
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for authcode
// setter function is is AST_SnmpUserAdd.prototype.setAuthcode
//
function AST_SnmpUserAdd_getAuthcode() { return this._authcode;}

AST_SnmpUserAdd.prototype.getAuthcode = AST_SnmpUserAdd_getAuthcode;

function AST_SnmpUserAdd_setAuthcode(value) { this._authcode = value;}

AST_SnmpUserAdd.prototype.setAuthcode = AST_SnmpUserAdd_setAuthcode;
//
// accessor is AST_SnmpUserAdd.prototype.getPrivcode
// element get for privcode
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for privcode
// setter function is is AST_SnmpUserAdd.prototype.setPrivcode
//
function AST_SnmpUserAdd_getPrivcode() { return this._privcode;}

AST_SnmpUserAdd.prototype.getPrivcode = AST_SnmpUserAdd_getPrivcode;

function AST_SnmpUserAdd_setPrivcode(value) { this._privcode = value;}

AST_SnmpUserAdd.prototype.setPrivcode = AST_SnmpUserAdd_setPrivcode;
//
// accessor is AST_SnmpUserAdd.prototype.getAuthproctol
// element get for authproctol
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for authproctol
// setter function is is AST_SnmpUserAdd.prototype.setAuthproctol
//
function AST_SnmpUserAdd_getAuthproctol() { return this._authproctol;}

AST_SnmpUserAdd.prototype.getAuthproctol = AST_SnmpUserAdd_getAuthproctol;

function AST_SnmpUserAdd_setAuthproctol(value) { this._authproctol = value;}

AST_SnmpUserAdd.prototype.setAuthproctol = AST_SnmpUserAdd_setAuthproctol;
//
// accessor is AST_SnmpUserAdd.prototype.getPrivproctol
// element get for privproctol
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for privproctol
// setter function is is AST_SnmpUserAdd.prototype.setPrivproctol
//
function AST_SnmpUserAdd_getPrivproctol() { return this._privproctol;}

AST_SnmpUserAdd.prototype.getPrivproctol = AST_SnmpUserAdd_getPrivproctol;

function AST_SnmpUserAdd_setPrivproctol(value) { this._privproctol = value;}

AST_SnmpUserAdd.prototype.setPrivproctol = AST_SnmpUserAdd_setPrivproctol;
//
// Serialize {urn:ast}SnmpUserAdd
//
function AST_SnmpUserAdd_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._username == null) {
      xml = xml + '<jns0:username xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:username>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._username);
      xml = xml + '</jns0:username>';
     }
    }
    // block for local variables
    {
     if (this._authcode == null) {
      xml = xml + '<jns0:authcode xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:authcode>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._authcode);
      xml = xml + '</jns0:authcode>';
     }
    }
    // block for local variables
    {
     if (this._privcode == null) {
      xml = xml + '<jns0:privcode xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:privcode>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._privcode);
      xml = xml + '</jns0:privcode>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:authproctol>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._authproctol);
     xml = xml + '</jns0:authproctol>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:privproctol>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._privproctol);
     xml = xml + '</jns0:privproctol>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SnmpUserAdd.prototype.serialize = AST_SnmpUserAdd_serialize;

function AST_SnmpUserAdd_deserialize (cxfjsutils, element) {
    var newobject = new AST_SnmpUserAdd();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing username');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setUsername(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing authcode');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setAuthcode(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing privcode');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setPrivcode(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing authproctol');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setAuthproctol(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing privproctol');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setPrivproctol(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RoutingAnaArr
//
function AST_RoutingAnaArr () {
    this.typeMarker = 'AST_RoutingAnaArr';
    this._item = [];
}

//
// accessor is AST_RoutingAnaArr.prototype.getItem
// element get for item
// - element type is {urn:ast}RoutingAna
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_RoutingAnaArr.prototype.setItem
//
function AST_RoutingAnaArr_getItem() { return this._item;}

AST_RoutingAnaArr.prototype.getItem = AST_RoutingAnaArr_getItem;

function AST_RoutingAnaArr_setItem(value) { this._item = value;}

AST_RoutingAnaArr.prototype.setItem = AST_RoutingAnaArr_setItem;
//
// Serialize {urn:ast}RoutingAnaArr
//
function AST_RoutingAnaArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RoutingAnaArr.prototype.serialize = AST_RoutingAnaArr_serialize;

function AST_RoutingAnaArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_RoutingAnaArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_RoutingAna_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AlgDialtableSave
//
function AST_AlgDialtableSave () {
    this.typeMarker = 'AST_AlgDialtableSave';
    this._lines = null;
}

//
// accessor is AST_AlgDialtableSave.prototype.getLines
// element get for lines
// - element type is {urn:ast}LineArr
// - required element
//
// element set for lines
// setter function is is AST_AlgDialtableSave.prototype.setLines
//
function AST_AlgDialtableSave_getLines() { return this._lines;}

AST_AlgDialtableSave.prototype.getLines = AST_AlgDialtableSave_getLines;

function AST_AlgDialtableSave_setLines(value) { this._lines = value;}

AST_AlgDialtableSave.prototype.setLines = AST_AlgDialtableSave_setLines;
//
// Serialize {urn:ast}AlgDialtableSave
//
function AST_AlgDialtableSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._lines.serialize(cxfjsutils, 'jns0:lines', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AlgDialtableSave.prototype.serialize = AST_AlgDialtableSave_serialize;

function AST_AlgDialtableSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AlgDialtableSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing lines');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_LineArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setLines(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}UcpAlgDahdiContent
//
function AST_UcpAlgDahdiContent () {
    this.typeMarker = 'AST_UcpAlgDahdiContent';
    this._polaritydebounce = 0;
    this._ringdebounce = 0;
    this._ringoncount = 0;
    this._ringoffcount = 0;
    this._ringdebouncetime = 0;
}

//
// accessor is AST_UcpAlgDahdiContent.prototype.getPolaritydebounce
// element get for polaritydebounce
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for polaritydebounce
// setter function is is AST_UcpAlgDahdiContent.prototype.setPolaritydebounce
//
function AST_UcpAlgDahdiContent_getPolaritydebounce() { return this._polaritydebounce;}

AST_UcpAlgDahdiContent.prototype.getPolaritydebounce = AST_UcpAlgDahdiContent_getPolaritydebounce;

function AST_UcpAlgDahdiContent_setPolaritydebounce(value) { this._polaritydebounce = value;}

AST_UcpAlgDahdiContent.prototype.setPolaritydebounce = AST_UcpAlgDahdiContent_setPolaritydebounce;
//
// accessor is AST_UcpAlgDahdiContent.prototype.getRingdebounce
// element get for ringdebounce
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for ringdebounce
// setter function is is AST_UcpAlgDahdiContent.prototype.setRingdebounce
//
function AST_UcpAlgDahdiContent_getRingdebounce() { return this._ringdebounce;}

AST_UcpAlgDahdiContent.prototype.getRingdebounce = AST_UcpAlgDahdiContent_getRingdebounce;

function AST_UcpAlgDahdiContent_setRingdebounce(value) { this._ringdebounce = value;}

AST_UcpAlgDahdiContent.prototype.setRingdebounce = AST_UcpAlgDahdiContent_setRingdebounce;
//
// accessor is AST_UcpAlgDahdiContent.prototype.getRingoncount
// element get for ringoncount
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for ringoncount
// setter function is is AST_UcpAlgDahdiContent.prototype.setRingoncount
//
function AST_UcpAlgDahdiContent_getRingoncount() { return this._ringoncount;}

AST_UcpAlgDahdiContent.prototype.getRingoncount = AST_UcpAlgDahdiContent_getRingoncount;

function AST_UcpAlgDahdiContent_setRingoncount(value) { this._ringoncount = value;}

AST_UcpAlgDahdiContent.prototype.setRingoncount = AST_UcpAlgDahdiContent_setRingoncount;
//
// accessor is AST_UcpAlgDahdiContent.prototype.getRingoffcount
// element get for ringoffcount
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for ringoffcount
// setter function is is AST_UcpAlgDahdiContent.prototype.setRingoffcount
//
function AST_UcpAlgDahdiContent_getRingoffcount() { return this._ringoffcount;}

AST_UcpAlgDahdiContent.prototype.getRingoffcount = AST_UcpAlgDahdiContent_getRingoffcount;

function AST_UcpAlgDahdiContent_setRingoffcount(value) { this._ringoffcount = value;}

AST_UcpAlgDahdiContent.prototype.setRingoffcount = AST_UcpAlgDahdiContent_setRingoffcount;
//
// accessor is AST_UcpAlgDahdiContent.prototype.getRingdebouncetime
// element get for ringdebouncetime
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for ringdebouncetime
// setter function is is AST_UcpAlgDahdiContent.prototype.setRingdebouncetime
//
function AST_UcpAlgDahdiContent_getRingdebouncetime() { return this._ringdebouncetime;}

AST_UcpAlgDahdiContent.prototype.getRingdebouncetime = AST_UcpAlgDahdiContent_getRingdebouncetime;

function AST_UcpAlgDahdiContent_setRingdebouncetime(value) { this._ringdebouncetime = value;}

AST_UcpAlgDahdiContent.prototype.setRingdebouncetime = AST_UcpAlgDahdiContent_setRingdebouncetime;
//
// Serialize {urn:ast}UcpAlgDahdiContent
//
function AST_UcpAlgDahdiContent_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:polaritydebounce>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._polaritydebounce);
     xml = xml + '</jns0:polaritydebounce>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:ringdebounce>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._ringdebounce);
     xml = xml + '</jns0:ringdebounce>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:ringoncount>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._ringoncount);
     xml = xml + '</jns0:ringoncount>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:ringoffcount>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._ringoffcount);
     xml = xml + '</jns0:ringoffcount>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:ringdebouncetime>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._ringdebouncetime);
     xml = xml + '</jns0:ringdebouncetime>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_UcpAlgDahdiContent.prototype.serialize = AST_UcpAlgDahdiContent_serialize;

function AST_UcpAlgDahdiContent_deserialize (cxfjsutils, element) {
    var newobject = new AST_UcpAlgDahdiContent();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing polaritydebounce');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setPolaritydebounce(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ringdebounce');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setRingdebounce(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ringoncount');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setRingoncount(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ringoffcount');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setRingoffcount(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ringdebouncetime');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setRingdebouncetime(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AutoCallChnArr
//
function AST_AutoCallChnArr () {
    this.typeMarker = 'AST_AutoCallChnArr';
    this._item = [];
}

//
// accessor is AST_AutoCallChnArr.prototype.getItem
// element get for item
// - element type is {urn:ast}AutoCallChn
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_AutoCallChnArr.prototype.setItem
//
function AST_AutoCallChnArr_getItem() { return this._item;}

AST_AutoCallChnArr.prototype.getItem = AST_AutoCallChnArr_getItem;

function AST_AutoCallChnArr_setItem(value) { this._item = value;}

AST_AutoCallChnArr.prototype.setItem = AST_AutoCallChnArr_setItem;
//
// Serialize {urn:ast}AutoCallChnArr
//
function AST_AutoCallChnArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AutoCallChnArr.prototype.serialize = AST_AutoCallChnArr_serialize;

function AST_AutoCallChnArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_AutoCallChnArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_AutoCallChn_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SystemFeatures
//
function AST_SystemFeatures () {
    this.typeMarker = 'AST_SystemFeatures';
    this._OpenVoxCloud = '';
    this._TR069 = '';
    this._SNMP = '';
    this._TLS = '';
    this._L2TPvpn = '';
    this._CheckFXSCurrSta = '';
}

//
// accessor is AST_SystemFeatures.prototype.getOpenVoxCloud
// element get for OpenVoxCloud
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for OpenVoxCloud
// setter function is is AST_SystemFeatures.prototype.setOpenVoxCloud
//
function AST_SystemFeatures_getOpenVoxCloud() { return this._OpenVoxCloud;}

AST_SystemFeatures.prototype.getOpenVoxCloud = AST_SystemFeatures_getOpenVoxCloud;

function AST_SystemFeatures_setOpenVoxCloud(value) { this._OpenVoxCloud = value;}

AST_SystemFeatures.prototype.setOpenVoxCloud = AST_SystemFeatures_setOpenVoxCloud;
//
// accessor is AST_SystemFeatures.prototype.getTR069
// element get for TR069
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for TR069
// setter function is is AST_SystemFeatures.prototype.setTR069
//
function AST_SystemFeatures_getTR069() { return this._TR069;}

AST_SystemFeatures.prototype.getTR069 = AST_SystemFeatures_getTR069;

function AST_SystemFeatures_setTR069(value) { this._TR069 = value;}

AST_SystemFeatures.prototype.setTR069 = AST_SystemFeatures_setTR069;
//
// accessor is AST_SystemFeatures.prototype.getSNMP
// element get for SNMP
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for SNMP
// setter function is is AST_SystemFeatures.prototype.setSNMP
//
function AST_SystemFeatures_getSNMP() { return this._SNMP;}

AST_SystemFeatures.prototype.getSNMP = AST_SystemFeatures_getSNMP;

function AST_SystemFeatures_setSNMP(value) { this._SNMP = value;}

AST_SystemFeatures.prototype.setSNMP = AST_SystemFeatures_setSNMP;
//
// accessor is AST_SystemFeatures.prototype.getTLS
// element get for TLS
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for TLS
// setter function is is AST_SystemFeatures.prototype.setTLS
//
function AST_SystemFeatures_getTLS() { return this._TLS;}

AST_SystemFeatures.prototype.getTLS = AST_SystemFeatures_getTLS;

function AST_SystemFeatures_setTLS(value) { this._TLS = value;}

AST_SystemFeatures.prototype.setTLS = AST_SystemFeatures_setTLS;
//
// accessor is AST_SystemFeatures.prototype.getL2TPvpn
// element get for L2TPvpn
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for L2TPvpn
// setter function is is AST_SystemFeatures.prototype.setL2TPvpn
//
function AST_SystemFeatures_getL2TPvpn() { return this._L2TPvpn;}

AST_SystemFeatures.prototype.getL2TPvpn = AST_SystemFeatures_getL2TPvpn;

function AST_SystemFeatures_setL2TPvpn(value) { this._L2TPvpn = value;}

AST_SystemFeatures.prototype.setL2TPvpn = AST_SystemFeatures_setL2TPvpn;
//
// accessor is AST_SystemFeatures.prototype.getCheckFXSCurrSta
// element get for CheckFXSCurrSta
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for CheckFXSCurrSta
// setter function is is AST_SystemFeatures.prototype.setCheckFXSCurrSta
//
function AST_SystemFeatures_getCheckFXSCurrSta() { return this._CheckFXSCurrSta;}

AST_SystemFeatures.prototype.getCheckFXSCurrSta = AST_SystemFeatures_getCheckFXSCurrSta;

function AST_SystemFeatures_setCheckFXSCurrSta(value) { this._CheckFXSCurrSta = value;}

AST_SystemFeatures.prototype.setCheckFXSCurrSta = AST_SystemFeatures_setCheckFXSCurrSta;
//
// Serialize {urn:ast}SystemFeatures
//
function AST_SystemFeatures_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:OpenVoxCloud>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._OpenVoxCloud);
     xml = xml + '</jns0:OpenVoxCloud>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:TR069>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._TR069);
     xml = xml + '</jns0:TR069>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:SNMP>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._SNMP);
     xml = xml + '</jns0:SNMP>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:TLS>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._TLS);
     xml = xml + '</jns0:TLS>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:L2TPvpn>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._L2TPvpn);
     xml = xml + '</jns0:L2TPvpn>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:CheckFXSCurrSta>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._CheckFXSCurrSta);
     xml = xml + '</jns0:CheckFXSCurrSta>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SystemFeatures.prototype.serialize = AST_SystemFeatures_serialize;

function AST_SystemFeatures_deserialize (cxfjsutils, element) {
    var newobject = new AST_SystemFeatures();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing OpenVoxCloud');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setOpenVoxCloud(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing TR069');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setTR069(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing SNMP');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSNMP(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing TLS');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setTLS(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing L2TPvpn');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setL2TPvpn(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing CheckFXSCurrSta');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setCheckFXSCurrSta(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}Sipinfo
//
function AST_Sipinfo () {
    this.typeMarker = 'AST_Sipinfo';
    this._section = null;
    this._username = null;
    this._host = null;
    this._status = null;
    this._respon = null;
    this._registration = '';
}

//
// accessor is AST_Sipinfo.prototype.getSection
// element get for section
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for section
// setter function is is AST_Sipinfo.prototype.setSection
//
function AST_Sipinfo_getSection() { return this._section;}

AST_Sipinfo.prototype.getSection = AST_Sipinfo_getSection;

function AST_Sipinfo_setSection(value) { this._section = value;}

AST_Sipinfo.prototype.setSection = AST_Sipinfo_setSection;
//
// accessor is AST_Sipinfo.prototype.getUsername
// element get for username
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for username
// setter function is is AST_Sipinfo.prototype.setUsername
//
function AST_Sipinfo_getUsername() { return this._username;}

AST_Sipinfo.prototype.getUsername = AST_Sipinfo_getUsername;

function AST_Sipinfo_setUsername(value) { this._username = value;}

AST_Sipinfo.prototype.setUsername = AST_Sipinfo_setUsername;
//
// accessor is AST_Sipinfo.prototype.getHost
// element get for host
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for host
// setter function is is AST_Sipinfo.prototype.setHost
//
function AST_Sipinfo_getHost() { return this._host;}

AST_Sipinfo.prototype.getHost = AST_Sipinfo_getHost;

function AST_Sipinfo_setHost(value) { this._host = value;}

AST_Sipinfo.prototype.setHost = AST_Sipinfo_setHost;
//
// accessor is AST_Sipinfo.prototype.getStatus
// element get for status
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for status
// setter function is is AST_Sipinfo.prototype.setStatus
//
function AST_Sipinfo_getStatus() { return this._status;}

AST_Sipinfo.prototype.getStatus = AST_Sipinfo_getStatus;

function AST_Sipinfo_setStatus(value) { this._status = value;}

AST_Sipinfo.prototype.setStatus = AST_Sipinfo_setStatus;
//
// accessor is AST_Sipinfo.prototype.getRespon
// element get for respon
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for respon
// setter function is is AST_Sipinfo.prototype.setRespon
//
function AST_Sipinfo_getRespon() { return this._respon;}

AST_Sipinfo.prototype.getRespon = AST_Sipinfo_getRespon;

function AST_Sipinfo_setRespon(value) { this._respon = value;}

AST_Sipinfo.prototype.setRespon = AST_Sipinfo_setRespon;
//
// accessor is AST_Sipinfo.prototype.getRegistration
// element get for registration
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for registration
// setter function is is AST_Sipinfo.prototype.setRegistration
//
function AST_Sipinfo_getRegistration() { return this._registration;}

AST_Sipinfo.prototype.getRegistration = AST_Sipinfo_getRegistration;

function AST_Sipinfo_setRegistration(value) { this._registration = value;}

AST_Sipinfo.prototype.setRegistration = AST_Sipinfo_setRegistration;
//
// Serialize {urn:ast}Sipinfo
//
function AST_Sipinfo_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._section == null) {
      xml = xml + '<jns0:section xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:section>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._section);
      xml = xml + '</jns0:section>';
     }
    }
    // block for local variables
    {
     if (this._username == null) {
      xml = xml + '<jns0:username xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:username>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._username);
      xml = xml + '</jns0:username>';
     }
    }
    // block for local variables
    {
     if (this._host == null) {
      xml = xml + '<jns0:host xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:host>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._host);
      xml = xml + '</jns0:host>';
     }
    }
    // block for local variables
    {
     if (this._status == null) {
      xml = xml + '<jns0:status xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:status>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._status);
      xml = xml + '</jns0:status>';
     }
    }
    // block for local variables
    {
     if (this._respon == null) {
      xml = xml + '<jns0:respon xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:respon>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._respon);
      xml = xml + '</jns0:respon>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:registration>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._registration);
     xml = xml + '</jns0:registration>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_Sipinfo.prototype.serialize = AST_Sipinfo_serialize;

function AST_Sipinfo_deserialize (cxfjsutils, element) {
    var newobject = new AST_Sipinfo();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing section');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSection(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing username');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setUsername(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing host');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setHost(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing status');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setStatus(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing respon');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setRespon(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing registration');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setRegistration(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}UcpNetworkRulesGetAll
//
function AST_UcpNetworkRulesGetAll () {
    this.typeMarker = 'AST_UcpNetworkRulesGetAll';
    this._combuf = null;
    this._rules = null;
}

//
// accessor is AST_UcpNetworkRulesGetAll.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_UcpNetworkRulesGetAll.prototype.setCombuf
//
function AST_UcpNetworkRulesGetAll_getCombuf() { return this._combuf;}

AST_UcpNetworkRulesGetAll.prototype.getCombuf = AST_UcpNetworkRulesGetAll_getCombuf;

function AST_UcpNetworkRulesGetAll_setCombuf(value) { this._combuf = value;}

AST_UcpNetworkRulesGetAll.prototype.setCombuf = AST_UcpNetworkRulesGetAll_setCombuf;
//
// accessor is AST_UcpNetworkRulesGetAll.prototype.getRules
// element get for rules
// - element type is {urn:ast}UcpNetworkRulesArr
// - required element
//
// element set for rules
// setter function is is AST_UcpNetworkRulesGetAll.prototype.setRules
//
function AST_UcpNetworkRulesGetAll_getRules() { return this._rules;}

AST_UcpNetworkRulesGetAll.prototype.getRules = AST_UcpNetworkRulesGetAll_getRules;

function AST_UcpNetworkRulesGetAll_setRules(value) { this._rules = value;}

AST_UcpNetworkRulesGetAll.prototype.setRules = AST_UcpNetworkRulesGetAll_setRules;
//
// Serialize {urn:ast}UcpNetworkRulesGetAll
//
function AST_UcpNetworkRulesGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._rules.serialize(cxfjsutils, 'jns0:rules', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_UcpNetworkRulesGetAll.prototype.serialize = AST_UcpNetworkRulesGetAll_serialize;

function AST_UcpNetworkRulesGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_UcpNetworkRulesGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing rules');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_UcpNetworkRulesArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setRules(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RoutingContex
//
function AST_RoutingContex () {
    this.typeMarker = 'AST_RoutingContex';
    this._fromchannel = null;
    this._tochannel = null;
    this._timeout = 0;
    this._maxpasswddigits = 0;
    this._calleedialpattern = null;
    this._callerdialpattern = null;
    this._order = '';
    this._disasw = '';
    this._seconddialsw = '';
    this._dialingdelay = 0.0;
    this._timepattern = null;
    this._forwardnumber = null;
    this._forceanswer = '';
}

//
// accessor is AST_RoutingContex.prototype.getFromchannel
// element get for fromchannel
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for fromchannel
// setter function is is AST_RoutingContex.prototype.setFromchannel
//
function AST_RoutingContex_getFromchannel() { return this._fromchannel;}

AST_RoutingContex.prototype.getFromchannel = AST_RoutingContex_getFromchannel;

function AST_RoutingContex_setFromchannel(value) { this._fromchannel = value;}

AST_RoutingContex.prototype.setFromchannel = AST_RoutingContex_setFromchannel;
//
// accessor is AST_RoutingContex.prototype.getTochannel
// element get for tochannel
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for tochannel
// setter function is is AST_RoutingContex.prototype.setTochannel
//
function AST_RoutingContex_getTochannel() { return this._tochannel;}

AST_RoutingContex.prototype.getTochannel = AST_RoutingContex_getTochannel;

function AST_RoutingContex_setTochannel(value) { this._tochannel = value;}

AST_RoutingContex.prototype.setTochannel = AST_RoutingContex_setTochannel;
//
// accessor is AST_RoutingContex.prototype.getTimeout
// element get for timeout
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for timeout
// setter function is is AST_RoutingContex.prototype.setTimeout
//
function AST_RoutingContex_getTimeout() { return this._timeout;}

AST_RoutingContex.prototype.getTimeout = AST_RoutingContex_getTimeout;

function AST_RoutingContex_setTimeout(value) { this._timeout = value;}

AST_RoutingContex.prototype.setTimeout = AST_RoutingContex_setTimeout;
//
// accessor is AST_RoutingContex.prototype.getMaxpasswddigits
// element get for maxpasswddigits
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for maxpasswddigits
// setter function is is AST_RoutingContex.prototype.setMaxpasswddigits
//
function AST_RoutingContex_getMaxpasswddigits() { return this._maxpasswddigits;}

AST_RoutingContex.prototype.getMaxpasswddigits = AST_RoutingContex_getMaxpasswddigits;

function AST_RoutingContex_setMaxpasswddigits(value) { this._maxpasswddigits = value;}

AST_RoutingContex.prototype.setMaxpasswddigits = AST_RoutingContex_setMaxpasswddigits;
//
// accessor is AST_RoutingContex.prototype.getCalleedialpattern
// element get for calleedialpattern
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for calleedialpattern
// setter function is is AST_RoutingContex.prototype.setCalleedialpattern
//
function AST_RoutingContex_getCalleedialpattern() { return this._calleedialpattern;}

AST_RoutingContex.prototype.getCalleedialpattern = AST_RoutingContex_getCalleedialpattern;

function AST_RoutingContex_setCalleedialpattern(value) { this._calleedialpattern = value;}

AST_RoutingContex.prototype.setCalleedialpattern = AST_RoutingContex_setCalleedialpattern;
//
// accessor is AST_RoutingContex.prototype.getCallerdialpattern
// element get for callerdialpattern
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for callerdialpattern
// setter function is is AST_RoutingContex.prototype.setCallerdialpattern
//
function AST_RoutingContex_getCallerdialpattern() { return this._callerdialpattern;}

AST_RoutingContex.prototype.getCallerdialpattern = AST_RoutingContex_getCallerdialpattern;

function AST_RoutingContex_setCallerdialpattern(value) { this._callerdialpattern = value;}

AST_RoutingContex.prototype.setCallerdialpattern = AST_RoutingContex_setCallerdialpattern;
//
// accessor is AST_RoutingContex.prototype.getOrder
// element get for order
// - element type is {http://www.w3.org/2001/XMLSchema}short
// - required element
//
// element set for order
// setter function is is AST_RoutingContex.prototype.setOrder
//
function AST_RoutingContex_getOrder() { return this._order;}

AST_RoutingContex.prototype.getOrder = AST_RoutingContex_getOrder;

function AST_RoutingContex_setOrder(value) { this._order = value;}

AST_RoutingContex.prototype.setOrder = AST_RoutingContex_setOrder;
//
// accessor is AST_RoutingContex.prototype.getDisasw
// element get for disasw
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for disasw
// setter function is is AST_RoutingContex.prototype.setDisasw
//
function AST_RoutingContex_getDisasw() { return this._disasw;}

AST_RoutingContex.prototype.getDisasw = AST_RoutingContex_getDisasw;

function AST_RoutingContex_setDisasw(value) { this._disasw = value;}

AST_RoutingContex.prototype.setDisasw = AST_RoutingContex_setDisasw;
//
// accessor is AST_RoutingContex.prototype.getSeconddialsw
// element get for seconddialsw
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for seconddialsw
// setter function is is AST_RoutingContex.prototype.setSeconddialsw
//
function AST_RoutingContex_getSeconddialsw() { return this._seconddialsw;}

AST_RoutingContex.prototype.getSeconddialsw = AST_RoutingContex_getSeconddialsw;

function AST_RoutingContex_setSeconddialsw(value) { this._seconddialsw = value;}

AST_RoutingContex.prototype.setSeconddialsw = AST_RoutingContex_setSeconddialsw;
//
// accessor is AST_RoutingContex.prototype.getDialingdelay
// element get for dialingdelay
// - element type is {http://www.w3.org/2001/XMLSchema}float
// - required element
//
// element set for dialingdelay
// setter function is is AST_RoutingContex.prototype.setDialingdelay
//
function AST_RoutingContex_getDialingdelay() { return this._dialingdelay;}

AST_RoutingContex.prototype.getDialingdelay = AST_RoutingContex_getDialingdelay;

function AST_RoutingContex_setDialingdelay(value) { this._dialingdelay = value;}

AST_RoutingContex.prototype.setDialingdelay = AST_RoutingContex_setDialingdelay;
//
// accessor is AST_RoutingContex.prototype.getTimepattern
// element get for timepattern
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for timepattern
// setter function is is AST_RoutingContex.prototype.setTimepattern
//
function AST_RoutingContex_getTimepattern() { return this._timepattern;}

AST_RoutingContex.prototype.getTimepattern = AST_RoutingContex_getTimepattern;

function AST_RoutingContex_setTimepattern(value) { this._timepattern = value;}

AST_RoutingContex.prototype.setTimepattern = AST_RoutingContex_setTimepattern;
//
// accessor is AST_RoutingContex.prototype.getForwardnumber
// element get for forwardnumber
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for forwardnumber
// setter function is is AST_RoutingContex.prototype.setForwardnumber
//
function AST_RoutingContex_getForwardnumber() { return this._forwardnumber;}

AST_RoutingContex.prototype.getForwardnumber = AST_RoutingContex_getForwardnumber;

function AST_RoutingContex_setForwardnumber(value) { this._forwardnumber = value;}

AST_RoutingContex.prototype.setForwardnumber = AST_RoutingContex_setForwardnumber;
//
// accessor is AST_RoutingContex.prototype.getForceanswer
// element get for forceanswer
// - element type is {http://www.w3.org/2001/XMLSchema}byte
// - required element
//
// element set for forceanswer
// setter function is is AST_RoutingContex.prototype.setForceanswer
//
function AST_RoutingContex_getForceanswer() { return this._forceanswer;}

AST_RoutingContex.prototype.getForceanswer = AST_RoutingContex_getForceanswer;

function AST_RoutingContex_setForceanswer(value) { this._forceanswer = value;}

AST_RoutingContex.prototype.setForceanswer = AST_RoutingContex_setForceanswer;
//
// Serialize {urn:ast}RoutingContex
//
function AST_RoutingContex_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._fromchannel == null) {
      xml = xml + '<jns0:fromchannel xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:fromchannel>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._fromchannel);
      xml = xml + '</jns0:fromchannel>';
     }
    }
    // block for local variables
    {
     if (this._tochannel != null) {
      if (this._tochannel == null) {
       xml = xml + '<jns0:tochannel xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:tochannel>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._tochannel);
       xml = xml + '</jns0:tochannel>';
      }
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:timeout>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._timeout);
     xml = xml + '</jns0:timeout>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:maxpasswddigits>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._maxpasswddigits);
     xml = xml + '</jns0:maxpasswddigits>';
    }
    // block for local variables
    {
     if (this._calleedialpattern != null) {
      if (this._calleedialpattern == null) {
       xml = xml + '<jns0:calleedialpattern xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:calleedialpattern>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._calleedialpattern);
       xml = xml + '</jns0:calleedialpattern>';
      }
     }
    }
    // block for local variables
    {
     if (this._callerdialpattern != null) {
      if (this._callerdialpattern == null) {
       xml = xml + '<jns0:callerdialpattern xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:callerdialpattern>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._callerdialpattern);
       xml = xml + '</jns0:callerdialpattern>';
      }
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:order>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._order);
     xml = xml + '</jns0:order>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:disasw>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._disasw);
     xml = xml + '</jns0:disasw>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:seconddialsw>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._seconddialsw);
     xml = xml + '</jns0:seconddialsw>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:dialingdelay>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._dialingdelay);
     xml = xml + '</jns0:dialingdelay>';
    }
    // block for local variables
    {
     if (this._timepattern != null) {
      if (this._timepattern == null) {
       xml = xml + '<jns0:timepattern xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:timepattern>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._timepattern);
       xml = xml + '</jns0:timepattern>';
      }
     }
    }
    // block for local variables
    {
     if (this._forwardnumber == null) {
      xml = xml + '<jns0:forwardnumber xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:forwardnumber>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._forwardnumber);
      xml = xml + '</jns0:forwardnumber>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:forceanswer>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._forceanswer);
     xml = xml + '</jns0:forceanswer>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RoutingContex.prototype.serialize = AST_RoutingContex_serialize;

function AST_RoutingContex_deserialize (cxfjsutils, element) {
    var newobject = new AST_RoutingContex();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fromchannel');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setFromchannel(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing tochannel');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'tochannel')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setTochannel(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing timeout');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setTimeout(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing maxpasswddigits');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setMaxpasswddigits(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing calleedialpattern');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'calleedialpattern')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setCalleedialpattern(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing callerdialpattern');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'callerdialpattern')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setCallerdialpattern(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing order');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setOrder(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing disasw');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setDisasw(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing seconddialsw');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSeconddialsw(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing dialingdelay');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseFloat(value);
    }
    newobject.setDialingdelay(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing timepattern');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'timepattern')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setTimepattern(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing forwardnumber');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setForwardnumber(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing forceanswer');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setForceanswer(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AnaGetOne
//
function AST_AnaGetOne () {
    this.typeMarker = 'AST_AnaGetOne';
    this._combuf = null;
    this._fxo = null;
    this._fxs = null;
    this._section = null;
    this._sip = null;
    this._routing = null;
    this._limit = null;
    this._speeddial = null;
}

//
// accessor is AST_AnaGetOne.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_AnaGetOne.prototype.setCombuf
//
function AST_AnaGetOne_getCombuf() { return this._combuf;}

AST_AnaGetOne.prototype.getCombuf = AST_AnaGetOne_getCombuf;

function AST_AnaGetOne_setCombuf(value) { this._combuf = value;}

AST_AnaGetOne.prototype.setCombuf = AST_AnaGetOne_setCombuf;
//
// accessor is AST_AnaGetOne.prototype.getFxo
// element get for fxo
// - element type is {urn:ast}AnaContextFxoks
// - optional element
//
// element set for fxo
// setter function is is AST_AnaGetOne.prototype.setFxo
//
function AST_AnaGetOne_getFxo() { return this._fxo;}

AST_AnaGetOne.prototype.getFxo = AST_AnaGetOne_getFxo;

function AST_AnaGetOne_setFxo(value) { this._fxo = value;}

AST_AnaGetOne.prototype.setFxo = AST_AnaGetOne_setFxo;
//
// accessor is AST_AnaGetOne.prototype.getFxs
// element get for fxs
// - element type is {urn:ast}AnaContextFxsks
// - optional element
//
// element set for fxs
// setter function is is AST_AnaGetOne.prototype.setFxs
//
function AST_AnaGetOne_getFxs() { return this._fxs;}

AST_AnaGetOne.prototype.getFxs = AST_AnaGetOne_getFxs;

function AST_AnaGetOne_setFxs(value) { this._fxs = value;}

AST_AnaGetOne.prototype.setFxs = AST_AnaGetOne_setFxs;
//
// accessor is AST_AnaGetOne.prototype.getSection
// element get for section
// - element type is {urn:ast}SipAnaArr
// - required element
//
// element set for section
// setter function is is AST_AnaGetOne.prototype.setSection
//
function AST_AnaGetOne_getSection() { return this._section;}

AST_AnaGetOne.prototype.getSection = AST_AnaGetOne_getSection;

function AST_AnaGetOne_setSection(value) { this._section = value;}

AST_AnaGetOne.prototype.setSection = AST_AnaGetOne_setSection;
//
// accessor is AST_AnaGetOne.prototype.getSip
// element get for sip
// - element type is {urn:ast}SipGetArr
// - required element
//
// element set for sip
// setter function is is AST_AnaGetOne.prototype.setSip
//
function AST_AnaGetOne_getSip() { return this._sip;}

AST_AnaGetOne.prototype.getSip = AST_AnaGetOne_getSip;

function AST_AnaGetOne_setSip(value) { this._sip = value;}

AST_AnaGetOne.prototype.setSip = AST_AnaGetOne_setSip;
//
// accessor is AST_AnaGetOne.prototype.getRouting
// element get for routing
// - element type is {urn:ast}RoutingGetArr
// - required element
//
// element set for routing
// setter function is is AST_AnaGetOne.prototype.setRouting
//
function AST_AnaGetOne_getRouting() { return this._routing;}

AST_AnaGetOne.prototype.getRouting = AST_AnaGetOne_getRouting;

function AST_AnaGetOne_setRouting(value) { this._routing = value;}

AST_AnaGetOne.prototype.setRouting = AST_AnaGetOne_setRouting;
//
// accessor is AST_AnaGetOne.prototype.getLimit
// element get for limit
// - element type is {urn:ast}UcpAlgCalllimit
// - required element
//
// element set for limit
// setter function is is AST_AnaGetOne.prototype.setLimit
//
function AST_AnaGetOne_getLimit() { return this._limit;}

AST_AnaGetOne.prototype.getLimit = AST_AnaGetOne_getLimit;

function AST_AnaGetOne_setLimit(value) { this._limit = value;}

AST_AnaGetOne.prototype.setLimit = AST_AnaGetOne_setLimit;
//
// accessor is AST_AnaGetOne.prototype.getSpeeddial
// element get for speeddial
// - element type is {urn:ast}FxsSpeeddialArr
// - required element
//
// element set for speeddial
// setter function is is AST_AnaGetOne.prototype.setSpeeddial
//
function AST_AnaGetOne_getSpeeddial() { return this._speeddial;}

AST_AnaGetOne.prototype.getSpeeddial = AST_AnaGetOne_getSpeeddial;

function AST_AnaGetOne_setSpeeddial(value) { this._speeddial = value;}

AST_AnaGetOne.prototype.setSpeeddial = AST_AnaGetOne_setSpeeddial;
//
// Serialize {urn:ast}AnaGetOne
//
function AST_AnaGetOne_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     if (this._fxo != null) {
      xml = xml + this._fxo.serialize(cxfjsutils, 'jns0:fxo', null);
     }
    }
    // block for local variables
    {
     if (this._fxs != null) {
      xml = xml + this._fxs.serialize(cxfjsutils, 'jns0:fxs', null);
     }
    }
    // block for local variables
    {
     xml = xml + this._section.serialize(cxfjsutils, 'jns0:section', null);
    }
    // block for local variables
    {
     xml = xml + this._sip.serialize(cxfjsutils, 'jns0:sip', null);
    }
    // block for local variables
    {
     xml = xml + this._routing.serialize(cxfjsutils, 'jns0:routing', null);
    }
    // block for local variables
    {
     xml = xml + this._limit.serialize(cxfjsutils, 'jns0:limit', null);
    }
    // block for local variables
    {
     xml = xml + this._speeddial.serialize(cxfjsutils, 'jns0:speeddial', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AnaGetOne.prototype.serialize = AST_AnaGetOne_serialize;

function AST_AnaGetOne_deserialize (cxfjsutils, element) {
    var newobject = new AST_AnaGetOne();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fxo');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'fxo')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AnaContextFxoks_deserialize(cxfjsutils, curElement);
     }
     newobject.setFxo(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('processing fxs');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'fxs')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AnaContextFxsks_deserialize(cxfjsutils, curElement);
     }
     newobject.setFxs(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing section');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SipAnaArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setSection(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sip');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SipGetArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setSip(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing routing');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_RoutingGetArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setRouting(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing limit');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_UcpAlgCalllimit_deserialize(cxfjsutils, curElement);
    }
    newobject.setLimit(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing speeddial');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_FxsSpeeddialArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setSpeeddial(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AlgBusyTone
//
function AST_AlgBusyTone () {
    this.typeMarker = 'AST_AlgBusyTone';
    this._fxomonenable = '';
    this._busypattern = null;
}

//
// accessor is AST_AlgBusyTone.prototype.getFxomonenable
// element get for fxomonenable
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for fxomonenable
// setter function is is AST_AlgBusyTone.prototype.setFxomonenable
//
function AST_AlgBusyTone_getFxomonenable() { return this._fxomonenable;}

AST_AlgBusyTone.prototype.getFxomonenable = AST_AlgBusyTone_getFxomonenable;

function AST_AlgBusyTone_setFxomonenable(value) { this._fxomonenable = value;}

AST_AlgBusyTone.prototype.setFxomonenable = AST_AlgBusyTone_setFxomonenable;
//
// accessor is AST_AlgBusyTone.prototype.getBusypattern
// element get for busypattern
// - element type is {urn:ast}LineArr
// - required element
//
// element set for busypattern
// setter function is is AST_AlgBusyTone.prototype.setBusypattern
//
function AST_AlgBusyTone_getBusypattern() { return this._busypattern;}

AST_AlgBusyTone.prototype.getBusypattern = AST_AlgBusyTone_getBusypattern;

function AST_AlgBusyTone_setBusypattern(value) { this._busypattern = value;}

AST_AlgBusyTone.prototype.setBusypattern = AST_AlgBusyTone_setBusypattern;
//
// Serialize {urn:ast}AlgBusyTone
//
function AST_AlgBusyTone_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:fxomonenable>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._fxomonenable);
     xml = xml + '</jns0:fxomonenable>';
    }
    // block for local variables
    {
     xml = xml + this._busypattern.serialize(cxfjsutils, 'jns0:busypattern', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AlgBusyTone.prototype.serialize = AST_AlgBusyTone_serialize;

function AST_AlgBusyTone_deserialize (cxfjsutils, element) {
    var newobject = new AST_AlgBusyTone();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fxomonenable');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setFxomonenable(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing busypattern');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_LineArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setBusypattern(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}FxsGroupDialGetAll
//
function AST_FxsGroupDialGetAll () {
    this.typeMarker = 'AST_FxsGroupDialGetAll';
    this._combuf = null;
    this._group = null;
}

//
// accessor is AST_FxsGroupDialGetAll.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_FxsGroupDialGetAll.prototype.setCombuf
//
function AST_FxsGroupDialGetAll_getCombuf() { return this._combuf;}

AST_FxsGroupDialGetAll.prototype.getCombuf = AST_FxsGroupDialGetAll_getCombuf;

function AST_FxsGroupDialGetAll_setCombuf(value) { this._combuf = value;}

AST_FxsGroupDialGetAll.prototype.setCombuf = AST_FxsGroupDialGetAll_setCombuf;
//
// accessor is AST_FxsGroupDialGetAll.prototype.getGroup
// element get for group
// - element type is {urn:ast}FxsGroupDialArr
// - required element
//
// element set for group
// setter function is is AST_FxsGroupDialGetAll.prototype.setGroup
//
function AST_FxsGroupDialGetAll_getGroup() { return this._group;}

AST_FxsGroupDialGetAll.prototype.getGroup = AST_FxsGroupDialGetAll_getGroup;

function AST_FxsGroupDialGetAll_setGroup(value) { this._group = value;}

AST_FxsGroupDialGetAll.prototype.setGroup = AST_FxsGroupDialGetAll_setGroup;
//
// Serialize {urn:ast}FxsGroupDialGetAll
//
function AST_FxsGroupDialGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._group.serialize(cxfjsutils, 'jns0:group', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_FxsGroupDialGetAll.prototype.serialize = AST_FxsGroupDialGetAll_serialize;

function AST_FxsGroupDialGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_FxsGroupDialGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing group');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_FxsGroupDialArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setGroup(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}NetworkinfoArr
//
function AST_NetworkinfoArr () {
    this.typeMarker = 'AST_NetworkinfoArr';
    this._item = [];
}

//
// accessor is AST_NetworkinfoArr.prototype.getItem
// element get for item
// - element type is {urn:ast}Networkinfo
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_NetworkinfoArr.prototype.setItem
//
function AST_NetworkinfoArr_getItem() { return this._item;}

AST_NetworkinfoArr.prototype.getItem = AST_NetworkinfoArr_getItem;

function AST_NetworkinfoArr_setItem(value) { this._item = value;}

AST_NetworkinfoArr.prototype.setItem = AST_NetworkinfoArr_setItem;
//
// Serialize {urn:ast}NetworkinfoArr
//
function AST_NetworkinfoArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_NetworkinfoArr.prototype.serialize = AST_NetworkinfoArr_serialize;

function AST_NetworkinfoArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_NetworkinfoArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_Networkinfo_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AlgGlobal
//
function AST_AlgGlobal () {
    this.typeMarker = 'AST_AlgGlobal';
    this._toneduration = null;
    this._dialtimeout = 0;
    this._codec = '';
    this._echocancel = '';
    this._vadcng = '';
    this._flashwink = '';
    this._rxminflash = 0;
    this._rxflash = 0;
    this._enddialkey = '';
    this._checksipbinded = '';
    this._sendcalleridafter = '';
    this._sendpolarityrev = '';
    this._sendcalleridaftertime = 0;
    this._startcode = null;
    this._stopcode = null;
    this._busycount = 0;
    this._busycountry = null;
    this._silencethreshold = null;
    this._maxsilence = null;
    this._rxthreshold = null;
    this._txthreshold = null;
    this._fxodelay = 0;
    this._fxointerval = 0;
    this._busydetect = '';
    this._silencedetect = '';
    this._ciddisplay = '';
}

//
// accessor is AST_AlgGlobal.prototype.getToneduration
// element get for toneduration
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for toneduration
// setter function is is AST_AlgGlobal.prototype.setToneduration
//
function AST_AlgGlobal_getToneduration() { return this._toneduration;}

AST_AlgGlobal.prototype.getToneduration = AST_AlgGlobal_getToneduration;

function AST_AlgGlobal_setToneduration(value) { this._toneduration = value;}

AST_AlgGlobal.prototype.setToneduration = AST_AlgGlobal_setToneduration;
//
// accessor is AST_AlgGlobal.prototype.getDialtimeout
// element get for dialtimeout
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for dialtimeout
// setter function is is AST_AlgGlobal.prototype.setDialtimeout
//
function AST_AlgGlobal_getDialtimeout() { return this._dialtimeout;}

AST_AlgGlobal.prototype.getDialtimeout = AST_AlgGlobal_getDialtimeout;

function AST_AlgGlobal_setDialtimeout(value) { this._dialtimeout = value;}

AST_AlgGlobal.prototype.setDialtimeout = AST_AlgGlobal_setDialtimeout;
//
// accessor is AST_AlgGlobal.prototype.getCodec
// element get for codec
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for codec
// setter function is is AST_AlgGlobal.prototype.setCodec
//
function AST_AlgGlobal_getCodec() { return this._codec;}

AST_AlgGlobal.prototype.getCodec = AST_AlgGlobal_getCodec;

function AST_AlgGlobal_setCodec(value) { this._codec = value;}

AST_AlgGlobal.prototype.setCodec = AST_AlgGlobal_setCodec;
//
// accessor is AST_AlgGlobal.prototype.getEchocancel
// element get for echocancel
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for echocancel
// setter function is is AST_AlgGlobal.prototype.setEchocancel
//
function AST_AlgGlobal_getEchocancel() { return this._echocancel;}

AST_AlgGlobal.prototype.getEchocancel = AST_AlgGlobal_getEchocancel;

function AST_AlgGlobal_setEchocancel(value) { this._echocancel = value;}

AST_AlgGlobal.prototype.setEchocancel = AST_AlgGlobal_setEchocancel;
//
// accessor is AST_AlgGlobal.prototype.getVadcng
// element get for vadcng
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for vadcng
// setter function is is AST_AlgGlobal.prototype.setVadcng
//
function AST_AlgGlobal_getVadcng() { return this._vadcng;}

AST_AlgGlobal.prototype.getVadcng = AST_AlgGlobal_getVadcng;

function AST_AlgGlobal_setVadcng(value) { this._vadcng = value;}

AST_AlgGlobal.prototype.setVadcng = AST_AlgGlobal_setVadcng;
//
// accessor is AST_AlgGlobal.prototype.getFlashwink
// element get for flashwink
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for flashwink
// setter function is is AST_AlgGlobal.prototype.setFlashwink
//
function AST_AlgGlobal_getFlashwink() { return this._flashwink;}

AST_AlgGlobal.prototype.getFlashwink = AST_AlgGlobal_getFlashwink;

function AST_AlgGlobal_setFlashwink(value) { this._flashwink = value;}

AST_AlgGlobal.prototype.setFlashwink = AST_AlgGlobal_setFlashwink;
//
// accessor is AST_AlgGlobal.prototype.getRxminflash
// element get for rxminflash
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for rxminflash
// setter function is is AST_AlgGlobal.prototype.setRxminflash
//
function AST_AlgGlobal_getRxminflash() { return this._rxminflash;}

AST_AlgGlobal.prototype.getRxminflash = AST_AlgGlobal_getRxminflash;

function AST_AlgGlobal_setRxminflash(value) { this._rxminflash = value;}

AST_AlgGlobal.prototype.setRxminflash = AST_AlgGlobal_setRxminflash;
//
// accessor is AST_AlgGlobal.prototype.getRxflash
// element get for rxflash
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for rxflash
// setter function is is AST_AlgGlobal.prototype.setRxflash
//
function AST_AlgGlobal_getRxflash() { return this._rxflash;}

AST_AlgGlobal.prototype.getRxflash = AST_AlgGlobal_getRxflash;

function AST_AlgGlobal_setRxflash(value) { this._rxflash = value;}

AST_AlgGlobal.prototype.setRxflash = AST_AlgGlobal_setRxflash;
//
// accessor is AST_AlgGlobal.prototype.getEnddialkey
// element get for enddialkey
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for enddialkey
// setter function is is AST_AlgGlobal.prototype.setEnddialkey
//
function AST_AlgGlobal_getEnddialkey() { return this._enddialkey;}

AST_AlgGlobal.prototype.getEnddialkey = AST_AlgGlobal_getEnddialkey;

function AST_AlgGlobal_setEnddialkey(value) { this._enddialkey = value;}

AST_AlgGlobal.prototype.setEnddialkey = AST_AlgGlobal_setEnddialkey;
//
// accessor is AST_AlgGlobal.prototype.getChecksipbinded
// element get for checksipbinded
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for checksipbinded
// setter function is is AST_AlgGlobal.prototype.setChecksipbinded
//
function AST_AlgGlobal_getChecksipbinded() { return this._checksipbinded;}

AST_AlgGlobal.prototype.getChecksipbinded = AST_AlgGlobal_getChecksipbinded;

function AST_AlgGlobal_setChecksipbinded(value) { this._checksipbinded = value;}

AST_AlgGlobal.prototype.setChecksipbinded = AST_AlgGlobal_setChecksipbinded;
//
// accessor is AST_AlgGlobal.prototype.getSendcalleridafter
// element get for sendcalleridafter
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for sendcalleridafter
// setter function is is AST_AlgGlobal.prototype.setSendcalleridafter
//
function AST_AlgGlobal_getSendcalleridafter() { return this._sendcalleridafter;}

AST_AlgGlobal.prototype.getSendcalleridafter = AST_AlgGlobal_getSendcalleridafter;

function AST_AlgGlobal_setSendcalleridafter(value) { this._sendcalleridafter = value;}

AST_AlgGlobal.prototype.setSendcalleridafter = AST_AlgGlobal_setSendcalleridafter;
//
// accessor is AST_AlgGlobal.prototype.getSendpolarityrev
// element get for sendpolarityrev
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for sendpolarityrev
// setter function is is AST_AlgGlobal.prototype.setSendpolarityrev
//
function AST_AlgGlobal_getSendpolarityrev() { return this._sendpolarityrev;}

AST_AlgGlobal.prototype.getSendpolarityrev = AST_AlgGlobal_getSendpolarityrev;

function AST_AlgGlobal_setSendpolarityrev(value) { this._sendpolarityrev = value;}

AST_AlgGlobal.prototype.setSendpolarityrev = AST_AlgGlobal_setSendpolarityrev;
//
// accessor is AST_AlgGlobal.prototype.getSendcalleridaftertime
// element get for sendcalleridaftertime
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for sendcalleridaftertime
// setter function is is AST_AlgGlobal.prototype.setSendcalleridaftertime
//
function AST_AlgGlobal_getSendcalleridaftertime() { return this._sendcalleridaftertime;}

AST_AlgGlobal.prototype.getSendcalleridaftertime = AST_AlgGlobal_getSendcalleridaftertime;

function AST_AlgGlobal_setSendcalleridaftertime(value) { this._sendcalleridaftertime = value;}

AST_AlgGlobal.prototype.setSendcalleridaftertime = AST_AlgGlobal_setSendcalleridaftertime;
//
// accessor is AST_AlgGlobal.prototype.getStartcode
// element get for startcode
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for startcode
// setter function is is AST_AlgGlobal.prototype.setStartcode
//
function AST_AlgGlobal_getStartcode() { return this._startcode;}

AST_AlgGlobal.prototype.getStartcode = AST_AlgGlobal_getStartcode;

function AST_AlgGlobal_setStartcode(value) { this._startcode = value;}

AST_AlgGlobal.prototype.setStartcode = AST_AlgGlobal_setStartcode;
//
// accessor is AST_AlgGlobal.prototype.getStopcode
// element get for stopcode
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for stopcode
// setter function is is AST_AlgGlobal.prototype.setStopcode
//
function AST_AlgGlobal_getStopcode() { return this._stopcode;}

AST_AlgGlobal.prototype.getStopcode = AST_AlgGlobal_getStopcode;

function AST_AlgGlobal_setStopcode(value) { this._stopcode = value;}

AST_AlgGlobal.prototype.setStopcode = AST_AlgGlobal_setStopcode;
//
// accessor is AST_AlgGlobal.prototype.getBusycount
// element get for busycount
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for busycount
// setter function is is AST_AlgGlobal.prototype.setBusycount
//
function AST_AlgGlobal_getBusycount() { return this._busycount;}

AST_AlgGlobal.prototype.getBusycount = AST_AlgGlobal_getBusycount;

function AST_AlgGlobal_setBusycount(value) { this._busycount = value;}

AST_AlgGlobal.prototype.setBusycount = AST_AlgGlobal_setBusycount;
//
// accessor is AST_AlgGlobal.prototype.getBusycountry
// element get for busycountry
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for busycountry
// setter function is is AST_AlgGlobal.prototype.setBusycountry
//
function AST_AlgGlobal_getBusycountry() { return this._busycountry;}

AST_AlgGlobal.prototype.getBusycountry = AST_AlgGlobal_getBusycountry;

function AST_AlgGlobal_setBusycountry(value) { this._busycountry = value;}

AST_AlgGlobal.prototype.setBusycountry = AST_AlgGlobal_setBusycountry;
//
// accessor is AST_AlgGlobal.prototype.getSilencethreshold
// element get for silencethreshold
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for silencethreshold
// setter function is is AST_AlgGlobal.prototype.setSilencethreshold
//
function AST_AlgGlobal_getSilencethreshold() { return this._silencethreshold;}

AST_AlgGlobal.prototype.getSilencethreshold = AST_AlgGlobal_getSilencethreshold;

function AST_AlgGlobal_setSilencethreshold(value) { this._silencethreshold = value;}

AST_AlgGlobal.prototype.setSilencethreshold = AST_AlgGlobal_setSilencethreshold;
//
// accessor is AST_AlgGlobal.prototype.getMaxsilence
// element get for maxsilence
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for maxsilence
// setter function is is AST_AlgGlobal.prototype.setMaxsilence
//
function AST_AlgGlobal_getMaxsilence() { return this._maxsilence;}

AST_AlgGlobal.prototype.getMaxsilence = AST_AlgGlobal_getMaxsilence;

function AST_AlgGlobal_setMaxsilence(value) { this._maxsilence = value;}

AST_AlgGlobal.prototype.setMaxsilence = AST_AlgGlobal_setMaxsilence;
//
// accessor is AST_AlgGlobal.prototype.getRxthreshold
// element get for rxthreshold
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for rxthreshold
// setter function is is AST_AlgGlobal.prototype.setRxthreshold
//
function AST_AlgGlobal_getRxthreshold() { return this._rxthreshold;}

AST_AlgGlobal.prototype.getRxthreshold = AST_AlgGlobal_getRxthreshold;

function AST_AlgGlobal_setRxthreshold(value) { this._rxthreshold = value;}

AST_AlgGlobal.prototype.setRxthreshold = AST_AlgGlobal_setRxthreshold;
//
// accessor is AST_AlgGlobal.prototype.getTxthreshold
// element get for txthreshold
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for txthreshold
// setter function is is AST_AlgGlobal.prototype.setTxthreshold
//
function AST_AlgGlobal_getTxthreshold() { return this._txthreshold;}

AST_AlgGlobal.prototype.getTxthreshold = AST_AlgGlobal_getTxthreshold;

function AST_AlgGlobal_setTxthreshold(value) { this._txthreshold = value;}

AST_AlgGlobal.prototype.setTxthreshold = AST_AlgGlobal_setTxthreshold;
//
// accessor is AST_AlgGlobal.prototype.getFxodelay
// element get for fxodelay
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for fxodelay
// setter function is is AST_AlgGlobal.prototype.setFxodelay
//
function AST_AlgGlobal_getFxodelay() { return this._fxodelay;}

AST_AlgGlobal.prototype.getFxodelay = AST_AlgGlobal_getFxodelay;

function AST_AlgGlobal_setFxodelay(value) { this._fxodelay = value;}

AST_AlgGlobal.prototype.setFxodelay = AST_AlgGlobal_setFxodelay;
//
// accessor is AST_AlgGlobal.prototype.getFxointerval
// element get for fxointerval
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for fxointerval
// setter function is is AST_AlgGlobal.prototype.setFxointerval
//
function AST_AlgGlobal_getFxointerval() { return this._fxointerval;}

AST_AlgGlobal.prototype.getFxointerval = AST_AlgGlobal_getFxointerval;

function AST_AlgGlobal_setFxointerval(value) { this._fxointerval = value;}

AST_AlgGlobal.prototype.setFxointerval = AST_AlgGlobal_setFxointerval;
//
// accessor is AST_AlgGlobal.prototype.getBusydetect
// element get for busydetect
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for busydetect
// setter function is is AST_AlgGlobal.prototype.setBusydetect
//
function AST_AlgGlobal_getBusydetect() { return this._busydetect;}

AST_AlgGlobal.prototype.getBusydetect = AST_AlgGlobal_getBusydetect;

function AST_AlgGlobal_setBusydetect(value) { this._busydetect = value;}

AST_AlgGlobal.prototype.setBusydetect = AST_AlgGlobal_setBusydetect;
//
// accessor is AST_AlgGlobal.prototype.getSilencedetect
// element get for silencedetect
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for silencedetect
// setter function is is AST_AlgGlobal.prototype.setSilencedetect
//
function AST_AlgGlobal_getSilencedetect() { return this._silencedetect;}

AST_AlgGlobal.prototype.getSilencedetect = AST_AlgGlobal_getSilencedetect;

function AST_AlgGlobal_setSilencedetect(value) { this._silencedetect = value;}

AST_AlgGlobal.prototype.setSilencedetect = AST_AlgGlobal_setSilencedetect;
//
// accessor is AST_AlgGlobal.prototype.getCiddisplay
// element get for ciddisplay
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for ciddisplay
// setter function is is AST_AlgGlobal.prototype.setCiddisplay
//
function AST_AlgGlobal_getCiddisplay() { return this._ciddisplay;}

AST_AlgGlobal.prototype.getCiddisplay = AST_AlgGlobal_getCiddisplay;

function AST_AlgGlobal_setCiddisplay(value) { this._ciddisplay = value;}

AST_AlgGlobal.prototype.setCiddisplay = AST_AlgGlobal_setCiddisplay;
//
// Serialize {urn:ast}AlgGlobal
//
function AST_AlgGlobal_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._toneduration == null) {
      xml = xml + '<jns0:toneduration xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:toneduration>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._toneduration);
      xml = xml + '</jns0:toneduration>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:dialtimeout>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._dialtimeout);
     xml = xml + '</jns0:dialtimeout>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:codec>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._codec);
     xml = xml + '</jns0:codec>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:echocancel>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._echocancel);
     xml = xml + '</jns0:echocancel>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:vadcng>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._vadcng);
     xml = xml + '</jns0:vadcng>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:flashwink>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._flashwink);
     xml = xml + '</jns0:flashwink>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:rxminflash>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._rxminflash);
     xml = xml + '</jns0:rxminflash>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:rxflash>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._rxflash);
     xml = xml + '</jns0:rxflash>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:enddialkey>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._enddialkey);
     xml = xml + '</jns0:enddialkey>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:checksipbinded>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._checksipbinded);
     xml = xml + '</jns0:checksipbinded>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:sendcalleridafter>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._sendcalleridafter);
     xml = xml + '</jns0:sendcalleridafter>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:sendpolarityrev>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._sendpolarityrev);
     xml = xml + '</jns0:sendpolarityrev>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:sendcalleridaftertime>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._sendcalleridaftertime);
     xml = xml + '</jns0:sendcalleridaftertime>';
    }
    // block for local variables
    {
     if (this._startcode == null) {
      xml = xml + '<jns0:startcode xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:startcode>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._startcode);
      xml = xml + '</jns0:startcode>';
     }
    }
    // block for local variables
    {
     if (this._stopcode == null) {
      xml = xml + '<jns0:stopcode xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:stopcode>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._stopcode);
      xml = xml + '</jns0:stopcode>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:busycount>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._busycount);
     xml = xml + '</jns0:busycount>';
    }
    // block for local variables
    {
     if (this._busycountry == null) {
      xml = xml + '<jns0:busycountry xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:busycountry>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._busycountry);
      xml = xml + '</jns0:busycountry>';
     }
    }
    // block for local variables
    {
     if (this._silencethreshold == null) {
      xml = xml + '<jns0:silencethreshold xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:silencethreshold>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._silencethreshold);
      xml = xml + '</jns0:silencethreshold>';
     }
    }
    // block for local variables
    {
     if (this._maxsilence == null) {
      xml = xml + '<jns0:maxsilence xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:maxsilence>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._maxsilence);
      xml = xml + '</jns0:maxsilence>';
     }
    }
    // block for local variables
    {
     if (this._rxthreshold == null) {
      xml = xml + '<jns0:rxthreshold xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:rxthreshold>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._rxthreshold);
      xml = xml + '</jns0:rxthreshold>';
     }
    }
    // block for local variables
    {
     if (this._txthreshold == null) {
      xml = xml + '<jns0:txthreshold xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:txthreshold>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._txthreshold);
      xml = xml + '</jns0:txthreshold>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:fxodelay>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._fxodelay);
     xml = xml + '</jns0:fxodelay>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:fxointerval>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._fxointerval);
     xml = xml + '</jns0:fxointerval>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:busydetect>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._busydetect);
     xml = xml + '</jns0:busydetect>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:silencedetect>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._silencedetect);
     xml = xml + '</jns0:silencedetect>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:ciddisplay>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._ciddisplay);
     xml = xml + '</jns0:ciddisplay>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AlgGlobal.prototype.serialize = AST_AlgGlobal_serialize;

function AST_AlgGlobal_deserialize (cxfjsutils, element) {
    var newobject = new AST_AlgGlobal();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing toneduration');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setToneduration(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing dialtimeout');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setDialtimeout(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing codec');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setCodec(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing echocancel');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setEchocancel(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing vadcng');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setVadcng(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing flashwink');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setFlashwink(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing rxminflash');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setRxminflash(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing rxflash');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setRxflash(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing enddialkey');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setEnddialkey(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing checksipbinded');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setChecksipbinded(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sendcalleridafter');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSendcalleridafter(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sendpolarityrev');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSendpolarityrev(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sendcalleridaftertime');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setSendcalleridaftertime(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing startcode');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setStartcode(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing stopcode');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setStopcode(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing busycount');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setBusycount(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing busycountry');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setBusycountry(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing silencethreshold');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSilencethreshold(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing maxsilence');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setMaxsilence(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing rxthreshold');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setRxthreshold(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing txthreshold');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setTxthreshold(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fxodelay');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setFxodelay(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fxointerval');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setFxointerval(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing busydetect');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setBusydetect(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing silencedetect');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSilencedetect(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ciddisplay');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setCiddisplay(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}UcpNetworkRulesArr
//
function AST_UcpNetworkRulesArr () {
    this.typeMarker = 'AST_UcpNetworkRulesArr';
    this._item = [];
}

//
// accessor is AST_UcpNetworkRulesArr.prototype.getItem
// element get for item
// - element type is {urn:ast}UcpNetworkRules
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_UcpNetworkRulesArr.prototype.setItem
//
function AST_UcpNetworkRulesArr_getItem() { return this._item;}

AST_UcpNetworkRulesArr.prototype.getItem = AST_UcpNetworkRulesArr_getItem;

function AST_UcpNetworkRulesArr_setItem(value) { this._item = value;}

AST_UcpNetworkRulesArr.prototype.setItem = AST_UcpNetworkRulesArr_setItem;
//
// Serialize {urn:ast}UcpNetworkRulesArr
//
function AST_UcpNetworkRulesArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_UcpNetworkRulesArr.prototype.serialize = AST_UcpNetworkRulesArr_serialize;

function AST_UcpNetworkRulesArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_UcpNetworkRulesArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_UcpNetworkRules_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}ProvFxsSpeedDailArr
//
function AST_ProvFxsSpeedDailArr () {
    this.typeMarker = 'AST_ProvFxsSpeedDailArr';
    this._item = [];
}

//
// accessor is AST_ProvFxsSpeedDailArr.prototype.getItem
// element get for item
// - element type is {urn:ast}ProvFxsSpeedDial
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_ProvFxsSpeedDailArr.prototype.setItem
//
function AST_ProvFxsSpeedDailArr_getItem() { return this._item;}

AST_ProvFxsSpeedDailArr.prototype.getItem = AST_ProvFxsSpeedDailArr_getItem;

function AST_ProvFxsSpeedDailArr_setItem(value) { this._item = value;}

AST_ProvFxsSpeedDailArr.prototype.setItem = AST_ProvFxsSpeedDailArr_setItem;
//
// Serialize {urn:ast}ProvFxsSpeedDailArr
//
function AST_ProvFxsSpeedDailArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_ProvFxsSpeedDailArr.prototype.serialize = AST_ProvFxsSpeedDailArr_serialize;

function AST_ProvFxsSpeedDailArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_ProvFxsSpeedDailArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_ProvFxsSpeedDial_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}Networkinfo
//
function AST_Networkinfo () {
    this.typeMarker = 'AST_Networkinfo';
    this._mac = null;
    this._ip = null;
    this._ptpip = null;
    this._mask = null;
    this._gateway = null;
    this._rx = null;
    this._tx = null;
}

//
// accessor is AST_Networkinfo.prototype.getMac
// element get for mac
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for mac
// setter function is is AST_Networkinfo.prototype.setMac
//
function AST_Networkinfo_getMac() { return this._mac;}

AST_Networkinfo.prototype.getMac = AST_Networkinfo_getMac;

function AST_Networkinfo_setMac(value) { this._mac = value;}

AST_Networkinfo.prototype.setMac = AST_Networkinfo_setMac;
//
// accessor is AST_Networkinfo.prototype.getIp
// element get for ip
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for ip
// setter function is is AST_Networkinfo.prototype.setIp
//
function AST_Networkinfo_getIp() { return this._ip;}

AST_Networkinfo.prototype.getIp = AST_Networkinfo_getIp;

function AST_Networkinfo_setIp(value) { this._ip = value;}

AST_Networkinfo.prototype.setIp = AST_Networkinfo_setIp;
//
// accessor is AST_Networkinfo.prototype.getPtpip
// element get for ptpip
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for ptpip
// setter function is is AST_Networkinfo.prototype.setPtpip
//
function AST_Networkinfo_getPtpip() { return this._ptpip;}

AST_Networkinfo.prototype.getPtpip = AST_Networkinfo_getPtpip;

function AST_Networkinfo_setPtpip(value) { this._ptpip = value;}

AST_Networkinfo.prototype.setPtpip = AST_Networkinfo_setPtpip;
//
// accessor is AST_Networkinfo.prototype.getMask
// element get for mask
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for mask
// setter function is is AST_Networkinfo.prototype.setMask
//
function AST_Networkinfo_getMask() { return this._mask;}

AST_Networkinfo.prototype.getMask = AST_Networkinfo_getMask;

function AST_Networkinfo_setMask(value) { this._mask = value;}

AST_Networkinfo.prototype.setMask = AST_Networkinfo_setMask;
//
// accessor is AST_Networkinfo.prototype.getGateway
// element get for gateway
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for gateway
// setter function is is AST_Networkinfo.prototype.setGateway
//
function AST_Networkinfo_getGateway() { return this._gateway;}

AST_Networkinfo.prototype.getGateway = AST_Networkinfo_getGateway;

function AST_Networkinfo_setGateway(value) { this._gateway = value;}

AST_Networkinfo.prototype.setGateway = AST_Networkinfo_setGateway;
//
// accessor is AST_Networkinfo.prototype.getRx
// element get for rx
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for rx
// setter function is is AST_Networkinfo.prototype.setRx
//
function AST_Networkinfo_getRx() { return this._rx;}

AST_Networkinfo.prototype.getRx = AST_Networkinfo_getRx;

function AST_Networkinfo_setRx(value) { this._rx = value;}

AST_Networkinfo.prototype.setRx = AST_Networkinfo_setRx;
//
// accessor is AST_Networkinfo.prototype.getTx
// element get for tx
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for tx
// setter function is is AST_Networkinfo.prototype.setTx
//
function AST_Networkinfo_getTx() { return this._tx;}

AST_Networkinfo.prototype.getTx = AST_Networkinfo_getTx;

function AST_Networkinfo_setTx(value) { this._tx = value;}

AST_Networkinfo.prototype.setTx = AST_Networkinfo_setTx;
//
// Serialize {urn:ast}Networkinfo
//
function AST_Networkinfo_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._mac == null) {
      xml = xml + '<jns0:mac xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:mac>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._mac);
      xml = xml + '</jns0:mac>';
     }
    }
    // block for local variables
    {
     if (this._ip == null) {
      xml = xml + '<jns0:ip xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:ip>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._ip);
      xml = xml + '</jns0:ip>';
     }
    }
    // block for local variables
    {
     if (this._ptpip == null) {
      xml = xml + '<jns0:ptpip xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:ptpip>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._ptpip);
      xml = xml + '</jns0:ptpip>';
     }
    }
    // block for local variables
    {
     if (this._mask == null) {
      xml = xml + '<jns0:mask xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:mask>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._mask);
      xml = xml + '</jns0:mask>';
     }
    }
    // block for local variables
    {
     if (this._gateway == null) {
      xml = xml + '<jns0:gateway xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:gateway>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._gateway);
      xml = xml + '</jns0:gateway>';
     }
    }
    // block for local variables
    {
     if (this._rx == null) {
      xml = xml + '<jns0:rx xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:rx>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._rx);
      xml = xml + '</jns0:rx>';
     }
    }
    // block for local variables
    {
     if (this._tx == null) {
      xml = xml + '<jns0:tx xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:tx>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._tx);
      xml = xml + '</jns0:tx>';
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_Networkinfo.prototype.serialize = AST_Networkinfo_serialize;

function AST_Networkinfo_deserialize (cxfjsutils, element) {
    var newobject = new AST_Networkinfo();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing mac');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setMac(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ip');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setIp(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ptpip');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setPtpip(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing mask');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setMask(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing gateway');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setGateway(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing rx');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setRx(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing tx');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setTx(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AutoCallGet
//
function AST_AutoCallGet () {
    this.typeMarker = 'AST_AutoCallGet';
    this._sw = '';
    this._OriFileSta = '';
    this._timeout = 0;
    this._combuf = null;
    this._ana = null;
}

//
// accessor is AST_AutoCallGet.prototype.getSw
// element get for sw
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for sw
// setter function is is AST_AutoCallGet.prototype.setSw
//
function AST_AutoCallGet_getSw() { return this._sw;}

AST_AutoCallGet.prototype.getSw = AST_AutoCallGet_getSw;

function AST_AutoCallGet_setSw(value) { this._sw = value;}

AST_AutoCallGet.prototype.setSw = AST_AutoCallGet_setSw;
//
// accessor is AST_AutoCallGet.prototype.getOriFileSta
// element get for OriFileSta
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for OriFileSta
// setter function is is AST_AutoCallGet.prototype.setOriFileSta
//
function AST_AutoCallGet_getOriFileSta() { return this._OriFileSta;}

AST_AutoCallGet.prototype.getOriFileSta = AST_AutoCallGet_getOriFileSta;

function AST_AutoCallGet_setOriFileSta(value) { this._OriFileSta = value;}

AST_AutoCallGet.prototype.setOriFileSta = AST_AutoCallGet_setOriFileSta;
//
// accessor is AST_AutoCallGet.prototype.getTimeout
// element get for timeout
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for timeout
// setter function is is AST_AutoCallGet.prototype.setTimeout
//
function AST_AutoCallGet_getTimeout() { return this._timeout;}

AST_AutoCallGet.prototype.getTimeout = AST_AutoCallGet_getTimeout;

function AST_AutoCallGet_setTimeout(value) { this._timeout = value;}

AST_AutoCallGet.prototype.setTimeout = AST_AutoCallGet_setTimeout;
//
// accessor is AST_AutoCallGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_AutoCallGet.prototype.setCombuf
//
function AST_AutoCallGet_getCombuf() { return this._combuf;}

AST_AutoCallGet.prototype.getCombuf = AST_AutoCallGet_getCombuf;

function AST_AutoCallGet_setCombuf(value) { this._combuf = value;}

AST_AutoCallGet.prototype.setCombuf = AST_AutoCallGet_setCombuf;
//
// accessor is AST_AutoCallGet.prototype.getAna
// element get for ana
// - element type is {urn:ast}AutoCallChnArr
// - required element
//
// element set for ana
// setter function is is AST_AutoCallGet.prototype.setAna
//
function AST_AutoCallGet_getAna() { return this._ana;}

AST_AutoCallGet.prototype.getAna = AST_AutoCallGet_getAna;

function AST_AutoCallGet_setAna(value) { this._ana = value;}

AST_AutoCallGet.prototype.setAna = AST_AutoCallGet_setAna;
//
// Serialize {urn:ast}AutoCallGet
//
function AST_AutoCallGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:sw>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._sw);
     xml = xml + '</jns0:sw>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:OriFileSta>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._OriFileSta);
     xml = xml + '</jns0:OriFileSta>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:timeout>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._timeout);
     xml = xml + '</jns0:timeout>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._ana.serialize(cxfjsutils, 'jns0:ana', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AutoCallGet.prototype.serialize = AST_AutoCallGet_serialize;

function AST_AutoCallGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AutoCallGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sw');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSw(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing OriFileSta');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setOriFileSta(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing timeout');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setTimeout(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ana');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_AutoCallChnArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setAna(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SysTool
//
function AST_SysTool () {
    this.typeMarker = 'AST_SysTool';
    this._cfgversion = null;
    this._stacknum = 0;
    this._channels = null;
}

//
// accessor is AST_SysTool.prototype.getCfgversion
// element get for cfgversion
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for cfgversion
// setter function is is AST_SysTool.prototype.setCfgversion
//
function AST_SysTool_getCfgversion() { return this._cfgversion;}

AST_SysTool.prototype.getCfgversion = AST_SysTool_getCfgversion;

function AST_SysTool_setCfgversion(value) { this._cfgversion = value;}

AST_SysTool.prototype.setCfgversion = AST_SysTool_setCfgversion;
//
// accessor is AST_SysTool.prototype.getStacknum
// element get for stacknum
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for stacknum
// setter function is is AST_SysTool.prototype.setStacknum
//
function AST_SysTool_getStacknum() { return this._stacknum;}

AST_SysTool.prototype.getStacknum = AST_SysTool_getStacknum;

function AST_SysTool_setStacknum(value) { this._stacknum = value;}

AST_SysTool.prototype.setStacknum = AST_SysTool_setStacknum;
//
// accessor is AST_SysTool.prototype.getChannels
// element get for channels
// - element type is {urn:ast}RoutingAnaArr
// - required element
//
// element set for channels
// setter function is is AST_SysTool.prototype.setChannels
//
function AST_SysTool_getChannels() { return this._channels;}

AST_SysTool.prototype.getChannels = AST_SysTool_getChannels;

function AST_SysTool_setChannels(value) { this._channels = value;}

AST_SysTool.prototype.setChannels = AST_SysTool_setChannels;
//
// Serialize {urn:ast}SysTool
//
function AST_SysTool_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._cfgversion == null) {
      xml = xml + '<jns0:cfgversion xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:cfgversion>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._cfgversion);
      xml = xml + '</jns0:cfgversion>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:stacknum>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._stacknum);
     xml = xml + '</jns0:stacknum>';
    }
    // block for local variables
    {
     xml = xml + this._channels.serialize(cxfjsutils, 'jns0:channels', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SysTool.prototype.serialize = AST_SysTool_serialize;

function AST_SysTool_deserialize (cxfjsutils, element) {
    var newobject = new AST_SysTool();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing cfgversion');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setCfgversion(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing stacknum');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setStacknum(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing channels');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_RoutingAnaArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setChannels(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AlgPickup
//
function AST_AlgPickup () {
    this.typeMarker = 'AST_AlgPickup';
    this._timeout = 0;
    this._number = null;
    this._enable = '';
}

//
// accessor is AST_AlgPickup.prototype.getTimeout
// element get for timeout
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for timeout
// setter function is is AST_AlgPickup.prototype.setTimeout
//
function AST_AlgPickup_getTimeout() { return this._timeout;}

AST_AlgPickup.prototype.getTimeout = AST_AlgPickup_getTimeout;

function AST_AlgPickup_setTimeout(value) { this._timeout = value;}

AST_AlgPickup.prototype.setTimeout = AST_AlgPickup_setTimeout;
//
// accessor is AST_AlgPickup.prototype.getNumber
// element get for number
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for number
// setter function is is AST_AlgPickup.prototype.setNumber
//
function AST_AlgPickup_getNumber() { return this._number;}

AST_AlgPickup.prototype.getNumber = AST_AlgPickup_getNumber;

function AST_AlgPickup_setNumber(value) { this._number = value;}

AST_AlgPickup.prototype.setNumber = AST_AlgPickup_setNumber;
//
// accessor is AST_AlgPickup.prototype.getEnable
// element get for enable
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for enable
// setter function is is AST_AlgPickup.prototype.setEnable
//
function AST_AlgPickup_getEnable() { return this._enable;}

AST_AlgPickup.prototype.getEnable = AST_AlgPickup_getEnable;

function AST_AlgPickup_setEnable(value) { this._enable = value;}

AST_AlgPickup.prototype.setEnable = AST_AlgPickup_setEnable;
//
// Serialize {urn:ast}AlgPickup
//
function AST_AlgPickup_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:timeout>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._timeout);
     xml = xml + '</jns0:timeout>';
    }
    // block for local variables
    {
     if (this._number == null) {
      xml = xml + '<jns0:number xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:number>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._number);
      xml = xml + '</jns0:number>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:enable>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._enable);
     xml = xml + '</jns0:enable>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AlgPickup.prototype.serialize = AST_AlgPickup_serialize;

function AST_AlgPickup_deserialize (cxfjsutils, element) {
    var newobject = new AST_AlgPickup();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing timeout');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setTimeout(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing number');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setNumber(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing enable');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setEnable(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}UcpAlgDriverGet
//
function AST_UcpAlgDriverGet () {
    this.typeMarker = 'AST_UcpAlgDriverGet';
    this._combuf = null;
    this._param = null;
}

//
// accessor is AST_UcpAlgDriverGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_UcpAlgDriverGet.prototype.setCombuf
//
function AST_UcpAlgDriverGet_getCombuf() { return this._combuf;}

AST_UcpAlgDriverGet.prototype.getCombuf = AST_UcpAlgDriverGet_getCombuf;

function AST_UcpAlgDriverGet_setCombuf(value) { this._combuf = value;}

AST_UcpAlgDriverGet.prototype.setCombuf = AST_UcpAlgDriverGet_setCombuf;
//
// accessor is AST_UcpAlgDriverGet.prototype.getParam
// element get for param
// - element type is {urn:ast}UcpAlgDriverParam
// - required element
//
// element set for param
// setter function is is AST_UcpAlgDriverGet.prototype.setParam
//
function AST_UcpAlgDriverGet_getParam() { return this._param;}

AST_UcpAlgDriverGet.prototype.getParam = AST_UcpAlgDriverGet_getParam;

function AST_UcpAlgDriverGet_setParam(value) { this._param = value;}

AST_UcpAlgDriverGet.prototype.setParam = AST_UcpAlgDriverGet_setParam;
//
// Serialize {urn:ast}UcpAlgDriverGet
//
function AST_UcpAlgDriverGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._param.serialize(cxfjsutils, 'jns0:param', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_UcpAlgDriverGet.prototype.serialize = AST_UcpAlgDriverGet_serialize;

function AST_UcpAlgDriverGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_UcpAlgDriverGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing param');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_UcpAlgDriverParam_deserialize(cxfjsutils, curElement);
    }
    newobject.setParam(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SnmpView
//
function AST_SnmpView () {
    this.typeMarker = 'AST_SnmpView';
    this._name = null;
    this._mask = null;
    this._subtree = null;
    this._MibType = '';
}

//
// accessor is AST_SnmpView.prototype.getName
// element get for name
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for name
// setter function is is AST_SnmpView.prototype.setName
//
function AST_SnmpView_getName() { return this._name;}

AST_SnmpView.prototype.getName = AST_SnmpView_getName;

function AST_SnmpView_setName(value) { this._name = value;}

AST_SnmpView.prototype.setName = AST_SnmpView_setName;
//
// accessor is AST_SnmpView.prototype.getMask
// element get for mask
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for mask
// setter function is is AST_SnmpView.prototype.setMask
//
function AST_SnmpView_getMask() { return this._mask;}

AST_SnmpView.prototype.getMask = AST_SnmpView_getMask;

function AST_SnmpView_setMask(value) { this._mask = value;}

AST_SnmpView.prototype.setMask = AST_SnmpView_setMask;
//
// accessor is AST_SnmpView.prototype.getSubtree
// element get for subtree
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for subtree
// setter function is is AST_SnmpView.prototype.setSubtree
//
function AST_SnmpView_getSubtree() { return this._subtree;}

AST_SnmpView.prototype.getSubtree = AST_SnmpView_getSubtree;

function AST_SnmpView_setSubtree(value) { this._subtree = value;}

AST_SnmpView.prototype.setSubtree = AST_SnmpView_setSubtree;
//
// accessor is AST_SnmpView.prototype.getMibType
// element get for MibType
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for MibType
// setter function is is AST_SnmpView.prototype.setMibType
//
function AST_SnmpView_getMibType() { return this._MibType;}

AST_SnmpView.prototype.getMibType = AST_SnmpView_getMibType;

function AST_SnmpView_setMibType(value) { this._MibType = value;}

AST_SnmpView.prototype.setMibType = AST_SnmpView_setMibType;
//
// Serialize {urn:ast}SnmpView
//
function AST_SnmpView_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._name == null) {
      xml = xml + '<jns0:name xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:name>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._name);
      xml = xml + '</jns0:name>';
     }
    }
    // block for local variables
    {
     if (this._mask == null) {
      xml = xml + '<jns0:mask xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:mask>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._mask);
      xml = xml + '</jns0:mask>';
     }
    }
    // block for local variables
    {
     if (this._subtree == null) {
      xml = xml + '<jns0:subtree xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:subtree>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._subtree);
      xml = xml + '</jns0:subtree>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:MibType>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._MibType);
     xml = xml + '</jns0:MibType>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SnmpView.prototype.serialize = AST_SnmpView_serialize;

function AST_SnmpView_deserialize (cxfjsutils, element) {
    var newobject = new AST_SnmpView();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing name');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setName(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing mask');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setMask(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing subtree');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSubtree(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing MibType');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setMibType(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SnmpGeneral
//
function AST_SnmpGeneral () {
    this.typeMarker = 'AST_SnmpGeneral';
    this._sw = '';
    this._curver = 0;
    this._supportver = null;
    this._address = null;
    this._contact = null;
}

//
// accessor is AST_SnmpGeneral.prototype.getSw
// element get for sw
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for sw
// setter function is is AST_SnmpGeneral.prototype.setSw
//
function AST_SnmpGeneral_getSw() { return this._sw;}

AST_SnmpGeneral.prototype.getSw = AST_SnmpGeneral_getSw;

function AST_SnmpGeneral_setSw(value) { this._sw = value;}

AST_SnmpGeneral.prototype.setSw = AST_SnmpGeneral_setSw;
//
// accessor is AST_SnmpGeneral.prototype.getCurver
// element get for curver
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for curver
// setter function is is AST_SnmpGeneral.prototype.setCurver
//
function AST_SnmpGeneral_getCurver() { return this._curver;}

AST_SnmpGeneral.prototype.getCurver = AST_SnmpGeneral_getCurver;

function AST_SnmpGeneral_setCurver(value) { this._curver = value;}

AST_SnmpGeneral.prototype.setCurver = AST_SnmpGeneral_setCurver;
//
// accessor is AST_SnmpGeneral.prototype.getSupportver
// element get for supportver
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for supportver
// setter function is is AST_SnmpGeneral.prototype.setSupportver
//
function AST_SnmpGeneral_getSupportver() { return this._supportver;}

AST_SnmpGeneral.prototype.getSupportver = AST_SnmpGeneral_getSupportver;

function AST_SnmpGeneral_setSupportver(value) { this._supportver = value;}

AST_SnmpGeneral.prototype.setSupportver = AST_SnmpGeneral_setSupportver;
//
// accessor is AST_SnmpGeneral.prototype.getAddress
// element get for address
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for address
// setter function is is AST_SnmpGeneral.prototype.setAddress
//
function AST_SnmpGeneral_getAddress() { return this._address;}

AST_SnmpGeneral.prototype.getAddress = AST_SnmpGeneral_getAddress;

function AST_SnmpGeneral_setAddress(value) { this._address = value;}

AST_SnmpGeneral.prototype.setAddress = AST_SnmpGeneral_setAddress;
//
// accessor is AST_SnmpGeneral.prototype.getContact
// element get for contact
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for contact
// setter function is is AST_SnmpGeneral.prototype.setContact
//
function AST_SnmpGeneral_getContact() { return this._contact;}

AST_SnmpGeneral.prototype.getContact = AST_SnmpGeneral_getContact;

function AST_SnmpGeneral_setContact(value) { this._contact = value;}

AST_SnmpGeneral.prototype.setContact = AST_SnmpGeneral_setContact;
//
// Serialize {urn:ast}SnmpGeneral
//
function AST_SnmpGeneral_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:sw>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._sw);
     xml = xml + '</jns0:sw>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:curver>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._curver);
     xml = xml + '</jns0:curver>';
    }
    // block for local variables
    {
     if (this._supportver == null) {
      xml = xml + '<jns0:supportver xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:supportver>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._supportver);
      xml = xml + '</jns0:supportver>';
     }
    }
    // block for local variables
    {
     if (this._address == null) {
      xml = xml + '<jns0:address xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:address>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._address);
      xml = xml + '</jns0:address>';
     }
    }
    // block for local variables
    {
     if (this._contact == null) {
      xml = xml + '<jns0:contact xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:contact>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._contact);
      xml = xml + '</jns0:contact>';
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SnmpGeneral.prototype.serialize = AST_SnmpGeneral_serialize;

function AST_SnmpGeneral_deserialize (cxfjsutils, element) {
    var newobject = new AST_SnmpGeneral();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sw');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSw(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing curver');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setCurver(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing supportver');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSupportver(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing address');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setAddress(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing contact');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setContact(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}LookupArr
//
function AST_LookupArr () {
    this.typeMarker = 'AST_LookupArr';
    this._item = [];
}

//
// accessor is AST_LookupArr.prototype.getItem
// element get for item
// - element type is {urn:ast}Lookup
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_LookupArr.prototype.setItem
//
function AST_LookupArr_getItem() { return this._item;}

AST_LookupArr.prototype.getItem = AST_LookupArr_getItem;

function AST_LookupArr_setItem(value) { this._item = value;}

AST_LookupArr.prototype.setItem = AST_LookupArr_setItem;
//
// Serialize {urn:ast}LookupArr
//
function AST_LookupArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_LookupArr.prototype.serialize = AST_LookupArr_serialize;

function AST_LookupArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_LookupArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_Lookup_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SnmpConfParam
//
function AST_SnmpConfParam () {
    this.typeMarker = 'AST_SnmpConfParam';
    this._v1 = null;
    this._v2c = null;
    this._v3 = null;
    this._general = null;
}

//
// accessor is AST_SnmpConfParam.prototype.getV1
// element get for v1
// - element type is {urn:ast}SnmpV1V2C
// - required element
//
// element set for v1
// setter function is is AST_SnmpConfParam.prototype.setV1
//
function AST_SnmpConfParam_getV1() { return this._v1;}

AST_SnmpConfParam.prototype.getV1 = AST_SnmpConfParam_getV1;

function AST_SnmpConfParam_setV1(value) { this._v1 = value;}

AST_SnmpConfParam.prototype.setV1 = AST_SnmpConfParam_setV1;
//
// accessor is AST_SnmpConfParam.prototype.getV2c
// element get for v2c
// - element type is {urn:ast}SnmpV1V2C
// - required element
//
// element set for v2c
// setter function is is AST_SnmpConfParam.prototype.setV2c
//
function AST_SnmpConfParam_getV2c() { return this._v2c;}

AST_SnmpConfParam.prototype.getV2c = AST_SnmpConfParam_getV2c;

function AST_SnmpConfParam_setV2c(value) { this._v2c = value;}

AST_SnmpConfParam.prototype.setV2c = AST_SnmpConfParam_setV2c;
//
// accessor is AST_SnmpConfParam.prototype.getV3
// element get for v3
// - element type is {urn:ast}SnmpV3
// - required element
//
// element set for v3
// setter function is is AST_SnmpConfParam.prototype.setV3
//
function AST_SnmpConfParam_getV3() { return this._v3;}

AST_SnmpConfParam.prototype.getV3 = AST_SnmpConfParam_getV3;

function AST_SnmpConfParam_setV3(value) { this._v3 = value;}

AST_SnmpConfParam.prototype.setV3 = AST_SnmpConfParam_setV3;
//
// accessor is AST_SnmpConfParam.prototype.getGeneral
// element get for general
// - element type is {urn:ast}SnmpGeneral
// - required element
//
// element set for general
// setter function is is AST_SnmpConfParam.prototype.setGeneral
//
function AST_SnmpConfParam_getGeneral() { return this._general;}

AST_SnmpConfParam.prototype.getGeneral = AST_SnmpConfParam_getGeneral;

function AST_SnmpConfParam_setGeneral(value) { this._general = value;}

AST_SnmpConfParam.prototype.setGeneral = AST_SnmpConfParam_setGeneral;
//
// Serialize {urn:ast}SnmpConfParam
//
function AST_SnmpConfParam_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._v1.serialize(cxfjsutils, 'jns0:v1', null);
    }
    // block for local variables
    {
     xml = xml + this._v2c.serialize(cxfjsutils, 'jns0:v2c', null);
    }
    // block for local variables
    {
     xml = xml + this._v3.serialize(cxfjsutils, 'jns0:v3', null);
    }
    // block for local variables
    {
     xml = xml + this._general.serialize(cxfjsutils, 'jns0:general', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SnmpConfParam.prototype.serialize = AST_SnmpConfParam_serialize;

function AST_SnmpConfParam_deserialize (cxfjsutils, element) {
    var newobject = new AST_SnmpConfParam();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing v1');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SnmpV1V2C_deserialize(cxfjsutils, curElement);
    }
    newobject.setV1(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing v2c');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SnmpV1V2C_deserialize(cxfjsutils, curElement);
    }
    newobject.setV2c(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing v3');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SnmpV3_deserialize(cxfjsutils, curElement);
    }
    newobject.setV3(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing general');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SnmpGeneral_deserialize(cxfjsutils, curElement);
    }
    newobject.setGeneral(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}NetworkDns
//
function AST_NetworkDns () {
    this.typeMarker = 'AST_NetworkDns';
    this._dns1 = null;
    this._dns2 = null;
    this._dns3 = null;
    this._dns4 = null;
}

//
// accessor is AST_NetworkDns.prototype.getDns1
// element get for dns1
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for dns1
// setter function is is AST_NetworkDns.prototype.setDns1
//
function AST_NetworkDns_getDns1() { return this._dns1;}

AST_NetworkDns.prototype.getDns1 = AST_NetworkDns_getDns1;

function AST_NetworkDns_setDns1(value) { this._dns1 = value;}

AST_NetworkDns.prototype.setDns1 = AST_NetworkDns_setDns1;
//
// accessor is AST_NetworkDns.prototype.getDns2
// element get for dns2
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for dns2
// setter function is is AST_NetworkDns.prototype.setDns2
//
function AST_NetworkDns_getDns2() { return this._dns2;}

AST_NetworkDns.prototype.getDns2 = AST_NetworkDns_getDns2;

function AST_NetworkDns_setDns2(value) { this._dns2 = value;}

AST_NetworkDns.prototype.setDns2 = AST_NetworkDns_setDns2;
//
// accessor is AST_NetworkDns.prototype.getDns3
// element get for dns3
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for dns3
// setter function is is AST_NetworkDns.prototype.setDns3
//
function AST_NetworkDns_getDns3() { return this._dns3;}

AST_NetworkDns.prototype.getDns3 = AST_NetworkDns_getDns3;

function AST_NetworkDns_setDns3(value) { this._dns3 = value;}

AST_NetworkDns.prototype.setDns3 = AST_NetworkDns_setDns3;
//
// accessor is AST_NetworkDns.prototype.getDns4
// element get for dns4
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for dns4
// setter function is is AST_NetworkDns.prototype.setDns4
//
function AST_NetworkDns_getDns4() { return this._dns4;}

AST_NetworkDns.prototype.getDns4 = AST_NetworkDns_getDns4;

function AST_NetworkDns_setDns4(value) { this._dns4 = value;}

AST_NetworkDns.prototype.setDns4 = AST_NetworkDns_setDns4;
//
// Serialize {urn:ast}NetworkDns
//
function AST_NetworkDns_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._dns1 == null) {
      xml = xml + '<jns0:dns1 xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:dns1>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._dns1);
      xml = xml + '</jns0:dns1>';
     }
    }
    // block for local variables
    {
     if (this._dns2 == null) {
      xml = xml + '<jns0:dns2 xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:dns2>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._dns2);
      xml = xml + '</jns0:dns2>';
     }
    }
    // block for local variables
    {
     if (this._dns3 == null) {
      xml = xml + '<jns0:dns3 xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:dns3>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._dns3);
      xml = xml + '</jns0:dns3>';
     }
    }
    // block for local variables
    {
     if (this._dns4 == null) {
      xml = xml + '<jns0:dns4 xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:dns4>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._dns4);
      xml = xml + '</jns0:dns4>';
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_NetworkDns.prototype.serialize = AST_NetworkDns_serialize;

function AST_NetworkDns_deserialize (cxfjsutils, element) {
    var newobject = new AST_NetworkDns();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing dns1');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setDns1(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing dns2');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setDns2(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing dns3');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setDns3(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing dns4');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setDns4(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}LineArr
//
function AST_LineArr () {
    this.typeMarker = 'AST_LineArr';
    this._item = [];
}

//
// accessor is AST_LineArr.prototype.getItem
// element get for item
// - element type is {urn:ast}Line
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_LineArr.prototype.setItem
//
function AST_LineArr_getItem() { return this._item;}

AST_LineArr.prototype.getItem = AST_LineArr_getItem;

function AST_LineArr_setItem(value) { this._item = value;}

AST_LineArr.prototype.setItem = AST_LineArr_setItem;
//
// Serialize {urn:ast}LineArr
//
function AST_LineArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_LineArr.prototype.serialize = AST_LineArr_serialize;

function AST_LineArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_LineArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_Line_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SysDate
//
function AST_SysDate () {
    this.typeMarker = 'AST_SysDate';
    this._year = 0;
    this._month = 0;
    this._day = 0;
    this._hour = 0;
    this._minute = 0;
    this._second = 0;
}

//
// accessor is AST_SysDate.prototype.getYear
// element get for year
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for year
// setter function is is AST_SysDate.prototype.setYear
//
function AST_SysDate_getYear() { return this._year;}

AST_SysDate.prototype.getYear = AST_SysDate_getYear;

function AST_SysDate_setYear(value) { this._year = value;}

AST_SysDate.prototype.setYear = AST_SysDate_setYear;
//
// accessor is AST_SysDate.prototype.getMonth
// element get for month
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for month
// setter function is is AST_SysDate.prototype.setMonth
//
function AST_SysDate_getMonth() { return this._month;}

AST_SysDate.prototype.getMonth = AST_SysDate_getMonth;

function AST_SysDate_setMonth(value) { this._month = value;}

AST_SysDate.prototype.setMonth = AST_SysDate_setMonth;
//
// accessor is AST_SysDate.prototype.getDay
// element get for day
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for day
// setter function is is AST_SysDate.prototype.setDay
//
function AST_SysDate_getDay() { return this._day;}

AST_SysDate.prototype.getDay = AST_SysDate_getDay;

function AST_SysDate_setDay(value) { this._day = value;}

AST_SysDate.prototype.setDay = AST_SysDate_setDay;
//
// accessor is AST_SysDate.prototype.getHour
// element get for hour
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for hour
// setter function is is AST_SysDate.prototype.setHour
//
function AST_SysDate_getHour() { return this._hour;}

AST_SysDate.prototype.getHour = AST_SysDate_getHour;

function AST_SysDate_setHour(value) { this._hour = value;}

AST_SysDate.prototype.setHour = AST_SysDate_setHour;
//
// accessor is AST_SysDate.prototype.getMinute
// element get for minute
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for minute
// setter function is is AST_SysDate.prototype.setMinute
//
function AST_SysDate_getMinute() { return this._minute;}

AST_SysDate.prototype.getMinute = AST_SysDate_getMinute;

function AST_SysDate_setMinute(value) { this._minute = value;}

AST_SysDate.prototype.setMinute = AST_SysDate_setMinute;
//
// accessor is AST_SysDate.prototype.getSecond
// element get for second
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for second
// setter function is is AST_SysDate.prototype.setSecond
//
function AST_SysDate_getSecond() { return this._second;}

AST_SysDate.prototype.getSecond = AST_SysDate_getSecond;

function AST_SysDate_setSecond(value) { this._second = value;}

AST_SysDate.prototype.setSecond = AST_SysDate_setSecond;
//
// Serialize {urn:ast}SysDate
//
function AST_SysDate_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:year>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._year);
     xml = xml + '</jns0:year>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:month>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._month);
     xml = xml + '</jns0:month>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:day>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._day);
     xml = xml + '</jns0:day>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:hour>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._hour);
     xml = xml + '</jns0:hour>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:minute>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._minute);
     xml = xml + '</jns0:minute>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:second>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._second);
     xml = xml + '</jns0:second>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SysDate.prototype.serialize = AST_SysDate_serialize;

function AST_SysDate_deserialize (cxfjsutils, element) {
    var newobject = new AST_SysDate();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing year');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setYear(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing month');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setMonth(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing day');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setDay(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing hour');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setHour(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing minute');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setMinute(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing second');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setSecond(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SysAuto
//
function AST_SysAuto () {
    this.typeMarker = 'AST_SysAuto';
    this._type = null;
    this._dminute = 0;
    this._dhour = 0;
    this._wminute = 0;
    this._whour = 0;
    this._wweek = 0;
    this._mminute = 0;
    this._mhour = 0;
    this._mmonth = 0;
    this._rminute = 0;
    this._rhour = 0;
    this._rday = 0;
    this._sw = '';
}

//
// accessor is AST_SysAuto.prototype.getType
// element get for type
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for type
// setter function is is AST_SysAuto.prototype.setType
//
function AST_SysAuto_getType() { return this._type;}

AST_SysAuto.prototype.getType = AST_SysAuto_getType;

function AST_SysAuto_setType(value) { this._type = value;}

AST_SysAuto.prototype.setType = AST_SysAuto_setType;
//
// accessor is AST_SysAuto.prototype.getDminute
// element get for dminute
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for dminute
// setter function is is AST_SysAuto.prototype.setDminute
//
function AST_SysAuto_getDminute() { return this._dminute;}

AST_SysAuto.prototype.getDminute = AST_SysAuto_getDminute;

function AST_SysAuto_setDminute(value) { this._dminute = value;}

AST_SysAuto.prototype.setDminute = AST_SysAuto_setDminute;
//
// accessor is AST_SysAuto.prototype.getDhour
// element get for dhour
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for dhour
// setter function is is AST_SysAuto.prototype.setDhour
//
function AST_SysAuto_getDhour() { return this._dhour;}

AST_SysAuto.prototype.getDhour = AST_SysAuto_getDhour;

function AST_SysAuto_setDhour(value) { this._dhour = value;}

AST_SysAuto.prototype.setDhour = AST_SysAuto_setDhour;
//
// accessor is AST_SysAuto.prototype.getWminute
// element get for wminute
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for wminute
// setter function is is AST_SysAuto.prototype.setWminute
//
function AST_SysAuto_getWminute() { return this._wminute;}

AST_SysAuto.prototype.getWminute = AST_SysAuto_getWminute;

function AST_SysAuto_setWminute(value) { this._wminute = value;}

AST_SysAuto.prototype.setWminute = AST_SysAuto_setWminute;
//
// accessor is AST_SysAuto.prototype.getWhour
// element get for whour
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for whour
// setter function is is AST_SysAuto.prototype.setWhour
//
function AST_SysAuto_getWhour() { return this._whour;}

AST_SysAuto.prototype.getWhour = AST_SysAuto_getWhour;

function AST_SysAuto_setWhour(value) { this._whour = value;}

AST_SysAuto.prototype.setWhour = AST_SysAuto_setWhour;
//
// accessor is AST_SysAuto.prototype.getWweek
// element get for wweek
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for wweek
// setter function is is AST_SysAuto.prototype.setWweek
//
function AST_SysAuto_getWweek() { return this._wweek;}

AST_SysAuto.prototype.getWweek = AST_SysAuto_getWweek;

function AST_SysAuto_setWweek(value) { this._wweek = value;}

AST_SysAuto.prototype.setWweek = AST_SysAuto_setWweek;
//
// accessor is AST_SysAuto.prototype.getMminute
// element get for mminute
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for mminute
// setter function is is AST_SysAuto.prototype.setMminute
//
function AST_SysAuto_getMminute() { return this._mminute;}

AST_SysAuto.prototype.getMminute = AST_SysAuto_getMminute;

function AST_SysAuto_setMminute(value) { this._mminute = value;}

AST_SysAuto.prototype.setMminute = AST_SysAuto_setMminute;
//
// accessor is AST_SysAuto.prototype.getMhour
// element get for mhour
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for mhour
// setter function is is AST_SysAuto.prototype.setMhour
//
function AST_SysAuto_getMhour() { return this._mhour;}

AST_SysAuto.prototype.getMhour = AST_SysAuto_getMhour;

function AST_SysAuto_setMhour(value) { this._mhour = value;}

AST_SysAuto.prototype.setMhour = AST_SysAuto_setMhour;
//
// accessor is AST_SysAuto.prototype.getMmonth
// element get for mmonth
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for mmonth
// setter function is is AST_SysAuto.prototype.setMmonth
//
function AST_SysAuto_getMmonth() { return this._mmonth;}

AST_SysAuto.prototype.getMmonth = AST_SysAuto_getMmonth;

function AST_SysAuto_setMmonth(value) { this._mmonth = value;}

AST_SysAuto.prototype.setMmonth = AST_SysAuto_setMmonth;
//
// accessor is AST_SysAuto.prototype.getRminute
// element get for rminute
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for rminute
// setter function is is AST_SysAuto.prototype.setRminute
//
function AST_SysAuto_getRminute() { return this._rminute;}

AST_SysAuto.prototype.getRminute = AST_SysAuto_getRminute;

function AST_SysAuto_setRminute(value) { this._rminute = value;}

AST_SysAuto.prototype.setRminute = AST_SysAuto_setRminute;
//
// accessor is AST_SysAuto.prototype.getRhour
// element get for rhour
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for rhour
// setter function is is AST_SysAuto.prototype.setRhour
//
function AST_SysAuto_getRhour() { return this._rhour;}

AST_SysAuto.prototype.getRhour = AST_SysAuto_getRhour;

function AST_SysAuto_setRhour(value) { this._rhour = value;}

AST_SysAuto.prototype.setRhour = AST_SysAuto_setRhour;
//
// accessor is AST_SysAuto.prototype.getRday
// element get for rday
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for rday
// setter function is is AST_SysAuto.prototype.setRday
//
function AST_SysAuto_getRday() { return this._rday;}

AST_SysAuto.prototype.getRday = AST_SysAuto_getRday;

function AST_SysAuto_setRday(value) { this._rday = value;}

AST_SysAuto.prototype.setRday = AST_SysAuto_setRday;
//
// accessor is AST_SysAuto.prototype.getSw
// element get for sw
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for sw
// setter function is is AST_SysAuto.prototype.setSw
//
function AST_SysAuto_getSw() { return this._sw;}

AST_SysAuto.prototype.getSw = AST_SysAuto_getSw;

function AST_SysAuto_setSw(value) { this._sw = value;}

AST_SysAuto.prototype.setSw = AST_SysAuto_setSw;
//
// Serialize {urn:ast}SysAuto
//
function AST_SysAuto_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._type == null) {
      xml = xml + '<jns0:type xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:type>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._type);
      xml = xml + '</jns0:type>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:dminute>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._dminute);
     xml = xml + '</jns0:dminute>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:dhour>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._dhour);
     xml = xml + '</jns0:dhour>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:wminute>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._wminute);
     xml = xml + '</jns0:wminute>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:whour>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._whour);
     xml = xml + '</jns0:whour>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:wweek>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._wweek);
     xml = xml + '</jns0:wweek>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:mminute>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._mminute);
     xml = xml + '</jns0:mminute>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:mhour>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._mhour);
     xml = xml + '</jns0:mhour>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:mmonth>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._mmonth);
     xml = xml + '</jns0:mmonth>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:rminute>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._rminute);
     xml = xml + '</jns0:rminute>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:rhour>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._rhour);
     xml = xml + '</jns0:rhour>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:rday>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._rday);
     xml = xml + '</jns0:rday>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:sw>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._sw);
     xml = xml + '</jns0:sw>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SysAuto.prototype.serialize = AST_SysAuto_serialize;

function AST_SysAuto_deserialize (cxfjsutils, element) {
    var newobject = new AST_SysAuto();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing type');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setType(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing dminute');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setDminute(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing dhour');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setDhour(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing wminute');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setWminute(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing whour');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setWhour(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing wweek');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setWweek(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing mminute');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setMminute(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing mhour');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setMhour(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing mmonth');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setMmonth(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing rminute');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setRminute(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing rhour');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setRhour(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing rday');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setRday(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sw');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSw(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SysStatusGet
//
function AST_SysStatusGet () {
    this.typeMarker = 'AST_SysStatusGet';
    this._combuf = null;
    this._sip = null;
    this._ana = null;
    this._roules = null;
    this._net = null;
}

//
// accessor is AST_SysStatusGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_SysStatusGet.prototype.setCombuf
//
function AST_SysStatusGet_getCombuf() { return this._combuf;}

AST_SysStatusGet.prototype.getCombuf = AST_SysStatusGet_getCombuf;

function AST_SysStatusGet_setCombuf(value) { this._combuf = value;}

AST_SysStatusGet.prototype.setCombuf = AST_SysStatusGet_setCombuf;
//
// accessor is AST_SysStatusGet.prototype.getSip
// element get for sip
// - element type is {urn:ast}SipinfoArr
// - required element
//
// element set for sip
// setter function is is AST_SysStatusGet.prototype.setSip
//
function AST_SysStatusGet_getSip() { return this._sip;}

AST_SysStatusGet.prototype.getSip = AST_SysStatusGet_getSip;

function AST_SysStatusGet_setSip(value) { this._sip = value;}

AST_SysStatusGet.prototype.setSip = AST_SysStatusGet_setSip;
//
// accessor is AST_SysStatusGet.prototype.getAna
// element get for ana
// - element type is {urn:ast}AnainfoArr
// - required element
//
// element set for ana
// setter function is is AST_SysStatusGet.prototype.setAna
//
function AST_SysStatusGet_getAna() { return this._ana;}

AST_SysStatusGet.prototype.getAna = AST_SysStatusGet_getAna;

function AST_SysStatusGet_setAna(value) { this._ana = value;}

AST_SysStatusGet.prototype.setAna = AST_SysStatusGet_setAna;
//
// accessor is AST_SysStatusGet.prototype.getRoules
// element get for roules
// - element type is {urn:ast}RoutingGetArr
// - required element
//
// element set for roules
// setter function is is AST_SysStatusGet.prototype.setRoules
//
function AST_SysStatusGet_getRoules() { return this._roules;}

AST_SysStatusGet.prototype.getRoules = AST_SysStatusGet_getRoules;

function AST_SysStatusGet_setRoules(value) { this._roules = value;}

AST_SysStatusGet.prototype.setRoules = AST_SysStatusGet_setRoules;
//
// accessor is AST_SysStatusGet.prototype.getNet
// element get for net
// - element type is {urn:ast}NetworkinfoArr
// - required element
//
// element set for net
// setter function is is AST_SysStatusGet.prototype.setNet
//
function AST_SysStatusGet_getNet() { return this._net;}

AST_SysStatusGet.prototype.getNet = AST_SysStatusGet_getNet;

function AST_SysStatusGet_setNet(value) { this._net = value;}

AST_SysStatusGet.prototype.setNet = AST_SysStatusGet_setNet;
//
// Serialize {urn:ast}SysStatusGet
//
function AST_SysStatusGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._sip.serialize(cxfjsutils, 'jns0:sip', null);
    }
    // block for local variables
    {
     xml = xml + this._ana.serialize(cxfjsutils, 'jns0:ana', null);
    }
    // block for local variables
    {
     xml = xml + this._roules.serialize(cxfjsutils, 'jns0:roules', null);
    }
    // block for local variables
    {
     xml = xml + this._net.serialize(cxfjsutils, 'jns0:net', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SysStatusGet.prototype.serialize = AST_SysStatusGet_serialize;

function AST_SysStatusGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_SysStatusGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sip');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SipinfoArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setSip(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ana');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_AnainfoArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setAna(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing roules');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_RoutingGetArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setRoules(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing net');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_NetworkinfoArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setNet(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}Section
//
function AST_Section () {
    this.typeMarker = 'AST_Section';
    this._section = null;
}

//
// accessor is AST_Section.prototype.getSection
// element get for section
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for section
// setter function is is AST_Section.prototype.setSection
//
function AST_Section_getSection() { return this._section;}

AST_Section.prototype.getSection = AST_Section_getSection;

function AST_Section_setSection(value) { this._section = value;}

AST_Section.prototype.setSection = AST_Section_setSection;
//
// Serialize {urn:ast}Section
//
function AST_Section_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._section == null) {
      xml = xml + '<jns0:section xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:section>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._section);
      xml = xml + '</jns0:section>';
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_Section.prototype.serialize = AST_Section_serialize;

function AST_Section_deserialize (cxfjsutils, element) {
    var newobject = new AST_Section();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing section');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSection(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipAdvSave
//
function AST_SipAdvSave () {
    this.typeMarker = 'AST_SipAdvSave';
    this._sipadv = null;
    this._siprtp = null;
}

//
// accessor is AST_SipAdvSave.prototype.getSipadv
// element get for sipadv
// - element type is {urn:ast}SipAdv
// - required element
//
// element set for sipadv
// setter function is is AST_SipAdvSave.prototype.setSipadv
//
function AST_SipAdvSave_getSipadv() { return this._sipadv;}

AST_SipAdvSave.prototype.getSipadv = AST_SipAdvSave_getSipadv;

function AST_SipAdvSave_setSipadv(value) { this._sipadv = value;}

AST_SipAdvSave.prototype.setSipadv = AST_SipAdvSave_setSipadv;
//
// accessor is AST_SipAdvSave.prototype.getSiprtp
// element get for siprtp
// - element type is {urn:ast}SipRtp
// - required element
//
// element set for siprtp
// setter function is is AST_SipAdvSave.prototype.setSiprtp
//
function AST_SipAdvSave_getSiprtp() { return this._siprtp;}

AST_SipAdvSave.prototype.getSiprtp = AST_SipAdvSave_getSiprtp;

function AST_SipAdvSave_setSiprtp(value) { this._siprtp = value;}

AST_SipAdvSave.prototype.setSiprtp = AST_SipAdvSave_setSiprtp;
//
// Serialize {urn:ast}SipAdvSave
//
function AST_SipAdvSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._sipadv.serialize(cxfjsutils, 'jns0:sipadv', null);
    }
    // block for local variables
    {
     xml = xml + this._siprtp.serialize(cxfjsutils, 'jns0:siprtp', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipAdvSave.prototype.serialize = AST_SipAdvSave_serialize;

function AST_SipAdvSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipAdvSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sipadv');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SipAdv_deserialize(cxfjsutils, curElement);
    }
    newobject.setSipadv(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing siprtp');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SipRtp_deserialize(cxfjsutils, curElement);
    }
    newobject.setSiprtp(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RoutingRulesArr
//
function AST_RoutingRulesArr () {
    this.typeMarker = 'AST_RoutingRulesArr';
    this._item = [];
}

//
// accessor is AST_RoutingRulesArr.prototype.getItem
// element get for item
// - element type is {urn:ast}RoutingRules
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_RoutingRulesArr.prototype.setItem
//
function AST_RoutingRulesArr_getItem() { return this._item;}

AST_RoutingRulesArr.prototype.getItem = AST_RoutingRulesArr_getItem;

function AST_RoutingRulesArr_setItem(value) { this._item = value;}

AST_RoutingRulesArr.prototype.setItem = AST_RoutingRulesArr_setItem;
//
// Serialize {urn:ast}RoutingRulesArr
//
function AST_RoutingRulesArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RoutingRulesArr.prototype.serialize = AST_RoutingRulesArr_serialize;

function AST_RoutingRulesArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_RoutingRulesArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_RoutingRules_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RoutingRules
//
function AST_RoutingRules () {
    this.typeMarker = 'AST_RoutingRules';
    this._name = null;
    this._forwardnumber = null;
    this._tochannel = null;
    this._fromchannel = null;
    this._order = '';
}

//
// accessor is AST_RoutingRules.prototype.getName
// element get for name
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for name
// setter function is is AST_RoutingRules.prototype.setName
//
function AST_RoutingRules_getName() { return this._name;}

AST_RoutingRules.prototype.getName = AST_RoutingRules_getName;

function AST_RoutingRules_setName(value) { this._name = value;}

AST_RoutingRules.prototype.setName = AST_RoutingRules_setName;
//
// accessor is AST_RoutingRules.prototype.getForwardnumber
// element get for forwardnumber
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for forwardnumber
// setter function is is AST_RoutingRules.prototype.setForwardnumber
//
function AST_RoutingRules_getForwardnumber() { return this._forwardnumber;}

AST_RoutingRules.prototype.getForwardnumber = AST_RoutingRules_getForwardnumber;

function AST_RoutingRules_setForwardnumber(value) { this._forwardnumber = value;}

AST_RoutingRules.prototype.setForwardnumber = AST_RoutingRules_setForwardnumber;
//
// accessor is AST_RoutingRules.prototype.getTochannel
// element get for tochannel
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for tochannel
// setter function is is AST_RoutingRules.prototype.setTochannel
//
function AST_RoutingRules_getTochannel() { return this._tochannel;}

AST_RoutingRules.prototype.getTochannel = AST_RoutingRules_getTochannel;

function AST_RoutingRules_setTochannel(value) { this._tochannel = value;}

AST_RoutingRules.prototype.setTochannel = AST_RoutingRules_setTochannel;
//
// accessor is AST_RoutingRules.prototype.getFromchannel
// element get for fromchannel
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for fromchannel
// setter function is is AST_RoutingRules.prototype.setFromchannel
//
function AST_RoutingRules_getFromchannel() { return this._fromchannel;}

AST_RoutingRules.prototype.getFromchannel = AST_RoutingRules_getFromchannel;

function AST_RoutingRules_setFromchannel(value) { this._fromchannel = value;}

AST_RoutingRules.prototype.setFromchannel = AST_RoutingRules_setFromchannel;
//
// accessor is AST_RoutingRules.prototype.getOrder
// element get for order
// - element type is {http://www.w3.org/2001/XMLSchema}short
// - required element
//
// element set for order
// setter function is is AST_RoutingRules.prototype.setOrder
//
function AST_RoutingRules_getOrder() { return this._order;}

AST_RoutingRules.prototype.getOrder = AST_RoutingRules_getOrder;

function AST_RoutingRules_setOrder(value) { this._order = value;}

AST_RoutingRules.prototype.setOrder = AST_RoutingRules_setOrder;
//
// Serialize {urn:ast}RoutingRules
//
function AST_RoutingRules_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._name == null) {
      xml = xml + '<jns0:name xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:name>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._name);
      xml = xml + '</jns0:name>';
     }
    }
    // block for local variables
    {
     if (this._forwardnumber == null) {
      xml = xml + '<jns0:forwardnumber xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:forwardnumber>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._forwardnumber);
      xml = xml + '</jns0:forwardnumber>';
     }
    }
    // block for local variables
    {
     if (this._tochannel != null) {
      if (this._tochannel == null) {
       xml = xml + '<jns0:tochannel xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:tochannel>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._tochannel);
       xml = xml + '</jns0:tochannel>';
      }
     }
    }
    // block for local variables
    {
     if (this._fromchannel == null) {
      xml = xml + '<jns0:fromchannel xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:fromchannel>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._fromchannel);
      xml = xml + '</jns0:fromchannel>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:order>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._order);
     xml = xml + '</jns0:order>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RoutingRules.prototype.serialize = AST_RoutingRules_serialize;

function AST_RoutingRules_deserialize (cxfjsutils, element) {
    var newobject = new AST_RoutingRules();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing name');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setName(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing forwardnumber');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setForwardnumber(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing tochannel');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'tochannel')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setTochannel(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fromchannel');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setFromchannel(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing order');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setOrder(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}NetworkDdnsCom
//
function AST_NetworkDdnsCom () {
    this.typeMarker = 'AST_NetworkDdnsCom';
    this._host = null;
    this._userid = null;
    this._passwd = null;
}

//
// accessor is AST_NetworkDdnsCom.prototype.getHost
// element get for host
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for host
// setter function is is AST_NetworkDdnsCom.prototype.setHost
//
function AST_NetworkDdnsCom_getHost() { return this._host;}

AST_NetworkDdnsCom.prototype.getHost = AST_NetworkDdnsCom_getHost;

function AST_NetworkDdnsCom_setHost(value) { this._host = value;}

AST_NetworkDdnsCom.prototype.setHost = AST_NetworkDdnsCom_setHost;
//
// accessor is AST_NetworkDdnsCom.prototype.getUserid
// element get for userid
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for userid
// setter function is is AST_NetworkDdnsCom.prototype.setUserid
//
function AST_NetworkDdnsCom_getUserid() { return this._userid;}

AST_NetworkDdnsCom.prototype.getUserid = AST_NetworkDdnsCom_getUserid;

function AST_NetworkDdnsCom_setUserid(value) { this._userid = value;}

AST_NetworkDdnsCom.prototype.setUserid = AST_NetworkDdnsCom_setUserid;
//
// accessor is AST_NetworkDdnsCom.prototype.getPasswd
// element get for passwd
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for passwd
// setter function is is AST_NetworkDdnsCom.prototype.setPasswd
//
function AST_NetworkDdnsCom_getPasswd() { return this._passwd;}

AST_NetworkDdnsCom.prototype.getPasswd = AST_NetworkDdnsCom_getPasswd;

function AST_NetworkDdnsCom_setPasswd(value) { this._passwd = value;}

AST_NetworkDdnsCom.prototype.setPasswd = AST_NetworkDdnsCom_setPasswd;
//
// Serialize {urn:ast}NetworkDdnsCom
//
function AST_NetworkDdnsCom_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._host == null) {
      xml = xml + '<jns0:host xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:host>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._host);
      xml = xml + '</jns0:host>';
     }
    }
    // block for local variables
    {
     if (this._userid == null) {
      xml = xml + '<jns0:userid xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:userid>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._userid);
      xml = xml + '</jns0:userid>';
     }
    }
    // block for local variables
    {
     if (this._passwd == null) {
      xml = xml + '<jns0:passwd xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:passwd>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._passwd);
      xml = xml + '</jns0:passwd>';
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_NetworkDdnsCom.prototype.serialize = AST_NetworkDdnsCom_serialize;

function AST_NetworkDdnsCom_deserialize (cxfjsutils, element) {
    var newobject = new AST_NetworkDdnsCom();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing host');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setHost(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing userid');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setUserid(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing passwd');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setPasswd(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}IoSettingsGet
//
function AST_IoSettingsGet () {
    this.typeMarker = 'AST_IoSettingsGet';
    this._board = null;
    this._combuf = null;
}

//
// accessor is AST_IoSettingsGet.prototype.getBoard
// element get for board
// - element type is {urn:ast}IoSettingsOne
// - required element
//
// element set for board
// setter function is is AST_IoSettingsGet.prototype.setBoard
//
function AST_IoSettingsGet_getBoard() { return this._board;}

AST_IoSettingsGet.prototype.getBoard = AST_IoSettingsGet_getBoard;

function AST_IoSettingsGet_setBoard(value) { this._board = value;}

AST_IoSettingsGet.prototype.setBoard = AST_IoSettingsGet_setBoard;
//
// accessor is AST_IoSettingsGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_IoSettingsGet.prototype.setCombuf
//
function AST_IoSettingsGet_getCombuf() { return this._combuf;}

AST_IoSettingsGet.prototype.getCombuf = AST_IoSettingsGet_getCombuf;

function AST_IoSettingsGet_setCombuf(value) { this._combuf = value;}

AST_IoSettingsGet.prototype.setCombuf = AST_IoSettingsGet_setCombuf;
//
// Serialize {urn:ast}IoSettingsGet
//
function AST_IoSettingsGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._board.serialize(cxfjsutils, 'jns0:board', null);
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_IoSettingsGet.prototype.serialize = AST_IoSettingsGet_serialize;

function AST_IoSettingsGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_IoSettingsGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing board');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_IoSettingsOne_deserialize(cxfjsutils, curElement);
    }
    newobject.setBoard(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}UcpAlgCalllimitArr
//
function AST_UcpAlgCalllimitArr () {
    this.typeMarker = 'AST_UcpAlgCalllimitArr';
    this._item = [];
}

//
// accessor is AST_UcpAlgCalllimitArr.prototype.getItem
// element get for item
// - element type is {urn:ast}UcpAlgCalllimit
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_UcpAlgCalllimitArr.prototype.setItem
//
function AST_UcpAlgCalllimitArr_getItem() { return this._item;}

AST_UcpAlgCalllimitArr.prototype.getItem = AST_UcpAlgCalllimitArr_getItem;

function AST_UcpAlgCalllimitArr_setItem(value) { this._item = value;}

AST_UcpAlgCalllimitArr.prototype.setItem = AST_UcpAlgCalllimitArr_setItem;
//
// Serialize {urn:ast}UcpAlgCalllimitArr
//
function AST_UcpAlgCalllimitArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_UcpAlgCalllimitArr.prototype.serialize = AST_UcpAlgCalllimitArr_serialize;

function AST_UcpAlgCalllimitArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_UcpAlgCalllimitArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_UcpAlgCalllimit_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipBatchSipArr
//
function AST_SipBatchSipArr () {
    this.typeMarker = 'AST_SipBatchSipArr';
    this._item = [];
}

//
// accessor is AST_SipBatchSipArr.prototype.getItem
// element get for item
// - element type is {urn:ast}SipBatchSip
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_SipBatchSipArr.prototype.setItem
//
function AST_SipBatchSipArr_getItem() { return this._item;}

AST_SipBatchSipArr.prototype.getItem = AST_SipBatchSipArr_getItem;

function AST_SipBatchSipArr_setItem(value) { this._item = value;}

AST_SipBatchSipArr.prototype.setItem = AST_SipBatchSipArr_setItem;
//
// Serialize {urn:ast}SipBatchSipArr
//
function AST_SipBatchSipArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipBatchSipArr.prototype.serialize = AST_SipBatchSipArr_serialize;

function AST_SipBatchSipArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipBatchSipArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_SipBatchSip_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipinfoArr
//
function AST_SipinfoArr () {
    this.typeMarker = 'AST_SipinfoArr';
    this._item = [];
}

//
// accessor is AST_SipinfoArr.prototype.getItem
// element get for item
// - element type is {urn:ast}Sipinfo
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_SipinfoArr.prototype.setItem
//
function AST_SipinfoArr_getItem() { return this._item;}

AST_SipinfoArr.prototype.getItem = AST_SipinfoArr_getItem;

function AST_SipinfoArr_setItem(value) { this._item = value;}

AST_SipinfoArr.prototype.setItem = AST_SipinfoArr_setItem;
//
// Serialize {urn:ast}SipinfoArr
//
function AST_SipinfoArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipinfoArr.prototype.serialize = AST_SipinfoArr_serialize;

function AST_SipinfoArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipinfoArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_Sipinfo_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SysTime
//
function AST_SysTime () {
    this.typeMarker = 'AST_SysTime';
    this._timezone = null;
    this._autosync = null;
    this._ntp1 = null;
    this._ntp2 = null;
    this._ntp3 = null;
}

//
// accessor is AST_SysTime.prototype.getTimezone
// element get for timezone
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for timezone
// setter function is is AST_SysTime.prototype.setTimezone
//
function AST_SysTime_getTimezone() { return this._timezone;}

AST_SysTime.prototype.getTimezone = AST_SysTime_getTimezone;

function AST_SysTime_setTimezone(value) { this._timezone = value;}

AST_SysTime.prototype.setTimezone = AST_SysTime_setTimezone;
//
// accessor is AST_SysTime.prototype.getAutosync
// element get for autosync
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for autosync
// setter function is is AST_SysTime.prototype.setAutosync
//
function AST_SysTime_getAutosync() { return this._autosync;}

AST_SysTime.prototype.getAutosync = AST_SysTime_getAutosync;

function AST_SysTime_setAutosync(value) { this._autosync = value;}

AST_SysTime.prototype.setAutosync = AST_SysTime_setAutosync;
//
// accessor is AST_SysTime.prototype.getNtp1
// element get for ntp1
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for ntp1
// setter function is is AST_SysTime.prototype.setNtp1
//
function AST_SysTime_getNtp1() { return this._ntp1;}

AST_SysTime.prototype.getNtp1 = AST_SysTime_getNtp1;

function AST_SysTime_setNtp1(value) { this._ntp1 = value;}

AST_SysTime.prototype.setNtp1 = AST_SysTime_setNtp1;
//
// accessor is AST_SysTime.prototype.getNtp2
// element get for ntp2
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for ntp2
// setter function is is AST_SysTime.prototype.setNtp2
//
function AST_SysTime_getNtp2() { return this._ntp2;}

AST_SysTime.prototype.getNtp2 = AST_SysTime_getNtp2;

function AST_SysTime_setNtp2(value) { this._ntp2 = value;}

AST_SysTime.prototype.setNtp2 = AST_SysTime_setNtp2;
//
// accessor is AST_SysTime.prototype.getNtp3
// element get for ntp3
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for ntp3
// setter function is is AST_SysTime.prototype.setNtp3
//
function AST_SysTime_getNtp3() { return this._ntp3;}

AST_SysTime.prototype.getNtp3 = AST_SysTime_getNtp3;

function AST_SysTime_setNtp3(value) { this._ntp3 = value;}

AST_SysTime.prototype.setNtp3 = AST_SysTime_setNtp3;
//
// Serialize {urn:ast}SysTime
//
function AST_SysTime_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._timezone != null) {
      if (this._timezone == null) {
       xml = xml + '<jns0:timezone xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:timezone>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._timezone);
       xml = xml + '</jns0:timezone>';
      }
     }
    }
    // block for local variables
    {
     if (this._autosync == null) {
      xml = xml + '<jns0:autosync xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:autosync>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._autosync);
      xml = xml + '</jns0:autosync>';
     }
    }
    // block for local variables
    {
     if (this._ntp1 == null) {
      xml = xml + '<jns0:ntp1 xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:ntp1>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._ntp1);
      xml = xml + '</jns0:ntp1>';
     }
    }
    // block for local variables
    {
     if (this._ntp2 == null) {
      xml = xml + '<jns0:ntp2 xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:ntp2>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._ntp2);
      xml = xml + '</jns0:ntp2>';
     }
    }
    // block for local variables
    {
     if (this._ntp3 == null) {
      xml = xml + '<jns0:ntp3 xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:ntp3>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._ntp3);
      xml = xml + '</jns0:ntp3>';
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SysTime.prototype.serialize = AST_SysTime_serialize;

function AST_SysTime_deserialize (cxfjsutils, element) {
    var newobject = new AST_SysTime();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing timezone');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'timezone')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setTimezone(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing autosync');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setAutosync(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ntp1');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setNtp1(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ntp2');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setNtp2(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ntp3');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setNtp3(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}NetworkLanGet
//
function AST_NetworkLanGet () {
    this.typeMarker = 'AST_NetworkLanGet';
    this._combuf = null;
    this._lan = null;
    this._dns = null;
    this._stacknum = 0;
    this._factorymac = null;
}

//
// accessor is AST_NetworkLanGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_NetworkLanGet.prototype.setCombuf
//
function AST_NetworkLanGet_getCombuf() { return this._combuf;}

AST_NetworkLanGet.prototype.getCombuf = AST_NetworkLanGet_getCombuf;

function AST_NetworkLanGet_setCombuf(value) { this._combuf = value;}

AST_NetworkLanGet.prototype.setCombuf = AST_NetworkLanGet_setCombuf;
//
// accessor is AST_NetworkLanGet.prototype.getLan
// element get for lan
// - element type is {urn:ast}NetworkLan
// - required element
//
// element set for lan
// setter function is is AST_NetworkLanGet.prototype.setLan
//
function AST_NetworkLanGet_getLan() { return this._lan;}

AST_NetworkLanGet.prototype.getLan = AST_NetworkLanGet_getLan;

function AST_NetworkLanGet_setLan(value) { this._lan = value;}

AST_NetworkLanGet.prototype.setLan = AST_NetworkLanGet_setLan;
//
// accessor is AST_NetworkLanGet.prototype.getDns
// element get for dns
// - element type is {urn:ast}NetworkDns
// - required element
//
// element set for dns
// setter function is is AST_NetworkLanGet.prototype.setDns
//
function AST_NetworkLanGet_getDns() { return this._dns;}

AST_NetworkLanGet.prototype.getDns = AST_NetworkLanGet_getDns;

function AST_NetworkLanGet_setDns(value) { this._dns = value;}

AST_NetworkLanGet.prototype.setDns = AST_NetworkLanGet_setDns;
//
// accessor is AST_NetworkLanGet.prototype.getStacknum
// element get for stacknum
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for stacknum
// setter function is is AST_NetworkLanGet.prototype.setStacknum
//
function AST_NetworkLanGet_getStacknum() { return this._stacknum;}

AST_NetworkLanGet.prototype.getStacknum = AST_NetworkLanGet_getStacknum;

function AST_NetworkLanGet_setStacknum(value) { this._stacknum = value;}

AST_NetworkLanGet.prototype.setStacknum = AST_NetworkLanGet_setStacknum;
//
// accessor is AST_NetworkLanGet.prototype.getFactorymac
// element get for factorymac
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for factorymac
// setter function is is AST_NetworkLanGet.prototype.setFactorymac
//
function AST_NetworkLanGet_getFactorymac() { return this._factorymac;}

AST_NetworkLanGet.prototype.getFactorymac = AST_NetworkLanGet_getFactorymac;

function AST_NetworkLanGet_setFactorymac(value) { this._factorymac = value;}

AST_NetworkLanGet.prototype.setFactorymac = AST_NetworkLanGet_setFactorymac;
//
// Serialize {urn:ast}NetworkLanGet
//
function AST_NetworkLanGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._lan.serialize(cxfjsutils, 'jns0:lan', null);
    }
    // block for local variables
    {
     xml = xml + this._dns.serialize(cxfjsutils, 'jns0:dns', null);
    }
    // block for local variables
    {
     xml = xml + '<jns0:stacknum>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._stacknum);
     xml = xml + '</jns0:stacknum>';
    }
    // block for local variables
    {
     if (this._factorymac == null) {
      xml = xml + '<jns0:factorymac xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:factorymac>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._factorymac);
      xml = xml + '</jns0:factorymac>';
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_NetworkLanGet.prototype.serialize = AST_NetworkLanGet_serialize;

function AST_NetworkLanGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_NetworkLanGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing lan');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_NetworkLan_deserialize(cxfjsutils, curElement);
    }
    newobject.setLan(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing dns');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_NetworkDns_deserialize(cxfjsutils, curElement);
    }
    newobject.setDns(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing stacknum');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setStacknum(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing factorymac');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setFactorymac(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}NetworkTookitTcpdump
//
function AST_NetworkTookitTcpdump () {
    this.typeMarker = 'AST_NetworkTookitTcpdump';
    this._lines = null;
    this._drc = null;
    this._src = null;
    this._port = 0;
    this._interface = '';
}

//
// accessor is AST_NetworkTookitTcpdump.prototype.getLines
// element get for lines
// - element type is {urn:ast}LineArr
// - required element
//
// element set for lines
// setter function is is AST_NetworkTookitTcpdump.prototype.setLines
//
function AST_NetworkTookitTcpdump_getLines() { return this._lines;}

AST_NetworkTookitTcpdump.prototype.getLines = AST_NetworkTookitTcpdump_getLines;

function AST_NetworkTookitTcpdump_setLines(value) { this._lines = value;}

AST_NetworkTookitTcpdump.prototype.setLines = AST_NetworkTookitTcpdump_setLines;
//
// accessor is AST_NetworkTookitTcpdump.prototype.getDrc
// element get for drc
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for drc
// setter function is is AST_NetworkTookitTcpdump.prototype.setDrc
//
function AST_NetworkTookitTcpdump_getDrc() { return this._drc;}

AST_NetworkTookitTcpdump.prototype.getDrc = AST_NetworkTookitTcpdump_getDrc;

function AST_NetworkTookitTcpdump_setDrc(value) { this._drc = value;}

AST_NetworkTookitTcpdump.prototype.setDrc = AST_NetworkTookitTcpdump_setDrc;
//
// accessor is AST_NetworkTookitTcpdump.prototype.getSrc
// element get for src
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for src
// setter function is is AST_NetworkTookitTcpdump.prototype.setSrc
//
function AST_NetworkTookitTcpdump_getSrc() { return this._src;}

AST_NetworkTookitTcpdump.prototype.getSrc = AST_NetworkTookitTcpdump_getSrc;

function AST_NetworkTookitTcpdump_setSrc(value) { this._src = value;}

AST_NetworkTookitTcpdump.prototype.setSrc = AST_NetworkTookitTcpdump_setSrc;
//
// accessor is AST_NetworkTookitTcpdump.prototype.getPort
// element get for port
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for port
// setter function is is AST_NetworkTookitTcpdump.prototype.setPort
//
function AST_NetworkTookitTcpdump_getPort() { return this._port;}

AST_NetworkTookitTcpdump.prototype.getPort = AST_NetworkTookitTcpdump_getPort;

function AST_NetworkTookitTcpdump_setPort(value) { this._port = value;}

AST_NetworkTookitTcpdump.prototype.setPort = AST_NetworkTookitTcpdump_setPort;
//
// accessor is AST_NetworkTookitTcpdump.prototype.getInterface
// element get for interface
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for interface
// setter function is is AST_NetworkTookitTcpdump.prototype.setInterface
//
function AST_NetworkTookitTcpdump_getInterface() { return this._interface;}

AST_NetworkTookitTcpdump.prototype.getInterface = AST_NetworkTookitTcpdump_getInterface;

function AST_NetworkTookitTcpdump_setInterface(value) { this._interface = value;}

AST_NetworkTookitTcpdump.prototype.setInterface = AST_NetworkTookitTcpdump_setInterface;
//
// Serialize {urn:ast}NetworkTookitTcpdump
//
function AST_NetworkTookitTcpdump_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._lines.serialize(cxfjsutils, 'jns0:lines', null);
    }
    // block for local variables
    {
     if (this._drc != null) {
      if (this._drc == null) {
       xml = xml + '<jns0:drc xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:drc>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._drc);
       xml = xml + '</jns0:drc>';
      }
     }
    }
    // block for local variables
    {
     if (this._src != null) {
      if (this._src == null) {
       xml = xml + '<jns0:src xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:src>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._src);
       xml = xml + '</jns0:src>';
      }
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:port>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._port);
     xml = xml + '</jns0:port>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:interface>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._interface);
     xml = xml + '</jns0:interface>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_NetworkTookitTcpdump.prototype.serialize = AST_NetworkTookitTcpdump_serialize;

function AST_NetworkTookitTcpdump_deserialize (cxfjsutils, element) {
    var newobject = new AST_NetworkTookitTcpdump();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing lines');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_LineArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setLines(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing drc');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'drc')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setDrc(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing src');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'src')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setSrc(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing port');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setPort(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing interface');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setInterface(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RoutingRulsGetOne
//
function AST_RoutingRulsGetOne () {
    this.typeMarker = 'AST_RoutingRulsGetOne';
    this._combuf = null;
    this._context = null;
    this._routings = null;
    this._ana = null;
    this._sip = null;
    this._group = null;
    this._cidnumber = null;
    this._revcsecret = null;
}

//
// accessor is AST_RoutingRulsGetOne.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_RoutingRulsGetOne.prototype.setCombuf
//
function AST_RoutingRulsGetOne_getCombuf() { return this._combuf;}

AST_RoutingRulsGetOne.prototype.getCombuf = AST_RoutingRulsGetOne_getCombuf;

function AST_RoutingRulsGetOne_setCombuf(value) { this._combuf = value;}

AST_RoutingRulsGetOne.prototype.setCombuf = AST_RoutingRulsGetOne_setCombuf;
//
// accessor is AST_RoutingRulsGetOne.prototype.getContext
// element get for context
// - element type is {urn:ast}RoutingContex
// - required element
//
// element set for context
// setter function is is AST_RoutingRulsGetOne.prototype.setContext
//
function AST_RoutingRulsGetOne_getContext() { return this._context;}

AST_RoutingRulsGetOne.prototype.getContext = AST_RoutingRulsGetOne_getContext;

function AST_RoutingRulsGetOne_setContext(value) { this._context = value;}

AST_RoutingRulsGetOne.prototype.setContext = AST_RoutingRulsGetOne_setContext;
//
// accessor is AST_RoutingRulsGetOne.prototype.getRoutings
// element get for routings
// - element type is {urn:ast}SectionArr
// - required element
//
// element set for routings
// setter function is is AST_RoutingRulsGetOne.prototype.setRoutings
//
function AST_RoutingRulsGetOne_getRoutings() { return this._routings;}

AST_RoutingRulsGetOne.prototype.getRoutings = AST_RoutingRulsGetOne_getRoutings;

function AST_RoutingRulsGetOne_setRoutings(value) { this._routings = value;}

AST_RoutingRulsGetOne.prototype.setRoutings = AST_RoutingRulsGetOne_setRoutings;
//
// accessor is AST_RoutingRulsGetOne.prototype.getAna
// element get for ana
// - element type is {urn:ast}RoutingAnaArr
// - required element
//
// element set for ana
// setter function is is AST_RoutingRulsGetOne.prototype.setAna
//
function AST_RoutingRulsGetOne_getAna() { return this._ana;}

AST_RoutingRulsGetOne.prototype.getAna = AST_RoutingRulsGetOne_getAna;

function AST_RoutingRulsGetOne_setAna(value) { this._ana = value;}

AST_RoutingRulsGetOne.prototype.setAna = AST_RoutingRulsGetOne_setAna;
//
// accessor is AST_RoutingRulsGetOne.prototype.getSip
// element get for sip
// - element type is {urn:ast}SectionArr
// - required element
//
// element set for sip
// setter function is is AST_RoutingRulsGetOne.prototype.setSip
//
function AST_RoutingRulsGetOne_getSip() { return this._sip;}

AST_RoutingRulsGetOne.prototype.getSip = AST_RoutingRulsGetOne_getSip;

function AST_RoutingRulsGetOne_setSip(value) { this._sip = value;}

AST_RoutingRulsGetOne.prototype.setSip = AST_RoutingRulsGetOne_setSip;
//
// accessor is AST_RoutingRulsGetOne.prototype.getGroup
// element get for group
// - element type is {urn:ast}SectionArr
// - required element
//
// element set for group
// setter function is is AST_RoutingRulsGetOne.prototype.setGroup
//
function AST_RoutingRulsGetOne_getGroup() { return this._group;}

AST_RoutingRulsGetOne.prototype.getGroup = AST_RoutingRulsGetOne_getGroup;

function AST_RoutingRulsGetOne_setGroup(value) { this._group = value;}

AST_RoutingRulsGetOne.prototype.setGroup = AST_RoutingRulsGetOne_setGroup;
//
// accessor is AST_RoutingRulsGetOne.prototype.getCidnumber
// element get for cidnumber
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for cidnumber
// setter function is is AST_RoutingRulsGetOne.prototype.setCidnumber
//
function AST_RoutingRulsGetOne_getCidnumber() { return this._cidnumber;}

AST_RoutingRulsGetOne.prototype.getCidnumber = AST_RoutingRulsGetOne_getCidnumber;

function AST_RoutingRulsGetOne_setCidnumber(value) { this._cidnumber = value;}

AST_RoutingRulsGetOne.prototype.setCidnumber = AST_RoutingRulsGetOne_setCidnumber;
//
// accessor is AST_RoutingRulsGetOne.prototype.getRevcsecret
// element get for revcsecret
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for revcsecret
// setter function is is AST_RoutingRulsGetOne.prototype.setRevcsecret
//
function AST_RoutingRulsGetOne_getRevcsecret() { return this._revcsecret;}

AST_RoutingRulsGetOne.prototype.getRevcsecret = AST_RoutingRulsGetOne_getRevcsecret;

function AST_RoutingRulsGetOne_setRevcsecret(value) { this._revcsecret = value;}

AST_RoutingRulsGetOne.prototype.setRevcsecret = AST_RoutingRulsGetOne_setRevcsecret;
//
// Serialize {urn:ast}RoutingRulsGetOne
//
function AST_RoutingRulsGetOne_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._context.serialize(cxfjsutils, 'jns0:context', null);
    }
    // block for local variables
    {
     xml = xml + this._routings.serialize(cxfjsutils, 'jns0:routings', null);
    }
    // block for local variables
    {
     xml = xml + this._ana.serialize(cxfjsutils, 'jns0:ana', null);
    }
    // block for local variables
    {
     xml = xml + this._sip.serialize(cxfjsutils, 'jns0:sip', null);
    }
    // block for local variables
    {
     xml = xml + this._group.serialize(cxfjsutils, 'jns0:group', null);
    }
    // block for local variables
    {
     if (this._cidnumber == null) {
      xml = xml + '<jns0:cidnumber xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:cidnumber>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._cidnumber);
      xml = xml + '</jns0:cidnumber>';
     }
    }
    // block for local variables
    {
     if (this._revcsecret != null) {
      if (this._revcsecret == null) {
       xml = xml + '<jns0:revcsecret xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:revcsecret>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._revcsecret);
       xml = xml + '</jns0:revcsecret>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RoutingRulsGetOne.prototype.serialize = AST_RoutingRulsGetOne_serialize;

function AST_RoutingRulsGetOne_deserialize (cxfjsutils, element) {
    var newobject = new AST_RoutingRulsGetOne();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing context');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_RoutingContex_deserialize(cxfjsutils, curElement);
    }
    newobject.setContext(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing routings');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SectionArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setRoutings(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ana');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_RoutingAnaArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setAna(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sip');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SectionArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setSip(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing group');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SectionArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setGroup(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing cidnumber');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setCidnumber(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing revcsecret');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'revcsecret')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setRevcsecret(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}LogMorContextArr
//
function AST_LogMorContextArr () {
    this.typeMarker = 'AST_LogMorContextArr';
    this._item = [];
}

//
// accessor is AST_LogMorContextArr.prototype.getItem
// element get for item
// - element type is {urn:ast}LogMorContext
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_LogMorContextArr.prototype.setItem
//
function AST_LogMorContextArr_getItem() { return this._item;}

AST_LogMorContextArr.prototype.getItem = AST_LogMorContextArr_getItem;

function AST_LogMorContextArr_setItem(value) { this._item = value;}

AST_LogMorContextArr.prototype.setItem = AST_LogMorContextArr_setItem;
//
// Serialize {urn:ast}LogMorContextArr
//
function AST_LogMorContextArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_LogMorContextArr.prototype.serialize = AST_LogMorContextArr_serialize;

function AST_LogMorContextArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_LogMorContextArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_LogMorContext_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AdvAstFileGetOne
//
function AST_AdvAstFileGetOne () {
    this.typeMarker = 'AST_AdvAstFileGetOne';
    this._combuf = null;
    this._result = null;
}

//
// accessor is AST_AdvAstFileGetOne.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_AdvAstFileGetOne.prototype.setCombuf
//
function AST_AdvAstFileGetOne_getCombuf() { return this._combuf;}

AST_AdvAstFileGetOne.prototype.getCombuf = AST_AdvAstFileGetOne_getCombuf;

function AST_AdvAstFileGetOne_setCombuf(value) { this._combuf = value;}

AST_AdvAstFileGetOne.prototype.setCombuf = AST_AdvAstFileGetOne_setCombuf;
//
// accessor is AST_AdvAstFileGetOne.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for result
// setter function is is AST_AdvAstFileGetOne.prototype.setResult
//
function AST_AdvAstFileGetOne_getResult() { return this._result;}

AST_AdvAstFileGetOne.prototype.getResult = AST_AdvAstFileGetOne_getResult;

function AST_AdvAstFileGetOne_setResult(value) { this._result = value;}

AST_AdvAstFileGetOne.prototype.setResult = AST_AdvAstFileGetOne_setResult;
//
// Serialize {urn:ast}AdvAstFileGetOne
//
function AST_AdvAstFileGetOne_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     if (this._result != null) {
      if (this._result == null) {
       xml = xml + '<jns0:result xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:result>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._result);
       xml = xml + '</jns0:result>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AdvAstFileGetOne.prototype.serialize = AST_AdvAstFileGetOne_serialize;

function AST_AdvAstFileGetOne_deserialize (cxfjsutils, element) {
    var newobject = new AST_AdvAstFileGetOne();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'result')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setResult(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}LogGwSysklog
//
function AST_LogGwSysklog () {
    this.typeMarker = 'AST_LogGwSysklog';
    this._syslogsw = '';
    this._sysloglevel = '';
    this._cdrlevel = '';
    this._serverport = 0;
    this._serverip = null;
}

//
// accessor is AST_LogGwSysklog.prototype.getSyslogsw
// element get for syslogsw
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for syslogsw
// setter function is is AST_LogGwSysklog.prototype.setSyslogsw
//
function AST_LogGwSysklog_getSyslogsw() { return this._syslogsw;}

AST_LogGwSysklog.prototype.getSyslogsw = AST_LogGwSysklog_getSyslogsw;

function AST_LogGwSysklog_setSyslogsw(value) { this._syslogsw = value;}

AST_LogGwSysklog.prototype.setSyslogsw = AST_LogGwSysklog_setSyslogsw;
//
// accessor is AST_LogGwSysklog.prototype.getSysloglevel
// element get for sysloglevel
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for sysloglevel
// setter function is is AST_LogGwSysklog.prototype.setSysloglevel
//
function AST_LogGwSysklog_getSysloglevel() { return this._sysloglevel;}

AST_LogGwSysklog.prototype.getSysloglevel = AST_LogGwSysklog_getSysloglevel;

function AST_LogGwSysklog_setSysloglevel(value) { this._sysloglevel = value;}

AST_LogGwSysklog.prototype.setSysloglevel = AST_LogGwSysklog_setSysloglevel;
//
// accessor is AST_LogGwSysklog.prototype.getCdrlevel
// element get for cdrlevel
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for cdrlevel
// setter function is is AST_LogGwSysklog.prototype.setCdrlevel
//
function AST_LogGwSysklog_getCdrlevel() { return this._cdrlevel;}

AST_LogGwSysklog.prototype.getCdrlevel = AST_LogGwSysklog_getCdrlevel;

function AST_LogGwSysklog_setCdrlevel(value) { this._cdrlevel = value;}

AST_LogGwSysklog.prototype.setCdrlevel = AST_LogGwSysklog_setCdrlevel;
//
// accessor is AST_LogGwSysklog.prototype.getServerport
// element get for serverport
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for serverport
// setter function is is AST_LogGwSysklog.prototype.setServerport
//
function AST_LogGwSysklog_getServerport() { return this._serverport;}

AST_LogGwSysklog.prototype.getServerport = AST_LogGwSysklog_getServerport;

function AST_LogGwSysklog_setServerport(value) { this._serverport = value;}

AST_LogGwSysklog.prototype.setServerport = AST_LogGwSysklog_setServerport;
//
// accessor is AST_LogGwSysklog.prototype.getServerip
// element get for serverip
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for serverip
// setter function is is AST_LogGwSysklog.prototype.setServerip
//
function AST_LogGwSysklog_getServerip() { return this._serverip;}

AST_LogGwSysklog.prototype.getServerip = AST_LogGwSysklog_getServerip;

function AST_LogGwSysklog_setServerip(value) { this._serverip = value;}

AST_LogGwSysklog.prototype.setServerip = AST_LogGwSysklog_setServerip;
//
// Serialize {urn:ast}LogGwSysklog
//
function AST_LogGwSysklog_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:syslogsw>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._syslogsw);
     xml = xml + '</jns0:syslogsw>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:sysloglevel>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._sysloglevel);
     xml = xml + '</jns0:sysloglevel>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:cdrlevel>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._cdrlevel);
     xml = xml + '</jns0:cdrlevel>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:serverport>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._serverport);
     xml = xml + '</jns0:serverport>';
    }
    // block for local variables
    {
     if (this._serverip == null) {
      xml = xml + '<jns0:serverip xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:serverip>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._serverip);
      xml = xml + '</jns0:serverip>';
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_LogGwSysklog.prototype.serialize = AST_LogGwSysklog_serialize;

function AST_LogGwSysklog_deserialize (cxfjsutils, element) {
    var newobject = new AST_LogGwSysklog();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing syslogsw');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSyslogsw(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sysloglevel');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSysloglevel(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing cdrlevel');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setCdrlevel(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing serverport');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setServerport(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing serverip');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setServerip(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipFxoBindingSaveArr
//
function AST_SipFxoBindingSaveArr () {
    this.typeMarker = 'AST_SipFxoBindingSaveArr';
    this._item = [];
}

//
// accessor is AST_SipFxoBindingSaveArr.prototype.getItem
// element get for item
// - element type is {urn:ast}SipFxoBindingSave
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_SipFxoBindingSaveArr.prototype.setItem
//
function AST_SipFxoBindingSaveArr_getItem() { return this._item;}

AST_SipFxoBindingSaveArr.prototype.getItem = AST_SipFxoBindingSaveArr_getItem;

function AST_SipFxoBindingSaveArr_setItem(value) { this._item = value;}

AST_SipFxoBindingSaveArr.prototype.setItem = AST_SipFxoBindingSaveArr_setItem;
//
// Serialize {urn:ast}SipFxoBindingSaveArr
//
function AST_SipFxoBindingSaveArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipFxoBindingSaveArr.prototype.serialize = AST_SipFxoBindingSaveArr_serialize;

function AST_SipFxoBindingSaveArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipFxoBindingSaveArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_SipFxoBindingSave_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}NetworkEthName
//
function AST_NetworkEthName () {
    this.typeMarker = 'AST_NetworkEthName';
    this._item = [];
}

//
// accessor is AST_NetworkEthName.prototype.getItem
// element get for item
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_NetworkEthName.prototype.setItem
//
function AST_NetworkEthName_getItem() { return this._item;}

AST_NetworkEthName.prototype.getItem = AST_NetworkEthName_getItem;

function AST_NetworkEthName_setItem(value) { this._item = value;}

AST_NetworkEthName.prototype.setItem = AST_NetworkEthName_setItem;
//
// Serialize {urn:ast}NetworkEthName
//
function AST_NetworkEthName_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + '<jns0:item>';
        xml = xml + cxfjsutils.escapeXmlEntities(this._item[ax]);
        xml = xml + '</jns0:item>';
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_NetworkEthName.prototype.serialize = AST_NetworkEthName_serialize;

function AST_NetworkEthName_deserialize (cxfjsutils, element) {
    var newobject = new AST_NetworkEthName();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       value = cxfjsutils.getNodeText(curElement);
       arrayItem = value;
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipBatchArr
//
function AST_SipBatchArr () {
    this.typeMarker = 'AST_SipBatchArr';
    this._item = [];
}

//
// accessor is AST_SipBatchArr.prototype.getItem
// element get for item
// - element type is {urn:ast}SipBatch
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_SipBatchArr.prototype.setItem
//
function AST_SipBatchArr_getItem() { return this._item;}

AST_SipBatchArr.prototype.getItem = AST_SipBatchArr_getItem;

function AST_SipBatchArr_setItem(value) { this._item = value;}

AST_SipBatchArr.prototype.setItem = AST_SipBatchArr_setItem;
//
// Serialize {urn:ast}SipBatchArr
//
function AST_SipBatchArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipBatchArr.prototype.serialize = AST_SipBatchArr_serialize;

function AST_SipBatchArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipBatchArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_SipBatch_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipFxoBindingSave
//
function AST_SipFxoBindingSave () {
    this.typeMarker = 'AST_SipFxoBindingSave';
    this._name = null;
    this._forwardnumber = null;
    this._associatedchnnl = null;
    this._callerid = null;
    this._order = '';
}

//
// accessor is AST_SipFxoBindingSave.prototype.getName
// element get for name
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for name
// setter function is is AST_SipFxoBindingSave.prototype.setName
//
function AST_SipFxoBindingSave_getName() { return this._name;}

AST_SipFxoBindingSave.prototype.getName = AST_SipFxoBindingSave_getName;

function AST_SipFxoBindingSave_setName(value) { this._name = value;}

AST_SipFxoBindingSave.prototype.setName = AST_SipFxoBindingSave_setName;
//
// accessor is AST_SipFxoBindingSave.prototype.getForwardnumber
// element get for forwardnumber
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for forwardnumber
// setter function is is AST_SipFxoBindingSave.prototype.setForwardnumber
//
function AST_SipFxoBindingSave_getForwardnumber() { return this._forwardnumber;}

AST_SipFxoBindingSave.prototype.getForwardnumber = AST_SipFxoBindingSave_getForwardnumber;

function AST_SipFxoBindingSave_setForwardnumber(value) { this._forwardnumber = value;}

AST_SipFxoBindingSave.prototype.setForwardnumber = AST_SipFxoBindingSave_setForwardnumber;
//
// accessor is AST_SipFxoBindingSave.prototype.getAssociatedchnnl
// element get for associatedchnnl
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for associatedchnnl
// setter function is is AST_SipFxoBindingSave.prototype.setAssociatedchnnl
//
function AST_SipFxoBindingSave_getAssociatedchnnl() { return this._associatedchnnl;}

AST_SipFxoBindingSave.prototype.getAssociatedchnnl = AST_SipFxoBindingSave_getAssociatedchnnl;

function AST_SipFxoBindingSave_setAssociatedchnnl(value) { this._associatedchnnl = value;}

AST_SipFxoBindingSave.prototype.setAssociatedchnnl = AST_SipFxoBindingSave_setAssociatedchnnl;
//
// accessor is AST_SipFxoBindingSave.prototype.getCallerid
// element get for callerid
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for callerid
// setter function is is AST_SipFxoBindingSave.prototype.setCallerid
//
function AST_SipFxoBindingSave_getCallerid() { return this._callerid;}

AST_SipFxoBindingSave.prototype.getCallerid = AST_SipFxoBindingSave_getCallerid;

function AST_SipFxoBindingSave_setCallerid(value) { this._callerid = value;}

AST_SipFxoBindingSave.prototype.setCallerid = AST_SipFxoBindingSave_setCallerid;
//
// accessor is AST_SipFxoBindingSave.prototype.getOrder
// element get for order
// - element type is {http://www.w3.org/2001/XMLSchema}short
// - required element
//
// element set for order
// setter function is is AST_SipFxoBindingSave.prototype.setOrder
//
function AST_SipFxoBindingSave_getOrder() { return this._order;}

AST_SipFxoBindingSave.prototype.getOrder = AST_SipFxoBindingSave_getOrder;

function AST_SipFxoBindingSave_setOrder(value) { this._order = value;}

AST_SipFxoBindingSave.prototype.setOrder = AST_SipFxoBindingSave_setOrder;
//
// Serialize {urn:ast}SipFxoBindingSave
//
function AST_SipFxoBindingSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._name == null) {
      xml = xml + '<jns0:name xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:name>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._name);
      xml = xml + '</jns0:name>';
     }
    }
    // block for local variables
    {
     if (this._forwardnumber == null) {
      xml = xml + '<jns0:forwardnumber xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:forwardnumber>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._forwardnumber);
      xml = xml + '</jns0:forwardnumber>';
     }
    }
    // block for local variables
    {
     if (this._associatedchnnl == null) {
      xml = xml + '<jns0:associatedchnnl xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:associatedchnnl>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._associatedchnnl);
      xml = xml + '</jns0:associatedchnnl>';
     }
    }
    // block for local variables
    {
     if (this._callerid == null) {
      xml = xml + '<jns0:callerid xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:callerid>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._callerid);
      xml = xml + '</jns0:callerid>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:order>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._order);
     xml = xml + '</jns0:order>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipFxoBindingSave.prototype.serialize = AST_SipFxoBindingSave_serialize;

function AST_SipFxoBindingSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipFxoBindingSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing name');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setName(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing forwardnumber');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setForwardnumber(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing associatedchnnl');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setAssociatedchnnl(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing callerid');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setCallerid(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing order');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setOrder(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}Sip
//
function AST_Sip () {
    this.typeMarker = 'AST_Sip';
    this._section = null;
    this._username = null;
    this._host = null;
    this._order = '';
    this._registration = '';
}

//
// accessor is AST_Sip.prototype.getSection
// element get for section
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for section
// setter function is is AST_Sip.prototype.setSection
//
function AST_Sip_getSection() { return this._section;}

AST_Sip.prototype.getSection = AST_Sip_getSection;

function AST_Sip_setSection(value) { this._section = value;}

AST_Sip.prototype.setSection = AST_Sip_setSection;
//
// accessor is AST_Sip.prototype.getUsername
// element get for username
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for username
// setter function is is AST_Sip.prototype.setUsername
//
function AST_Sip_getUsername() { return this._username;}

AST_Sip.prototype.getUsername = AST_Sip_getUsername;

function AST_Sip_setUsername(value) { this._username = value;}

AST_Sip.prototype.setUsername = AST_Sip_setUsername;
//
// accessor is AST_Sip.prototype.getHost
// element get for host
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for host
// setter function is is AST_Sip.prototype.setHost
//
function AST_Sip_getHost() { return this._host;}

AST_Sip.prototype.getHost = AST_Sip_getHost;

function AST_Sip_setHost(value) { this._host = value;}

AST_Sip.prototype.setHost = AST_Sip_setHost;
//
// accessor is AST_Sip.prototype.getOrder
// element get for order
// - element type is {http://www.w3.org/2001/XMLSchema}short
// - required element
//
// element set for order
// setter function is is AST_Sip.prototype.setOrder
//
function AST_Sip_getOrder() { return this._order;}

AST_Sip.prototype.getOrder = AST_Sip_getOrder;

function AST_Sip_setOrder(value) { this._order = value;}

AST_Sip.prototype.setOrder = AST_Sip_setOrder;
//
// accessor is AST_Sip.prototype.getRegistration
// element get for registration
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for registration
// setter function is is AST_Sip.prototype.setRegistration
//
function AST_Sip_getRegistration() { return this._registration;}

AST_Sip.prototype.getRegistration = AST_Sip_getRegistration;

function AST_Sip_setRegistration(value) { this._registration = value;}

AST_Sip.prototype.setRegistration = AST_Sip_setRegistration;
//
// Serialize {urn:ast}Sip
//
function AST_Sip_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._section == null) {
      xml = xml + '<jns0:section xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:section>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._section);
      xml = xml + '</jns0:section>';
     }
    }
    // block for local variables
    {
     if (this._username == null) {
      xml = xml + '<jns0:username xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:username>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._username);
      xml = xml + '</jns0:username>';
     }
    }
    // block for local variables
    {
     if (this._host == null) {
      xml = xml + '<jns0:host xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:host>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._host);
      xml = xml + '</jns0:host>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:order>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._order);
     xml = xml + '</jns0:order>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:registration>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._registration);
     xml = xml + '</jns0:registration>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_Sip.prototype.serialize = AST_Sip_serialize;

function AST_Sip_deserialize (cxfjsutils, element) {
    var newobject = new AST_Sip();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing section');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSection(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing username');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setUsername(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing host');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setHost(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing order');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setOrder(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing registration');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setRegistration(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SnmpSave
//
function AST_SnmpSave () {
    this.typeMarker = 'AST_SnmpSave';
    this._snmp = null;
}

//
// accessor is AST_SnmpSave.prototype.getSnmp
// element get for snmp
// - element type is {urn:ast}SnmpConfParam
// - required element
//
// element set for snmp
// setter function is is AST_SnmpSave.prototype.setSnmp
//
function AST_SnmpSave_getSnmp() { return this._snmp;}

AST_SnmpSave.prototype.getSnmp = AST_SnmpSave_getSnmp;

function AST_SnmpSave_setSnmp(value) { this._snmp = value;}

AST_SnmpSave.prototype.setSnmp = AST_SnmpSave_setSnmp;
//
// Serialize {urn:ast}SnmpSave
//
function AST_SnmpSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._snmp.serialize(cxfjsutils, 'jns0:snmp', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SnmpSave.prototype.serialize = AST_SnmpSave_serialize;

function AST_SnmpSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_SnmpSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing snmp');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SnmpConfParam_deserialize(cxfjsutils, curElement);
    }
    newobject.setSnmp(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}UcpNetworkSwitchGet
//
function AST_UcpNetworkSwitchGet () {
    this.typeMarker = 'AST_UcpNetworkSwitchGet';
    this._combuf = null;
    this._firewall = null;
}

//
// accessor is AST_UcpNetworkSwitchGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_UcpNetworkSwitchGet.prototype.setCombuf
//
function AST_UcpNetworkSwitchGet_getCombuf() { return this._combuf;}

AST_UcpNetworkSwitchGet.prototype.getCombuf = AST_UcpNetworkSwitchGet_getCombuf;

function AST_UcpNetworkSwitchGet_setCombuf(value) { this._combuf = value;}

AST_UcpNetworkSwitchGet.prototype.setCombuf = AST_UcpNetworkSwitchGet_setCombuf;
//
// accessor is AST_UcpNetworkSwitchGet.prototype.getFirewall
// element get for firewall
// - element type is {urn:ast}UcpNetworkSwitch
// - required element
//
// element set for firewall
// setter function is is AST_UcpNetworkSwitchGet.prototype.setFirewall
//
function AST_UcpNetworkSwitchGet_getFirewall() { return this._firewall;}

AST_UcpNetworkSwitchGet.prototype.getFirewall = AST_UcpNetworkSwitchGet_getFirewall;

function AST_UcpNetworkSwitchGet_setFirewall(value) { this._firewall = value;}

AST_UcpNetworkSwitchGet.prototype.setFirewall = AST_UcpNetworkSwitchGet_setFirewall;
//
// Serialize {urn:ast}UcpNetworkSwitchGet
//
function AST_UcpNetworkSwitchGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._firewall.serialize(cxfjsutils, 'jns0:firewall', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_UcpNetworkSwitchGet.prototype.serialize = AST_UcpNetworkSwitchGet_serialize;

function AST_UcpNetworkSwitchGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_UcpNetworkSwitchGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing firewall');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_UcpNetworkSwitch_deserialize(cxfjsutils, curElement);
    }
    newobject.setFirewall(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RegisterParaRead
//
function AST_RegisterParaRead () {
    this.typeMarker = 'AST_RegisterParaRead';
    this._channel = 0;
    this._number = 0;
}

//
// accessor is AST_RegisterParaRead.prototype.getChannel
// element get for channel
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for channel
// setter function is is AST_RegisterParaRead.prototype.setChannel
//
function AST_RegisterParaRead_getChannel() { return this._channel;}

AST_RegisterParaRead.prototype.getChannel = AST_RegisterParaRead_getChannel;

function AST_RegisterParaRead_setChannel(value) { this._channel = value;}

AST_RegisterParaRead.prototype.setChannel = AST_RegisterParaRead_setChannel;
//
// accessor is AST_RegisterParaRead.prototype.getNumber
// element get for number
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for number
// setter function is is AST_RegisterParaRead.prototype.setNumber
//
function AST_RegisterParaRead_getNumber() { return this._number;}

AST_RegisterParaRead.prototype.getNumber = AST_RegisterParaRead_getNumber;

function AST_RegisterParaRead_setNumber(value) { this._number = value;}

AST_RegisterParaRead.prototype.setNumber = AST_RegisterParaRead_setNumber;
//
// Serialize {urn:ast}RegisterParaRead
//
function AST_RegisterParaRead_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:channel>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._channel);
     xml = xml + '</jns0:channel>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:number>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._number);
     xml = xml + '</jns0:number>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RegisterParaRead.prototype.serialize = AST_RegisterParaRead_serialize;

function AST_RegisterParaRead_deserialize (cxfjsutils, element) {
    var newobject = new AST_RegisterParaRead();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing channel');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setChannel(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing number');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setNumber(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RegisterPara
//
function AST_RegisterPara () {
    this.typeMarker = 'AST_RegisterPara';
    this._channel = 0;
    this._number = 0;
    this._value = 0;
}

//
// accessor is AST_RegisterPara.prototype.getChannel
// element get for channel
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for channel
// setter function is is AST_RegisterPara.prototype.setChannel
//
function AST_RegisterPara_getChannel() { return this._channel;}

AST_RegisterPara.prototype.getChannel = AST_RegisterPara_getChannel;

function AST_RegisterPara_setChannel(value) { this._channel = value;}

AST_RegisterPara.prototype.setChannel = AST_RegisterPara_setChannel;
//
// accessor is AST_RegisterPara.prototype.getNumber
// element get for number
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for number
// setter function is is AST_RegisterPara.prototype.setNumber
//
function AST_RegisterPara_getNumber() { return this._number;}

AST_RegisterPara.prototype.getNumber = AST_RegisterPara_getNumber;

function AST_RegisterPara_setNumber(value) { this._number = value;}

AST_RegisterPara.prototype.setNumber = AST_RegisterPara_setNumber;
//
// accessor is AST_RegisterPara.prototype.getValue
// element get for value
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for value
// setter function is is AST_RegisterPara.prototype.setValue
//
function AST_RegisterPara_getValue() { return this._value;}

AST_RegisterPara.prototype.getValue = AST_RegisterPara_getValue;

function AST_RegisterPara_setValue(value) { this._value = value;}

AST_RegisterPara.prototype.setValue = AST_RegisterPara_setValue;
//
// Serialize {urn:ast}RegisterPara
//
function AST_RegisterPara_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:channel>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._channel);
     xml = xml + '</jns0:channel>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:number>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._number);
     xml = xml + '</jns0:number>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:value>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._value);
     xml = xml + '</jns0:value>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RegisterPara.prototype.serialize = AST_RegisterPara_serialize;

function AST_RegisterPara_deserialize (cxfjsutils, element) {
    var newobject = new AST_RegisterPara();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing channel');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setChannel(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing number');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setNumber(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing value');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setValue(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}ProvFxsSpeedDial
//
function AST_ProvFxsSpeedDial () {
    this.typeMarker = 'AST_ProvFxsSpeedDial';
    this._port = 0;
    this._DialArr = null;
}

//
// accessor is AST_ProvFxsSpeedDial.prototype.getPort
// element get for port
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for port
// setter function is is AST_ProvFxsSpeedDial.prototype.setPort
//
function AST_ProvFxsSpeedDial_getPort() { return this._port;}

AST_ProvFxsSpeedDial.prototype.getPort = AST_ProvFxsSpeedDial_getPort;

function AST_ProvFxsSpeedDial_setPort(value) { this._port = value;}

AST_ProvFxsSpeedDial.prototype.setPort = AST_ProvFxsSpeedDial_setPort;
//
// accessor is AST_ProvFxsSpeedDial.prototype.getDialArr
// element get for DialArr
// - element type is {urn:ast}FxsSpeeddialArr
// - required element
//
// element set for DialArr
// setter function is is AST_ProvFxsSpeedDial.prototype.setDialArr
//
function AST_ProvFxsSpeedDial_getDialArr() { return this._DialArr;}

AST_ProvFxsSpeedDial.prototype.getDialArr = AST_ProvFxsSpeedDial_getDialArr;

function AST_ProvFxsSpeedDial_setDialArr(value) { this._DialArr = value;}

AST_ProvFxsSpeedDial.prototype.setDialArr = AST_ProvFxsSpeedDial_setDialArr;
//
// Serialize {urn:ast}ProvFxsSpeedDial
//
function AST_ProvFxsSpeedDial_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:port>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._port);
     xml = xml + '</jns0:port>';
    }
    // block for local variables
    {
     xml = xml + this._DialArr.serialize(cxfjsutils, 'jns0:DialArr', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_ProvFxsSpeedDial.prototype.serialize = AST_ProvFxsSpeedDial_serialize;

function AST_ProvFxsSpeedDial_deserialize (cxfjsutils, element) {
    var newobject = new AST_ProvFxsSpeedDial();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing port');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setPort(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing DialArr');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_FxsSpeeddialArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setDialArr(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AlgGlbGetOne
//
function AST_AlgGlbGetOne () {
    this.typeMarker = 'AST_AlgGlbGetOne';
    this._glb = null;
}

//
// accessor is AST_AlgGlbGetOne.prototype.getGlb
// element get for glb
// - element type is {urn:ast}AlgGlb
// - required element
//
// element set for glb
// setter function is is AST_AlgGlbGetOne.prototype.setGlb
//
function AST_AlgGlbGetOne_getGlb() { return this._glb;}

AST_AlgGlbGetOne.prototype.getGlb = AST_AlgGlbGetOne_getGlb;

function AST_AlgGlbGetOne_setGlb(value) { this._glb = value;}

AST_AlgGlbGetOne.prototype.setGlb = AST_AlgGlbGetOne_setGlb;
//
// Serialize {urn:ast}AlgGlbGetOne
//
function AST_AlgGlbGetOne_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._glb.serialize(cxfjsutils, 'jns0:glb', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AlgGlbGetOne.prototype.serialize = AST_AlgGlbGetOne_serialize;

function AST_AlgGlbGetOne_deserialize (cxfjsutils, element) {
    var newobject = new AST_AlgGlbGetOne();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing glb');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_AlgGlb_deserialize(cxfjsutils, curElement);
    }
    newobject.setGlb(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SysToolGet
//
function AST_SysToolGet () {
    this.typeMarker = 'AST_SysToolGet';
    this._combuf = null;
    this._tool = null;
}

//
// accessor is AST_SysToolGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_SysToolGet.prototype.setCombuf
//
function AST_SysToolGet_getCombuf() { return this._combuf;}

AST_SysToolGet.prototype.getCombuf = AST_SysToolGet_getCombuf;

function AST_SysToolGet_setCombuf(value) { this._combuf = value;}

AST_SysToolGet.prototype.setCombuf = AST_SysToolGet_setCombuf;
//
// accessor is AST_SysToolGet.prototype.getTool
// element get for tool
// - element type is {urn:ast}SysTool
// - required element
//
// element set for tool
// setter function is is AST_SysToolGet.prototype.setTool
//
function AST_SysToolGet_getTool() { return this._tool;}

AST_SysToolGet.prototype.getTool = AST_SysToolGet_getTool;

function AST_SysToolGet_setTool(value) { this._tool = value;}

AST_SysToolGet.prototype.setTool = AST_SysToolGet_setTool;
//
// Serialize {urn:ast}SysToolGet
//
function AST_SysToolGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._tool.serialize(cxfjsutils, 'jns0:tool', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SysToolGet.prototype.serialize = AST_SysToolGet_serialize;

function AST_SysToolGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_SysToolGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing tool');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SysTool_deserialize(cxfjsutils, curElement);
    }
    newobject.setTool(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AdvTr069Get
//
function AST_AdvTr069Get () {
    this.typeMarker = 'AST_AdvTr069Get';
    this._combuf = null;
    this._general = null;
}

//
// accessor is AST_AdvTr069Get.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_AdvTr069Get.prototype.setCombuf
//
function AST_AdvTr069Get_getCombuf() { return this._combuf;}

AST_AdvTr069Get.prototype.getCombuf = AST_AdvTr069Get_getCombuf;

function AST_AdvTr069Get_setCombuf(value) { this._combuf = value;}

AST_AdvTr069Get.prototype.setCombuf = AST_AdvTr069Get_setCombuf;
//
// accessor is AST_AdvTr069Get.prototype.getGeneral
// element get for general
// - element type is {urn:ast}AdvTr069General
// - required element
//
// element set for general
// setter function is is AST_AdvTr069Get.prototype.setGeneral
//
function AST_AdvTr069Get_getGeneral() { return this._general;}

AST_AdvTr069Get.prototype.getGeneral = AST_AdvTr069Get_getGeneral;

function AST_AdvTr069Get_setGeneral(value) { this._general = value;}

AST_AdvTr069Get.prototype.setGeneral = AST_AdvTr069Get_setGeneral;
//
// Serialize {urn:ast}AdvTr069Get
//
function AST_AdvTr069Get_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._general.serialize(cxfjsutils, 'jns0:general', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AdvTr069Get.prototype.serialize = AST_AdvTr069Get_serialize;

function AST_AdvTr069Get_deserialize (cxfjsutils, element) {
    var newobject = new AST_AdvTr069Get();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing general');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_AdvTr069General_deserialize(cxfjsutils, curElement);
    }
    newobject.setGeneral(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AnaFxs
//
function AST_AnaFxs () {
    this.typeMarker = 'AST_AnaFxs';
    this._channel = null;
    this._name = null;
    this._associatedchnnl = null;
}

//
// accessor is AST_AnaFxs.prototype.getChannel
// element get for channel
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for channel
// setter function is is AST_AnaFxs.prototype.setChannel
//
function AST_AnaFxs_getChannel() { return this._channel;}

AST_AnaFxs.prototype.getChannel = AST_AnaFxs_getChannel;

function AST_AnaFxs_setChannel(value) { this._channel = value;}

AST_AnaFxs.prototype.setChannel = AST_AnaFxs_setChannel;
//
// accessor is AST_AnaFxs.prototype.getName
// element get for name
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for name
// setter function is is AST_AnaFxs.prototype.setName
//
function AST_AnaFxs_getName() { return this._name;}

AST_AnaFxs.prototype.getName = AST_AnaFxs_getName;

function AST_AnaFxs_setName(value) { this._name = value;}

AST_AnaFxs.prototype.setName = AST_AnaFxs_setName;
//
// accessor is AST_AnaFxs.prototype.getAssociatedchnnl
// element get for associatedchnnl
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for associatedchnnl
// setter function is is AST_AnaFxs.prototype.setAssociatedchnnl
//
function AST_AnaFxs_getAssociatedchnnl() { return this._associatedchnnl;}

AST_AnaFxs.prototype.getAssociatedchnnl = AST_AnaFxs_getAssociatedchnnl;

function AST_AnaFxs_setAssociatedchnnl(value) { this._associatedchnnl = value;}

AST_AnaFxs.prototype.setAssociatedchnnl = AST_AnaFxs_setAssociatedchnnl;
//
// Serialize {urn:ast}AnaFxs
//
function AST_AnaFxs_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._channel == null) {
      xml = xml + '<jns0:channel xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:channel>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._channel);
      xml = xml + '</jns0:channel>';
     }
    }
    // block for local variables
    {
     if (this._name == null) {
      xml = xml + '<jns0:name xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:name>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._name);
      xml = xml + '</jns0:name>';
     }
    }
    // block for local variables
    {
     if (this._associatedchnnl == null) {
      xml = xml + '<jns0:associatedchnnl xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:associatedchnnl>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._associatedchnnl);
      xml = xml + '</jns0:associatedchnnl>';
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AnaFxs.prototype.serialize = AST_AnaFxs_serialize;

function AST_AnaFxs_deserialize (cxfjsutils, element) {
    var newobject = new AST_AnaFxs();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing channel');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setChannel(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing name');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setName(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing associatedchnnl');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setAssociatedchnnl(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AdvCloudSave
//
function AST_AdvCloudSave () {
    this.typeMarker = 'AST_AdvCloudSave';
    this._general = null;
}

//
// accessor is AST_AdvCloudSave.prototype.getGeneral
// element get for general
// - element type is {urn:ast}AdvCloudGeneral
// - required element
//
// element set for general
// setter function is is AST_AdvCloudSave.prototype.setGeneral
//
function AST_AdvCloudSave_getGeneral() { return this._general;}

AST_AdvCloudSave.prototype.getGeneral = AST_AdvCloudSave_getGeneral;

function AST_AdvCloudSave_setGeneral(value) { this._general = value;}

AST_AdvCloudSave.prototype.setGeneral = AST_AdvCloudSave_setGeneral;
//
// Serialize {urn:ast}AdvCloudSave
//
function AST_AdvCloudSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._general.serialize(cxfjsutils, 'jns0:general', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AdvCloudSave.prototype.serialize = AST_AdvCloudSave_serialize;

function AST_AdvCloudSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AdvCloudSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing general');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_AdvCloudGeneral_deserialize(cxfjsutils, curElement);
    }
    newobject.setGeneral(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}LogSettingGet
//
function AST_LogSettingGet () {
    this.typeMarker = 'AST_LogSettingGet';
    this._combuf = null;
    this._gw = null;
    this._monitor = null;
    this._sysklog = null;
    this._log4gw = null;
}

//
// accessor is AST_LogSettingGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_LogSettingGet.prototype.setCombuf
//
function AST_LogSettingGet_getCombuf() { return this._combuf;}

AST_LogSettingGet.prototype.getCombuf = AST_LogSettingGet_getCombuf;

function AST_LogSettingGet_setCombuf(value) { this._combuf = value;}

AST_LogSettingGet.prototype.setCombuf = AST_LogSettingGet_setCombuf;
//
// accessor is AST_LogSettingGet.prototype.getGw
// element get for gw
// - element type is {urn:ast}LogGwContextArr
// - required element
//
// element set for gw
// setter function is is AST_LogSettingGet.prototype.setGw
//
function AST_LogSettingGet_getGw() { return this._gw;}

AST_LogSettingGet.prototype.getGw = AST_LogSettingGet_getGw;

function AST_LogSettingGet_setGw(value) { this._gw = value;}

AST_LogSettingGet.prototype.setGw = AST_LogSettingGet_setGw;
//
// accessor is AST_LogSettingGet.prototype.getMonitor
// element get for monitor
// - element type is {urn:ast}LogMorContextArr
// - required element
//
// element set for monitor
// setter function is is AST_LogSettingGet.prototype.setMonitor
//
function AST_LogSettingGet_getMonitor() { return this._monitor;}

AST_LogSettingGet.prototype.getMonitor = AST_LogSettingGet_getMonitor;

function AST_LogSettingGet_setMonitor(value) { this._monitor = value;}

AST_LogSettingGet.prototype.setMonitor = AST_LogSettingGet_setMonitor;
//
// accessor is AST_LogSettingGet.prototype.getSysklog
// element get for sysklog
// - element type is {urn:ast}LogGwSysklog
// - required element
//
// element set for sysklog
// setter function is is AST_LogSettingGet.prototype.setSysklog
//
function AST_LogSettingGet_getSysklog() { return this._sysklog;}

AST_LogSettingGet.prototype.getSysklog = AST_LogSettingGet_getSysklog;

function AST_LogSettingGet_setSysklog(value) { this._sysklog = value;}

AST_LogSettingGet.prototype.setSysklog = AST_LogSettingGet_setSysklog;
//
// accessor is AST_LogSettingGet.prototype.getLog4gw
// element get for log4gw
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for log4gw
// setter function is is AST_LogSettingGet.prototype.setLog4gw
//
function AST_LogSettingGet_getLog4gw() { return this._log4gw;}

AST_LogSettingGet.prototype.getLog4gw = AST_LogSettingGet_getLog4gw;

function AST_LogSettingGet_setLog4gw(value) { this._log4gw = value;}

AST_LogSettingGet.prototype.setLog4gw = AST_LogSettingGet_setLog4gw;
//
// Serialize {urn:ast}LogSettingGet
//
function AST_LogSettingGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._gw.serialize(cxfjsutils, 'jns0:gw', null);
    }
    // block for local variables
    {
     xml = xml + this._monitor.serialize(cxfjsutils, 'jns0:monitor', null);
    }
    // block for local variables
    {
     xml = xml + this._sysklog.serialize(cxfjsutils, 'jns0:sysklog', null);
    }
    // block for local variables
    {
     if (this._log4gw != null) {
      if (this._log4gw == null) {
       xml = xml + '<jns0:log4gw xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:log4gw>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._log4gw);
       xml = xml + '</jns0:log4gw>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_LogSettingGet.prototype.serialize = AST_LogSettingGet_serialize;

function AST_LogSettingGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_LogSettingGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing gw');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_LogGwContextArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setGw(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing monitor');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_LogMorContextArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setMonitor(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sysklog');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_LogGwSysklog_deserialize(cxfjsutils, curElement);
    }
    newobject.setSysklog(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing log4gw');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'log4gw')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setLog4gw(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}OEMSettingInfoGet
//
function AST_OEMSettingInfoGet () {
    this.typeMarker = 'AST_OEMSettingInfoGet';
    this._combuf = null;
    this._get = null;
}

//
// accessor is AST_OEMSettingInfoGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_OEMSettingInfoGet.prototype.setCombuf
//
function AST_OEMSettingInfoGet_getCombuf() { return this._combuf;}

AST_OEMSettingInfoGet.prototype.getCombuf = AST_OEMSettingInfoGet_getCombuf;

function AST_OEMSettingInfoGet_setCombuf(value) { this._combuf = value;}

AST_OEMSettingInfoGet.prototype.setCombuf = AST_OEMSettingInfoGet_setCombuf;
//
// accessor is AST_OEMSettingInfoGet.prototype.getGet
// element get for get
// - element type is {urn:ast}OEMSettingInfo
// - required element
//
// element set for get
// setter function is is AST_OEMSettingInfoGet.prototype.setGet
//
function AST_OEMSettingInfoGet_getGet() { return this._get;}

AST_OEMSettingInfoGet.prototype.getGet = AST_OEMSettingInfoGet_getGet;

function AST_OEMSettingInfoGet_setGet(value) { this._get = value;}

AST_OEMSettingInfoGet.prototype.setGet = AST_OEMSettingInfoGet_setGet;
//
// Serialize {urn:ast}OEMSettingInfoGet
//
function AST_OEMSettingInfoGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_OEMSettingInfoGet.prototype.serialize = AST_OEMSettingInfoGet_serialize;

function AST_OEMSettingInfoGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_OEMSettingInfoGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_OEMSettingInfo_deserialize(cxfjsutils, curElement);
    }
    newobject.setGet(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RoutingGroupGetAll
//
function AST_RoutingGroupGetAll () {
    this.typeMarker = 'AST_RoutingGroupGetAll';
    this._combuf = null;
    this._group = null;
}

//
// accessor is AST_RoutingGroupGetAll.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_RoutingGroupGetAll.prototype.setCombuf
//
function AST_RoutingGroupGetAll_getCombuf() { return this._combuf;}

AST_RoutingGroupGetAll.prototype.getCombuf = AST_RoutingGroupGetAll_getCombuf;

function AST_RoutingGroupGetAll_setCombuf(value) { this._combuf = value;}

AST_RoutingGroupGetAll.prototype.setCombuf = AST_RoutingGroupGetAll_setCombuf;
//
// accessor is AST_RoutingGroupGetAll.prototype.getGroup
// element get for group
// - element type is {urn:ast}RoutingGroupArr
// - required element
//
// element set for group
// setter function is is AST_RoutingGroupGetAll.prototype.setGroup
//
function AST_RoutingGroupGetAll_getGroup() { return this._group;}

AST_RoutingGroupGetAll.prototype.getGroup = AST_RoutingGroupGetAll_getGroup;

function AST_RoutingGroupGetAll_setGroup(value) { this._group = value;}

AST_RoutingGroupGetAll.prototype.setGroup = AST_RoutingGroupGetAll_setGroup;
//
// Serialize {urn:ast}RoutingGroupGetAll
//
function AST_RoutingGroupGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._group.serialize(cxfjsutils, 'jns0:group', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RoutingGroupGetAll.prototype.serialize = AST_RoutingGroupGetAll_serialize;

function AST_RoutingGroupGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_RoutingGroupGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing group');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_RoutingGroupArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setGroup(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipOne
//
function AST_SipOne () {
    this.typeMarker = 'AST_SipOne';
    this._section = null;
    this._host = null;
    this._username = null;
}

//
// accessor is AST_SipOne.prototype.getSection
// element get for section
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for section
// setter function is is AST_SipOne.prototype.setSection
//
function AST_SipOne_getSection() { return this._section;}

AST_SipOne.prototype.getSection = AST_SipOne_getSection;

function AST_SipOne_setSection(value) { this._section = value;}

AST_SipOne.prototype.setSection = AST_SipOne_setSection;
//
// accessor is AST_SipOne.prototype.getHost
// element get for host
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for host
// setter function is is AST_SipOne.prototype.setHost
//
function AST_SipOne_getHost() { return this._host;}

AST_SipOne.prototype.getHost = AST_SipOne_getHost;

function AST_SipOne_setHost(value) { this._host = value;}

AST_SipOne.prototype.setHost = AST_SipOne_setHost;
//
// accessor is AST_SipOne.prototype.getUsername
// element get for username
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for username
// setter function is is AST_SipOne.prototype.setUsername
//
function AST_SipOne_getUsername() { return this._username;}

AST_SipOne.prototype.getUsername = AST_SipOne_getUsername;

function AST_SipOne_setUsername(value) { this._username = value;}

AST_SipOne.prototype.setUsername = AST_SipOne_setUsername;
//
// Serialize {urn:ast}SipOne
//
function AST_SipOne_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._section == null) {
      xml = xml + '<jns0:section xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:section>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._section);
      xml = xml + '</jns0:section>';
     }
    }
    // block for local variables
    {
     if (this._host == null) {
      xml = xml + '<jns0:host xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:host>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._host);
      xml = xml + '</jns0:host>';
     }
    }
    // block for local variables
    {
     if (this._username == null) {
      xml = xml + '<jns0:username xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:username>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._username);
      xml = xml + '</jns0:username>';
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipOne.prototype.serialize = AST_SipOne_serialize;

function AST_SipOne_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipOne();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing section');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSection(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing host');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setHost(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing username');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setUsername(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AlgGlbSave
//
function AST_AlgGlbSave () {
    this.typeMarker = 'AST_AlgGlbSave';
    this._global = null;
    this._fax = null;
    this._glb = null;
    this._busytone = null;
}

//
// accessor is AST_AlgGlbSave.prototype.getGlobal
// element get for global
// - element type is {urn:ast}AlgGlobal
// - required element
//
// element set for global
// setter function is is AST_AlgGlbSave.prototype.setGlobal
//
function AST_AlgGlbSave_getGlobal() { return this._global;}

AST_AlgGlbSave.prototype.getGlobal = AST_AlgGlbSave_getGlobal;

function AST_AlgGlbSave_setGlobal(value) { this._global = value;}

AST_AlgGlbSave.prototype.setGlobal = AST_AlgGlbSave_setGlobal;
//
// accessor is AST_AlgGlbSave.prototype.getFax
// element get for fax
// - element type is {urn:ast}AlgFax
// - required element
//
// element set for fax
// setter function is is AST_AlgGlbSave.prototype.setFax
//
function AST_AlgGlbSave_getFax() { return this._fax;}

AST_AlgGlbSave.prototype.getFax = AST_AlgGlbSave_getFax;

function AST_AlgGlbSave_setFax(value) { this._fax = value;}

AST_AlgGlbSave.prototype.setFax = AST_AlgGlbSave_setFax;
//
// accessor is AST_AlgGlbSave.prototype.getGlb
// element get for glb
// - element type is {urn:ast}AlgGlb
// - required element
//
// element set for glb
// setter function is is AST_AlgGlbSave.prototype.setGlb
//
function AST_AlgGlbSave_getGlb() { return this._glb;}

AST_AlgGlbSave.prototype.getGlb = AST_AlgGlbSave_getGlb;

function AST_AlgGlbSave_setGlb(value) { this._glb = value;}

AST_AlgGlbSave.prototype.setGlb = AST_AlgGlbSave_setGlb;
//
// accessor is AST_AlgGlbSave.prototype.getBusytone
// element get for busytone
// - element type is {urn:ast}AlgBusyTone
// - required element
//
// element set for busytone
// setter function is is AST_AlgGlbSave.prototype.setBusytone
//
function AST_AlgGlbSave_getBusytone() { return this._busytone;}

AST_AlgGlbSave.prototype.getBusytone = AST_AlgGlbSave_getBusytone;

function AST_AlgGlbSave_setBusytone(value) { this._busytone = value;}

AST_AlgGlbSave.prototype.setBusytone = AST_AlgGlbSave_setBusytone;
//
// Serialize {urn:ast}AlgGlbSave
//
function AST_AlgGlbSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._global.serialize(cxfjsutils, 'jns0:global', null);
    }
    // block for local variables
    {
     xml = xml + this._fax.serialize(cxfjsutils, 'jns0:fax', null);
    }
    // block for local variables
    {
     xml = xml + this._glb.serialize(cxfjsutils, 'jns0:glb', null);
    }
    // block for local variables
    {
     xml = xml + this._busytone.serialize(cxfjsutils, 'jns0:busytone', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AlgGlbSave.prototype.serialize = AST_AlgGlbSave_serialize;

function AST_AlgGlbSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AlgGlbSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing global');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_AlgGlobal_deserialize(cxfjsutils, curElement);
    }
    newobject.setGlobal(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fax');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_AlgFax_deserialize(cxfjsutils, curElement);
    }
    newobject.setFax(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing glb');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_AlgGlb_deserialize(cxfjsutils, curElement);
    }
    newobject.setGlb(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing busytone');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_AlgBusyTone_deserialize(cxfjsutils, curElement);
    }
    newobject.setBusytone(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RoutingGroupGetNew
//
function AST_RoutingGroupGetNew () {
    this.typeMarker = 'AST_RoutingGroupGetNew';
    this._combuf = null;
    this._sip = null;
    this._ana = null;
    this._groups = null;
}

//
// accessor is AST_RoutingGroupGetNew.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_RoutingGroupGetNew.prototype.setCombuf
//
function AST_RoutingGroupGetNew_getCombuf() { return this._combuf;}

AST_RoutingGroupGetNew.prototype.getCombuf = AST_RoutingGroupGetNew_getCombuf;

function AST_RoutingGroupGetNew_setCombuf(value) { this._combuf = value;}

AST_RoutingGroupGetNew.prototype.setCombuf = AST_RoutingGroupGetNew_setCombuf;
//
// accessor is AST_RoutingGroupGetNew.prototype.getSip
// element get for sip
// - element type is {urn:ast}SectionArr
// - required element
//
// element set for sip
// setter function is is AST_RoutingGroupGetNew.prototype.setSip
//
function AST_RoutingGroupGetNew_getSip() { return this._sip;}

AST_RoutingGroupGetNew.prototype.getSip = AST_RoutingGroupGetNew_getSip;

function AST_RoutingGroupGetNew_setSip(value) { this._sip = value;}

AST_RoutingGroupGetNew.prototype.setSip = AST_RoutingGroupGetNew_setSip;
//
// accessor is AST_RoutingGroupGetNew.prototype.getAna
// element get for ana
// - element type is {urn:ast}RoutingAnaArr
// - required element
//
// element set for ana
// setter function is is AST_RoutingGroupGetNew.prototype.setAna
//
function AST_RoutingGroupGetNew_getAna() { return this._ana;}

AST_RoutingGroupGetNew.prototype.getAna = AST_RoutingGroupGetNew_getAna;

function AST_RoutingGroupGetNew_setAna(value) { this._ana = value;}

AST_RoutingGroupGetNew.prototype.setAna = AST_RoutingGroupGetNew_setAna;
//
// accessor is AST_RoutingGroupGetNew.prototype.getGroups
// element get for groups
// - element type is {urn:ast}SectionArr
// - required element
//
// element set for groups
// setter function is is AST_RoutingGroupGetNew.prototype.setGroups
//
function AST_RoutingGroupGetNew_getGroups() { return this._groups;}

AST_RoutingGroupGetNew.prototype.getGroups = AST_RoutingGroupGetNew_getGroups;

function AST_RoutingGroupGetNew_setGroups(value) { this._groups = value;}

AST_RoutingGroupGetNew.prototype.setGroups = AST_RoutingGroupGetNew_setGroups;
//
// Serialize {urn:ast}RoutingGroupGetNew
//
function AST_RoutingGroupGetNew_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._sip.serialize(cxfjsutils, 'jns0:sip', null);
    }
    // block for local variables
    {
     xml = xml + this._ana.serialize(cxfjsutils, 'jns0:ana', null);
    }
    // block for local variables
    {
     xml = xml + this._groups.serialize(cxfjsutils, 'jns0:groups', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RoutingGroupGetNew.prototype.serialize = AST_RoutingGroupGetNew_serialize;

function AST_RoutingGroupGetNew_deserialize (cxfjsutils, element) {
    var newobject = new AST_RoutingGroupGetNew();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sip');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SectionArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setSip(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ana');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_RoutingAnaArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setAna(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing groups');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SectionArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setGroups(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}common
//
function AST_common () {
    this.typeMarker = 'AST_common';
    this._systemtype = null;
    this._copyright = null;
    this._headerimagepath = null;
    this._footerimagepath = null;
    this._type = 0;
    this._result = 0;
    this._FlexRoutingSw = '';
    this._EthennetPort = '';
    this._features = null;
    this._funcflag = null;
}

//
// accessor is AST_common.prototype.getSystemtype
// element get for systemtype
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for systemtype
// setter function is is AST_common.prototype.setSystemtype
//
function AST_common_getSystemtype() { return this._systemtype;}

AST_common.prototype.getSystemtype = AST_common_getSystemtype;

function AST_common_setSystemtype(value) { this._systemtype = value;}

AST_common.prototype.setSystemtype = AST_common_setSystemtype;
//
// accessor is AST_common.prototype.getCopyright
// element get for copyright
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for copyright
// setter function is is AST_common.prototype.setCopyright
//
function AST_common_getCopyright() { return this._copyright;}

AST_common.prototype.getCopyright = AST_common_getCopyright;

function AST_common_setCopyright(value) { this._copyright = value;}

AST_common.prototype.setCopyright = AST_common_setCopyright;
//
// accessor is AST_common.prototype.getHeaderimagepath
// element get for headerimagepath
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for headerimagepath
// setter function is is AST_common.prototype.setHeaderimagepath
//
function AST_common_getHeaderimagepath() { return this._headerimagepath;}

AST_common.prototype.getHeaderimagepath = AST_common_getHeaderimagepath;

function AST_common_setHeaderimagepath(value) { this._headerimagepath = value;}

AST_common.prototype.setHeaderimagepath = AST_common_setHeaderimagepath;
//
// accessor is AST_common.prototype.getFooterimagepath
// element get for footerimagepath
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for footerimagepath
// setter function is is AST_common.prototype.setFooterimagepath
//
function AST_common_getFooterimagepath() { return this._footerimagepath;}

AST_common.prototype.getFooterimagepath = AST_common_getFooterimagepath;

function AST_common_setFooterimagepath(value) { this._footerimagepath = value;}

AST_common.prototype.setFooterimagepath = AST_common_setFooterimagepath;
//
// accessor is AST_common.prototype.getType
// element get for type
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for type
// setter function is is AST_common.prototype.setType
//
function AST_common_getType() { return this._type;}

AST_common.prototype.getType = AST_common_getType;

function AST_common_setType(value) { this._type = value;}

AST_common.prototype.setType = AST_common_setType;
//
// accessor is AST_common.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_common.prototype.setResult
//
function AST_common_getResult() { return this._result;}

AST_common.prototype.getResult = AST_common_getResult;

function AST_common_setResult(value) { this._result = value;}

AST_common.prototype.setResult = AST_common_setResult;
//
// accessor is AST_common.prototype.getFlexRoutingSw
// element get for FlexRoutingSw
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for FlexRoutingSw
// setter function is is AST_common.prototype.setFlexRoutingSw
//
function AST_common_getFlexRoutingSw() { return this._FlexRoutingSw;}

AST_common.prototype.getFlexRoutingSw = AST_common_getFlexRoutingSw;

function AST_common_setFlexRoutingSw(value) { this._FlexRoutingSw = value;}

AST_common.prototype.setFlexRoutingSw = AST_common_setFlexRoutingSw;
//
// accessor is AST_common.prototype.getEthennetPort
// element get for EthennetPort
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for EthennetPort
// setter function is is AST_common.prototype.setEthennetPort
//
function AST_common_getEthennetPort() { return this._EthennetPort;}

AST_common.prototype.getEthennetPort = AST_common_getEthennetPort;

function AST_common_setEthennetPort(value) { this._EthennetPort = value;}

AST_common.prototype.setEthennetPort = AST_common_setEthennetPort;
//
// accessor is AST_common.prototype.getFeatures
// element get for features
// - element type is {urn:ast}SystemFeatures
// - required element
//
// element set for features
// setter function is is AST_common.prototype.setFeatures
//
function AST_common_getFeatures() { return this._features;}

AST_common.prototype.getFeatures = AST_common_getFeatures;

function AST_common_setFeatures(value) { this._features = value;}

AST_common.prototype.setFeatures = AST_common_setFeatures;
//
// accessor is AST_common.prototype.getFuncflag
// element get for funcflag
// - element type is {urn:ast}SystemFuncFlag
// - required element
//
// element set for funcflag
// setter function is is AST_common.prototype.setFuncflag
//
function AST_common_getFuncflag() { return this._funcflag;}

AST_common.prototype.getFuncflag = AST_common_getFuncflag;

function AST_common_setFuncflag(value) { this._funcflag = value;}

AST_common.prototype.setFuncflag = AST_common_setFuncflag;
//
// Serialize {urn:ast}common
//
function AST_common_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._systemtype == null) {
      xml = xml + '<jns0:systemtype xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:systemtype>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._systemtype);
      xml = xml + '</jns0:systemtype>';
     }
    }
    // block for local variables
    {
     if (this._copyright == null) {
      xml = xml + '<jns0:copyright xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:copyright>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._copyright);
      xml = xml + '</jns0:copyright>';
     }
    }
    // block for local variables
    {
     if (this._headerimagepath == null) {
      xml = xml + '<jns0:headerimagepath xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:headerimagepath>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._headerimagepath);
      xml = xml + '</jns0:headerimagepath>';
     }
    }
    // block for local variables
    {
     if (this._footerimagepath == null) {
      xml = xml + '<jns0:footerimagepath xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:footerimagepath>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._footerimagepath);
      xml = xml + '</jns0:footerimagepath>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:type>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._type);
     xml = xml + '</jns0:type>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:FlexRoutingSw>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._FlexRoutingSw);
     xml = xml + '</jns0:FlexRoutingSw>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:EthennetPort>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._EthennetPort);
     xml = xml + '</jns0:EthennetPort>';
    }
    // block for local variables
    {
     xml = xml + this._features.serialize(cxfjsutils, 'jns0:features', null);
    }
    // block for local variables
    {
     xml = xml + this._funcflag.serialize(cxfjsutils, 'jns0:funcflag', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_common.prototype.serialize = AST_common_serialize;

function AST_common_deserialize (cxfjsutils, element) {
    var newobject = new AST_common();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing systemtype');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSystemtype(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing copyright');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setCopyright(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing headerimagepath');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setHeaderimagepath(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing footerimagepath');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setFooterimagepath(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing type');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setType(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing FlexRoutingSw');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setFlexRoutingSw(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing EthennetPort');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setEthennetPort(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing features');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SystemFeatures_deserialize(cxfjsutils, curElement);
    }
    newobject.setFeatures(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing funcflag');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SystemFuncFlag_deserialize(cxfjsutils, curElement);
    }
    newobject.setFuncflag(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipKeyArr
//
function AST_SipKeyArr () {
    this.typeMarker = 'AST_SipKeyArr';
    this._item = [];
}

//
// accessor is AST_SipKeyArr.prototype.getItem
// element get for item
// - element type is {urn:ast}SipKey
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_SipKeyArr.prototype.setItem
//
function AST_SipKeyArr_getItem() { return this._item;}

AST_SipKeyArr.prototype.getItem = AST_SipKeyArr_getItem;

function AST_SipKeyArr_setItem(value) { this._item = value;}

AST_SipKeyArr.prototype.setItem = AST_SipKeyArr_setItem;
//
// Serialize {urn:ast}SipKeyArr
//
function AST_SipKeyArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipKeyArr.prototype.serialize = AST_SipKeyArr_serialize;

function AST_SipKeyArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipKeyArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_SipKey_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipArr
//
function AST_SipArr () {
    this.typeMarker = 'AST_SipArr';
    this._item = [];
}

//
// accessor is AST_SipArr.prototype.getItem
// element get for item
// - element type is {urn:ast}Sip
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_SipArr.prototype.setItem
//
function AST_SipArr_getItem() { return this._item;}

AST_SipArr.prototype.getItem = AST_SipArr_getItem;

function AST_SipArr_setItem(value) { this._item = value;}

AST_SipArr.prototype.setItem = AST_SipArr_setItem;
//
// Serialize {urn:ast}SipArr
//
function AST_SipArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipArr.prototype.serialize = AST_SipArr_serialize;

function AST_SipArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_Sip_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AutoProvisionSave
//
function AST_AutoProvisionSave () {
    this.typeMarker = 'AST_AutoProvisionSave';
    this._autoupdate = null;
}

//
// accessor is AST_AutoProvisionSave.prototype.getAutoupdate
// element get for autoupdate
// - element type is {urn:ast}AutoProvision
// - required element
//
// element set for autoupdate
// setter function is is AST_AutoProvisionSave.prototype.setAutoupdate
//
function AST_AutoProvisionSave_getAutoupdate() { return this._autoupdate;}

AST_AutoProvisionSave.prototype.getAutoupdate = AST_AutoProvisionSave_getAutoupdate;

function AST_AutoProvisionSave_setAutoupdate(value) { this._autoupdate = value;}

AST_AutoProvisionSave.prototype.setAutoupdate = AST_AutoProvisionSave_setAutoupdate;
//
// Serialize {urn:ast}AutoProvisionSave
//
function AST_AutoProvisionSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._autoupdate.serialize(cxfjsutils, 'jns0:autoupdate', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AutoProvisionSave.prototype.serialize = AST_AutoProvisionSave_serialize;

function AST_AutoProvisionSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AutoProvisionSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing autoupdate');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_AutoProvision_deserialize(cxfjsutils, curElement);
    }
    newobject.setAutoupdate(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipKey
//
function AST_SipKey () {
    this.typeMarker = 'AST_SipKey';
    this._section = null;
    this._keyname = null;
    this._ipaddress = null;
    this._organizetion = null;
    this._password = null;
    this._type = '';
}

//
// accessor is AST_SipKey.prototype.getSection
// element get for section
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for section
// setter function is is AST_SipKey.prototype.setSection
//
function AST_SipKey_getSection() { return this._section;}

AST_SipKey.prototype.getSection = AST_SipKey_getSection;

function AST_SipKey_setSection(value) { this._section = value;}

AST_SipKey.prototype.setSection = AST_SipKey_setSection;
//
// accessor is AST_SipKey.prototype.getKeyname
// element get for keyname
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for keyname
// setter function is is AST_SipKey.prototype.setKeyname
//
function AST_SipKey_getKeyname() { return this._keyname;}

AST_SipKey.prototype.getKeyname = AST_SipKey_getKeyname;

function AST_SipKey_setKeyname(value) { this._keyname = value;}

AST_SipKey.prototype.setKeyname = AST_SipKey_setKeyname;
//
// accessor is AST_SipKey.prototype.getIpaddress
// element get for ipaddress
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for ipaddress
// setter function is is AST_SipKey.prototype.setIpaddress
//
function AST_SipKey_getIpaddress() { return this._ipaddress;}

AST_SipKey.prototype.getIpaddress = AST_SipKey_getIpaddress;

function AST_SipKey_setIpaddress(value) { this._ipaddress = value;}

AST_SipKey.prototype.setIpaddress = AST_SipKey_setIpaddress;
//
// accessor is AST_SipKey.prototype.getOrganizetion
// element get for organizetion
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for organizetion
// setter function is is AST_SipKey.prototype.setOrganizetion
//
function AST_SipKey_getOrganizetion() { return this._organizetion;}

AST_SipKey.prototype.getOrganizetion = AST_SipKey_getOrganizetion;

function AST_SipKey_setOrganizetion(value) { this._organizetion = value;}

AST_SipKey.prototype.setOrganizetion = AST_SipKey_setOrganizetion;
//
// accessor is AST_SipKey.prototype.getPassword
// element get for password
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for password
// setter function is is AST_SipKey.prototype.setPassword
//
function AST_SipKey_getPassword() { return this._password;}

AST_SipKey.prototype.getPassword = AST_SipKey_getPassword;

function AST_SipKey_setPassword(value) { this._password = value;}

AST_SipKey.prototype.setPassword = AST_SipKey_setPassword;
//
// accessor is AST_SipKey.prototype.getType
// element get for type
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for type
// setter function is is AST_SipKey.prototype.setType
//
function AST_SipKey_getType() { return this._type;}

AST_SipKey.prototype.getType = AST_SipKey_getType;

function AST_SipKey_setType(value) { this._type = value;}

AST_SipKey.prototype.setType = AST_SipKey_setType;
//
// Serialize {urn:ast}SipKey
//
function AST_SipKey_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._section == null) {
      xml = xml + '<jns0:section xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:section>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._section);
      xml = xml + '</jns0:section>';
     }
    }
    // block for local variables
    {
     if (this._keyname == null) {
      xml = xml + '<jns0:keyname xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:keyname>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._keyname);
      xml = xml + '</jns0:keyname>';
     }
    }
    // block for local variables
    {
     if (this._ipaddress == null) {
      xml = xml + '<jns0:ipaddress xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:ipaddress>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._ipaddress);
      xml = xml + '</jns0:ipaddress>';
     }
    }
    // block for local variables
    {
     if (this._organizetion == null) {
      xml = xml + '<jns0:organizetion xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:organizetion>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._organizetion);
      xml = xml + '</jns0:organizetion>';
     }
    }
    // block for local variables
    {
     if (this._password == null) {
      xml = xml + '<jns0:password xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:password>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._password);
      xml = xml + '</jns0:password>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:type>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._type);
     xml = xml + '</jns0:type>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipKey.prototype.serialize = AST_SipKey_serialize;

function AST_SipKey_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipKey();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing section');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSection(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing keyname');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setKeyname(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ipaddress');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setIpaddress(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing organizetion');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setOrganizetion(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing password');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setPassword(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing type');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setType(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}Relay
//
function AST_Relay () {
    this.typeMarker = 'AST_Relay';
    this._relays = null;
    this._iomode1 = '';
    this._iomode2 = '';
    this._active = '';
}

//
// accessor is AST_Relay.prototype.getRelays
// element get for relays
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for relays
// setter function is is AST_Relay.prototype.setRelays
//
function AST_Relay_getRelays() { return this._relays;}

AST_Relay.prototype.getRelays = AST_Relay_getRelays;

function AST_Relay_setRelays(value) { this._relays = value;}

AST_Relay.prototype.setRelays = AST_Relay_setRelays;
//
// accessor is AST_Relay.prototype.getIomode1
// element get for iomode1
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for iomode1
// setter function is is AST_Relay.prototype.setIomode1
//
function AST_Relay_getIomode1() { return this._iomode1;}

AST_Relay.prototype.getIomode1 = AST_Relay_getIomode1;

function AST_Relay_setIomode1(value) { this._iomode1 = value;}

AST_Relay.prototype.setIomode1 = AST_Relay_setIomode1;
//
// accessor is AST_Relay.prototype.getIomode2
// element get for iomode2
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for iomode2
// setter function is is AST_Relay.prototype.setIomode2
//
function AST_Relay_getIomode2() { return this._iomode2;}

AST_Relay.prototype.getIomode2 = AST_Relay_getIomode2;

function AST_Relay_setIomode2(value) { this._iomode2 = value;}

AST_Relay.prototype.setIomode2 = AST_Relay_setIomode2;
//
// accessor is AST_Relay.prototype.getActive
// element get for active
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for active
// setter function is is AST_Relay.prototype.setActive
//
function AST_Relay_getActive() { return this._active;}

AST_Relay.prototype.getActive = AST_Relay_getActive;

function AST_Relay_setActive(value) { this._active = value;}

AST_Relay.prototype.setActive = AST_Relay_setActive;
//
// Serialize {urn:ast}Relay
//
function AST_Relay_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._relays == null) {
      xml = xml + '<jns0:relays xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:relays>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._relays);
      xml = xml + '</jns0:relays>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:iomode1>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._iomode1);
     xml = xml + '</jns0:iomode1>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:iomode2>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._iomode2);
     xml = xml + '</jns0:iomode2>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:active>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._active);
     xml = xml + '</jns0:active>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_Relay.prototype.serialize = AST_Relay_serialize;

function AST_Relay_deserialize (cxfjsutils, element) {
    var newobject = new AST_Relay();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing relays');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setRelays(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing iomode1');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setIomode1(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing iomode2');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setIomode2(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing active');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setActive(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AnaContextFxsks
//
function AST_AnaContextFxsks () {
    this.typeMarker = 'AST_AnaContextFxsks';
    this._name = null;
    this._rxgain = null;
    this._txgain = null;
    this._ringtimeout = 0;
    this._usecallerid = '';
    this._hidecallerid = '';
    this._cidsignalling = '';
    this._dnd = '';
    this._cidstart = '';
    this._answerswitch = '';
    this._hangupswitch = '';
    this._delayreply200okenable = '';
    this._polarityonanswerdelay = 0;
    this._delayreply200oktimer = 0;
    this._immediatesendcid = '';
    this._calloutmininterval = 0;
    this._cidbeforering = '';
}

//
// accessor is AST_AnaContextFxsks.prototype.getName
// element get for name
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for name
// setter function is is AST_AnaContextFxsks.prototype.setName
//
function AST_AnaContextFxsks_getName() { return this._name;}

AST_AnaContextFxsks.prototype.getName = AST_AnaContextFxsks_getName;

function AST_AnaContextFxsks_setName(value) { this._name = value;}

AST_AnaContextFxsks.prototype.setName = AST_AnaContextFxsks_setName;
//
// accessor is AST_AnaContextFxsks.prototype.getRxgain
// element get for rxgain
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for rxgain
// setter function is is AST_AnaContextFxsks.prototype.setRxgain
//
function AST_AnaContextFxsks_getRxgain() { return this._rxgain;}

AST_AnaContextFxsks.prototype.getRxgain = AST_AnaContextFxsks_getRxgain;

function AST_AnaContextFxsks_setRxgain(value) { this._rxgain = value;}

AST_AnaContextFxsks.prototype.setRxgain = AST_AnaContextFxsks_setRxgain;
//
// accessor is AST_AnaContextFxsks.prototype.getTxgain
// element get for txgain
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for txgain
// setter function is is AST_AnaContextFxsks.prototype.setTxgain
//
function AST_AnaContextFxsks_getTxgain() { return this._txgain;}

AST_AnaContextFxsks.prototype.getTxgain = AST_AnaContextFxsks_getTxgain;

function AST_AnaContextFxsks_setTxgain(value) { this._txgain = value;}

AST_AnaContextFxsks.prototype.setTxgain = AST_AnaContextFxsks_setTxgain;
//
// accessor is AST_AnaContextFxsks.prototype.getRingtimeout
// element get for ringtimeout
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for ringtimeout
// setter function is is AST_AnaContextFxsks.prototype.setRingtimeout
//
function AST_AnaContextFxsks_getRingtimeout() { return this._ringtimeout;}

AST_AnaContextFxsks.prototype.getRingtimeout = AST_AnaContextFxsks_getRingtimeout;

function AST_AnaContextFxsks_setRingtimeout(value) { this._ringtimeout = value;}

AST_AnaContextFxsks.prototype.setRingtimeout = AST_AnaContextFxsks_setRingtimeout;
//
// accessor is AST_AnaContextFxsks.prototype.getUsecallerid
// element get for usecallerid
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for usecallerid
// setter function is is AST_AnaContextFxsks.prototype.setUsecallerid
//
function AST_AnaContextFxsks_getUsecallerid() { return this._usecallerid;}

AST_AnaContextFxsks.prototype.getUsecallerid = AST_AnaContextFxsks_getUsecallerid;

function AST_AnaContextFxsks_setUsecallerid(value) { this._usecallerid = value;}

AST_AnaContextFxsks.prototype.setUsecallerid = AST_AnaContextFxsks_setUsecallerid;
//
// accessor is AST_AnaContextFxsks.prototype.getHidecallerid
// element get for hidecallerid
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for hidecallerid
// setter function is is AST_AnaContextFxsks.prototype.setHidecallerid
//
function AST_AnaContextFxsks_getHidecallerid() { return this._hidecallerid;}

AST_AnaContextFxsks.prototype.getHidecallerid = AST_AnaContextFxsks_getHidecallerid;

function AST_AnaContextFxsks_setHidecallerid(value) { this._hidecallerid = value;}

AST_AnaContextFxsks.prototype.setHidecallerid = AST_AnaContextFxsks_setHidecallerid;
//
// accessor is AST_AnaContextFxsks.prototype.getCidsignalling
// element get for cidsignalling
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for cidsignalling
// setter function is is AST_AnaContextFxsks.prototype.setCidsignalling
//
function AST_AnaContextFxsks_getCidsignalling() { return this._cidsignalling;}

AST_AnaContextFxsks.prototype.getCidsignalling = AST_AnaContextFxsks_getCidsignalling;

function AST_AnaContextFxsks_setCidsignalling(value) { this._cidsignalling = value;}

AST_AnaContextFxsks.prototype.setCidsignalling = AST_AnaContextFxsks_setCidsignalling;
//
// accessor is AST_AnaContextFxsks.prototype.getDnd
// element get for dnd
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for dnd
// setter function is is AST_AnaContextFxsks.prototype.setDnd
//
function AST_AnaContextFxsks_getDnd() { return this._dnd;}

AST_AnaContextFxsks.prototype.getDnd = AST_AnaContextFxsks_getDnd;

function AST_AnaContextFxsks_setDnd(value) { this._dnd = value;}

AST_AnaContextFxsks.prototype.setDnd = AST_AnaContextFxsks_setDnd;
//
// accessor is AST_AnaContextFxsks.prototype.getCidstart
// element get for cidstart
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for cidstart
// setter function is is AST_AnaContextFxsks.prototype.setCidstart
//
function AST_AnaContextFxsks_getCidstart() { return this._cidstart;}

AST_AnaContextFxsks.prototype.getCidstart = AST_AnaContextFxsks_getCidstart;

function AST_AnaContextFxsks_setCidstart(value) { this._cidstart = value;}

AST_AnaContextFxsks.prototype.setCidstart = AST_AnaContextFxsks_setCidstart;
//
// accessor is AST_AnaContextFxsks.prototype.getAnswerswitch
// element get for answerswitch
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for answerswitch
// setter function is is AST_AnaContextFxsks.prototype.setAnswerswitch
//
function AST_AnaContextFxsks_getAnswerswitch() { return this._answerswitch;}

AST_AnaContextFxsks.prototype.getAnswerswitch = AST_AnaContextFxsks_getAnswerswitch;

function AST_AnaContextFxsks_setAnswerswitch(value) { this._answerswitch = value;}

AST_AnaContextFxsks.prototype.setAnswerswitch = AST_AnaContextFxsks_setAnswerswitch;
//
// accessor is AST_AnaContextFxsks.prototype.getHangupswitch
// element get for hangupswitch
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for hangupswitch
// setter function is is AST_AnaContextFxsks.prototype.setHangupswitch
//
function AST_AnaContextFxsks_getHangupswitch() { return this._hangupswitch;}

AST_AnaContextFxsks.prototype.getHangupswitch = AST_AnaContextFxsks_getHangupswitch;

function AST_AnaContextFxsks_setHangupswitch(value) { this._hangupswitch = value;}

AST_AnaContextFxsks.prototype.setHangupswitch = AST_AnaContextFxsks_setHangupswitch;
//
// accessor is AST_AnaContextFxsks.prototype.getDelayreply200okenable
// element get for delayreply200okenable
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for delayreply200okenable
// setter function is is AST_AnaContextFxsks.prototype.setDelayreply200okenable
//
function AST_AnaContextFxsks_getDelayreply200okenable() { return this._delayreply200okenable;}

AST_AnaContextFxsks.prototype.getDelayreply200okenable = AST_AnaContextFxsks_getDelayreply200okenable;

function AST_AnaContextFxsks_setDelayreply200okenable(value) { this._delayreply200okenable = value;}

AST_AnaContextFxsks.prototype.setDelayreply200okenable = AST_AnaContextFxsks_setDelayreply200okenable;
//
// accessor is AST_AnaContextFxsks.prototype.getPolarityonanswerdelay
// element get for polarityonanswerdelay
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for polarityonanswerdelay
// setter function is is AST_AnaContextFxsks.prototype.setPolarityonanswerdelay
//
function AST_AnaContextFxsks_getPolarityonanswerdelay() { return this._polarityonanswerdelay;}

AST_AnaContextFxsks.prototype.getPolarityonanswerdelay = AST_AnaContextFxsks_getPolarityonanswerdelay;

function AST_AnaContextFxsks_setPolarityonanswerdelay(value) { this._polarityonanswerdelay = value;}

AST_AnaContextFxsks.prototype.setPolarityonanswerdelay = AST_AnaContextFxsks_setPolarityonanswerdelay;
//
// accessor is AST_AnaContextFxsks.prototype.getDelayreply200oktimer
// element get for delayreply200oktimer
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for delayreply200oktimer
// setter function is is AST_AnaContextFxsks.prototype.setDelayreply200oktimer
//
function AST_AnaContextFxsks_getDelayreply200oktimer() { return this._delayreply200oktimer;}

AST_AnaContextFxsks.prototype.getDelayreply200oktimer = AST_AnaContextFxsks_getDelayreply200oktimer;

function AST_AnaContextFxsks_setDelayreply200oktimer(value) { this._delayreply200oktimer = value;}

AST_AnaContextFxsks.prototype.setDelayreply200oktimer = AST_AnaContextFxsks_setDelayreply200oktimer;
//
// accessor is AST_AnaContextFxsks.prototype.getImmediatesendcid
// element get for immediatesendcid
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for immediatesendcid
// setter function is is AST_AnaContextFxsks.prototype.setImmediatesendcid
//
function AST_AnaContextFxsks_getImmediatesendcid() { return this._immediatesendcid;}

AST_AnaContextFxsks.prototype.getImmediatesendcid = AST_AnaContextFxsks_getImmediatesendcid;

function AST_AnaContextFxsks_setImmediatesendcid(value) { this._immediatesendcid = value;}

AST_AnaContextFxsks.prototype.setImmediatesendcid = AST_AnaContextFxsks_setImmediatesendcid;
//
// accessor is AST_AnaContextFxsks.prototype.getCalloutmininterval
// element get for calloutmininterval
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for calloutmininterval
// setter function is is AST_AnaContextFxsks.prototype.setCalloutmininterval
//
function AST_AnaContextFxsks_getCalloutmininterval() { return this._calloutmininterval;}

AST_AnaContextFxsks.prototype.getCalloutmininterval = AST_AnaContextFxsks_getCalloutmininterval;

function AST_AnaContextFxsks_setCalloutmininterval(value) { this._calloutmininterval = value;}

AST_AnaContextFxsks.prototype.setCalloutmininterval = AST_AnaContextFxsks_setCalloutmininterval;
//
// accessor is AST_AnaContextFxsks.prototype.getCidbeforering
// element get for cidbeforering
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for cidbeforering
// setter function is is AST_AnaContextFxsks.prototype.setCidbeforering
//
function AST_AnaContextFxsks_getCidbeforering() { return this._cidbeforering;}

AST_AnaContextFxsks.prototype.getCidbeforering = AST_AnaContextFxsks_getCidbeforering;

function AST_AnaContextFxsks_setCidbeforering(value) { this._cidbeforering = value;}

AST_AnaContextFxsks.prototype.setCidbeforering = AST_AnaContextFxsks_setCidbeforering;
//
// Serialize {urn:ast}AnaContextFxsks
//
function AST_AnaContextFxsks_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._name == null) {
      xml = xml + '<jns0:name xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:name>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._name);
      xml = xml + '</jns0:name>';
     }
    }
    // block for local variables
    {
     if (this._rxgain == null) {
      xml = xml + '<jns0:rxgain xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:rxgain>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._rxgain);
      xml = xml + '</jns0:rxgain>';
     }
    }
    // block for local variables
    {
     if (this._txgain == null) {
      xml = xml + '<jns0:txgain xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:txgain>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._txgain);
      xml = xml + '</jns0:txgain>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:ringtimeout>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._ringtimeout);
     xml = xml + '</jns0:ringtimeout>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:usecallerid>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._usecallerid);
     xml = xml + '</jns0:usecallerid>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:hidecallerid>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._hidecallerid);
     xml = xml + '</jns0:hidecallerid>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:cidsignalling>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._cidsignalling);
     xml = xml + '</jns0:cidsignalling>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:dnd>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._dnd);
     xml = xml + '</jns0:dnd>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:cidstart>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._cidstart);
     xml = xml + '</jns0:cidstart>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:answerswitch>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._answerswitch);
     xml = xml + '</jns0:answerswitch>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:hangupswitch>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._hangupswitch);
     xml = xml + '</jns0:hangupswitch>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:delayreply200okenable>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._delayreply200okenable);
     xml = xml + '</jns0:delayreply200okenable>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:polarityonanswerdelay>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._polarityonanswerdelay);
     xml = xml + '</jns0:polarityonanswerdelay>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:delayreply200oktimer>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._delayreply200oktimer);
     xml = xml + '</jns0:delayreply200oktimer>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:immediatesendcid>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._immediatesendcid);
     xml = xml + '</jns0:immediatesendcid>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:calloutmininterval>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._calloutmininterval);
     xml = xml + '</jns0:calloutmininterval>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:cidbeforering>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._cidbeforering);
     xml = xml + '</jns0:cidbeforering>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AnaContextFxsks.prototype.serialize = AST_AnaContextFxsks_serialize;

function AST_AnaContextFxsks_deserialize (cxfjsutils, element) {
    var newobject = new AST_AnaContextFxsks();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing name');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setName(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing rxgain');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setRxgain(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing txgain');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setTxgain(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ringtimeout');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setRingtimeout(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing usecallerid');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setUsecallerid(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing hidecallerid');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setHidecallerid(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing cidsignalling');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setCidsignalling(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing dnd');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setDnd(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing cidstart');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setCidstart(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing answerswitch');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setAnswerswitch(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing hangupswitch');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setHangupswitch(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing delayreply200okenable');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setDelayreply200okenable(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing polarityonanswerdelay');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setPolarityonanswerdelay(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing delayreply200oktimer');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setDelayreply200oktimer(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing immediatesendcid');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setImmediatesendcid(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing calloutmininterval');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setCalloutmininterval(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing cidbeforering');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setCidbeforering(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}FxsGroupDialGet
//
function AST_FxsGroupDialGet () {
    this.typeMarker = 'AST_FxsGroupDialGet';
    this._combuf = null;
    this._Ana = null;
    this._group = null;
}

//
// accessor is AST_FxsGroupDialGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_FxsGroupDialGet.prototype.setCombuf
//
function AST_FxsGroupDialGet_getCombuf() { return this._combuf;}

AST_FxsGroupDialGet.prototype.getCombuf = AST_FxsGroupDialGet_getCombuf;

function AST_FxsGroupDialGet_setCombuf(value) { this._combuf = value;}

AST_FxsGroupDialGet.prototype.setCombuf = AST_FxsGroupDialGet_setCombuf;
//
// accessor is AST_FxsGroupDialGet.prototype.getAna
// element get for Ana
// - element type is {urn:ast}RoutingAnaArr
// - required element
//
// element set for Ana
// setter function is is AST_FxsGroupDialGet.prototype.setAna
//
function AST_FxsGroupDialGet_getAna() { return this._Ana;}

AST_FxsGroupDialGet.prototype.getAna = AST_FxsGroupDialGet_getAna;

function AST_FxsGroupDialGet_setAna(value) { this._Ana = value;}

AST_FxsGroupDialGet.prototype.setAna = AST_FxsGroupDialGet_setAna;
//
// accessor is AST_FxsGroupDialGet.prototype.getGroup
// element get for group
// - element type is {urn:ast}FxsGroupDial
// - required element
//
// element set for group
// setter function is is AST_FxsGroupDialGet.prototype.setGroup
//
function AST_FxsGroupDialGet_getGroup() { return this._group;}

AST_FxsGroupDialGet.prototype.getGroup = AST_FxsGroupDialGet_getGroup;

function AST_FxsGroupDialGet_setGroup(value) { this._group = value;}

AST_FxsGroupDialGet.prototype.setGroup = AST_FxsGroupDialGet_setGroup;
//
// Serialize {urn:ast}FxsGroupDialGet
//
function AST_FxsGroupDialGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._Ana.serialize(cxfjsutils, 'jns0:Ana', null);
    }
    // block for local variables
    {
     xml = xml + this._group.serialize(cxfjsutils, 'jns0:group', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_FxsGroupDialGet.prototype.serialize = AST_FxsGroupDialGet_serialize;

function AST_FxsGroupDialGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_FxsGroupDialGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing Ana');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_RoutingAnaArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setAna(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing group');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_FxsGroupDial_deserialize(cxfjsutils, curElement);
    }
    newobject.setGroup(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SysCompyInfo
//
function AST_SysCompyInfo () {
    this.typeMarker = 'AST_SysCompyInfo';
    this._tel = null;
    this._fax = null;
    this._email = null;
    this._website = null;
    this._addressen = null;
    this._addresscn = null;
}

//
// accessor is AST_SysCompyInfo.prototype.getTel
// element get for tel
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for tel
// setter function is is AST_SysCompyInfo.prototype.setTel
//
function AST_SysCompyInfo_getTel() { return this._tel;}

AST_SysCompyInfo.prototype.getTel = AST_SysCompyInfo_getTel;

function AST_SysCompyInfo_setTel(value) { this._tel = value;}

AST_SysCompyInfo.prototype.setTel = AST_SysCompyInfo_setTel;
//
// accessor is AST_SysCompyInfo.prototype.getFax
// element get for fax
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for fax
// setter function is is AST_SysCompyInfo.prototype.setFax
//
function AST_SysCompyInfo_getFax() { return this._fax;}

AST_SysCompyInfo.prototype.getFax = AST_SysCompyInfo_getFax;

function AST_SysCompyInfo_setFax(value) { this._fax = value;}

AST_SysCompyInfo.prototype.setFax = AST_SysCompyInfo_setFax;
//
// accessor is AST_SysCompyInfo.prototype.getEmail
// element get for email
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for email
// setter function is is AST_SysCompyInfo.prototype.setEmail
//
function AST_SysCompyInfo_getEmail() { return this._email;}

AST_SysCompyInfo.prototype.getEmail = AST_SysCompyInfo_getEmail;

function AST_SysCompyInfo_setEmail(value) { this._email = value;}

AST_SysCompyInfo.prototype.setEmail = AST_SysCompyInfo_setEmail;
//
// accessor is AST_SysCompyInfo.prototype.getWebsite
// element get for website
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for website
// setter function is is AST_SysCompyInfo.prototype.setWebsite
//
function AST_SysCompyInfo_getWebsite() { return this._website;}

AST_SysCompyInfo.prototype.getWebsite = AST_SysCompyInfo_getWebsite;

function AST_SysCompyInfo_setWebsite(value) { this._website = value;}

AST_SysCompyInfo.prototype.setWebsite = AST_SysCompyInfo_setWebsite;
//
// accessor is AST_SysCompyInfo.prototype.getAddressen
// element get for addressen
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for addressen
// setter function is is AST_SysCompyInfo.prototype.setAddressen
//
function AST_SysCompyInfo_getAddressen() { return this._addressen;}

AST_SysCompyInfo.prototype.getAddressen = AST_SysCompyInfo_getAddressen;

function AST_SysCompyInfo_setAddressen(value) { this._addressen = value;}

AST_SysCompyInfo.prototype.setAddressen = AST_SysCompyInfo_setAddressen;
//
// accessor is AST_SysCompyInfo.prototype.getAddresscn
// element get for addresscn
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for addresscn
// setter function is is AST_SysCompyInfo.prototype.setAddresscn
//
function AST_SysCompyInfo_getAddresscn() { return this._addresscn;}

AST_SysCompyInfo.prototype.getAddresscn = AST_SysCompyInfo_getAddresscn;

function AST_SysCompyInfo_setAddresscn(value) { this._addresscn = value;}

AST_SysCompyInfo.prototype.setAddresscn = AST_SysCompyInfo_setAddresscn;
//
// Serialize {urn:ast}SysCompyInfo
//
function AST_SysCompyInfo_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._tel == null) {
      xml = xml + '<jns0:tel xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:tel>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._tel);
      xml = xml + '</jns0:tel>';
     }
    }
    // block for local variables
    {
     if (this._fax == null) {
      xml = xml + '<jns0:fax xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:fax>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._fax);
      xml = xml + '</jns0:fax>';
     }
    }
    // block for local variables
    {
     if (this._email == null) {
      xml = xml + '<jns0:email xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:email>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._email);
      xml = xml + '</jns0:email>';
     }
    }
    // block for local variables
    {
     if (this._website == null) {
      xml = xml + '<jns0:website xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:website>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._website);
      xml = xml + '</jns0:website>';
     }
    }
    // block for local variables
    {
     if (this._addressen == null) {
      xml = xml + '<jns0:addressen xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:addressen>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._addressen);
      xml = xml + '</jns0:addressen>';
     }
    }
    // block for local variables
    {
     if (this._addresscn == null) {
      xml = xml + '<jns0:addresscn xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:addresscn>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._addresscn);
      xml = xml + '</jns0:addresscn>';
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SysCompyInfo.prototype.serialize = AST_SysCompyInfo_serialize;

function AST_SysCompyInfo_deserialize (cxfjsutils, element) {
    var newobject = new AST_SysCompyInfo();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing tel');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setTel(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fax');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setFax(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing email');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setEmail(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing website');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setWebsite(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing addressen');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setAddressen(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing addresscn');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setAddresscn(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipRtp
//
function AST_SipRtp () {
    this.typeMarker = 'AST_SipRtp';
    this._rtpstart = 0;
    this._rtpend = 0;
}

//
// accessor is AST_SipRtp.prototype.getRtpstart
// element get for rtpstart
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for rtpstart
// setter function is is AST_SipRtp.prototype.setRtpstart
//
function AST_SipRtp_getRtpstart() { return this._rtpstart;}

AST_SipRtp.prototype.getRtpstart = AST_SipRtp_getRtpstart;

function AST_SipRtp_setRtpstart(value) { this._rtpstart = value;}

AST_SipRtp.prototype.setRtpstart = AST_SipRtp_setRtpstart;
//
// accessor is AST_SipRtp.prototype.getRtpend
// element get for rtpend
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for rtpend
// setter function is is AST_SipRtp.prototype.setRtpend
//
function AST_SipRtp_getRtpend() { return this._rtpend;}

AST_SipRtp.prototype.getRtpend = AST_SipRtp_getRtpend;

function AST_SipRtp_setRtpend(value) { this._rtpend = value;}

AST_SipRtp.prototype.setRtpend = AST_SipRtp_setRtpend;
//
// Serialize {urn:ast}SipRtp
//
function AST_SipRtp_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:rtpstart>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._rtpstart);
     xml = xml + '</jns0:rtpstart>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:rtpend>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._rtpend);
     xml = xml + '</jns0:rtpend>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipRtp.prototype.serialize = AST_SipRtp_serialize;

function AST_SipRtp_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipRtp();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing rtpstart');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setRtpstart(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing rtpend');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setRtpend(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}ModuleBoardInfoArr
//
function AST_ModuleBoardInfoArr () {
    this.typeMarker = 'AST_ModuleBoardInfoArr';
    this._item = [];
}

//
// accessor is AST_ModuleBoardInfoArr.prototype.getItem
// element get for item
// - element type is {urn:ast}ModuleBoardInfo
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_ModuleBoardInfoArr.prototype.setItem
//
function AST_ModuleBoardInfoArr_getItem() { return this._item;}

AST_ModuleBoardInfoArr.prototype.getItem = AST_ModuleBoardInfoArr_getItem;

function AST_ModuleBoardInfoArr_setItem(value) { this._item = value;}

AST_ModuleBoardInfoArr.prototype.setItem = AST_ModuleBoardInfoArr_setItem;
//
// Serialize {urn:ast}ModuleBoardInfoArr
//
function AST_ModuleBoardInfoArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_ModuleBoardInfoArr.prototype.serialize = AST_ModuleBoardInfoArr_serialize;

function AST_ModuleBoardInfoArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_ModuleBoardInfoArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_ModuleBoardInfo_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SystemFuncFlag
//
function AST_SystemFuncFlag () {
    this.typeMarker = 'AST_SystemFuncFlag';
    this._DemoFuncFlag = '';
}

//
// accessor is AST_SystemFuncFlag.prototype.getDemoFuncFlag
// element get for DemoFuncFlag
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for DemoFuncFlag
// setter function is is AST_SystemFuncFlag.prototype.setDemoFuncFlag
//
function AST_SystemFuncFlag_getDemoFuncFlag() { return this._DemoFuncFlag;}

AST_SystemFuncFlag.prototype.getDemoFuncFlag = AST_SystemFuncFlag_getDemoFuncFlag;

function AST_SystemFuncFlag_setDemoFuncFlag(value) { this._DemoFuncFlag = value;}

AST_SystemFuncFlag.prototype.setDemoFuncFlag = AST_SystemFuncFlag_setDemoFuncFlag;
//
// Serialize {urn:ast}SystemFuncFlag
//
function AST_SystemFuncFlag_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:DemoFuncFlag>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._DemoFuncFlag);
     xml = xml + '</jns0:DemoFuncFlag>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SystemFuncFlag.prototype.serialize = AST_SystemFuncFlag_serialize;

function AST_SystemFuncFlag_deserialize (cxfjsutils, element) {
    var newobject = new AST_SystemFuncFlag();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing DemoFuncFlag');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setDemoFuncFlag(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}UcpAlgCalllimitStatus
//
function AST_UcpAlgCalllimitStatus () {
    this.typeMarker = 'AST_UcpAlgCalllimitStatus';
    this._channel = 0;
    this._dayflag = 0;
    this._hourflag = 0;
    this._anwerflag = 0;
    this._daytotal = 0;
    this._hourtotal = 0;
    this._answertotal = 0;
    this._limitsta = 0;
}

//
// accessor is AST_UcpAlgCalllimitStatus.prototype.getChannel
// element get for channel
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for channel
// setter function is is AST_UcpAlgCalllimitStatus.prototype.setChannel
//
function AST_UcpAlgCalllimitStatus_getChannel() { return this._channel;}

AST_UcpAlgCalllimitStatus.prototype.getChannel = AST_UcpAlgCalllimitStatus_getChannel;

function AST_UcpAlgCalllimitStatus_setChannel(value) { this._channel = value;}

AST_UcpAlgCalllimitStatus.prototype.setChannel = AST_UcpAlgCalllimitStatus_setChannel;
//
// accessor is AST_UcpAlgCalllimitStatus.prototype.getDayflag
// element get for dayflag
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for dayflag
// setter function is is AST_UcpAlgCalllimitStatus.prototype.setDayflag
//
function AST_UcpAlgCalllimitStatus_getDayflag() { return this._dayflag;}

AST_UcpAlgCalllimitStatus.prototype.getDayflag = AST_UcpAlgCalllimitStatus_getDayflag;

function AST_UcpAlgCalllimitStatus_setDayflag(value) { this._dayflag = value;}

AST_UcpAlgCalllimitStatus.prototype.setDayflag = AST_UcpAlgCalllimitStatus_setDayflag;
//
// accessor is AST_UcpAlgCalllimitStatus.prototype.getHourflag
// element get for hourflag
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for hourflag
// setter function is is AST_UcpAlgCalllimitStatus.prototype.setHourflag
//
function AST_UcpAlgCalllimitStatus_getHourflag() { return this._hourflag;}

AST_UcpAlgCalllimitStatus.prototype.getHourflag = AST_UcpAlgCalllimitStatus_getHourflag;

function AST_UcpAlgCalllimitStatus_setHourflag(value) { this._hourflag = value;}

AST_UcpAlgCalllimitStatus.prototype.setHourflag = AST_UcpAlgCalllimitStatus_setHourflag;
//
// accessor is AST_UcpAlgCalllimitStatus.prototype.getAnwerflag
// element get for anwerflag
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for anwerflag
// setter function is is AST_UcpAlgCalllimitStatus.prototype.setAnwerflag
//
function AST_UcpAlgCalllimitStatus_getAnwerflag() { return this._anwerflag;}

AST_UcpAlgCalllimitStatus.prototype.getAnwerflag = AST_UcpAlgCalllimitStatus_getAnwerflag;

function AST_UcpAlgCalllimitStatus_setAnwerflag(value) { this._anwerflag = value;}

AST_UcpAlgCalllimitStatus.prototype.setAnwerflag = AST_UcpAlgCalllimitStatus_setAnwerflag;
//
// accessor is AST_UcpAlgCalllimitStatus.prototype.getDaytotal
// element get for daytotal
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for daytotal
// setter function is is AST_UcpAlgCalllimitStatus.prototype.setDaytotal
//
function AST_UcpAlgCalllimitStatus_getDaytotal() { return this._daytotal;}

AST_UcpAlgCalllimitStatus.prototype.getDaytotal = AST_UcpAlgCalllimitStatus_getDaytotal;

function AST_UcpAlgCalllimitStatus_setDaytotal(value) { this._daytotal = value;}

AST_UcpAlgCalllimitStatus.prototype.setDaytotal = AST_UcpAlgCalllimitStatus_setDaytotal;
//
// accessor is AST_UcpAlgCalllimitStatus.prototype.getHourtotal
// element get for hourtotal
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for hourtotal
// setter function is is AST_UcpAlgCalllimitStatus.prototype.setHourtotal
//
function AST_UcpAlgCalllimitStatus_getHourtotal() { return this._hourtotal;}

AST_UcpAlgCalllimitStatus.prototype.getHourtotal = AST_UcpAlgCalllimitStatus_getHourtotal;

function AST_UcpAlgCalllimitStatus_setHourtotal(value) { this._hourtotal = value;}

AST_UcpAlgCalllimitStatus.prototype.setHourtotal = AST_UcpAlgCalllimitStatus_setHourtotal;
//
// accessor is AST_UcpAlgCalllimitStatus.prototype.getAnswertotal
// element get for answertotal
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for answertotal
// setter function is is AST_UcpAlgCalllimitStatus.prototype.setAnswertotal
//
function AST_UcpAlgCalllimitStatus_getAnswertotal() { return this._answertotal;}

AST_UcpAlgCalllimitStatus.prototype.getAnswertotal = AST_UcpAlgCalllimitStatus_getAnswertotal;

function AST_UcpAlgCalllimitStatus_setAnswertotal(value) { this._answertotal = value;}

AST_UcpAlgCalllimitStatus.prototype.setAnswertotal = AST_UcpAlgCalllimitStatus_setAnswertotal;
//
// accessor is AST_UcpAlgCalllimitStatus.prototype.getLimitsta
// element get for limitsta
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for limitsta
// setter function is is AST_UcpAlgCalllimitStatus.prototype.setLimitsta
//
function AST_UcpAlgCalllimitStatus_getLimitsta() { return this._limitsta;}

AST_UcpAlgCalllimitStatus.prototype.getLimitsta = AST_UcpAlgCalllimitStatus_getLimitsta;

function AST_UcpAlgCalllimitStatus_setLimitsta(value) { this._limitsta = value;}

AST_UcpAlgCalllimitStatus.prototype.setLimitsta = AST_UcpAlgCalllimitStatus_setLimitsta;
//
// Serialize {urn:ast}UcpAlgCalllimitStatus
//
function AST_UcpAlgCalllimitStatus_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:channel>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._channel);
     xml = xml + '</jns0:channel>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:dayflag>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._dayflag);
     xml = xml + '</jns0:dayflag>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:hourflag>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._hourflag);
     xml = xml + '</jns0:hourflag>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:anwerflag>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._anwerflag);
     xml = xml + '</jns0:anwerflag>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:daytotal>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._daytotal);
     xml = xml + '</jns0:daytotal>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:hourtotal>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._hourtotal);
     xml = xml + '</jns0:hourtotal>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:answertotal>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._answertotal);
     xml = xml + '</jns0:answertotal>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:limitsta>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._limitsta);
     xml = xml + '</jns0:limitsta>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_UcpAlgCalllimitStatus.prototype.serialize = AST_UcpAlgCalllimitStatus_serialize;

function AST_UcpAlgCalllimitStatus_deserialize (cxfjsutils, element) {
    var newobject = new AST_UcpAlgCalllimitStatus();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing channel');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setChannel(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing dayflag');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setDayflag(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing hourflag');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setHourflag(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing anwerflag');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setAnwerflag(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing daytotal');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setDaytotal(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing hourtotal');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setHourtotal(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing answertotal');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setAnswertotal(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing limitsta');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setLimitsta(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AutoCallSave
//
function AST_AutoCallSave () {
    this.typeMarker = 'AST_AutoCallSave';
    this._sw = '';
    this._timeout = 0;
}

//
// accessor is AST_AutoCallSave.prototype.getSw
// element get for sw
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for sw
// setter function is is AST_AutoCallSave.prototype.setSw
//
function AST_AutoCallSave_getSw() { return this._sw;}

AST_AutoCallSave.prototype.getSw = AST_AutoCallSave_getSw;

function AST_AutoCallSave_setSw(value) { this._sw = value;}

AST_AutoCallSave.prototype.setSw = AST_AutoCallSave_setSw;
//
// accessor is AST_AutoCallSave.prototype.getTimeout
// element get for timeout
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for timeout
// setter function is is AST_AutoCallSave.prototype.setTimeout
//
function AST_AutoCallSave_getTimeout() { return this._timeout;}

AST_AutoCallSave.prototype.getTimeout = AST_AutoCallSave_getTimeout;

function AST_AutoCallSave_setTimeout(value) { this._timeout = value;}

AST_AutoCallSave.prototype.setTimeout = AST_AutoCallSave_setTimeout;
//
// Serialize {urn:ast}AutoCallSave
//
function AST_AutoCallSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:sw>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._sw);
     xml = xml + '</jns0:sw>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:timeout>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._timeout);
     xml = xml + '</jns0:timeout>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AutoCallSave.prototype.serialize = AST_AutoCallSave_serialize;

function AST_AutoCallSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AutoCallSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sw');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSw(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing timeout');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setTimeout(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AnainfoArr
//
function AST_AnainfoArr () {
    this.typeMarker = 'AST_AnainfoArr';
    this._item = [];
}

//
// accessor is AST_AnainfoArr.prototype.getItem
// element get for item
// - element type is {urn:ast}Anainfo
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_AnainfoArr.prototype.setItem
//
function AST_AnainfoArr_getItem() { return this._item;}

AST_AnainfoArr.prototype.getItem = AST_AnainfoArr_getItem;

function AST_AnainfoArr_setItem(value) { this._item = value;}

AST_AnainfoArr.prototype.setItem = AST_AnainfoArr_setItem;
//
// Serialize {urn:ast}AnainfoArr
//
function AST_AnainfoArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AnainfoArr.prototype.serialize = AST_AnainfoArr_serialize;

function AST_AnainfoArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_AnainfoArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_Anainfo_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SysGeneralSave
//
function AST_SysGeneralSave () {
    this.typeMarker = 'AST_SysGeneralSave';
    this._lang = null;
    this._autoreboot = null;
}

//
// accessor is AST_SysGeneralSave.prototype.getLang
// element get for lang
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for lang
// setter function is is AST_SysGeneralSave.prototype.setLang
//
function AST_SysGeneralSave_getLang() { return this._lang;}

AST_SysGeneralSave.prototype.getLang = AST_SysGeneralSave_getLang;

function AST_SysGeneralSave_setLang(value) { this._lang = value;}

AST_SysGeneralSave.prototype.setLang = AST_SysGeneralSave_setLang;
//
// accessor is AST_SysGeneralSave.prototype.getAutoreboot
// element get for autoreboot
// - element type is {urn:ast}SysAuto
// - required element
//
// element set for autoreboot
// setter function is is AST_SysGeneralSave.prototype.setAutoreboot
//
function AST_SysGeneralSave_getAutoreboot() { return this._autoreboot;}

AST_SysGeneralSave.prototype.getAutoreboot = AST_SysGeneralSave_getAutoreboot;

function AST_SysGeneralSave_setAutoreboot(value) { this._autoreboot = value;}

AST_SysGeneralSave.prototype.setAutoreboot = AST_SysGeneralSave_setAutoreboot;
//
// Serialize {urn:ast}SysGeneralSave
//
function AST_SysGeneralSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._lang == null) {
      xml = xml + '<jns0:lang xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:lang>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._lang);
      xml = xml + '</jns0:lang>';
     }
    }
    // block for local variables
    {
     xml = xml + this._autoreboot.serialize(cxfjsutils, 'jns0:autoreboot', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SysGeneralSave.prototype.serialize = AST_SysGeneralSave_serialize;

function AST_SysGeneralSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_SysGeneralSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing lang');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setLang(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing autoreboot');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SysAuto_deserialize(cxfjsutils, curElement);
    }
    newobject.setAutoreboot(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipGetAll
//
function AST_SipGetAll () {
    this.typeMarker = 'AST_SipGetAll';
    this._combuf = null;
    this._sips = null;
}

//
// accessor is AST_SipGetAll.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_SipGetAll.prototype.setCombuf
//
function AST_SipGetAll_getCombuf() { return this._combuf;}

AST_SipGetAll.prototype.getCombuf = AST_SipGetAll_getCombuf;

function AST_SipGetAll_setCombuf(value) { this._combuf = value;}

AST_SipGetAll.prototype.setCombuf = AST_SipGetAll_setCombuf;
//
// accessor is AST_SipGetAll.prototype.getSips
// element get for sips
// - element type is {urn:ast}SipArr
// - required element
//
// element set for sips
// setter function is is AST_SipGetAll.prototype.setSips
//
function AST_SipGetAll_getSips() { return this._sips;}

AST_SipGetAll.prototype.getSips = AST_SipGetAll_getSips;

function AST_SipGetAll_setSips(value) { this._sips = value;}

AST_SipGetAll.prototype.setSips = AST_SipGetAll_setSips;
//
// Serialize {urn:ast}SipGetAll
//
function AST_SipGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._sips.serialize(cxfjsutils, 'jns0:sips', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipGetAll.prototype.serialize = AST_SipGetAll_serialize;

function AST_SipGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sips');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SipArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setSips(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AlgDialtableGet
//
function AST_AlgDialtableGet () {
    this.typeMarker = 'AST_AlgDialtableGet';
    this._combuf = null;
    this._lines = null;
}

//
// accessor is AST_AlgDialtableGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_AlgDialtableGet.prototype.setCombuf
//
function AST_AlgDialtableGet_getCombuf() { return this._combuf;}

AST_AlgDialtableGet.prototype.getCombuf = AST_AlgDialtableGet_getCombuf;

function AST_AlgDialtableGet_setCombuf(value) { this._combuf = value;}

AST_AlgDialtableGet.prototype.setCombuf = AST_AlgDialtableGet_setCombuf;
//
// accessor is AST_AlgDialtableGet.prototype.getLines
// element get for lines
// - element type is {urn:ast}LineArr
// - required element
//
// element set for lines
// setter function is is AST_AlgDialtableGet.prototype.setLines
//
function AST_AlgDialtableGet_getLines() { return this._lines;}

AST_AlgDialtableGet.prototype.getLines = AST_AlgDialtableGet_getLines;

function AST_AlgDialtableGet_setLines(value) { this._lines = value;}

AST_AlgDialtableGet.prototype.setLines = AST_AlgDialtableGet_setLines;
//
// Serialize {urn:ast}AlgDialtableGet
//
function AST_AlgDialtableGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._lines.serialize(cxfjsutils, 'jns0:lines', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AlgDialtableGet.prototype.serialize = AST_AlgDialtableGet_serialize;

function AST_AlgDialtableGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AlgDialtableGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing lines');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_LineArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setLines(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}NetworkLan
//
function AST_NetworkLan () {
    this.typeMarker = 'AST_NetworkLan';
    this._mac = null;
    this._ipaddr = null;
    this._netmask = null;
    this._gateway = null;
    this._portname = null;
    this._type = '';
    this._rswitch = '';
}

//
// accessor is AST_NetworkLan.prototype.getMac
// element get for mac
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for mac
// setter function is is AST_NetworkLan.prototype.setMac
//
function AST_NetworkLan_getMac() { return this._mac;}

AST_NetworkLan.prototype.getMac = AST_NetworkLan_getMac;

function AST_NetworkLan_setMac(value) { this._mac = value;}

AST_NetworkLan.prototype.setMac = AST_NetworkLan_setMac;
//
// accessor is AST_NetworkLan.prototype.getIpaddr
// element get for ipaddr
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for ipaddr
// setter function is is AST_NetworkLan.prototype.setIpaddr
//
function AST_NetworkLan_getIpaddr() { return this._ipaddr;}

AST_NetworkLan.prototype.getIpaddr = AST_NetworkLan_getIpaddr;

function AST_NetworkLan_setIpaddr(value) { this._ipaddr = value;}

AST_NetworkLan.prototype.setIpaddr = AST_NetworkLan_setIpaddr;
//
// accessor is AST_NetworkLan.prototype.getNetmask
// element get for netmask
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for netmask
// setter function is is AST_NetworkLan.prototype.setNetmask
//
function AST_NetworkLan_getNetmask() { return this._netmask;}

AST_NetworkLan.prototype.getNetmask = AST_NetworkLan_getNetmask;

function AST_NetworkLan_setNetmask(value) { this._netmask = value;}

AST_NetworkLan.prototype.setNetmask = AST_NetworkLan_setNetmask;
//
// accessor is AST_NetworkLan.prototype.getGateway
// element get for gateway
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for gateway
// setter function is is AST_NetworkLan.prototype.setGateway
//
function AST_NetworkLan_getGateway() { return this._gateway;}

AST_NetworkLan.prototype.getGateway = AST_NetworkLan_getGateway;

function AST_NetworkLan_setGateway(value) { this._gateway = value;}

AST_NetworkLan.prototype.setGateway = AST_NetworkLan_setGateway;
//
// accessor is AST_NetworkLan.prototype.getPortname
// element get for portname
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for portname
// setter function is is AST_NetworkLan.prototype.setPortname
//
function AST_NetworkLan_getPortname() { return this._portname;}

AST_NetworkLan.prototype.getPortname = AST_NetworkLan_getPortname;

function AST_NetworkLan_setPortname(value) { this._portname = value;}

AST_NetworkLan.prototype.setPortname = AST_NetworkLan_setPortname;
//
// accessor is AST_NetworkLan.prototype.getType
// element get for type
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for type
// setter function is is AST_NetworkLan.prototype.setType
//
function AST_NetworkLan_getType() { return this._type;}

AST_NetworkLan.prototype.getType = AST_NetworkLan_getType;

function AST_NetworkLan_setType(value) { this._type = value;}

AST_NetworkLan.prototype.setType = AST_NetworkLan_setType;
//
// accessor is AST_NetworkLan.prototype.getRswitch
// element get for rswitch
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for rswitch
// setter function is is AST_NetworkLan.prototype.setRswitch
//
function AST_NetworkLan_getRswitch() { return this._rswitch;}

AST_NetworkLan.prototype.getRswitch = AST_NetworkLan_getRswitch;

function AST_NetworkLan_setRswitch(value) { this._rswitch = value;}

AST_NetworkLan.prototype.setRswitch = AST_NetworkLan_setRswitch;
//
// Serialize {urn:ast}NetworkLan
//
function AST_NetworkLan_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._mac == null) {
      xml = xml + '<jns0:mac xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:mac>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._mac);
      xml = xml + '</jns0:mac>';
     }
    }
    // block for local variables
    {
     if (this._ipaddr == null) {
      xml = xml + '<jns0:ipaddr xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:ipaddr>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._ipaddr);
      xml = xml + '</jns0:ipaddr>';
     }
    }
    // block for local variables
    {
     if (this._netmask == null) {
      xml = xml + '<jns0:netmask xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:netmask>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._netmask);
      xml = xml + '</jns0:netmask>';
     }
    }
    // block for local variables
    {
     if (this._gateway == null) {
      xml = xml + '<jns0:gateway xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:gateway>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._gateway);
      xml = xml + '</jns0:gateway>';
     }
    }
    // block for local variables
    {
     if (this._portname == null) {
      xml = xml + '<jns0:portname xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:portname>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._portname);
      xml = xml + '</jns0:portname>';
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:type>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._type);
     xml = xml + '</jns0:type>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:rswitch>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._rswitch);
     xml = xml + '</jns0:rswitch>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_NetworkLan.prototype.serialize = AST_NetworkLan_serialize;

function AST_NetworkLan_deserialize (cxfjsutils, element) {
    var newobject = new AST_NetworkLan();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing mac');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setMac(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ipaddr');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setIpaddr(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing netmask');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setNetmask(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing gateway');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setGateway(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing portname');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setPortname(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing type');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setType(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing rswitch');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setRswitch(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AnaSave
//
function AST_AnaSave () {
    this.typeMarker = 'AST_AnaSave';
    this._lines = null;
    this._limitLines = null;
    this._sections = null;
    this._fxo = null;
    this._fxs = null;
    this._limit = null;
    this._speeddial = null;
}

//
// accessor is AST_AnaSave.prototype.getLines
// element get for lines
// - element type is {urn:ast}LineArr
// - required element
//
// element set for lines
// setter function is is AST_AnaSave.prototype.setLines
//
function AST_AnaSave_getLines() { return this._lines;}

AST_AnaSave.prototype.getLines = AST_AnaSave_getLines;

function AST_AnaSave_setLines(value) { this._lines = value;}

AST_AnaSave.prototype.setLines = AST_AnaSave_setLines;
//
// accessor is AST_AnaSave.prototype.getLimitLines
// element get for limitLines
// - element type is {urn:ast}LineArr
// - required element
//
// element set for limitLines
// setter function is is AST_AnaSave.prototype.setLimitLines
//
function AST_AnaSave_getLimitLines() { return this._limitLines;}

AST_AnaSave.prototype.getLimitLines = AST_AnaSave_getLimitLines;

function AST_AnaSave_setLimitLines(value) { this._limitLines = value;}

AST_AnaSave.prototype.setLimitLines = AST_AnaSave_setLimitLines;
//
// accessor is AST_AnaSave.prototype.getSections
// element get for sections
// - element type is {urn:ast}SectionArr
// - required element
//
// element set for sections
// setter function is is AST_AnaSave.prototype.setSections
//
function AST_AnaSave_getSections() { return this._sections;}

AST_AnaSave.prototype.getSections = AST_AnaSave_getSections;

function AST_AnaSave_setSections(value) { this._sections = value;}

AST_AnaSave.prototype.setSections = AST_AnaSave_setSections;
//
// accessor is AST_AnaSave.prototype.getFxo
// element get for fxo
// - element type is {urn:ast}AnaContextFxoks
// - optional element
//
// element set for fxo
// setter function is is AST_AnaSave.prototype.setFxo
//
function AST_AnaSave_getFxo() { return this._fxo;}

AST_AnaSave.prototype.getFxo = AST_AnaSave_getFxo;

function AST_AnaSave_setFxo(value) { this._fxo = value;}

AST_AnaSave.prototype.setFxo = AST_AnaSave_setFxo;
//
// accessor is AST_AnaSave.prototype.getFxs
// element get for fxs
// - element type is {urn:ast}AnaContextFxsks
// - optional element
//
// element set for fxs
// setter function is is AST_AnaSave.prototype.setFxs
//
function AST_AnaSave_getFxs() { return this._fxs;}

AST_AnaSave.prototype.getFxs = AST_AnaSave_getFxs;

function AST_AnaSave_setFxs(value) { this._fxs = value;}

AST_AnaSave.prototype.setFxs = AST_AnaSave_setFxs;
//
// accessor is AST_AnaSave.prototype.getLimit
// element get for limit
// - element type is {urn:ast}UcpAlgCalllimit
// - required element
//
// element set for limit
// setter function is is AST_AnaSave.prototype.setLimit
//
function AST_AnaSave_getLimit() { return this._limit;}

AST_AnaSave.prototype.getLimit = AST_AnaSave_getLimit;

function AST_AnaSave_setLimit(value) { this._limit = value;}

AST_AnaSave.prototype.setLimit = AST_AnaSave_setLimit;
//
// accessor is AST_AnaSave.prototype.getSpeeddial
// element get for speeddial
// - element type is {urn:ast}FxsSpeeddialArr
// - required element
//
// element set for speeddial
// setter function is is AST_AnaSave.prototype.setSpeeddial
//
function AST_AnaSave_getSpeeddial() { return this._speeddial;}

AST_AnaSave.prototype.getSpeeddial = AST_AnaSave_getSpeeddial;

function AST_AnaSave_setSpeeddial(value) { this._speeddial = value;}

AST_AnaSave.prototype.setSpeeddial = AST_AnaSave_setSpeeddial;
//
// Serialize {urn:ast}AnaSave
//
function AST_AnaSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._lines.serialize(cxfjsutils, 'jns0:lines', null);
    }
    // block for local variables
    {
     xml = xml + this._limitLines.serialize(cxfjsutils, 'jns0:limitLines', null);
    }
    // block for local variables
    {
     xml = xml + this._sections.serialize(cxfjsutils, 'jns0:sections', null);
    }
    // block for local variables
    {
     if (this._fxo != null) {
      xml = xml + this._fxo.serialize(cxfjsutils, 'jns0:fxo', null);
     }
    }
    // block for local variables
    {
     if (this._fxs != null) {
      xml = xml + this._fxs.serialize(cxfjsutils, 'jns0:fxs', null);
     }
    }
    // block for local variables
    {
     xml = xml + this._limit.serialize(cxfjsutils, 'jns0:limit', null);
    }
    // block for local variables
    {
     xml = xml + this._speeddial.serialize(cxfjsutils, 'jns0:speeddial', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AnaSave.prototype.serialize = AST_AnaSave_serialize;

function AST_AnaSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AnaSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing lines');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_LineArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setLines(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing limitLines');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_LineArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setLimitLines(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sections');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SectionArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setSections(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fxo');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'fxo')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AnaContextFxoks_deserialize(cxfjsutils, curElement);
     }
     newobject.setFxo(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('processing fxs');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'fxs')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AnaContextFxsks_deserialize(cxfjsutils, curElement);
     }
     newobject.setFxs(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing limit');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_UcpAlgCalllimit_deserialize(cxfjsutils, curElement);
    }
    newobject.setLimit(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing speeddial');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_FxsSpeeddialArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setSpeeddial(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SysLoginGet
//
function AST_SysLoginGet () {
    this.typeMarker = 'AST_SysLoginGet';
    this._combuf = null;
    this._ssh = null;
    this._general = null;
}

//
// accessor is AST_SysLoginGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_SysLoginGet.prototype.setCombuf
//
function AST_SysLoginGet_getCombuf() { return this._combuf;}

AST_SysLoginGet.prototype.getCombuf = AST_SysLoginGet_getCombuf;

function AST_SysLoginGet_setCombuf(value) { this._combuf = value;}

AST_SysLoginGet.prototype.setCombuf = AST_SysLoginGet_setCombuf;
//
// accessor is AST_SysLoginGet.prototype.getSsh
// element get for ssh
// - element type is {urn:ast}SysLoginSsh
// - required element
//
// element set for ssh
// setter function is is AST_SysLoginGet.prototype.setSsh
//
function AST_SysLoginGet_getSsh() { return this._ssh;}

AST_SysLoginGet.prototype.getSsh = AST_SysLoginGet_getSsh;

function AST_SysLoginGet_setSsh(value) { this._ssh = value;}

AST_SysLoginGet.prototype.setSsh = AST_SysLoginGet_setSsh;
//
// accessor is AST_SysLoginGet.prototype.getGeneral
// element get for general
// - element type is {urn:ast}SysLoginGeneral
// - required element
//
// element set for general
// setter function is is AST_SysLoginGet.prototype.setGeneral
//
function AST_SysLoginGet_getGeneral() { return this._general;}

AST_SysLoginGet.prototype.getGeneral = AST_SysLoginGet_getGeneral;

function AST_SysLoginGet_setGeneral(value) { this._general = value;}

AST_SysLoginGet.prototype.setGeneral = AST_SysLoginGet_setGeneral;
//
// Serialize {urn:ast}SysLoginGet
//
function AST_SysLoginGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._ssh.serialize(cxfjsutils, 'jns0:ssh', null);
    }
    // block for local variables
    {
     xml = xml + this._general.serialize(cxfjsutils, 'jns0:general', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SysLoginGet.prototype.serialize = AST_SysLoginGet_serialize;

function AST_SysLoginGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_SysLoginGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ssh');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SysLoginSsh_deserialize(cxfjsutils, curElement);
    }
    newobject.setSsh(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing general');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SysLoginGeneral_deserialize(cxfjsutils, curElement);
    }
    newobject.setGeneral(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SysLoginSave
//
function AST_SysLoginSave () {
    this.typeMarker = 'AST_SysLoginSave';
    this._general = null;
    this._ssh = null;
}

//
// accessor is AST_SysLoginSave.prototype.getGeneral
// element get for general
// - element type is {urn:ast}SysLoginGeneral
// - required element
//
// element set for general
// setter function is is AST_SysLoginSave.prototype.setGeneral
//
function AST_SysLoginSave_getGeneral() { return this._general;}

AST_SysLoginSave.prototype.getGeneral = AST_SysLoginSave_getGeneral;

function AST_SysLoginSave_setGeneral(value) { this._general = value;}

AST_SysLoginSave.prototype.setGeneral = AST_SysLoginSave_setGeneral;
//
// accessor is AST_SysLoginSave.prototype.getSsh
// element get for ssh
// - element type is {urn:ast}SysLoginSsh
// - required element
//
// element set for ssh
// setter function is is AST_SysLoginSave.prototype.setSsh
//
function AST_SysLoginSave_getSsh() { return this._ssh;}

AST_SysLoginSave.prototype.getSsh = AST_SysLoginSave_getSsh;

function AST_SysLoginSave_setSsh(value) { this._ssh = value;}

AST_SysLoginSave.prototype.setSsh = AST_SysLoginSave_setSsh;
//
// Serialize {urn:ast}SysLoginSave
//
function AST_SysLoginSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._general.serialize(cxfjsutils, 'jns0:general', null);
    }
    // block for local variables
    {
     xml = xml + this._ssh.serialize(cxfjsutils, 'jns0:ssh', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SysLoginSave.prototype.serialize = AST_SysLoginSave_serialize;

function AST_SysLoginSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_SysLoginSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing general');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SysLoginGeneral_deserialize(cxfjsutils, curElement);
    }
    newobject.setGeneral(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ssh');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SysLoginSsh_deserialize(cxfjsutils, curElement);
    }
    newobject.setSsh(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SnmpV1V2C
//
function AST_SnmpV1V2C () {
    this.typeMarker = 'AST_SnmpV1V2C';
    this._comm = null;
    this._secgrp = null;
    this._view = null;
    this._access = null;
}

//
// accessor is AST_SnmpV1V2C.prototype.getComm
// element get for comm
// - element type is {urn:ast}SnmpCommunity
// - required element
//
// element set for comm
// setter function is is AST_SnmpV1V2C.prototype.setComm
//
function AST_SnmpV1V2C_getComm() { return this._comm;}

AST_SnmpV1V2C.prototype.getComm = AST_SnmpV1V2C_getComm;

function AST_SnmpV1V2C_setComm(value) { this._comm = value;}

AST_SnmpV1V2C.prototype.setComm = AST_SnmpV1V2C_setComm;
//
// accessor is AST_SnmpV1V2C.prototype.getSecgrp
// element get for secgrp
// - element type is {urn:ast}SnmpSecurityGroup
// - required element
//
// element set for secgrp
// setter function is is AST_SnmpV1V2C.prototype.setSecgrp
//
function AST_SnmpV1V2C_getSecgrp() { return this._secgrp;}

AST_SnmpV1V2C.prototype.getSecgrp = AST_SnmpV1V2C_getSecgrp;

function AST_SnmpV1V2C_setSecgrp(value) { this._secgrp = value;}

AST_SnmpV1V2C.prototype.setSecgrp = AST_SnmpV1V2C_setSecgrp;
//
// accessor is AST_SnmpV1V2C.prototype.getView
// element get for view
// - element type is {urn:ast}SnmpView
// - required element
//
// element set for view
// setter function is is AST_SnmpV1V2C.prototype.setView
//
function AST_SnmpV1V2C_getView() { return this._view;}

AST_SnmpV1V2C.prototype.getView = AST_SnmpV1V2C_getView;

function AST_SnmpV1V2C_setView(value) { this._view = value;}

AST_SnmpV1V2C.prototype.setView = AST_SnmpV1V2C_setView;
//
// accessor is AST_SnmpV1V2C.prototype.getAccess
// element get for access
// - element type is {urn:ast}SnmpAccess
// - required element
//
// element set for access
// setter function is is AST_SnmpV1V2C.prototype.setAccess
//
function AST_SnmpV1V2C_getAccess() { return this._access;}

AST_SnmpV1V2C.prototype.getAccess = AST_SnmpV1V2C_getAccess;

function AST_SnmpV1V2C_setAccess(value) { this._access = value;}

AST_SnmpV1V2C.prototype.setAccess = AST_SnmpV1V2C_setAccess;
//
// Serialize {urn:ast}SnmpV1V2C
//
function AST_SnmpV1V2C_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._comm.serialize(cxfjsutils, 'jns0:comm', null);
    }
    // block for local variables
    {
     xml = xml + this._secgrp.serialize(cxfjsutils, 'jns0:secgrp', null);
    }
    // block for local variables
    {
     xml = xml + this._view.serialize(cxfjsutils, 'jns0:view', null);
    }
    // block for local variables
    {
     xml = xml + this._access.serialize(cxfjsutils, 'jns0:access', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SnmpV1V2C.prototype.serialize = AST_SnmpV1V2C_serialize;

function AST_SnmpV1V2C_deserialize (cxfjsutils, element) {
    var newobject = new AST_SnmpV1V2C();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing comm');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SnmpCommunity_deserialize(cxfjsutils, curElement);
    }
    newobject.setComm(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing secgrp');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SnmpSecurityGroup_deserialize(cxfjsutils, curElement);
    }
    newobject.setSecgrp(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing view');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SnmpView_deserialize(cxfjsutils, curElement);
    }
    newobject.setView(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing access');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SnmpAccess_deserialize(cxfjsutils, curElement);
    }
    newobject.setAccess(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}ProvAnaBindArr
//
function AST_ProvAnaBindArr () {
    this.typeMarker = 'AST_ProvAnaBindArr';
    this._item = [];
}

//
// accessor is AST_ProvAnaBindArr.prototype.getItem
// element get for item
// - element type is {urn:ast}ProvAnaBind
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_ProvAnaBindArr.prototype.setItem
//
function AST_ProvAnaBindArr_getItem() { return this._item;}

AST_ProvAnaBindArr.prototype.getItem = AST_ProvAnaBindArr_getItem;

function AST_ProvAnaBindArr_setItem(value) { this._item = value;}

AST_ProvAnaBindArr.prototype.setItem = AST_ProvAnaBindArr_setItem;
//
// Serialize {urn:ast}ProvAnaBindArr
//
function AST_ProvAnaBindArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_ProvAnaBindArr.prototype.serialize = AST_ProvAnaBindArr_serialize;

function AST_ProvAnaBindArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_ProvAnaBindArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_ProvAnaBind_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SysTimeGet
//
function AST_SysTimeGet () {
    this.typeMarker = 'AST_SysTimeGet';
    this._combuf = null;
    this._time = null;
    this._date = null;
}

//
// accessor is AST_SysTimeGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_SysTimeGet.prototype.setCombuf
//
function AST_SysTimeGet_getCombuf() { return this._combuf;}

AST_SysTimeGet.prototype.getCombuf = AST_SysTimeGet_getCombuf;

function AST_SysTimeGet_setCombuf(value) { this._combuf = value;}

AST_SysTimeGet.prototype.setCombuf = AST_SysTimeGet_setCombuf;
//
// accessor is AST_SysTimeGet.prototype.getTime
// element get for time
// - element type is {urn:ast}SysTime
// - required element
//
// element set for time
// setter function is is AST_SysTimeGet.prototype.setTime
//
function AST_SysTimeGet_getTime() { return this._time;}

AST_SysTimeGet.prototype.getTime = AST_SysTimeGet_getTime;

function AST_SysTimeGet_setTime(value) { this._time = value;}

AST_SysTimeGet.prototype.setTime = AST_SysTimeGet_setTime;
//
// accessor is AST_SysTimeGet.prototype.getDate
// element get for date
// - element type is {urn:ast}SysDate
// - required element
//
// element set for date
// setter function is is AST_SysTimeGet.prototype.setDate
//
function AST_SysTimeGet_getDate() { return this._date;}

AST_SysTimeGet.prototype.getDate = AST_SysTimeGet_getDate;

function AST_SysTimeGet_setDate(value) { this._date = value;}

AST_SysTimeGet.prototype.setDate = AST_SysTimeGet_setDate;
//
// Serialize {urn:ast}SysTimeGet
//
function AST_SysTimeGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._time.serialize(cxfjsutils, 'jns0:time', null);
    }
    // block for local variables
    {
     xml = xml + this._date.serialize(cxfjsutils, 'jns0:date', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SysTimeGet.prototype.serialize = AST_SysTimeGet_serialize;

function AST_SysTimeGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_SysTimeGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing time');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SysTime_deserialize(cxfjsutils, curElement);
    }
    newobject.setTime(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing date');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SysDate_deserialize(cxfjsutils, curElement);
    }
    newobject.setDate(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RoutingGroupArr
//
function AST_RoutingGroupArr () {
    this.typeMarker = 'AST_RoutingGroupArr';
    this._item = [];
}

//
// accessor is AST_RoutingGroupArr.prototype.getItem
// element get for item
// - element type is {urn:ast}RoutingGroup
// - required element
// - array
// - nillable
//
// element set for item
// setter function is is AST_RoutingGroupArr.prototype.setItem
//
function AST_RoutingGroupArr_getItem() { return this._item;}

AST_RoutingGroupArr.prototype.getItem = AST_RoutingGroupArr_getItem;

function AST_RoutingGroupArr_setItem(value) { this._item = value;}

AST_RoutingGroupArr.prototype.setItem = AST_RoutingGroupArr_setItem;
//
// Serialize {urn:ast}RoutingGroupArr
//
function AST_RoutingGroupArr_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._item != null) {
      for (var ax = 0;ax < this._item.length;ax ++) {
       if (this._item[ax] == null) {
        xml = xml + '<jns0:item xsi:nil=\'true\'/>';
       } else {
        xml = xml + this._item[ax].serialize(cxfjsutils, 'jns0:item', null);
       }
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RoutingGroupArr.prototype.serialize = AST_RoutingGroupArr_serialize;

function AST_RoutingGroupArr_deserialize (cxfjsutils, element) {
    var newobject = new AST_RoutingGroupArr();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing item');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item')) {
     item = [];
     do  {
      var arrayItem = null;
      var value = null;
      if (!cxfjsutils.isElementNil(curElement)) {
       arrayItem = AST_RoutingGroup_deserialize(cxfjsutils, curElement);
      }
      item.push(arrayItem);
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
       while(curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'item'));
     newobject.setItem(item);
     var item = null;
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SysGeneralGet
//
function AST_SysGeneralGet () {
    this.typeMarker = 'AST_SysGeneralGet';
    this._lang = null;
    this._combuf = null;
    this._langs = null;
    this._autoreboot = null;
    this._date = null;
}

//
// accessor is AST_SysGeneralGet.prototype.getLang
// element get for lang
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - required element
// - nillable
//
// element set for lang
// setter function is is AST_SysGeneralGet.prototype.setLang
//
function AST_SysGeneralGet_getLang() { return this._lang;}

AST_SysGeneralGet.prototype.getLang = AST_SysGeneralGet_getLang;

function AST_SysGeneralGet_setLang(value) { this._lang = value;}

AST_SysGeneralGet.prototype.setLang = AST_SysGeneralGet_setLang;
//
// accessor is AST_SysGeneralGet.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - required element
//
// element set for combuf
// setter function is is AST_SysGeneralGet.prototype.setCombuf
//
function AST_SysGeneralGet_getCombuf() { return this._combuf;}

AST_SysGeneralGet.prototype.getCombuf = AST_SysGeneralGet_getCombuf;

function AST_SysGeneralGet_setCombuf(value) { this._combuf = value;}

AST_SysGeneralGet.prototype.setCombuf = AST_SysGeneralGet_setCombuf;
//
// accessor is AST_SysGeneralGet.prototype.getLangs
// element get for langs
// - element type is {urn:ast}LineArr
// - required element
//
// element set for langs
// setter function is is AST_SysGeneralGet.prototype.setLangs
//
function AST_SysGeneralGet_getLangs() { return this._langs;}

AST_SysGeneralGet.prototype.getLangs = AST_SysGeneralGet_getLangs;

function AST_SysGeneralGet_setLangs(value) { this._langs = value;}

AST_SysGeneralGet.prototype.setLangs = AST_SysGeneralGet_setLangs;
//
// accessor is AST_SysGeneralGet.prototype.getAutoreboot
// element get for autoreboot
// - element type is {urn:ast}SysAuto
// - required element
//
// element set for autoreboot
// setter function is is AST_SysGeneralGet.prototype.setAutoreboot
//
function AST_SysGeneralGet_getAutoreboot() { return this._autoreboot;}

AST_SysGeneralGet.prototype.getAutoreboot = AST_SysGeneralGet_getAutoreboot;

function AST_SysGeneralGet_setAutoreboot(value) { this._autoreboot = value;}

AST_SysGeneralGet.prototype.setAutoreboot = AST_SysGeneralGet_setAutoreboot;
//
// accessor is AST_SysGeneralGet.prototype.getDate
// element get for date
// - element type is {urn:ast}SysDate
// - required element
//
// element set for date
// setter function is is AST_SysGeneralGet.prototype.setDate
//
function AST_SysGeneralGet_getDate() { return this._date;}

AST_SysGeneralGet.prototype.getDate = AST_SysGeneralGet_getDate;

function AST_SysGeneralGet_setDate(value) { this._date = value;}

AST_SysGeneralGet.prototype.setDate = AST_SysGeneralGet_setDate;
//
// Serialize {urn:ast}SysGeneralGet
//
function AST_SysGeneralGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._lang == null) {
      xml = xml + '<jns0:lang xsi:nil=\'true\'/>';
     } else {
      xml = xml + '<jns0:lang>';
      xml = xml + cxfjsutils.escapeXmlEntities(this._lang);
      xml = xml + '</jns0:lang>';
     }
    }
    // block for local variables
    {
     xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
    }
    // block for local variables
    {
     xml = xml + this._langs.serialize(cxfjsutils, 'jns0:langs', null);
    }
    // block for local variables
    {
     xml = xml + this._autoreboot.serialize(cxfjsutils, 'jns0:autoreboot', null);
    }
    // block for local variables
    {
     xml = xml + this._date.serialize(cxfjsutils, 'jns0:date', null);
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SysGeneralGet.prototype.serialize = AST_SysGeneralGet_serialize;

function AST_SysGeneralGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_SysGeneralGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing lang');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setLang(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_common_deserialize(cxfjsutils, curElement);
    }
    newobject.setCombuf(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing langs');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_LineArr_deserialize(cxfjsutils, curElement);
    }
    newobject.setLangs(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing autoreboot');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SysAuto_deserialize(cxfjsutils, curElement);
    }
    newobject.setAutoreboot(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing date');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     item = AST_SysDate_deserialize(cxfjsutils, curElement);
    }
    newobject.setDate(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSysGeneralSaveResponse
//
function AST_AGSysGeneralSaveResponse () {
    this.typeMarker = 'AST_AGSysGeneralSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGSysGeneralSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSysGeneralSaveResponse.prototype.setResult
//
function AST_AGSysGeneralSaveResponse_getResult() { return this._result;}

AST_AGSysGeneralSaveResponse.prototype.getResult = AST_AGSysGeneralSaveResponse_getResult;

function AST_AGSysGeneralSaveResponse_setResult(value) { this._result = value;}

AST_AGSysGeneralSaveResponse.prototype.setResult = AST_AGSysGeneralSaveResponse_setResult;
//
// Serialize {urn:ast}AGSysGeneralSaveResponse
//
function AST_AGSysGeneralSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSysGeneralSaveResponse.prototype.serialize = AST_AGSysGeneralSaveResponse_serialize;

function AST_AGSysGeneralSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSysGeneralSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAdvTr069GetResponse
//
function AST_AGAdvTr069GetResponse () {
    this.typeMarker = 'AST_AGAdvTr069GetResponse';
    this._get = null;
}

//
// accessor is AST_AGAdvTr069GetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}AdvTr069Get
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGAdvTr069GetResponse.prototype.setGet
//
function AST_AGAdvTr069GetResponse_getGet() { return this._get;}

AST_AGAdvTr069GetResponse.prototype.getGet = AST_AGAdvTr069GetResponse_getGet;

function AST_AGAdvTr069GetResponse_setGet(value) { this._get = value;}

AST_AGAdvTr069GetResponse.prototype.setGet = AST_AGAdvTr069GetResponse_setGet;
//
// Serialize {urn:ast}AGAdvTr069GetResponse
//
function AST_AGAdvTr069GetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAdvTr069GetResponse.prototype.serialize = AST_AGAdvTr069GetResponse_serialize;

function AST_AGAdvTr069GetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAdvTr069GetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AdvTr069Get_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkLanSave
//
function AST_AGNetworkLanSave () {
    this.typeMarker = 'AST_AGNetworkLanSave';
    this._save = null;
}

//
// accessor is AST_AGNetworkLanSave.prototype.getSave
// element get for save
// - element type is {urn:ast}NetworkLanSave
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGNetworkLanSave.prototype.setSave
//
function AST_AGNetworkLanSave_getSave() { return this._save;}

AST_AGNetworkLanSave.prototype.getSave = AST_AGNetworkLanSave_getSave;

function AST_AGNetworkLanSave_setSave(value) { this._save = value;}

AST_AGNetworkLanSave.prototype.setSave = AST_AGNetworkLanSave_setSave;
//
// Serialize {urn:ast}AGNetworkLanSave
//
function AST_AGNetworkLanSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkLanSave.prototype.serialize = AST_AGNetworkLanSave_serialize;

function AST_AGNetworkLanSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkLanSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_NetworkLanSave_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGjConRelaysSave
//
function AST_AGjConRelaysSave () {
    this.typeMarker = 'AST_AGjConRelaysSave';
    this._board = 0;
    this._relay = null;
}

//
// accessor is AST_AGjConRelaysSave.prototype.getBoard
// element get for board
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for board
// setter function is is AST_AGjConRelaysSave.prototype.setBoard
//
function AST_AGjConRelaysSave_getBoard() { return this._board;}

AST_AGjConRelaysSave.prototype.getBoard = AST_AGjConRelaysSave_getBoard;

function AST_AGjConRelaysSave_setBoard(value) { this._board = value;}

AST_AGjConRelaysSave.prototype.setBoard = AST_AGjConRelaysSave_setBoard;
//
// accessor is AST_AGjConRelaysSave.prototype.getRelay
// element get for relay
// - element type is {urn:ast}Relay
// - optional element
// - nillable
//
// element set for relay
// setter function is is AST_AGjConRelaysSave.prototype.setRelay
//
function AST_AGjConRelaysSave_getRelay() { return this._relay;}

AST_AGjConRelaysSave.prototype.getRelay = AST_AGjConRelaysSave_getRelay;

function AST_AGjConRelaysSave_setRelay(value) { this._relay = value;}

AST_AGjConRelaysSave.prototype.setRelay = AST_AGjConRelaysSave_setRelay;
//
// Serialize {urn:ast}AGjConRelaysSave
//
function AST_AGjConRelaysSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:board>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._board);
     xml = xml + '</jns0:board>';
    }
    // block for local variables
    {
     if (this._relay != null) {
      if (this._relay == null) {
       xml = xml + '<jns0:relay xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._relay.serialize(cxfjsutils, 'jns0:relay', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGjConRelaysSave.prototype.serialize = AST_AGjConRelaysSave_serialize;

function AST_AGjConRelaysSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGjConRelaysSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing board');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setBoard(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing relay');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'relay')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_Relay_deserialize(cxfjsutils, curElement);
     }
     newobject.setRelay(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAdvCloudSaveResponse
//
function AST_AGAdvCloudSaveResponse () {
    this.typeMarker = 'AST_AGAdvCloudSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGAdvCloudSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGAdvCloudSaveResponse.prototype.setResult
//
function AST_AGAdvCloudSaveResponse_getResult() { return this._result;}

AST_AGAdvCloudSaveResponse.prototype.getResult = AST_AGAdvCloudSaveResponse_getResult;

function AST_AGAdvCloudSaveResponse_setResult(value) { this._result = value;}

AST_AGAdvCloudSaveResponse.prototype.setResult = AST_AGAdvCloudSaveResponse_setResult;
//
// Serialize {urn:ast}AGAdvCloudSaveResponse
//
function AST_AGAdvCloudSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAdvCloudSaveResponse.prototype.serialize = AST_AGAdvCloudSaveResponse_serialize;

function AST_AGAdvCloudSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAdvCloudSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSysGeneralGet
//
function AST_AGSysGeneralGet () {
    this.typeMarker = 'AST_AGSysGeneralGet';
}

//
// Serialize {urn:ast}AGSysGeneralGet
//
function AST_AGSysGeneralGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSysGeneralGet.prototype.serialize = AST_AGSysGeneralGet_serialize;

function AST_AGSysGeneralGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSysGeneralGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgChannelSave
//
function AST_AGAlgChannelSave () {
    this.typeMarker = 'AST_AGAlgChannelSave';
    this._channel = null;
    this._asschl = null;
    this._save = null;
}

//
// accessor is AST_AGAlgChannelSave.prototype.getChannel
// element get for channel
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for channel
// setter function is is AST_AGAlgChannelSave.prototype.setChannel
//
function AST_AGAlgChannelSave_getChannel() { return this._channel;}

AST_AGAlgChannelSave.prototype.getChannel = AST_AGAlgChannelSave_getChannel;

function AST_AGAlgChannelSave_setChannel(value) { this._channel = value;}

AST_AGAlgChannelSave.prototype.setChannel = AST_AGAlgChannelSave_setChannel;
//
// accessor is AST_AGAlgChannelSave.prototype.getAsschl
// element get for asschl
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for asschl
// setter function is is AST_AGAlgChannelSave.prototype.setAsschl
//
function AST_AGAlgChannelSave_getAsschl() { return this._asschl;}

AST_AGAlgChannelSave.prototype.getAsschl = AST_AGAlgChannelSave_getAsschl;

function AST_AGAlgChannelSave_setAsschl(value) { this._asschl = value;}

AST_AGAlgChannelSave.prototype.setAsschl = AST_AGAlgChannelSave_setAsschl;
//
// accessor is AST_AGAlgChannelSave.prototype.getSave
// element get for save
// - element type is {urn:ast}AnaSave
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGAlgChannelSave.prototype.setSave
//
function AST_AGAlgChannelSave_getSave() { return this._save;}

AST_AGAlgChannelSave.prototype.getSave = AST_AGAlgChannelSave_getSave;

function AST_AGAlgChannelSave_setSave(value) { this._save = value;}

AST_AGAlgChannelSave.prototype.setSave = AST_AGAlgChannelSave_setSave;
//
// Serialize {urn:ast}AGAlgChannelSave
//
function AST_AGAlgChannelSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._channel != null) {
      if (this._channel == null) {
       xml = xml + '<jns0:channel xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:channel>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._channel);
       xml = xml + '</jns0:channel>';
      }
     }
    }
    // block for local variables
    {
     if (this._asschl != null) {
      if (this._asschl == null) {
       xml = xml + '<jns0:asschl xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:asschl>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._asschl);
       xml = xml + '</jns0:asschl>';
      }
     }
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgChannelSave.prototype.serialize = AST_AGAlgChannelSave_serialize;

function AST_AGAlgChannelSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgChannelSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing channel');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'channel')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setChannel(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing asschl');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'asschl')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setAsschl(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AnaSave_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkBurnMacGet
//
function AST_AGNetworkBurnMacGet () {
    this.typeMarker = 'AST_AGNetworkBurnMacGet';
}

//
// Serialize {urn:ast}AGNetworkBurnMacGet
//
function AST_AGNetworkBurnMacGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkBurnMacGet.prototype.serialize = AST_AGNetworkBurnMacGet_serialize;

function AST_AGNetworkBurnMacGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkBurnMacGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAdvAstapiGet
//
function AST_AGAdvAstapiGet () {
    this.typeMarker = 'AST_AGAdvAstapiGet';
}

//
// Serialize {urn:ast}AGAdvAstapiGet
//
function AST_AGAdvAstapiGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAdvAstapiGet.prototype.serialize = AST_AGAdvAstapiGet_serialize;

function AST_AGAdvAstapiGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAdvAstapiGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RoutingSave
//
function AST_RoutingSave () {
    this.typeMarker = 'AST_RoutingSave';
    this._oldRouting = null;
    this._newRouting = null;
    this._datachunk = null;
}

//
// accessor is AST_RoutingSave.prototype.getOldRouting
// element get for oldRouting
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for oldRouting
// setter function is is AST_RoutingSave.prototype.setOldRouting
//
function AST_RoutingSave_getOldRouting() { return this._oldRouting;}

AST_RoutingSave.prototype.getOldRouting = AST_RoutingSave_getOldRouting;

function AST_RoutingSave_setOldRouting(value) { this._oldRouting = value;}

AST_RoutingSave.prototype.setOldRouting = AST_RoutingSave_setOldRouting;
//
// accessor is AST_RoutingSave.prototype.getNewRouting
// element get for newRouting
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for newRouting
// setter function is is AST_RoutingSave.prototype.setNewRouting
//
function AST_RoutingSave_getNewRouting() { return this._newRouting;}

AST_RoutingSave.prototype.getNewRouting = AST_RoutingSave_getNewRouting;

function AST_RoutingSave_setNewRouting(value) { this._newRouting = value;}

AST_RoutingSave.prototype.setNewRouting = AST_RoutingSave_setNewRouting;
//
// accessor is AST_RoutingSave.prototype.getDatachunk
// element get for datachunk
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for datachunk
// setter function is is AST_RoutingSave.prototype.setDatachunk
//
function AST_RoutingSave_getDatachunk() { return this._datachunk;}

AST_RoutingSave.prototype.getDatachunk = AST_RoutingSave_getDatachunk;

function AST_RoutingSave_setDatachunk(value) { this._datachunk = value;}

AST_RoutingSave.prototype.setDatachunk = AST_RoutingSave_setDatachunk;
//
// Serialize {urn:ast}RoutingSave
//
function AST_RoutingSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._oldRouting != null) {
      if (this._oldRouting == null) {
       xml = xml + '<jns0:oldRouting xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:oldRouting>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._oldRouting);
       xml = xml + '</jns0:oldRouting>';
      }
     }
    }
    // block for local variables
    {
     if (this._newRouting != null) {
      if (this._newRouting == null) {
       xml = xml + '<jns0:newRouting xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:newRouting>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._newRouting);
       xml = xml + '</jns0:newRouting>';
      }
     }
    }
    // block for local variables
    {
     if (this._datachunk != null) {
      if (this._datachunk == null) {
       xml = xml + '<jns0:datachunk xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:datachunk>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._datachunk);
       xml = xml + '</jns0:datachunk>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RoutingSave.prototype.serialize = AST_RoutingSave_serialize;

function AST_RoutingSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_RoutingSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing oldRouting');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'oldRouting')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setOldRouting(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing newRouting');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'newRouting')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setNewRouting(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing datachunk');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'datachunk')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setDatachunk(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}IaxDelEndpoint
//
function AST_IaxDelEndpoint () {
    this.typeMarker = 'AST_IaxDelEndpoint';
    this._endpointName = null;
}

//
// accessor is AST_IaxDelEndpoint.prototype.getEndpointName
// element get for endpointName
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for endpointName
// setter function is is AST_IaxDelEndpoint.prototype.setEndpointName
//
function AST_IaxDelEndpoint_getEndpointName() { return this._endpointName;}

AST_IaxDelEndpoint.prototype.getEndpointName = AST_IaxDelEndpoint_getEndpointName;

function AST_IaxDelEndpoint_setEndpointName(value) { this._endpointName = value;}

AST_IaxDelEndpoint.prototype.setEndpointName = AST_IaxDelEndpoint_setEndpointName;
//
// Serialize {urn:ast}IaxDelEndpoint
//
function AST_IaxDelEndpoint_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._endpointName != null) {
      if (this._endpointName == null) {
       xml = xml + '<jns0:endpointName xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:endpointName>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._endpointName);
       xml = xml + '</jns0:endpointName>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_IaxDelEndpoint.prototype.serialize = AST_IaxDelEndpoint_serialize;

function AST_IaxDelEndpoint_deserialize (cxfjsutils, element) {
    var newobject = new AST_IaxDelEndpoint();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing endpointName');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'endpointName')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setEndpointName(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkSnmpGet
//
function AST_AGNetworkSnmpGet () {
    this.typeMarker = 'AST_AGNetworkSnmpGet';
}

//
// Serialize {urn:ast}AGNetworkSnmpGet
//
function AST_AGNetworkSnmpGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkSnmpGet.prototype.serialize = AST_AGNetworkSnmpGet_serialize;

function AST_AGNetworkSnmpGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkSnmpGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingGroupsDialSaveResponse
//
function AST_AGRoutingGroupsDialSaveResponse () {
    this.typeMarker = 'AST_AGRoutingGroupsDialSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGRoutingGroupsDialSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGRoutingGroupsDialSaveResponse.prototype.setResult
//
function AST_AGRoutingGroupsDialSaveResponse_getResult() { return this._result;}

AST_AGRoutingGroupsDialSaveResponse.prototype.getResult = AST_AGRoutingGroupsDialSaveResponse_getResult;

function AST_AGRoutingGroupsDialSaveResponse_setResult(value) { this._result = value;}

AST_AGRoutingGroupsDialSaveResponse.prototype.setResult = AST_AGRoutingGroupsDialSaveResponse_setResult;
//
// Serialize {urn:ast}AGRoutingGroupsDialSaveResponse
//
function AST_AGRoutingGroupsDialSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingGroupsDialSaveResponse.prototype.serialize = AST_AGRoutingGroupsDialSaveResponse_serialize;

function AST_AGRoutingGroupsDialSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingGroupsDialSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkLanSaveResponse
//
function AST_AGNetworkLanSaveResponse () {
    this.typeMarker = 'AST_AGNetworkLanSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGNetworkLanSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGNetworkLanSaveResponse.prototype.setResult
//
function AST_AGNetworkLanSaveResponse_getResult() { return this._result;}

AST_AGNetworkLanSaveResponse.prototype.getResult = AST_AGNetworkLanSaveResponse_getResult;

function AST_AGNetworkLanSaveResponse_setResult(value) { this._result = value;}

AST_AGNetworkLanSaveResponse.prototype.setResult = AST_AGNetworkLanSaveResponse_setResult;
//
// Serialize {urn:ast}AGNetworkLanSaveResponse
//
function AST_AGNetworkLanSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkLanSaveResponse.prototype.serialize = AST_AGNetworkLanSaveResponse_serialize;

function AST_AGNetworkLanSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkLanSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRegisterParaGet
//
function AST_AGRegisterParaGet () {
    this.typeMarker = 'AST_AGRegisterParaGet';
}

//
// Serialize {urn:ast}AGRegisterParaGet
//
function AST_AGRegisterParaGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRegisterParaGet.prototype.serialize = AST_AGRegisterParaGet_serialize;

function AST_AGRegisterParaGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRegisterParaGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RtpGetAllResponse
//
function AST_RtpGetAllResponse () {
    this.typeMarker = 'AST_RtpGetAllResponse';
    this._result = null;
}

//
// accessor is AST_RtpGetAllResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for result
// setter function is is AST_RtpGetAllResponse.prototype.setResult
//
function AST_RtpGetAllResponse_getResult() { return this._result;}

AST_RtpGetAllResponse.prototype.getResult = AST_RtpGetAllResponse_getResult;

function AST_RtpGetAllResponse_setResult(value) { this._result = value;}

AST_RtpGetAllResponse.prototype.setResult = AST_RtpGetAllResponse_setResult;
//
// Serialize {urn:ast}RtpGetAllResponse
//
function AST_RtpGetAllResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._result != null) {
      if (this._result == null) {
       xml = xml + '<jns0:result xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:result>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._result);
       xml = xml + '</jns0:result>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RtpGetAllResponse.prototype.serialize = AST_RtpGetAllResponse_serialize;

function AST_RtpGetAllResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_RtpGetAllResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'result')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setResult(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingGroupGetNewResponse
//
function AST_AGRoutingGroupGetNewResponse () {
    this.typeMarker = 'AST_AGRoutingGroupGetNewResponse';
    this._get = null;
}

//
// accessor is AST_AGRoutingGroupGetNewResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}RoutingGroupGetNew
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGRoutingGroupGetNewResponse.prototype.setGet
//
function AST_AGRoutingGroupGetNewResponse_getGet() { return this._get;}

AST_AGRoutingGroupGetNewResponse.prototype.getGet = AST_AGRoutingGroupGetNewResponse_getGet;

function AST_AGRoutingGroupGetNewResponse_setGet(value) { this._get = value;}

AST_AGRoutingGroupGetNewResponse.prototype.setGet = AST_AGRoutingGroupGetNewResponse_setGet;
//
// Serialize {urn:ast}AGRoutingGroupGetNewResponse
//
function AST_AGRoutingGroupGetNewResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingGroupGetNewResponse.prototype.serialize = AST_AGRoutingGroupGetNewResponse_serialize;

function AST_AGRoutingGroupGetNewResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingGroupGetNewResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_RoutingGroupGetNew_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingRulesSaveOrderResponse
//
function AST_AGRoutingRulesSaveOrderResponse () {
    this.typeMarker = 'AST_AGRoutingRulesSaveOrderResponse';
    this._result = 0;
}

//
// accessor is AST_AGRoutingRulesSaveOrderResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGRoutingRulesSaveOrderResponse.prototype.setResult
//
function AST_AGRoutingRulesSaveOrderResponse_getResult() { return this._result;}

AST_AGRoutingRulesSaveOrderResponse.prototype.getResult = AST_AGRoutingRulesSaveOrderResponse_getResult;

function AST_AGRoutingRulesSaveOrderResponse_setResult(value) { this._result = value;}

AST_AGRoutingRulesSaveOrderResponse.prototype.setResult = AST_AGRoutingRulesSaveOrderResponse_setResult;
//
// Serialize {urn:ast}AGRoutingRulesSaveOrderResponse
//
function AST_AGRoutingRulesSaveOrderResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingRulesSaveOrderResponse.prototype.serialize = AST_AGRoutingRulesSaveOrderResponse_serialize;

function AST_AGRoutingRulesSaveOrderResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingRulesSaveOrderResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgFunkySaveResponse
//
function AST_AGAlgFunkySaveResponse () {
    this.typeMarker = 'AST_AGAlgFunkySaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGAlgFunkySaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGAlgFunkySaveResponse.prototype.setResult
//
function AST_AGAlgFunkySaveResponse_getResult() { return this._result;}

AST_AGAlgFunkySaveResponse.prototype.getResult = AST_AGAlgFunkySaveResponse_getResult;

function AST_AGAlgFunkySaveResponse_setResult(value) { this._result = value;}

AST_AGAlgFunkySaveResponse.prototype.setResult = AST_AGAlgFunkySaveResponse_setResult;
//
// Serialize {urn:ast}AGAlgFunkySaveResponse
//
function AST_AGAlgFunkySaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgFunkySaveResponse.prototype.serialize = AST_AGAlgFunkySaveResponse_serialize;

function AST_AGAlgFunkySaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgFunkySaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemToolsUpdatefireware
//
function AST_AGSystemToolsUpdatefireware () {
    this.typeMarker = 'AST_AGSystemToolsUpdatefireware';
}

//
// Serialize {urn:ast}AGSystemToolsUpdatefireware
//
function AST_AGSystemToolsUpdatefireware_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemToolsUpdatefireware.prototype.serialize = AST_AGSystemToolsUpdatefireware_serialize;

function AST_AGSystemToolsUpdatefireware_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemToolsUpdatefireware();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipBendpointGetResponse
//
function AST_AGSipBendpointGetResponse () {
    this.typeMarker = 'AST_AGSipBendpointGetResponse';
    this._sipbend = null;
}

//
// accessor is AST_AGSipBendpointGetResponse.prototype.getSipbend
// element get for sipbend
// - element type is {urn:ast}SipBendGet
// - optional element
// - nillable
//
// element set for sipbend
// setter function is is AST_AGSipBendpointGetResponse.prototype.setSipbend
//
function AST_AGSipBendpointGetResponse_getSipbend() { return this._sipbend;}

AST_AGSipBendpointGetResponse.prototype.getSipbend = AST_AGSipBendpointGetResponse_getSipbend;

function AST_AGSipBendpointGetResponse_setSipbend(value) { this._sipbend = value;}

AST_AGSipBendpointGetResponse.prototype.setSipbend = AST_AGSipBendpointGetResponse_setSipbend;
//
// Serialize {urn:ast}AGSipBendpointGetResponse
//
function AST_AGSipBendpointGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._sipbend != null) {
      if (this._sipbend == null) {
       xml = xml + '<jns0:sipbend xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._sipbend.serialize(cxfjsutils, 'jns0:sipbend', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipBendpointGetResponse.prototype.serialize = AST_AGSipBendpointGetResponse_serialize;

function AST_AGSipBendpointGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipBendpointGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sipbend');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'sipbend')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SipBendGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setSipbend(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGGetFXSPortsStatusResponse
//
function AST_AGGetFXSPortsStatusResponse () {
    this.typeMarker = 'AST_AGGetFXSPortsStatusResponse';
    this._ProtStatus = null;
}

//
// accessor is AST_AGGetFXSPortsStatusResponse.prototype.getProtStatus
// element get for ProtStatus
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for ProtStatus
// setter function is is AST_AGGetFXSPortsStatusResponse.prototype.setProtStatus
//
function AST_AGGetFXSPortsStatusResponse_getProtStatus() { return this._ProtStatus;}

AST_AGGetFXSPortsStatusResponse.prototype.getProtStatus = AST_AGGetFXSPortsStatusResponse_getProtStatus;

function AST_AGGetFXSPortsStatusResponse_setProtStatus(value) { this._ProtStatus = value;}

AST_AGGetFXSPortsStatusResponse.prototype.setProtStatus = AST_AGGetFXSPortsStatusResponse_setProtStatus;
//
// Serialize {urn:ast}AGGetFXSPortsStatusResponse
//
function AST_AGGetFXSPortsStatusResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._ProtStatus != null) {
      if (this._ProtStatus == null) {
       xml = xml + '<jns0:ProtStatus xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:ProtStatus>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._ProtStatus);
       xml = xml + '</jns0:ProtStatus>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGGetFXSPortsStatusResponse.prototype.serialize = AST_AGGetFXSPortsStatusResponse_serialize;

function AST_AGGetFXSPortsStatusResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGGetFXSPortsStatusResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ProtStatus');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'ProtStatus')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setProtStatus(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipGeneralGetAll
//
function AST_SipGeneralGetAll () {
    this.typeMarker = 'AST_SipGeneralGetAll';
}

//
// Serialize {urn:ast}SipGeneralGetAll
//
function AST_SipGeneralGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipGeneralGetAll.prototype.serialize = AST_SipGeneralGetAll_serialize;

function AST_SipGeneralGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipGeneralGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSysLoginSave
//
function AST_AGSysLoginSave () {
    this.typeMarker = 'AST_AGSysLoginSave';
    this._save = null;
}

//
// accessor is AST_AGSysLoginSave.prototype.getSave
// element get for save
// - element type is {urn:ast}SysLoginSave
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGSysLoginSave.prototype.setSave
//
function AST_AGSysLoginSave_getSave() { return this._save;}

AST_AGSysLoginSave.prototype.getSave = AST_AGSysLoginSave_getSave;

function AST_AGSysLoginSave_setSave(value) { this._save = value;}

AST_AGSysLoginSave.prototype.setSave = AST_AGSysLoginSave_setSave;
//
// Serialize {urn:ast}AGSysLoginSave
//
function AST_AGSysLoginSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSysLoginSave.prototype.serialize = AST_AGSysLoginSave_serialize;

function AST_AGSysLoginSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSysLoginSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SysLoginSave_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgChannelSaveAllResponse
//
function AST_AGAlgChannelSaveAllResponse () {
    this.typeMarker = 'AST_AGAlgChannelSaveAllResponse';
    this._result = 0;
}

//
// accessor is AST_AGAlgChannelSaveAllResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGAlgChannelSaveAllResponse.prototype.setResult
//
function AST_AGAlgChannelSaveAllResponse_getResult() { return this._result;}

AST_AGAlgChannelSaveAllResponse.prototype.getResult = AST_AGAlgChannelSaveAllResponse_getResult;

function AST_AGAlgChannelSaveAllResponse_setResult(value) { this._result = value;}

AST_AGAlgChannelSaveAllResponse.prototype.setResult = AST_AGAlgChannelSaveAllResponse_setResult;
//
// Serialize {urn:ast}AGAlgChannelSaveAllResponse
//
function AST_AGAlgChannelSaveAllResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgChannelSaveAllResponse.prototype.serialize = AST_AGAlgChannelSaveAllResponse_serialize;

function AST_AGAlgChannelSaveAllResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgChannelSaveAllResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGTagDel
//
function AST_AGTagDel () {
    this.typeMarker = 'AST_AGTagDel';
    this._message = null;
}

//
// accessor is AST_AGTagDel.prototype.getMessage
// element get for message
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for message
// setter function is is AST_AGTagDel.prototype.setMessage
//
function AST_AGTagDel_getMessage() { return this._message;}

AST_AGTagDel.prototype.getMessage = AST_AGTagDel_getMessage;

function AST_AGTagDel_setMessage(value) { this._message = value;}

AST_AGTagDel.prototype.setMessage = AST_AGTagDel_setMessage;
//
// Serialize {urn:ast}AGTagDel
//
function AST_AGTagDel_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._message != null) {
      if (this._message == null) {
       xml = xml + '<jns0:message xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:message>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._message);
       xml = xml + '</jns0:message>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGTagDel.prototype.serialize = AST_AGTagDel_serialize;

function AST_AGTagDel_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGTagDel();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing message');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'message')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setMessage(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RoutingOrderResponse
//
function AST_RoutingOrderResponse () {
    this.typeMarker = 'AST_RoutingOrderResponse';
    this._result = 0;
}

//
// accessor is AST_RoutingOrderResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_RoutingOrderResponse.prototype.setResult
//
function AST_RoutingOrderResponse_getResult() { return this._result;}

AST_RoutingOrderResponse.prototype.getResult = AST_RoutingOrderResponse_getResult;

function AST_RoutingOrderResponse_setResult(value) { this._result = value;}

AST_RoutingOrderResponse.prototype.setResult = AST_RoutingOrderResponse_setResult;
//
// Serialize {urn:ast}RoutingOrderResponse
//
function AST_RoutingOrderResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RoutingOrderResponse.prototype.serialize = AST_RoutingOrderResponse_serialize;

function AST_RoutingOrderResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_RoutingOrderResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkWanGet
//
function AST_AGNetworkWanGet () {
    this.typeMarker = 'AST_AGNetworkWanGet';
}

//
// Serialize {urn:ast}AGNetworkWanGet
//
function AST_AGNetworkWanGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkWanGet.prototype.serialize = AST_AGNetworkWanGet_serialize;

function AST_AGNetworkWanGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkWanGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkRulesGetOne
//
function AST_AGNetworkRulesGetOne () {
    this.typeMarker = 'AST_AGNetworkRulesGetOne';
    this._rulename = null;
}

//
// accessor is AST_AGNetworkRulesGetOne.prototype.getRulename
// element get for rulename
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for rulename
// setter function is is AST_AGNetworkRulesGetOne.prototype.setRulename
//
function AST_AGNetworkRulesGetOne_getRulename() { return this._rulename;}

AST_AGNetworkRulesGetOne.prototype.getRulename = AST_AGNetworkRulesGetOne_getRulename;

function AST_AGNetworkRulesGetOne_setRulename(value) { this._rulename = value;}

AST_AGNetworkRulesGetOne.prototype.setRulename = AST_AGNetworkRulesGetOne_setRulename;
//
// Serialize {urn:ast}AGNetworkRulesGetOne
//
function AST_AGNetworkRulesGetOne_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._rulename != null) {
      if (this._rulename == null) {
       xml = xml + '<jns0:rulename xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:rulename>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._rulename);
       xml = xml + '</jns0:rulename>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkRulesGetOne.prototype.serialize = AST_AGNetworkRulesGetOne_serialize;

function AST_AGNetworkRulesGetOne_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkRulesGetOne();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing rulename');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'rulename')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setRulename(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAdvAstcliGet
//
function AST_AGAdvAstcliGet () {
    this.typeMarker = 'AST_AGAdvAstcliGet';
}

//
// Serialize {urn:ast}AGAdvAstcliGet
//
function AST_AGAdvAstcliGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAdvAstcliGet.prototype.serialize = AST_AGAdvAstcliGet_serialize;

function AST_AGAdvAstcliGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAdvAstcliGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemToolGet
//
function AST_AGSystemToolGet () {
    this.typeMarker = 'AST_AGSystemToolGet';
}

//
// Serialize {urn:ast}AGSystemToolGet
//
function AST_AGSystemToolGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemToolGet.prototype.serialize = AST_AGSystemToolGet_serialize;

function AST_AGSystemToolGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemToolGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingRulsSaveResponse
//
function AST_AGRoutingRulsSaveResponse () {
    this.typeMarker = 'AST_AGRoutingRulsSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGRoutingRulsSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGRoutingRulsSaveResponse.prototype.setResult
//
function AST_AGRoutingRulsSaveResponse_getResult() { return this._result;}

AST_AGRoutingRulsSaveResponse.prototype.getResult = AST_AGRoutingRulsSaveResponse_getResult;

function AST_AGRoutingRulsSaveResponse_setResult(value) { this._result = value;}

AST_AGRoutingRulsSaveResponse.prototype.setResult = AST_AGRoutingRulsSaveResponse_setResult;
//
// Serialize {urn:ast}AGRoutingRulsSaveResponse
//
function AST_AGRoutingRulsSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingRulsSaveResponse.prototype.serialize = AST_AGRoutingRulsSaveResponse_serialize;

function AST_AGRoutingRulsSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingRulsSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingGroupsDelResponse
//
function AST_AGRoutingGroupsDelResponse () {
    this.typeMarker = 'AST_AGRoutingGroupsDelResponse';
    this._result = 0;
}

//
// accessor is AST_AGRoutingGroupsDelResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGRoutingGroupsDelResponse.prototype.setResult
//
function AST_AGRoutingGroupsDelResponse_getResult() { return this._result;}

AST_AGRoutingGroupsDelResponse.prototype.getResult = AST_AGRoutingGroupsDelResponse_getResult;

function AST_AGRoutingGroupsDelResponse_setResult(value) { this._result = value;}

AST_AGRoutingGroupsDelResponse.prototype.setResult = AST_AGRoutingGroupsDelResponse_setResult;
//
// Serialize {urn:ast}AGRoutingGroupsDelResponse
//
function AST_AGRoutingGroupsDelResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingGroupsDelResponse.prototype.serialize = AST_AGRoutingGroupsDelResponse_serialize;

function AST_AGRoutingGroupsDelResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingGroupsDelResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkDdnsGetAll
//
function AST_AGNetworkDdnsGetAll () {
    this.typeMarker = 'AST_AGNetworkDdnsGetAll';
}

//
// Serialize {urn:ast}AGNetworkDdnsGetAll
//
function AST_AGNetworkDdnsGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkDdnsGetAll.prototype.serialize = AST_AGNetworkDdnsGetAll_serialize;

function AST_AGNetworkDdnsGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkDdnsGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipEndpointsNewGet
//
function AST_AGSipEndpointsNewGet () {
    this.typeMarker = 'AST_AGSipEndpointsNewGet';
}

//
// Serialize {urn:ast}AGSipEndpointsNewGet
//
function AST_AGSipEndpointsNewGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipEndpointsNewGet.prototype.serialize = AST_AGSipEndpointsNewGet_serialize;

function AST_AGSipEndpointsNewGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipEndpointsNewGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipEndpointOperationResponse
//
function AST_AGSipEndpointOperationResponse () {
    this.typeMarker = 'AST_AGSipEndpointOperationResponse';
    this._result = 0;
}

//
// accessor is AST_AGSipEndpointOperationResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSipEndpointOperationResponse.prototype.setResult
//
function AST_AGSipEndpointOperationResponse_getResult() { return this._result;}

AST_AGSipEndpointOperationResponse.prototype.getResult = AST_AGSipEndpointOperationResponse_getResult;

function AST_AGSipEndpointOperationResponse_setResult(value) { this._result = value;}

AST_AGSipEndpointOperationResponse.prototype.setResult = AST_AGSipEndpointOperationResponse_setResult;
//
// Serialize {urn:ast}AGSipEndpointOperationResponse
//
function AST_AGSipEndpointOperationResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipEndpointOperationResponse.prototype.serialize = AST_AGSipEndpointOperationResponse_serialize;

function AST_AGSipEndpointOperationResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipEndpointOperationResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipEndpointsSync
//
function AST_AGSipEndpointsSync () {
    this.typeMarker = 'AST_AGSipEndpointsSync';
    this._lines = null;
    this._sections = null;
}

//
// accessor is AST_AGSipEndpointsSync.prototype.getLines
// element get for lines
// - element type is {urn:ast}LineArr
// - optional element
// - nillable
//
// element set for lines
// setter function is is AST_AGSipEndpointsSync.prototype.setLines
//
function AST_AGSipEndpointsSync_getLines() { return this._lines;}

AST_AGSipEndpointsSync.prototype.getLines = AST_AGSipEndpointsSync_getLines;

function AST_AGSipEndpointsSync_setLines(value) { this._lines = value;}

AST_AGSipEndpointsSync.prototype.setLines = AST_AGSipEndpointsSync_setLines;
//
// accessor is AST_AGSipEndpointsSync.prototype.getSections
// element get for sections
// - element type is {urn:ast}SectionArr
// - optional element
// - nillable
//
// element set for sections
// setter function is is AST_AGSipEndpointsSync.prototype.setSections
//
function AST_AGSipEndpointsSync_getSections() { return this._sections;}

AST_AGSipEndpointsSync.prototype.getSections = AST_AGSipEndpointsSync_getSections;

function AST_AGSipEndpointsSync_setSections(value) { this._sections = value;}

AST_AGSipEndpointsSync.prototype.setSections = AST_AGSipEndpointsSync_setSections;
//
// Serialize {urn:ast}AGSipEndpointsSync
//
function AST_AGSipEndpointsSync_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._lines != null) {
      if (this._lines == null) {
       xml = xml + '<jns0:lines xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._lines.serialize(cxfjsutils, 'jns0:lines', null);
      }
     }
    }
    // block for local variables
    {
     if (this._sections != null) {
      if (this._sections == null) {
       xml = xml + '<jns0:sections xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._sections.serialize(cxfjsutils, 'jns0:sections', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipEndpointsSync.prototype.serialize = AST_AGSipEndpointsSync_serialize;

function AST_AGSipEndpointsSync_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipEndpointsSync();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing lines');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'lines')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_LineArr_deserialize(cxfjsutils, curElement);
     }
     newobject.setLines(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sections');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'sections')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SectionArr_deserialize(cxfjsutils, curElement);
     }
     newobject.setSections(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipAdvSettingSaveResponse
//
function AST_AGSipAdvSettingSaveResponse () {
    this.typeMarker = 'AST_AGSipAdvSettingSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGSipAdvSettingSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSipAdvSettingSaveResponse.prototype.setResult
//
function AST_AGSipAdvSettingSaveResponse_getResult() { return this._result;}

AST_AGSipAdvSettingSaveResponse.prototype.getResult = AST_AGSipAdvSettingSaveResponse_getResult;

function AST_AGSipAdvSettingSaveResponse_setResult(value) { this._result = value;}

AST_AGSipAdvSettingSaveResponse.prototype.setResult = AST_AGSipAdvSettingSaveResponse_setResult;
//
// Serialize {urn:ast}AGSipAdvSettingSaveResponse
//
function AST_AGSipAdvSettingSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipAdvSettingSaveResponse.prototype.serialize = AST_AGSipAdvSettingSaveResponse_serialize;

function AST_AGSipAdvSettingSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipAdvSettingSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipGeneralSaveResponse
//
function AST_SipGeneralSaveResponse () {
    this.typeMarker = 'AST_SipGeneralSaveResponse';
    this._result = 0;
}

//
// accessor is AST_SipGeneralSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_SipGeneralSaveResponse.prototype.setResult
//
function AST_SipGeneralSaveResponse_getResult() { return this._result;}

AST_SipGeneralSaveResponse.prototype.getResult = AST_SipGeneralSaveResponse_getResult;

function AST_SipGeneralSaveResponse_setResult(value) { this._result = value;}

AST_SipGeneralSaveResponse.prototype.setResult = AST_SipGeneralSaveResponse_setResult;
//
// Serialize {urn:ast}SipGeneralSaveResponse
//
function AST_SipGeneralSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipGeneralSaveResponse.prototype.serialize = AST_SipGeneralSaveResponse_serialize;

function AST_SipGeneralSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipGeneralSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGUcpAlgDriverGet
//
function AST_AGUcpAlgDriverGet () {
    this.typeMarker = 'AST_AGUcpAlgDriverGet';
}

//
// Serialize {urn:ast}AGUcpAlgDriverGet
//
function AST_AGUcpAlgDriverGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGUcpAlgDriverGet.prototype.serialize = AST_AGUcpAlgDriverGet_serialize;

function AST_AGUcpAlgDriverGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGUcpAlgDriverGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgSecSettingDeleteKeyResponse
//
function AST_AGAlgSecSettingDeleteKeyResponse () {
    this.typeMarker = 'AST_AGAlgSecSettingDeleteKeyResponse';
    this._result = 0;
}

//
// accessor is AST_AGAlgSecSettingDeleteKeyResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGAlgSecSettingDeleteKeyResponse.prototype.setResult
//
function AST_AGAlgSecSettingDeleteKeyResponse_getResult() { return this._result;}

AST_AGAlgSecSettingDeleteKeyResponse.prototype.getResult = AST_AGAlgSecSettingDeleteKeyResponse_getResult;

function AST_AGAlgSecSettingDeleteKeyResponse_setResult(value) { this._result = value;}

AST_AGAlgSecSettingDeleteKeyResponse.prototype.setResult = AST_AGAlgSecSettingDeleteKeyResponse_setResult;
//
// Serialize {urn:ast}AGAlgSecSettingDeleteKeyResponse
//
function AST_AGAlgSecSettingDeleteKeyResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgSecSettingDeleteKeyResponse.prototype.serialize = AST_AGAlgSecSettingDeleteKeyResponse_serialize;

function AST_AGAlgSecSettingDeleteKeyResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgSecSettingDeleteKeyResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkLanGet
//
function AST_AGNetworkLanGet () {
    this.typeMarker = 'AST_AGNetworkLanGet';
}

//
// Serialize {urn:ast}AGNetworkLanGet
//
function AST_AGNetworkLanGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkLanGet.prototype.serialize = AST_AGNetworkLanGet_serialize;

function AST_AGNetworkLanGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkLanGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemDHCPUpdateGet
//
function AST_AGSystemDHCPUpdateGet () {
    this.typeMarker = 'AST_AGSystemDHCPUpdateGet';
}

//
// Serialize {urn:ast}AGSystemDHCPUpdateGet
//
function AST_AGSystemDHCPUpdateGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemDHCPUpdateGet.prototype.serialize = AST_AGSystemDHCPUpdateGet_serialize;

function AST_AGSystemDHCPUpdateGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemDHCPUpdateGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAdvAstfileeditorEditGetAll
//
function AST_AGAdvAstfileeditorEditGetAll () {
    this.typeMarker = 'AST_AGAdvAstfileeditorEditGetAll';
}

//
// Serialize {urn:ast}AGAdvAstfileeditorEditGetAll
//
function AST_AGAdvAstfileeditorEditGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAdvAstfileeditorEditGetAll.prototype.serialize = AST_AGAdvAstfileeditorEditGetAll_serialize;

function AST_AGAdvAstfileeditorEditGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAdvAstfileeditorEditGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkRulesSave
//
function AST_AGNetworkRulesSave () {
    this.typeMarker = 'AST_AGNetworkRulesSave';
    this._oldname = null;
    this._newname = null;
    this._save = null;
}

//
// accessor is AST_AGNetworkRulesSave.prototype.getOldname
// element get for oldname
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for oldname
// setter function is is AST_AGNetworkRulesSave.prototype.setOldname
//
function AST_AGNetworkRulesSave_getOldname() { return this._oldname;}

AST_AGNetworkRulesSave.prototype.getOldname = AST_AGNetworkRulesSave_getOldname;

function AST_AGNetworkRulesSave_setOldname(value) { this._oldname = value;}

AST_AGNetworkRulesSave.prototype.setOldname = AST_AGNetworkRulesSave_setOldname;
//
// accessor is AST_AGNetworkRulesSave.prototype.getNewname
// element get for newname
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for newname
// setter function is is AST_AGNetworkRulesSave.prototype.setNewname
//
function AST_AGNetworkRulesSave_getNewname() { return this._newname;}

AST_AGNetworkRulesSave.prototype.getNewname = AST_AGNetworkRulesSave_getNewname;

function AST_AGNetworkRulesSave_setNewname(value) { this._newname = value;}

AST_AGNetworkRulesSave.prototype.setNewname = AST_AGNetworkRulesSave_setNewname;
//
// accessor is AST_AGNetworkRulesSave.prototype.getSave
// element get for save
// - element type is {urn:ast}UcpNetworkRules
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGNetworkRulesSave.prototype.setSave
//
function AST_AGNetworkRulesSave_getSave() { return this._save;}

AST_AGNetworkRulesSave.prototype.getSave = AST_AGNetworkRulesSave_getSave;

function AST_AGNetworkRulesSave_setSave(value) { this._save = value;}

AST_AGNetworkRulesSave.prototype.setSave = AST_AGNetworkRulesSave_setSave;
//
// Serialize {urn:ast}AGNetworkRulesSave
//
function AST_AGNetworkRulesSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._oldname != null) {
      if (this._oldname == null) {
       xml = xml + '<jns0:oldname xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:oldname>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._oldname);
       xml = xml + '</jns0:oldname>';
      }
     }
    }
    // block for local variables
    {
     if (this._newname != null) {
      if (this._newname == null) {
       xml = xml + '<jns0:newname xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:newname>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._newname);
       xml = xml + '</jns0:newname>';
      }
     }
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkRulesSave.prototype.serialize = AST_AGNetworkRulesSave_serialize;

function AST_AGNetworkRulesSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkRulesSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing oldname');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'oldname')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setOldname(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing newname');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'newname')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setNewname(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_UcpNetworkRules_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGLogSettingsGet
//
function AST_AGLogSettingsGet () {
    this.typeMarker = 'AST_AGLogSettingsGet';
}

//
// Serialize {urn:ast}AGLogSettingsGet
//
function AST_AGLogSettingsGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGLogSettingsGet.prototype.serialize = AST_AGLogSettingsGet_serialize;

function AST_AGLogSettingsGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGLogSettingsGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}IaxGeneralGetAll
//
function AST_IaxGeneralGetAll () {
    this.typeMarker = 'AST_IaxGeneralGetAll';
}

//
// Serialize {urn:ast}IaxGeneralGetAll
//
function AST_IaxGeneralGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_IaxGeneralGetAll.prototype.serialize = AST_IaxGeneralGetAll_serialize;

function AST_IaxGeneralGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_IaxGeneralGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}GroupDel
//
function AST_GroupDel () {
    this.typeMarker = 'AST_GroupDel';
    this._groupName = null;
}

//
// accessor is AST_GroupDel.prototype.getGroupName
// element get for groupName
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for groupName
// setter function is is AST_GroupDel.prototype.setGroupName
//
function AST_GroupDel_getGroupName() { return this._groupName;}

AST_GroupDel.prototype.getGroupName = AST_GroupDel_getGroupName;

function AST_GroupDel_setGroupName(value) { this._groupName = value;}

AST_GroupDel.prototype.setGroupName = AST_GroupDel_setGroupName;
//
// Serialize {urn:ast}GroupDel
//
function AST_GroupDel_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._groupName != null) {
      if (this._groupName == null) {
       xml = xml + '<jns0:groupName xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:groupName>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._groupName);
       xml = xml + '</jns0:groupName>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_GroupDel.prototype.serialize = AST_GroupDel_serialize;

function AST_GroupDel_deserialize (cxfjsutils, element) {
    var newobject = new AST_GroupDel();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing groupName');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'groupName')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setGroupName(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemStatusGetResponse
//
function AST_AGSystemStatusGetResponse () {
    this.typeMarker = 'AST_AGSystemStatusGetResponse';
    this._get = null;
}

//
// accessor is AST_AGSystemStatusGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}SysStatusGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGSystemStatusGetResponse.prototype.setGet
//
function AST_AGSystemStatusGetResponse_getGet() { return this._get;}

AST_AGSystemStatusGetResponse.prototype.getGet = AST_AGSystemStatusGetResponse_getGet;

function AST_AGSystemStatusGetResponse_setGet(value) { this._get = value;}

AST_AGSystemStatusGetResponse.prototype.setGet = AST_AGSystemStatusGetResponse_setGet;
//
// Serialize {urn:ast}AGSystemStatusGetResponse
//
function AST_AGSystemStatusGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemStatusGetResponse.prototype.serialize = AST_AGSystemStatusGetResponse_serialize;

function AST_AGSystemStatusGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemStatusGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SysStatusGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgAutoCallSaveResponse
//
function AST_AGAlgAutoCallSaveResponse () {
    this.typeMarker = 'AST_AGAlgAutoCallSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGAlgAutoCallSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGAlgAutoCallSaveResponse.prototype.setResult
//
function AST_AGAlgAutoCallSaveResponse_getResult() { return this._result;}

AST_AGAlgAutoCallSaveResponse.prototype.getResult = AST_AGAlgAutoCallSaveResponse_getResult;

function AST_AGAlgAutoCallSaveResponse_setResult(value) { this._result = value;}

AST_AGAlgAutoCallSaveResponse.prototype.setResult = AST_AGAlgAutoCallSaveResponse_setResult;
//
// Serialize {urn:ast}AGAlgAutoCallSaveResponse
//
function AST_AGAlgAutoCallSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgAutoCallSaveResponse.prototype.serialize = AST_AGAlgAutoCallSaveResponse_serialize;

function AST_AGAlgAutoCallSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgAutoCallSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgDialtableGet
//
function AST_AGAlgDialtableGet () {
    this.typeMarker = 'AST_AGAlgDialtableGet';
}

//
// Serialize {urn:ast}AGAlgDialtableGet
//
function AST_AGAlgDialtableGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgDialtableGet.prototype.serialize = AST_AGAlgDialtableGet_serialize;

function AST_AGAlgDialtableGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgDialtableGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingAdvGetResponse
//
function AST_AGRoutingAdvGetResponse () {
    this.typeMarker = 'AST_AGRoutingAdvGetResponse';
    this._get = null;
}

//
// accessor is AST_AGRoutingAdvGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}RoutingAdvGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGRoutingAdvGetResponse.prototype.setGet
//
function AST_AGRoutingAdvGetResponse_getGet() { return this._get;}

AST_AGRoutingAdvGetResponse.prototype.getGet = AST_AGRoutingAdvGetResponse_getGet;

function AST_AGRoutingAdvGetResponse_setGet(value) { this._get = value;}

AST_AGRoutingAdvGetResponse.prototype.setGet = AST_AGRoutingAdvGetResponse_setGet;
//
// Serialize {urn:ast}AGRoutingAdvGetResponse
//
function AST_AGRoutingAdvGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingAdvGetResponse.prototype.serialize = AST_AGRoutingAdvGetResponse_serialize;

function AST_AGRoutingAdvGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingAdvGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_RoutingAdvGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemDHCPUpdateSave
//
function AST_AGSystemDHCPUpdateSave () {
    this.typeMarker = 'AST_AGSystemDHCPUpdateSave';
    this._enable = '';
}

//
// accessor is AST_AGSystemDHCPUpdateSave.prototype.getEnable
// element get for enable
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for enable
// setter function is is AST_AGSystemDHCPUpdateSave.prototype.setEnable
//
function AST_AGSystemDHCPUpdateSave_getEnable() { return this._enable;}

AST_AGSystemDHCPUpdateSave.prototype.getEnable = AST_AGSystemDHCPUpdateSave_getEnable;

function AST_AGSystemDHCPUpdateSave_setEnable(value) { this._enable = value;}

AST_AGSystemDHCPUpdateSave.prototype.setEnable = AST_AGSystemDHCPUpdateSave_setEnable;
//
// Serialize {urn:ast}AGSystemDHCPUpdateSave
//
function AST_AGSystemDHCPUpdateSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:enable>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._enable);
     xml = xml + '</jns0:enable>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemDHCPUpdateSave.prototype.serialize = AST_AGSystemDHCPUpdateSave_serialize;

function AST_AGSystemDHCPUpdateSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemDHCPUpdateSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing enable');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setEnable(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipEndpointGetAllResponse
//
function AST_AGSipEndpointGetAllResponse () {
    this.typeMarker = 'AST_AGSipEndpointGetAllResponse';
    this._get = null;
}

//
// accessor is AST_AGSipEndpointGetAllResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}SipGetAll
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGSipEndpointGetAllResponse.prototype.setGet
//
function AST_AGSipEndpointGetAllResponse_getGet() { return this._get;}

AST_AGSipEndpointGetAllResponse.prototype.getGet = AST_AGSipEndpointGetAllResponse_getGet;

function AST_AGSipEndpointGetAllResponse_setGet(value) { this._get = value;}

AST_AGSipEndpointGetAllResponse.prototype.setGet = AST_AGSipEndpointGetAllResponse_setGet;
//
// Serialize {urn:ast}AGSipEndpointGetAllResponse
//
function AST_AGSipEndpointGetAllResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipEndpointGetAllResponse.prototype.serialize = AST_AGSipEndpointGetAllResponse_serialize;

function AST_AGSipEndpointGetAllResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipEndpointGetAllResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SipGetAll_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkOpenvpnSave
//
function AST_AGNetworkOpenvpnSave () {
    this.typeMarker = 'AST_AGNetworkOpenvpnSave';
    this._save = null;
}

//
// accessor is AST_AGNetworkOpenvpnSave.prototype.getSave
// element get for save
// - element type is {urn:ast}NetworkOpenvpn
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGNetworkOpenvpnSave.prototype.setSave
//
function AST_AGNetworkOpenvpnSave_getSave() { return this._save;}

AST_AGNetworkOpenvpnSave.prototype.getSave = AST_AGNetworkOpenvpnSave_getSave;

function AST_AGNetworkOpenvpnSave_setSave(value) { this._save = value;}

AST_AGNetworkOpenvpnSave.prototype.setSave = AST_AGNetworkOpenvpnSave_setSave;
//
// Serialize {urn:ast}AGNetworkOpenvpnSave
//
function AST_AGNetworkOpenvpnSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkOpenvpnSave.prototype.serialize = AST_AGNetworkOpenvpnSave_serialize;

function AST_AGNetworkOpenvpnSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkOpenvpnSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_NetworkOpenvpn_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgAutoCallTest
//
function AST_AGAlgAutoCallTest () {
    this.typeMarker = 'AST_AGAlgAutoCallTest';
    this._test = null;
}

//
// accessor is AST_AGAlgAutoCallTest.prototype.getTest
// element get for test
// - element type is {urn:ast}AutoCallTest
// - optional element
// - nillable
//
// element set for test
// setter function is is AST_AGAlgAutoCallTest.prototype.setTest
//
function AST_AGAlgAutoCallTest_getTest() { return this._test;}

AST_AGAlgAutoCallTest.prototype.getTest = AST_AGAlgAutoCallTest_getTest;

function AST_AGAlgAutoCallTest_setTest(value) { this._test = value;}

AST_AGAlgAutoCallTest.prototype.setTest = AST_AGAlgAutoCallTest_setTest;
//
// Serialize {urn:ast}AGAlgAutoCallTest
//
function AST_AGAlgAutoCallTest_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._test != null) {
      if (this._test == null) {
       xml = xml + '<jns0:test xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._test.serialize(cxfjsutils, 'jns0:test', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgAutoCallTest.prototype.serialize = AST_AGAlgAutoCallTest_serialize;

function AST_AGAlgAutoCallTest_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgAutoCallTest();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing test');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'test')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AutoCallTest_deserialize(cxfjsutils, curElement);
     }
     newobject.setTest(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}IaxSaveEndpoint
//
function AST_IaxSaveEndpoint () {
    this.typeMarker = 'AST_IaxSaveEndpoint';
    this._oldEndpoint = null;
    this._newEndpoint = null;
    this._datachunk = null;
}

//
// accessor is AST_IaxSaveEndpoint.prototype.getOldEndpoint
// element get for oldEndpoint
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for oldEndpoint
// setter function is is AST_IaxSaveEndpoint.prototype.setOldEndpoint
//
function AST_IaxSaveEndpoint_getOldEndpoint() { return this._oldEndpoint;}

AST_IaxSaveEndpoint.prototype.getOldEndpoint = AST_IaxSaveEndpoint_getOldEndpoint;

function AST_IaxSaveEndpoint_setOldEndpoint(value) { this._oldEndpoint = value;}

AST_IaxSaveEndpoint.prototype.setOldEndpoint = AST_IaxSaveEndpoint_setOldEndpoint;
//
// accessor is AST_IaxSaveEndpoint.prototype.getNewEndpoint
// element get for newEndpoint
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for newEndpoint
// setter function is is AST_IaxSaveEndpoint.prototype.setNewEndpoint
//
function AST_IaxSaveEndpoint_getNewEndpoint() { return this._newEndpoint;}

AST_IaxSaveEndpoint.prototype.getNewEndpoint = AST_IaxSaveEndpoint_getNewEndpoint;

function AST_IaxSaveEndpoint_setNewEndpoint(value) { this._newEndpoint = value;}

AST_IaxSaveEndpoint.prototype.setNewEndpoint = AST_IaxSaveEndpoint_setNewEndpoint;
//
// accessor is AST_IaxSaveEndpoint.prototype.getDatachunk
// element get for datachunk
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for datachunk
// setter function is is AST_IaxSaveEndpoint.prototype.setDatachunk
//
function AST_IaxSaveEndpoint_getDatachunk() { return this._datachunk;}

AST_IaxSaveEndpoint.prototype.getDatachunk = AST_IaxSaveEndpoint_getDatachunk;

function AST_IaxSaveEndpoint_setDatachunk(value) { this._datachunk = value;}

AST_IaxSaveEndpoint.prototype.setDatachunk = AST_IaxSaveEndpoint_setDatachunk;
//
// Serialize {urn:ast}IaxSaveEndpoint
//
function AST_IaxSaveEndpoint_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._oldEndpoint != null) {
      if (this._oldEndpoint == null) {
       xml = xml + '<jns0:oldEndpoint xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:oldEndpoint>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._oldEndpoint);
       xml = xml + '</jns0:oldEndpoint>';
      }
     }
    }
    // block for local variables
    {
     if (this._newEndpoint != null) {
      if (this._newEndpoint == null) {
       xml = xml + '<jns0:newEndpoint xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:newEndpoint>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._newEndpoint);
       xml = xml + '</jns0:newEndpoint>';
      }
     }
    }
    // block for local variables
    {
     if (this._datachunk != null) {
      if (this._datachunk == null) {
       xml = xml + '<jns0:datachunk xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:datachunk>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._datachunk);
       xml = xml + '</jns0:datachunk>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_IaxSaveEndpoint.prototype.serialize = AST_IaxSaveEndpoint_serialize;

function AST_IaxSaveEndpoint_deserialize (cxfjsutils, element) {
    var newobject = new AST_IaxSaveEndpoint();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing oldEndpoint');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'oldEndpoint')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setOldEndpoint(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing newEndpoint');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'newEndpoint')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setNewEndpoint(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing datachunk');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'datachunk')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setDatachunk(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGCommitChekoutResponse
//
function AST_AGCommitChekoutResponse () {
    this.typeMarker = 'AST_AGCommitChekoutResponse';
    this._result = 0;
}

//
// accessor is AST_AGCommitChekoutResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGCommitChekoutResponse.prototype.setResult
//
function AST_AGCommitChekoutResponse_getResult() { return this._result;}

AST_AGCommitChekoutResponse.prototype.getResult = AST_AGCommitChekoutResponse_getResult;

function AST_AGCommitChekoutResponse_setResult(value) { this._result = value;}

AST_AGCommitChekoutResponse.prototype.setResult = AST_AGCommitChekoutResponse_setResult;
//
// Serialize {urn:ast}AGCommitChekoutResponse
//
function AST_AGCommitChekoutResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGCommitChekoutResponse.prototype.serialize = AST_AGCommitChekoutResponse_serialize;

function AST_AGCommitChekoutResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGCommitChekoutResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgChannelUnlimitedResponse
//
function AST_AGAlgChannelUnlimitedResponse () {
    this.typeMarker = 'AST_AGAlgChannelUnlimitedResponse';
    this._result = 0;
}

//
// accessor is AST_AGAlgChannelUnlimitedResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGAlgChannelUnlimitedResponse.prototype.setResult
//
function AST_AGAlgChannelUnlimitedResponse_getResult() { return this._result;}

AST_AGAlgChannelUnlimitedResponse.prototype.getResult = AST_AGAlgChannelUnlimitedResponse_getResult;

function AST_AGAlgChannelUnlimitedResponse_setResult(value) { this._result = value;}

AST_AGAlgChannelUnlimitedResponse.prototype.setResult = AST_AGAlgChannelUnlimitedResponse_setResult;
//
// Serialize {urn:ast}AGAlgChannelUnlimitedResponse
//
function AST_AGAlgChannelUnlimitedResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgChannelUnlimitedResponse.prototype.serialize = AST_AGAlgChannelUnlimitedResponse_serialize;

function AST_AGAlgChannelUnlimitedResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgChannelUnlimitedResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGLogCdrGetResponse
//
function AST_AGLogCdrGetResponse () {
    this.typeMarker = 'AST_AGLogCdrGetResponse';
    this._get = null;
}

//
// accessor is AST_AGLogCdrGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}LogCdrGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGLogCdrGetResponse.prototype.setGet
//
function AST_AGLogCdrGetResponse_getGet() { return this._get;}

AST_AGLogCdrGetResponse.prototype.getGet = AST_AGLogCdrGetResponse_getGet;

function AST_AGLogCdrGetResponse_setGet(value) { this._get = value;}

AST_AGLogCdrGetResponse.prototype.setGet = AST_AGLogCdrGetResponse_setGet;
//
// Serialize {urn:ast}AGLogCdrGetResponse
//
function AST_AGLogCdrGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGLogCdrGetResponse.prototype.serialize = AST_AGLogCdrGetResponse_serialize;

function AST_AGLogCdrGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGLogCdrGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_LogCdrGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipEndpointGetAll
//
function AST_AGSipEndpointGetAll () {
    this.typeMarker = 'AST_AGSipEndpointGetAll';
}

//
// Serialize {urn:ast}AGSipEndpointGetAll
//
function AST_AGSipEndpointGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipEndpointGetAll.prototype.serialize = AST_AGSipEndpointGetAll_serialize;

function AST_AGSipEndpointGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipEndpointGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGLogCdrGenFileResponse
//
function AST_AGLogCdrGenFileResponse () {
    this.typeMarker = 'AST_AGLogCdrGenFileResponse';
    this._result = null;
}

//
// accessor is AST_AGLogCdrGenFileResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - optional element
// - nillable
//
// element set for result
// setter function is is AST_AGLogCdrGenFileResponse.prototype.setResult
//
function AST_AGLogCdrGenFileResponse_getResult() { return this._result;}

AST_AGLogCdrGenFileResponse.prototype.getResult = AST_AGLogCdrGenFileResponse_getResult;

function AST_AGLogCdrGenFileResponse_setResult(value) { this._result = value;}

AST_AGLogCdrGenFileResponse.prototype.setResult = AST_AGLogCdrGenFileResponse_setResult;
//
// Serialize {urn:ast}AGLogCdrGenFileResponse
//
function AST_AGLogCdrGenFileResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._result != null) {
      if (this._result == null) {
       xml = xml + '<jns0:result xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:result>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._result);
       xml = xml + '</jns0:result>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGLogCdrGenFileResponse.prototype.serialize = AST_AGLogCdrGenFileResponse_serialize;

function AST_AGLogCdrGenFileResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGLogCdrGenFileResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'result')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = parseInt(value);
     }
     newobject.setResult(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RoutingDel
//
function AST_RoutingDel () {
    this.typeMarker = 'AST_RoutingDel';
    this._routingName = null;
}

//
// accessor is AST_RoutingDel.prototype.getRoutingName
// element get for routingName
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for routingName
// setter function is is AST_RoutingDel.prototype.setRoutingName
//
function AST_RoutingDel_getRoutingName() { return this._routingName;}

AST_RoutingDel.prototype.getRoutingName = AST_RoutingDel_getRoutingName;

function AST_RoutingDel_setRoutingName(value) { this._routingName = value;}

AST_RoutingDel.prototype.setRoutingName = AST_RoutingDel_setRoutingName;
//
// Serialize {urn:ast}RoutingDel
//
function AST_RoutingDel_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._routingName != null) {
      if (this._routingName == null) {
       xml = xml + '<jns0:routingName xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:routingName>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._routingName);
       xml = xml + '</jns0:routingName>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RoutingDel.prototype.serialize = AST_RoutingDel_serialize;

function AST_RoutingDel_deserialize (cxfjsutils, element) {
    var newobject = new AST_RoutingDel();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing routingName');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'routingName')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setRoutingName(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingGroupGetOne
//
function AST_AGRoutingGroupGetOne () {
    this.typeMarker = 'AST_AGRoutingGroupGetOne';
    this._section = null;
}

//
// accessor is AST_AGRoutingGroupGetOne.prototype.getSection
// element get for section
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for section
// setter function is is AST_AGRoutingGroupGetOne.prototype.setSection
//
function AST_AGRoutingGroupGetOne_getSection() { return this._section;}

AST_AGRoutingGroupGetOne.prototype.getSection = AST_AGRoutingGroupGetOne_getSection;

function AST_AGRoutingGroupGetOne_setSection(value) { this._section = value;}

AST_AGRoutingGroupGetOne.prototype.setSection = AST_AGRoutingGroupGetOne_setSection;
//
// Serialize {urn:ast}AGRoutingGroupGetOne
//
function AST_AGRoutingGroupGetOne_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._section != null) {
      if (this._section == null) {
       xml = xml + '<jns0:section xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:section>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._section);
       xml = xml + '</jns0:section>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingGroupGetOne.prototype.serialize = AST_AGRoutingGroupGetOne_serialize;

function AST_AGRoutingGroupGetOne_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingGroupGetOne();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing section');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'section')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setSection(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGUcpAlgFxoparamGetAllResponse
//
function AST_AGUcpAlgFxoparamGetAllResponse () {
    this.typeMarker = 'AST_AGUcpAlgFxoparamGetAllResponse';
    this._get = null;
}

//
// accessor is AST_AGUcpAlgFxoparamGetAllResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}UcpAlgFxoparamGetAll
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGUcpAlgFxoparamGetAllResponse.prototype.setGet
//
function AST_AGUcpAlgFxoparamGetAllResponse_getGet() { return this._get;}

AST_AGUcpAlgFxoparamGetAllResponse.prototype.getGet = AST_AGUcpAlgFxoparamGetAllResponse_getGet;

function AST_AGUcpAlgFxoparamGetAllResponse_setGet(value) { this._get = value;}

AST_AGUcpAlgFxoparamGetAllResponse.prototype.setGet = AST_AGUcpAlgFxoparamGetAllResponse_setGet;
//
// Serialize {urn:ast}AGUcpAlgFxoparamGetAllResponse
//
function AST_AGUcpAlgFxoparamGetAllResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGUcpAlgFxoparamGetAllResponse.prototype.serialize = AST_AGUcpAlgFxoparamGetAllResponse_serialize;

function AST_AGUcpAlgFxoparamGetAllResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGUcpAlgFxoparamGetAllResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_UcpAlgFxoparamGetAll_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipGeneralSave
//
function AST_SipGeneralSave () {
    this.typeMarker = 'AST_SipGeneralSave';
    this._oldSection = null;
    this._newSection = null;
    this._datachunk = null;
}

//
// accessor is AST_SipGeneralSave.prototype.getOldSection
// element get for oldSection
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for oldSection
// setter function is is AST_SipGeneralSave.prototype.setOldSection
//
function AST_SipGeneralSave_getOldSection() { return this._oldSection;}

AST_SipGeneralSave.prototype.getOldSection = AST_SipGeneralSave_getOldSection;

function AST_SipGeneralSave_setOldSection(value) { this._oldSection = value;}

AST_SipGeneralSave.prototype.setOldSection = AST_SipGeneralSave_setOldSection;
//
// accessor is AST_SipGeneralSave.prototype.getNewSection
// element get for newSection
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for newSection
// setter function is is AST_SipGeneralSave.prototype.setNewSection
//
function AST_SipGeneralSave_getNewSection() { return this._newSection;}

AST_SipGeneralSave.prototype.getNewSection = AST_SipGeneralSave_getNewSection;

function AST_SipGeneralSave_setNewSection(value) { this._newSection = value;}

AST_SipGeneralSave.prototype.setNewSection = AST_SipGeneralSave_setNewSection;
//
// accessor is AST_SipGeneralSave.prototype.getDatachunk
// element get for datachunk
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for datachunk
// setter function is is AST_SipGeneralSave.prototype.setDatachunk
//
function AST_SipGeneralSave_getDatachunk() { return this._datachunk;}

AST_SipGeneralSave.prototype.getDatachunk = AST_SipGeneralSave_getDatachunk;

function AST_SipGeneralSave_setDatachunk(value) { this._datachunk = value;}

AST_SipGeneralSave.prototype.setDatachunk = AST_SipGeneralSave_setDatachunk;
//
// Serialize {urn:ast}SipGeneralSave
//
function AST_SipGeneralSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._oldSection != null) {
      if (this._oldSection == null) {
       xml = xml + '<jns0:oldSection xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:oldSection>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._oldSection);
       xml = xml + '</jns0:oldSection>';
      }
     }
    }
    // block for local variables
    {
     if (this._newSection != null) {
      if (this._newSection == null) {
       xml = xml + '<jns0:newSection xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:newSection>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._newSection);
       xml = xml + '</jns0:newSection>';
      }
     }
    }
    // block for local variables
    {
     if (this._datachunk != null) {
      if (this._datachunk == null) {
       xml = xml + '<jns0:datachunk xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:datachunk>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._datachunk);
       xml = xml + '</jns0:datachunk>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipGeneralSave.prototype.serialize = AST_SipGeneralSave_serialize;

function AST_SipGeneralSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipGeneralSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing oldSection');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'oldSection')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setOldSection(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing newSection');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'newSection')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setNewSection(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing datachunk');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'datachunk')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setDatachunk(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgChannelRemoveClient
//
function AST_AGAlgChannelRemoveClient () {
    this.typeMarker = 'AST_AGAlgChannelRemoveClient';
    this._clientInfo = null;
}

//
// accessor is AST_AGAlgChannelRemoveClient.prototype.getClientInfo
// element get for clientInfo
// - element type is {urn:ast}ClientRemove
// - optional element
// - nillable
//
// element set for clientInfo
// setter function is is AST_AGAlgChannelRemoveClient.prototype.setClientInfo
//
function AST_AGAlgChannelRemoveClient_getClientInfo() { return this._clientInfo;}

AST_AGAlgChannelRemoveClient.prototype.getClientInfo = AST_AGAlgChannelRemoveClient_getClientInfo;

function AST_AGAlgChannelRemoveClient_setClientInfo(value) { this._clientInfo = value;}

AST_AGAlgChannelRemoveClient.prototype.setClientInfo = AST_AGAlgChannelRemoveClient_setClientInfo;
//
// Serialize {urn:ast}AGAlgChannelRemoveClient
//
function AST_AGAlgChannelRemoveClient_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._clientInfo != null) {
      if (this._clientInfo == null) {
       xml = xml + '<jns0:clientInfo xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._clientInfo.serialize(cxfjsutils, 'jns0:clientInfo', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgChannelRemoveClient.prototype.serialize = AST_AGAlgChannelRemoveClient_serialize;

function AST_AGAlgChannelRemoveClient_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgChannelRemoveClient();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing clientInfo');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'clientInfo')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_ClientRemove_deserialize(cxfjsutils, curElement);
     }
     newobject.setClientInfo(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgChannelGetOneResponse
//
function AST_AGAlgChannelGetOneResponse () {
    this.typeMarker = 'AST_AGAlgChannelGetOneResponse';
    this._get = null;
}

//
// accessor is AST_AGAlgChannelGetOneResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}AnaGetOne
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGAlgChannelGetOneResponse.prototype.setGet
//
function AST_AGAlgChannelGetOneResponse_getGet() { return this._get;}

AST_AGAlgChannelGetOneResponse.prototype.getGet = AST_AGAlgChannelGetOneResponse_getGet;

function AST_AGAlgChannelGetOneResponse_setGet(value) { this._get = value;}

AST_AGAlgChannelGetOneResponse.prototype.setGet = AST_AGAlgChannelGetOneResponse_setGet;
//
// Serialize {urn:ast}AGAlgChannelGetOneResponse
//
function AST_AGAlgChannelGetOneResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgChannelGetOneResponse.prototype.serialize = AST_AGAlgChannelGetOneResponse_serialize;

function AST_AGAlgChannelGetOneResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgChannelGetOneResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AnaGetOne_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipEndpointSaveResponse
//
function AST_AGSipEndpointSaveResponse () {
    this.typeMarker = 'AST_AGSipEndpointSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGSipEndpointSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSipEndpointSaveResponse.prototype.setResult
//
function AST_AGSipEndpointSaveResponse_getResult() { return this._result;}

AST_AGSipEndpointSaveResponse.prototype.getResult = AST_AGSipEndpointSaveResponse_getResult;

function AST_AGSipEndpointSaveResponse_setResult(value) { this._result = value;}

AST_AGSipEndpointSaveResponse.prototype.setResult = AST_AGSipEndpointSaveResponse_setResult;
//
// Serialize {urn:ast}AGSipEndpointSaveResponse
//
function AST_AGSipEndpointSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipEndpointSaveResponse.prototype.serialize = AST_AGSipEndpointSaveResponse_serialize;

function AST_AGSipEndpointSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipEndpointSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGUcpAlgFxsparamGetResponse
//
function AST_AGUcpAlgFxsparamGetResponse () {
    this.typeMarker = 'AST_AGUcpAlgFxsparamGetResponse';
    this._get = null;
}

//
// accessor is AST_AGUcpAlgFxsparamGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}UcpAlgFxsparamGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGUcpAlgFxsparamGetResponse.prototype.setGet
//
function AST_AGUcpAlgFxsparamGetResponse_getGet() { return this._get;}

AST_AGUcpAlgFxsparamGetResponse.prototype.getGet = AST_AGUcpAlgFxsparamGetResponse_getGet;

function AST_AGUcpAlgFxsparamGetResponse_setGet(value) { this._get = value;}

AST_AGUcpAlgFxsparamGetResponse.prototype.setGet = AST_AGUcpAlgFxsparamGetResponse_setGet;
//
// Serialize {urn:ast}AGUcpAlgFxsparamGetResponse
//
function AST_AGUcpAlgFxsparamGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGUcpAlgFxsparamGetResponse.prototype.serialize = AST_AGUcpAlgFxsparamGetResponse_serialize;

function AST_AGUcpAlgFxsparamGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGUcpAlgFxsparamGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_UcpAlgFxsparamGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgChannelRemoveClientResponse
//
function AST_AGAlgChannelRemoveClientResponse () {
    this.typeMarker = 'AST_AGAlgChannelRemoveClientResponse';
    this._result = 0;
}

//
// accessor is AST_AGAlgChannelRemoveClientResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGAlgChannelRemoveClientResponse.prototype.setResult
//
function AST_AGAlgChannelRemoveClientResponse_getResult() { return this._result;}

AST_AGAlgChannelRemoveClientResponse.prototype.getResult = AST_AGAlgChannelRemoveClientResponse_getResult;

function AST_AGAlgChannelRemoveClientResponse_setResult(value) { this._result = value;}

AST_AGAlgChannelRemoveClientResponse.prototype.setResult = AST_AGAlgChannelRemoveClientResponse_setResult;
//
// Serialize {urn:ast}AGAlgChannelRemoveClientResponse
//
function AST_AGAlgChannelRemoveClientResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgChannelRemoveClientResponse.prototype.serialize = AST_AGAlgChannelRemoveClientResponse_serialize;

function AST_AGAlgChannelRemoveClientResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgChannelRemoveClientResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemToolsSystemRebootResponse
//
function AST_AGSystemToolsSystemRebootResponse () {
    this.typeMarker = 'AST_AGSystemToolsSystemRebootResponse';
    this._result = 0;
}

//
// accessor is AST_AGSystemToolsSystemRebootResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSystemToolsSystemRebootResponse.prototype.setResult
//
function AST_AGSystemToolsSystemRebootResponse_getResult() { return this._result;}

AST_AGSystemToolsSystemRebootResponse.prototype.getResult = AST_AGSystemToolsSystemRebootResponse_getResult;

function AST_AGSystemToolsSystemRebootResponse_setResult(value) { this._result = value;}

AST_AGSystemToolsSystemRebootResponse.prototype.setResult = AST_AGSystemToolsSystemRebootResponse_setResult;
//
// Serialize {urn:ast}AGSystemToolsSystemRebootResponse
//
function AST_AGSystemToolsSystemRebootResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemToolsSystemRebootResponse.prototype.serialize = AST_AGSystemToolsSystemRebootResponse_serialize;

function AST_AGSystemToolsSystemRebootResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemToolsSystemRebootResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipBendpointSaveResponse
//
function AST_AGSipBendpointSaveResponse () {
    this.typeMarker = 'AST_AGSipBendpointSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGSipBendpointSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSipBendpointSaveResponse.prototype.setResult
//
function AST_AGSipBendpointSaveResponse_getResult() { return this._result;}

AST_AGSipBendpointSaveResponse.prototype.getResult = AST_AGSipBendpointSaveResponse_getResult;

function AST_AGSipBendpointSaveResponse_setResult(value) { this._result = value;}

AST_AGSipBendpointSaveResponse.prototype.setResult = AST_AGSipBendpointSaveResponse_setResult;
//
// Serialize {urn:ast}AGSipBendpointSaveResponse
//
function AST_AGSipBendpointSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipBendpointSaveResponse.prototype.serialize = AST_AGSipBendpointSaveResponse_serialize;

function AST_AGSipBendpointSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipBendpointSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkToolkitGetResponse
//
function AST_AGNetworkToolkitGetResponse () {
    this.typeMarker = 'AST_AGNetworkToolkitGetResponse';
    this._get = null;
}

//
// accessor is AST_AGNetworkToolkitGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}NetworkTookitGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGNetworkToolkitGetResponse.prototype.setGet
//
function AST_AGNetworkToolkitGetResponse_getGet() { return this._get;}

AST_AGNetworkToolkitGetResponse.prototype.getGet = AST_AGNetworkToolkitGetResponse_getGet;

function AST_AGNetworkToolkitGetResponse_setGet(value) { this._get = value;}

AST_AGNetworkToolkitGetResponse.prototype.setGet = AST_AGNetworkToolkitGetResponse_setGet;
//
// Serialize {urn:ast}AGNetworkToolkitGetResponse
//
function AST_AGNetworkToolkitGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkToolkitGetResponse.prototype.serialize = AST_AGNetworkToolkitGetResponse_serialize;

function AST_AGNetworkToolkitGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkToolkitGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_NetworkTookitGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}GroupSaveResponse
//
function AST_GroupSaveResponse () {
    this.typeMarker = 'AST_GroupSaveResponse';
    this._result = 0;
}

//
// accessor is AST_GroupSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_GroupSaveResponse.prototype.setResult
//
function AST_GroupSaveResponse_getResult() { return this._result;}

AST_GroupSaveResponse.prototype.getResult = AST_GroupSaveResponse_getResult;

function AST_GroupSaveResponse_setResult(value) { this._result = value;}

AST_GroupSaveResponse.prototype.setResult = AST_GroupSaveResponse_setResult;
//
// Serialize {urn:ast}GroupSaveResponse
//
function AST_GroupSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_GroupSaveResponse.prototype.serialize = AST_GroupSaveResponse_serialize;

function AST_GroupSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_GroupSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipBatchEndpointsGetResponse
//
function AST_AGSipBatchEndpointsGetResponse () {
    this.typeMarker = 'AST_AGSipBatchEndpointsGetResponse';
    this._get = null;
}

//
// accessor is AST_AGSipBatchEndpointsGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}SipBatchGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGSipBatchEndpointsGetResponse.prototype.setGet
//
function AST_AGSipBatchEndpointsGetResponse_getGet() { return this._get;}

AST_AGSipBatchEndpointsGetResponse.prototype.getGet = AST_AGSipBatchEndpointsGetResponse_getGet;

function AST_AGSipBatchEndpointsGetResponse_setGet(value) { this._get = value;}

AST_AGSipBatchEndpointsGetResponse.prototype.setGet = AST_AGSipBatchEndpointsGetResponse_setGet;
//
// Serialize {urn:ast}AGSipBatchEndpointsGetResponse
//
function AST_AGSipBatchEndpointsGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipBatchEndpointsGetResponse.prototype.serialize = AST_AGSipBatchEndpointsGetResponse_serialize;

function AST_AGSipBatchEndpointsGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipBatchEndpointsGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SipBatchGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAdvAstfileeditorEditSave
//
function AST_AGAdvAstfileeditorEditSave () {
    this.typeMarker = 'AST_AGAdvAstfileeditorEditSave';
    this._fname = null;
    this._datachunk = null;
}

//
// accessor is AST_AGAdvAstfileeditorEditSave.prototype.getFname
// element get for fname
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for fname
// setter function is is AST_AGAdvAstfileeditorEditSave.prototype.setFname
//
function AST_AGAdvAstfileeditorEditSave_getFname() { return this._fname;}

AST_AGAdvAstfileeditorEditSave.prototype.getFname = AST_AGAdvAstfileeditorEditSave_getFname;

function AST_AGAdvAstfileeditorEditSave_setFname(value) { this._fname = value;}

AST_AGAdvAstfileeditorEditSave.prototype.setFname = AST_AGAdvAstfileeditorEditSave_setFname;
//
// accessor is AST_AGAdvAstfileeditorEditSave.prototype.getDatachunk
// element get for datachunk
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for datachunk
// setter function is is AST_AGAdvAstfileeditorEditSave.prototype.setDatachunk
//
function AST_AGAdvAstfileeditorEditSave_getDatachunk() { return this._datachunk;}

AST_AGAdvAstfileeditorEditSave.prototype.getDatachunk = AST_AGAdvAstfileeditorEditSave_getDatachunk;

function AST_AGAdvAstfileeditorEditSave_setDatachunk(value) { this._datachunk = value;}

AST_AGAdvAstfileeditorEditSave.prototype.setDatachunk = AST_AGAdvAstfileeditorEditSave_setDatachunk;
//
// Serialize {urn:ast}AGAdvAstfileeditorEditSave
//
function AST_AGAdvAstfileeditorEditSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._fname != null) {
      if (this._fname == null) {
       xml = xml + '<jns0:fname xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:fname>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._fname);
       xml = xml + '</jns0:fname>';
      }
     }
    }
    // block for local variables
    {
     if (this._datachunk != null) {
      if (this._datachunk == null) {
       xml = xml + '<jns0:datachunk xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:datachunk>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._datachunk);
       xml = xml + '</jns0:datachunk>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAdvAstfileeditorEditSave.prototype.serialize = AST_AGAdvAstfileeditorEditSave_serialize;

function AST_AGAdvAstfileeditorEditSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAdvAstfileeditorEditSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fname');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'fname')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setFname(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing datachunk');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'datachunk')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setDatachunk(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}GroupSave
//
function AST_GroupSave () {
    this.typeMarker = 'AST_GroupSave';
    this._oldGroup = null;
    this._newGroup = null;
    this._datachunk = null;
}

//
// accessor is AST_GroupSave.prototype.getOldGroup
// element get for oldGroup
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for oldGroup
// setter function is is AST_GroupSave.prototype.setOldGroup
//
function AST_GroupSave_getOldGroup() { return this._oldGroup;}

AST_GroupSave.prototype.getOldGroup = AST_GroupSave_getOldGroup;

function AST_GroupSave_setOldGroup(value) { this._oldGroup = value;}

AST_GroupSave.prototype.setOldGroup = AST_GroupSave_setOldGroup;
//
// accessor is AST_GroupSave.prototype.getNewGroup
// element get for newGroup
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for newGroup
// setter function is is AST_GroupSave.prototype.setNewGroup
//
function AST_GroupSave_getNewGroup() { return this._newGroup;}

AST_GroupSave.prototype.getNewGroup = AST_GroupSave_getNewGroup;

function AST_GroupSave_setNewGroup(value) { this._newGroup = value;}

AST_GroupSave.prototype.setNewGroup = AST_GroupSave_setNewGroup;
//
// accessor is AST_GroupSave.prototype.getDatachunk
// element get for datachunk
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for datachunk
// setter function is is AST_GroupSave.prototype.setDatachunk
//
function AST_GroupSave_getDatachunk() { return this._datachunk;}

AST_GroupSave.prototype.getDatachunk = AST_GroupSave_getDatachunk;

function AST_GroupSave_setDatachunk(value) { this._datachunk = value;}

AST_GroupSave.prototype.setDatachunk = AST_GroupSave_setDatachunk;
//
// Serialize {urn:ast}GroupSave
//
function AST_GroupSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._oldGroup != null) {
      if (this._oldGroup == null) {
       xml = xml + '<jns0:oldGroup xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:oldGroup>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._oldGroup);
       xml = xml + '</jns0:oldGroup>';
      }
     }
    }
    // block for local variables
    {
     if (this._newGroup != null) {
      if (this._newGroup == null) {
       xml = xml + '<jns0:newGroup xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:newGroup>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._newGroup);
       xml = xml + '</jns0:newGroup>';
      }
     }
    }
    // block for local variables
    {
     if (this._datachunk != null) {
      if (this._datachunk == null) {
       xml = xml + '<jns0:datachunk xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:datachunk>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._datachunk);
       xml = xml + '</jns0:datachunk>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_GroupSave.prototype.serialize = AST_GroupSave_serialize;

function AST_GroupSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_GroupSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing oldGroup');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'oldGroup')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setOldGroup(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing newGroup');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'newGroup')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setNewGroup(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing datachunk');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'datachunk')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setDatachunk(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkSnmpSaveResponse
//
function AST_AGNetworkSnmpSaveResponse () {
    this.typeMarker = 'AST_AGNetworkSnmpSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGNetworkSnmpSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGNetworkSnmpSaveResponse.prototype.setResult
//
function AST_AGNetworkSnmpSaveResponse_getResult() { return this._result;}

AST_AGNetworkSnmpSaveResponse.prototype.getResult = AST_AGNetworkSnmpSaveResponse_getResult;

function AST_AGNetworkSnmpSaveResponse_setResult(value) { this._result = value;}

AST_AGNetworkSnmpSaveResponse.prototype.setResult = AST_AGNetworkSnmpSaveResponse_setResult;
//
// Serialize {urn:ast}AGNetworkSnmpSaveResponse
//
function AST_AGNetworkSnmpSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkSnmpSaveResponse.prototype.serialize = AST_AGNetworkSnmpSaveResponse_serialize;

function AST_AGNetworkSnmpSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkSnmpSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RoutingOrder
//
function AST_RoutingOrder () {
    this.typeMarker = 'AST_RoutingOrder';
    this._orders = null;
}

//
// accessor is AST_RoutingOrder.prototype.getOrders
// element get for orders
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for orders
// setter function is is AST_RoutingOrder.prototype.setOrders
//
function AST_RoutingOrder_getOrders() { return this._orders;}

AST_RoutingOrder.prototype.getOrders = AST_RoutingOrder_getOrders;

function AST_RoutingOrder_setOrders(value) { this._orders = value;}

AST_RoutingOrder.prototype.setOrders = AST_RoutingOrder_setOrders;
//
// Serialize {urn:ast}RoutingOrder
//
function AST_RoutingOrder_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._orders != null) {
      if (this._orders == null) {
       xml = xml + '<jns0:orders xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:orders>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._orders);
       xml = xml + '</jns0:orders>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RoutingOrder.prototype.serialize = AST_RoutingOrder_serialize;

function AST_RoutingOrder_deserialize (cxfjsutils, element) {
    var newobject = new AST_RoutingOrder();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing orders');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'orders')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setOrders(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRS485SetBaudrateResponse
//
function AST_AGRS485SetBaudrateResponse () {
    this.typeMarker = 'AST_AGRS485SetBaudrateResponse';
    this._result = 0;
}

//
// accessor is AST_AGRS485SetBaudrateResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGRS485SetBaudrateResponse.prototype.setResult
//
function AST_AGRS485SetBaudrateResponse_getResult() { return this._result;}

AST_AGRS485SetBaudrateResponse.prototype.getResult = AST_AGRS485SetBaudrateResponse_getResult;

function AST_AGRS485SetBaudrateResponse_setResult(value) { this._result = value;}

AST_AGRS485SetBaudrateResponse.prototype.setResult = AST_AGRS485SetBaudrateResponse_setResult;
//
// Serialize {urn:ast}AGRS485SetBaudrateResponse
//
function AST_AGRS485SetBaudrateResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRS485SetBaudrateResponse.prototype.serialize = AST_AGRS485SetBaudrateResponse_serialize;

function AST_AGRS485SetBaudrateResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRS485SetBaudrateResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGLogCdrDelResponse
//
function AST_AGLogCdrDelResponse () {
    this.typeMarker = 'AST_AGLogCdrDelResponse';
    this._result = null;
}

//
// accessor is AST_AGLogCdrDelResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - optional element
// - nillable
//
// element set for result
// setter function is is AST_AGLogCdrDelResponse.prototype.setResult
//
function AST_AGLogCdrDelResponse_getResult() { return this._result;}

AST_AGLogCdrDelResponse.prototype.getResult = AST_AGLogCdrDelResponse_getResult;

function AST_AGLogCdrDelResponse_setResult(value) { this._result = value;}

AST_AGLogCdrDelResponse.prototype.setResult = AST_AGLogCdrDelResponse_setResult;
//
// Serialize {urn:ast}AGLogCdrDelResponse
//
function AST_AGLogCdrDelResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._result != null) {
      if (this._result == null) {
       xml = xml + '<jns0:result xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:result>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._result);
       xml = xml + '</jns0:result>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGLogCdrDelResponse.prototype.serialize = AST_AGLogCdrDelResponse_serialize;

function AST_AGLogCdrDelResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGLogCdrDelResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'result')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = parseInt(value);
     }
     newobject.setResult(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkDdnsGetSaveResponse
//
function AST_AGNetworkDdnsGetSaveResponse () {
    this.typeMarker = 'AST_AGNetworkDdnsGetSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGNetworkDdnsGetSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGNetworkDdnsGetSaveResponse.prototype.setResult
//
function AST_AGNetworkDdnsGetSaveResponse_getResult() { return this._result;}

AST_AGNetworkDdnsGetSaveResponse.prototype.getResult = AST_AGNetworkDdnsGetSaveResponse_getResult;

function AST_AGNetworkDdnsGetSaveResponse_setResult(value) { this._result = value;}

AST_AGNetworkDdnsGetSaveResponse.prototype.setResult = AST_AGNetworkDdnsGetSaveResponse_setResult;
//
// Serialize {urn:ast}AGNetworkDdnsGetSaveResponse
//
function AST_AGNetworkDdnsGetSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkDdnsGetSaveResponse.prototype.serialize = AST_AGNetworkDdnsGetSaveResponse_serialize;

function AST_AGNetworkDdnsGetSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkDdnsGetSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemDHCPUpdateSaveResponse
//
function AST_AGSystemDHCPUpdateSaveResponse () {
    this.typeMarker = 'AST_AGSystemDHCPUpdateSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGSystemDHCPUpdateSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSystemDHCPUpdateSaveResponse.prototype.setResult
//
function AST_AGSystemDHCPUpdateSaveResponse_getResult() { return this._result;}

AST_AGSystemDHCPUpdateSaveResponse.prototype.getResult = AST_AGSystemDHCPUpdateSaveResponse_getResult;

function AST_AGSystemDHCPUpdateSaveResponse_setResult(value) { this._result = value;}

AST_AGSystemDHCPUpdateSaveResponse.prototype.setResult = AST_AGSystemDHCPUpdateSaveResponse_setResult;
//
// Serialize {urn:ast}AGSystemDHCPUpdateSaveResponse
//
function AST_AGSystemDHCPUpdateSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemDHCPUpdateSaveResponse.prototype.serialize = AST_AGSystemDHCPUpdateSaveResponse_serialize;

function AST_AGSystemDHCPUpdateSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemDHCPUpdateSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGGetSIPEndpointStatus
//
function AST_AGGetSIPEndpointStatus () {
    this.typeMarker = 'AST_AGGetSIPEndpointStatus';
    this._user = null;
}

//
// accessor is AST_AGGetSIPEndpointStatus.prototype.getUser
// element get for user
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for user
// setter function is is AST_AGGetSIPEndpointStatus.prototype.setUser
//
function AST_AGGetSIPEndpointStatus_getUser() { return this._user;}

AST_AGGetSIPEndpointStatus.prototype.getUser = AST_AGGetSIPEndpointStatus_getUser;

function AST_AGGetSIPEndpointStatus_setUser(value) { this._user = value;}

AST_AGGetSIPEndpointStatus.prototype.setUser = AST_AGGetSIPEndpointStatus_setUser;
//
// Serialize {urn:ast}AGGetSIPEndpointStatus
//
function AST_AGGetSIPEndpointStatus_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._user != null) {
      if (this._user == null) {
       xml = xml + '<jns0:user xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:user>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._user);
       xml = xml + '</jns0:user>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGGetSIPEndpointStatus.prototype.serialize = AST_AGGetSIPEndpointStatus_serialize;

function AST_AGGetSIPEndpointStatus_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGGetSIPEndpointStatus();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing user');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'user')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setUser(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}IaxGeneralSaveResponse
//
function AST_IaxGeneralSaveResponse () {
    this.typeMarker = 'AST_IaxGeneralSaveResponse';
    this._result = 0;
}

//
// accessor is AST_IaxGeneralSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_IaxGeneralSaveResponse.prototype.setResult
//
function AST_IaxGeneralSaveResponse_getResult() { return this._result;}

AST_IaxGeneralSaveResponse.prototype.getResult = AST_IaxGeneralSaveResponse_getResult;

function AST_IaxGeneralSaveResponse_setResult(value) { this._result = value;}

AST_IaxGeneralSaveResponse.prototype.setResult = AST_IaxGeneralSaveResponse_setResult;
//
// Serialize {urn:ast}IaxGeneralSaveResponse
//
function AST_IaxGeneralSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_IaxGeneralSaveResponse.prototype.serialize = AST_IaxGeneralSaveResponse_serialize;

function AST_IaxGeneralSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_IaxGeneralSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGLogDelAllResponse
//
function AST_AGLogDelAllResponse () {
    this.typeMarker = 'AST_AGLogDelAllResponse';
    this._result = 0;
}

//
// accessor is AST_AGLogDelAllResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGLogDelAllResponse.prototype.setResult
//
function AST_AGLogDelAllResponse_getResult() { return this._result;}

AST_AGLogDelAllResponse.prototype.getResult = AST_AGLogDelAllResponse_getResult;

function AST_AGLogDelAllResponse_setResult(value) { this._result = value;}

AST_AGLogDelAllResponse.prototype.setResult = AST_AGLogDelAllResponse_setResult;
//
// Serialize {urn:ast}AGLogDelAllResponse
//
function AST_AGLogDelAllResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGLogDelAllResponse.prototype.serialize = AST_AGLogDelAllResponse_serialize;

function AST_AGLogDelAllResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGLogDelAllResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkWanSave
//
function AST_AGNetworkWanSave () {
    this.typeMarker = 'AST_AGNetworkWanSave';
    this._save = null;
}

//
// accessor is AST_AGNetworkWanSave.prototype.getSave
// element get for save
// - element type is {urn:ast}NetworkWanSave
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGNetworkWanSave.prototype.setSave
//
function AST_AGNetworkWanSave_getSave() { return this._save;}

AST_AGNetworkWanSave.prototype.getSave = AST_AGNetworkWanSave_getSave;

function AST_AGNetworkWanSave_setSave(value) { this._save = value;}

AST_AGNetworkWanSave.prototype.setSave = AST_AGNetworkWanSave_setSave;
//
// Serialize {urn:ast}AGNetworkWanSave
//
function AST_AGNetworkWanSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkWanSave.prototype.serialize = AST_AGNetworkWanSave_serialize;

function AST_AGNetworkWanSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkWanSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_NetworkWanSave_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAdvAstfileeditorEditGetAllResponse
//
function AST_AGAdvAstfileeditorEditGetAllResponse () {
    this.typeMarker = 'AST_AGAdvAstfileeditorEditGetAllResponse';
    this._files = null;
}

//
// accessor is AST_AGAdvAstfileeditorEditGetAllResponse.prototype.getFiles
// element get for files
// - element type is {urn:ast}AdvAstFileGet
// - optional element
// - nillable
//
// element set for files
// setter function is is AST_AGAdvAstfileeditorEditGetAllResponse.prototype.setFiles
//
function AST_AGAdvAstfileeditorEditGetAllResponse_getFiles() { return this._files;}

AST_AGAdvAstfileeditorEditGetAllResponse.prototype.getFiles = AST_AGAdvAstfileeditorEditGetAllResponse_getFiles;

function AST_AGAdvAstfileeditorEditGetAllResponse_setFiles(value) { this._files = value;}

AST_AGAdvAstfileeditorEditGetAllResponse.prototype.setFiles = AST_AGAdvAstfileeditorEditGetAllResponse_setFiles;
//
// Serialize {urn:ast}AGAdvAstfileeditorEditGetAllResponse
//
function AST_AGAdvAstfileeditorEditGetAllResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._files != null) {
      if (this._files == null) {
       xml = xml + '<jns0:files xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._files.serialize(cxfjsutils, 'jns0:files', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAdvAstfileeditorEditGetAllResponse.prototype.serialize = AST_AGAdvAstfileeditorEditGetAllResponse_serialize;

function AST_AGAdvAstfileeditorEditGetAllResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAdvAstfileeditorEditGetAllResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing files');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'files')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AdvAstFileGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setFiles(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipSecuritySaveResponse
//
function AST_AGSipSecuritySaveResponse () {
    this.typeMarker = 'AST_AGSipSecuritySaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGSipSecuritySaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSipSecuritySaveResponse.prototype.setResult
//
function AST_AGSipSecuritySaveResponse_getResult() { return this._result;}

AST_AGSipSecuritySaveResponse.prototype.getResult = AST_AGSipSecuritySaveResponse_getResult;

function AST_AGSipSecuritySaveResponse_setResult(value) { this._result = value;}

AST_AGSipSecuritySaveResponse.prototype.setResult = AST_AGSipSecuritySaveResponse_setResult;
//
// Serialize {urn:ast}AGSipSecuritySaveResponse
//
function AST_AGSipSecuritySaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipSecuritySaveResponse.prototype.serialize = AST_AGSipSecuritySaveResponse_serialize;

function AST_AGSipSecuritySaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipSecuritySaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemAutoUpdateGet
//
function AST_AGSystemAutoUpdateGet () {
    this.typeMarker = 'AST_AGSystemAutoUpdateGet';
}

//
// Serialize {urn:ast}AGSystemAutoUpdateGet
//
function AST_AGSystemAutoUpdateGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemAutoUpdateGet.prototype.serialize = AST_AGSystemAutoUpdateGet_serialize;

function AST_AGSystemAutoUpdateGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemAutoUpdateGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGLogSettingsSaveResponse
//
function AST_AGLogSettingsSaveResponse () {
    this.typeMarker = 'AST_AGLogSettingsSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGLogSettingsSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGLogSettingsSaveResponse.prototype.setResult
//
function AST_AGLogSettingsSaveResponse_getResult() { return this._result;}

AST_AGLogSettingsSaveResponse.prototype.getResult = AST_AGLogSettingsSaveResponse_getResult;

function AST_AGLogSettingsSaveResponse_setResult(value) { this._result = value;}

AST_AGLogSettingsSaveResponse.prototype.setResult = AST_AGLogSettingsSaveResponse_setResult;
//
// Serialize {urn:ast}AGLogSettingsSaveResponse
//
function AST_AGLogSettingsSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGLogSettingsSaveResponse.prototype.serialize = AST_AGLogSettingsSaveResponse_serialize;

function AST_AGLogSettingsSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGLogSettingsSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkSaveResponse
//
function AST_AGNetworkSaveResponse () {
    this.typeMarker = 'AST_AGNetworkSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGNetworkSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGNetworkSaveResponse.prototype.setResult
//
function AST_AGNetworkSaveResponse_getResult() { return this._result;}

AST_AGNetworkSaveResponse.prototype.getResult = AST_AGNetworkSaveResponse_getResult;

function AST_AGNetworkSaveResponse_setResult(value) { this._result = value;}

AST_AGNetworkSaveResponse.prototype.setResult = AST_AGNetworkSaveResponse_setResult;
//
// Serialize {urn:ast}AGNetworkSaveResponse
//
function AST_AGNetworkSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkSaveResponse.prototype.serialize = AST_AGNetworkSaveResponse_serialize;

function AST_AGNetworkSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingRulesSaveOrder
//
function AST_AGRoutingRulesSaveOrder () {
    this.typeMarker = 'AST_AGRoutingRulesSaveOrder';
    this._order = null;
}

//
// accessor is AST_AGRoutingRulesSaveOrder.prototype.getOrder
// element get for order
// - element type is {urn:ast}LineArr
// - optional element
// - nillable
//
// element set for order
// setter function is is AST_AGRoutingRulesSaveOrder.prototype.setOrder
//
function AST_AGRoutingRulesSaveOrder_getOrder() { return this._order;}

AST_AGRoutingRulesSaveOrder.prototype.getOrder = AST_AGRoutingRulesSaveOrder_getOrder;

function AST_AGRoutingRulesSaveOrder_setOrder(value) { this._order = value;}

AST_AGRoutingRulesSaveOrder.prototype.setOrder = AST_AGRoutingRulesSaveOrder_setOrder;
//
// Serialize {urn:ast}AGRoutingRulesSaveOrder
//
function AST_AGRoutingRulesSaveOrder_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._order != null) {
      if (this._order == null) {
       xml = xml + '<jns0:order xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._order.serialize(cxfjsutils, 'jns0:order', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingRulesSaveOrder.prototype.serialize = AST_AGRoutingRulesSaveOrder_serialize;

function AST_AGRoutingRulesSaveOrder_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingRulesSaveOrder();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing order');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'order')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_LineArr_deserialize(cxfjsutils, curElement);
     }
     newobject.setOrder(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGFxsSpeedialProvisionSaveResponse
//
function AST_AGFxsSpeedialProvisionSaveResponse () {
    this.typeMarker = 'AST_AGFxsSpeedialProvisionSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGFxsSpeedialProvisionSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGFxsSpeedialProvisionSaveResponse.prototype.setResult
//
function AST_AGFxsSpeedialProvisionSaveResponse_getResult() { return this._result;}

AST_AGFxsSpeedialProvisionSaveResponse.prototype.getResult = AST_AGFxsSpeedialProvisionSaveResponse_getResult;

function AST_AGFxsSpeedialProvisionSaveResponse_setResult(value) { this._result = value;}

AST_AGFxsSpeedialProvisionSaveResponse.prototype.setResult = AST_AGFxsSpeedialProvisionSaveResponse_setResult;
//
// Serialize {urn:ast}AGFxsSpeedialProvisionSaveResponse
//
function AST_AGFxsSpeedialProvisionSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGFxsSpeedialProvisionSaveResponse.prototype.serialize = AST_AGFxsSpeedialProvisionSaveResponse_serialize;

function AST_AGFxsSpeedialProvisionSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGFxsSpeedialProvisionSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGCommitSwitchResponse
//
function AST_AGCommitSwitchResponse () {
    this.typeMarker = 'AST_AGCommitSwitchResponse';
    this._result = 0;
}

//
// accessor is AST_AGCommitSwitchResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGCommitSwitchResponse.prototype.setResult
//
function AST_AGCommitSwitchResponse_getResult() { return this._result;}

AST_AGCommitSwitchResponse.prototype.getResult = AST_AGCommitSwitchResponse_getResult;

function AST_AGCommitSwitchResponse_setResult(value) { this._result = value;}

AST_AGCommitSwitchResponse.prototype.setResult = AST_AGCommitSwitchResponse_setResult;
//
// Serialize {urn:ast}AGCommitSwitchResponse
//
function AST_AGCommitSwitchResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGCommitSwitchResponse.prototype.serialize = AST_AGCommitSwitchResponse_serialize;

function AST_AGCommitSwitchResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGCommitSwitchResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemToolsSystemSwitch
//
function AST_AGSystemToolsSystemSwitch () {
    this.typeMarker = 'AST_AGSystemToolsSystemSwitch';
}

//
// Serialize {urn:ast}AGSystemToolsSystemSwitch
//
function AST_AGSystemToolsSystemSwitch_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemToolsSystemSwitch.prototype.serialize = AST_AGSystemToolsSystemSwitch_serialize;

function AST_AGSystemToolsSystemSwitch_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemToolsSystemSwitch();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}GroupDelResponse
//
function AST_GroupDelResponse () {
    this.typeMarker = 'AST_GroupDelResponse';
    this._result = 0;
}

//
// accessor is AST_GroupDelResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_GroupDelResponse.prototype.setResult
//
function AST_GroupDelResponse_getResult() { return this._result;}

AST_GroupDelResponse.prototype.getResult = AST_GroupDelResponse_getResult;

function AST_GroupDelResponse_setResult(value) { this._result = value;}

AST_GroupDelResponse.prototype.setResult = AST_GroupDelResponse_setResult;
//
// Serialize {urn:ast}GroupDelResponse
//
function AST_GroupDelResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_GroupDelResponse.prototype.serialize = AST_GroupDelResponse_serialize;

function AST_GroupDelResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_GroupDelResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemToolsSystemReboot
//
function AST_AGSystemToolsSystemReboot () {
    this.typeMarker = 'AST_AGSystemToolsSystemReboot';
}

//
// Serialize {urn:ast}AGSystemToolsSystemReboot
//
function AST_AGSystemToolsSystemReboot_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemToolsSystemReboot.prototype.serialize = AST_AGSystemToolsSystemReboot_serialize;

function AST_AGSystemToolsSystemReboot_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemToolsSystemReboot();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGjConRelaySave
//
function AST_AGjConRelaySave () {
    this.typeMarker = 'AST_AGjConRelaySave';
    this._board = 0;
    this._relay = 0;
    this._mode = 0;
    this._count = 0;
}

//
// accessor is AST_AGjConRelaySave.prototype.getBoard
// element get for board
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for board
// setter function is is AST_AGjConRelaySave.prototype.setBoard
//
function AST_AGjConRelaySave_getBoard() { return this._board;}

AST_AGjConRelaySave.prototype.getBoard = AST_AGjConRelaySave_getBoard;

function AST_AGjConRelaySave_setBoard(value) { this._board = value;}

AST_AGjConRelaySave.prototype.setBoard = AST_AGjConRelaySave_setBoard;
//
// accessor is AST_AGjConRelaySave.prototype.getRelay
// element get for relay
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for relay
// setter function is is AST_AGjConRelaySave.prototype.setRelay
//
function AST_AGjConRelaySave_getRelay() { return this._relay;}

AST_AGjConRelaySave.prototype.getRelay = AST_AGjConRelaySave_getRelay;

function AST_AGjConRelaySave_setRelay(value) { this._relay = value;}

AST_AGjConRelaySave.prototype.setRelay = AST_AGjConRelaySave_setRelay;
//
// accessor is AST_AGjConRelaySave.prototype.getMode
// element get for mode
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for mode
// setter function is is AST_AGjConRelaySave.prototype.setMode
//
function AST_AGjConRelaySave_getMode() { return this._mode;}

AST_AGjConRelaySave.prototype.getMode = AST_AGjConRelaySave_getMode;

function AST_AGjConRelaySave_setMode(value) { this._mode = value;}

AST_AGjConRelaySave.prototype.setMode = AST_AGjConRelaySave_setMode;
//
// accessor is AST_AGjConRelaySave.prototype.getCount
// element get for count
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for count
// setter function is is AST_AGjConRelaySave.prototype.setCount
//
function AST_AGjConRelaySave_getCount() { return this._count;}

AST_AGjConRelaySave.prototype.getCount = AST_AGjConRelaySave_getCount;

function AST_AGjConRelaySave_setCount(value) { this._count = value;}

AST_AGjConRelaySave.prototype.setCount = AST_AGjConRelaySave_setCount;
//
// Serialize {urn:ast}AGjConRelaySave
//
function AST_AGjConRelaySave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:board>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._board);
     xml = xml + '</jns0:board>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:relay>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._relay);
     xml = xml + '</jns0:relay>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:mode>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._mode);
     xml = xml + '</jns0:mode>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:count>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._count);
     xml = xml + '</jns0:count>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGjConRelaySave.prototype.serialize = AST_AGjConRelaySave_serialize;

function AST_AGjConRelaySave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGjConRelaySave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing board');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setBoard(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing relay');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setRelay(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing mode');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setMode(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing count');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setCount(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAdvAstapiGetResponse
//
function AST_AGAdvAstapiGetResponse () {
    this.typeMarker = 'AST_AGAdvAstapiGetResponse';
    this._get = null;
}

//
// accessor is AST_AGAdvAstapiGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}AdvAstGetAll
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGAdvAstapiGetResponse.prototype.setGet
//
function AST_AGAdvAstapiGetResponse_getGet() { return this._get;}

AST_AGAdvAstapiGetResponse.prototype.getGet = AST_AGAdvAstapiGetResponse_getGet;

function AST_AGAdvAstapiGetResponse_setGet(value) { this._get = value;}

AST_AGAdvAstapiGetResponse.prototype.setGet = AST_AGAdvAstapiGetResponse_setGet;
//
// Serialize {urn:ast}AGAdvAstapiGetResponse
//
function AST_AGAdvAstapiGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAdvAstapiGetResponse.prototype.serialize = AST_AGAdvAstapiGetResponse_serialize;

function AST_AGAdvAstapiGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAdvAstapiGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AdvAstGetAll_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemAutoUpdateGetResponse
//
function AST_AGSystemAutoUpdateGetResponse () {
    this.typeMarker = 'AST_AGSystemAutoUpdateGetResponse';
    this._get = null;
}

//
// accessor is AST_AGSystemAutoUpdateGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}AutoProvisionGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGSystemAutoUpdateGetResponse.prototype.setGet
//
function AST_AGSystemAutoUpdateGetResponse_getGet() { return this._get;}

AST_AGSystemAutoUpdateGetResponse.prototype.getGet = AST_AGSystemAutoUpdateGetResponse_getGet;

function AST_AGSystemAutoUpdateGetResponse_setGet(value) { this._get = value;}

AST_AGSystemAutoUpdateGetResponse.prototype.setGet = AST_AGSystemAutoUpdateGetResponse_setGet;
//
// Serialize {urn:ast}AGSystemAutoUpdateGetResponse
//
function AST_AGSystemAutoUpdateGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemAutoUpdateGetResponse.prototype.serialize = AST_AGSystemAutoUpdateGetResponse_serialize;

function AST_AGSystemAutoUpdateGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemAutoUpdateGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AutoProvisionGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGFxsGroupDialProvisonSaveResponse
//
function AST_AGFxsGroupDialProvisonSaveResponse () {
    this.typeMarker = 'AST_AGFxsGroupDialProvisonSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGFxsGroupDialProvisonSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGFxsGroupDialProvisonSaveResponse.prototype.setResult
//
function AST_AGFxsGroupDialProvisonSaveResponse_getResult() { return this._result;}

AST_AGFxsGroupDialProvisonSaveResponse.prototype.getResult = AST_AGFxsGroupDialProvisonSaveResponse_getResult;

function AST_AGFxsGroupDialProvisonSaveResponse_setResult(value) { this._result = value;}

AST_AGFxsGroupDialProvisonSaveResponse.prototype.setResult = AST_AGFxsGroupDialProvisonSaveResponse_setResult;
//
// Serialize {urn:ast}AGFxsGroupDialProvisonSaveResponse
//
function AST_AGFxsGroupDialProvisonSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGFxsGroupDialProvisonSaveResponse.prototype.serialize = AST_AGFxsGroupDialProvisonSaveResponse_serialize;

function AST_AGFxsGroupDialProvisonSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGFxsGroupDialProvisonSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGLogCdrGenFile
//
function AST_AGLogCdrGenFile () {
    this.typeMarker = 'AST_AGLogCdrGenFile';
    this._filename = null;
    this._table = null;
}

//
// accessor is AST_AGLogCdrGenFile.prototype.getFilename
// element get for filename
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for filename
// setter function is is AST_AGLogCdrGenFile.prototype.setFilename
//
function AST_AGLogCdrGenFile_getFilename() { return this._filename;}

AST_AGLogCdrGenFile.prototype.getFilename = AST_AGLogCdrGenFile_getFilename;

function AST_AGLogCdrGenFile_setFilename(value) { this._filename = value;}

AST_AGLogCdrGenFile.prototype.setFilename = AST_AGLogCdrGenFile_setFilename;
//
// accessor is AST_AGLogCdrGenFile.prototype.getTable
// element get for table
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for table
// setter function is is AST_AGLogCdrGenFile.prototype.setTable
//
function AST_AGLogCdrGenFile_getTable() { return this._table;}

AST_AGLogCdrGenFile.prototype.getTable = AST_AGLogCdrGenFile_getTable;

function AST_AGLogCdrGenFile_setTable(value) { this._table = value;}

AST_AGLogCdrGenFile.prototype.setTable = AST_AGLogCdrGenFile_setTable;
//
// Serialize {urn:ast}AGLogCdrGenFile
//
function AST_AGLogCdrGenFile_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._filename != null) {
      if (this._filename == null) {
       xml = xml + '<jns0:filename xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:filename>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._filename);
       xml = xml + '</jns0:filename>';
      }
     }
    }
    // block for local variables
    {
     if (this._table != null) {
      if (this._table == null) {
       xml = xml + '<jns0:table xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:table>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._table);
       xml = xml + '</jns0:table>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGLogCdrGenFile.prototype.serialize = AST_AGLogCdrGenFile_serialize;

function AST_AGLogCdrGenFile_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGLogCdrGenFile();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing filename');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'filename')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setFilename(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing table');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'table')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setTable(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgDialtableSaveResponse
//
function AST_AGAlgDialtableSaveResponse () {
    this.typeMarker = 'AST_AGAlgDialtableSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGAlgDialtableSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGAlgDialtableSaveResponse.prototype.setResult
//
function AST_AGAlgDialtableSaveResponse_getResult() { return this._result;}

AST_AGAlgDialtableSaveResponse.prototype.getResult = AST_AGAlgDialtableSaveResponse_getResult;

function AST_AGAlgDialtableSaveResponse_setResult(value) { this._result = value;}

AST_AGAlgDialtableSaveResponse.prototype.setResult = AST_AGAlgDialtableSaveResponse_setResult;
//
// Serialize {urn:ast}AGAlgDialtableSaveResponse
//
function AST_AGAlgDialtableSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgDialtableSaveResponse.prototype.serialize = AST_AGAlgDialtableSaveResponse_serialize;

function AST_AGAlgDialtableSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgDialtableSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkSave
//
function AST_AGNetworkSave () {
    this.typeMarker = 'AST_AGNetworkSave';
    this._save = null;
}

//
// accessor is AST_AGNetworkSave.prototype.getSave
// element get for save
// - element type is {urn:ast}NetworkSave
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGNetworkSave.prototype.setSave
//
function AST_AGNetworkSave_getSave() { return this._save;}

AST_AGNetworkSave.prototype.getSave = AST_AGNetworkSave_getSave;

function AST_AGNetworkSave_setSave(value) { this._save = value;}

AST_AGNetworkSave.prototype.setSave = AST_AGNetworkSave_setSave;
//
// Serialize {urn:ast}AGNetworkSave
//
function AST_AGNetworkSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkSave.prototype.serialize = AST_AGNetworkSave_serialize;

function AST_AGNetworkSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_NetworkSave_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAdvAstfileeditorEditDelResponse
//
function AST_AGAdvAstfileeditorEditDelResponse () {
    this.typeMarker = 'AST_AGAdvAstfileeditorEditDelResponse';
    this._result = 0;
}

//
// accessor is AST_AGAdvAstfileeditorEditDelResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGAdvAstfileeditorEditDelResponse.prototype.setResult
//
function AST_AGAdvAstfileeditorEditDelResponse_getResult() { return this._result;}

AST_AGAdvAstfileeditorEditDelResponse.prototype.getResult = AST_AGAdvAstfileeditorEditDelResponse_getResult;

function AST_AGAdvAstfileeditorEditDelResponse_setResult(value) { this._result = value;}

AST_AGAdvAstfileeditorEditDelResponse.prototype.setResult = AST_AGAdvAstfileeditorEditDelResponse_setResult;
//
// Serialize {urn:ast}AGAdvAstfileeditorEditDelResponse
//
function AST_AGAdvAstfileeditorEditDelResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAdvAstfileeditorEditDelResponse.prototype.serialize = AST_AGAdvAstfileeditorEditDelResponse_serialize;

function AST_AGAdvAstfileeditorEditDelResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAdvAstfileeditorEditDelResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAdvAstapiSave
//
function AST_AGAdvAstapiSave () {
    this.typeMarker = 'AST_AGAdvAstapiSave';
    this._save = null;
}

//
// accessor is AST_AGAdvAstapiSave.prototype.getSave
// element get for save
// - element type is {urn:ast}AdvAstSave
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGAdvAstapiSave.prototype.setSave
//
function AST_AGAdvAstapiSave_getSave() { return this._save;}

AST_AGAdvAstapiSave.prototype.getSave = AST_AGAdvAstapiSave_getSave;

function AST_AGAdvAstapiSave_setSave(value) { this._save = value;}

AST_AGAdvAstapiSave.prototype.setSave = AST_AGAdvAstapiSave_setSave;
//
// Serialize {urn:ast}AGAdvAstapiSave
//
function AST_AGAdvAstapiSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAdvAstapiSave.prototype.serialize = AST_AGAdvAstapiSave_serialize;

function AST_AGAdvAstapiSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAdvAstapiSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AdvAstSave_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSysLoginGetResponse
//
function AST_AGSysLoginGetResponse () {
    this.typeMarker = 'AST_AGSysLoginGetResponse';
    this._get = null;
}

//
// accessor is AST_AGSysLoginGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}SysLoginGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGSysLoginGetResponse.prototype.setGet
//
function AST_AGSysLoginGetResponse_getGet() { return this._get;}

AST_AGSysLoginGetResponse.prototype.getGet = AST_AGSysLoginGetResponse_getGet;

function AST_AGSysLoginGetResponse_setGet(value) { this._get = value;}

AST_AGSysLoginGetResponse.prototype.setGet = AST_AGSysLoginGetResponse_setGet;
//
// Serialize {urn:ast}AGSysLoginGetResponse
//
function AST_AGSysLoginGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSysLoginGetResponse.prototype.serialize = AST_AGSysLoginGetResponse_serialize;

function AST_AGSysLoginGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSysLoginGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SysLoginGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGjConRelayGetOneResponse
//
function AST_AGjConRelayGetOneResponse () {
    this.typeMarker = 'AST_AGjConRelayGetOneResponse';
    this._relay = null;
}

//
// accessor is AST_AGjConRelayGetOneResponse.prototype.getRelay
// element get for relay
// - element type is {urn:ast}RelayGetOne
// - optional element
// - nillable
//
// element set for relay
// setter function is is AST_AGjConRelayGetOneResponse.prototype.setRelay
//
function AST_AGjConRelayGetOneResponse_getRelay() { return this._relay;}

AST_AGjConRelayGetOneResponse.prototype.getRelay = AST_AGjConRelayGetOneResponse_getRelay;

function AST_AGjConRelayGetOneResponse_setRelay(value) { this._relay = value;}

AST_AGjConRelayGetOneResponse.prototype.setRelay = AST_AGjConRelayGetOneResponse_setRelay;
//
// Serialize {urn:ast}AGjConRelayGetOneResponse
//
function AST_AGjConRelayGetOneResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._relay != null) {
      if (this._relay == null) {
       xml = xml + '<jns0:relay xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._relay.serialize(cxfjsutils, 'jns0:relay', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGjConRelayGetOneResponse.prototype.serialize = AST_AGjConRelayGetOneResponse_serialize;

function AST_AGjConRelayGetOneResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGjConRelayGetOneResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing relay');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'relay')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_RelayGetOne_deserialize(cxfjsutils, curElement);
     }
     newobject.setRelay(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGUcpAlgFxoparamSaveResponse
//
function AST_AGUcpAlgFxoparamSaveResponse () {
    this.typeMarker = 'AST_AGUcpAlgFxoparamSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGUcpAlgFxoparamSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGUcpAlgFxoparamSaveResponse.prototype.setResult
//
function AST_AGUcpAlgFxoparamSaveResponse_getResult() { return this._result;}

AST_AGUcpAlgFxoparamSaveResponse.prototype.getResult = AST_AGUcpAlgFxoparamSaveResponse_getResult;

function AST_AGUcpAlgFxoparamSaveResponse_setResult(value) { this._result = value;}

AST_AGUcpAlgFxoparamSaveResponse.prototype.setResult = AST_AGUcpAlgFxoparamSaveResponse_setResult;
//
// Serialize {urn:ast}AGUcpAlgFxoparamSaveResponse
//
function AST_AGUcpAlgFxoparamSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGUcpAlgFxoparamSaveResponse.prototype.serialize = AST_AGUcpAlgFxoparamSaveResponse_serialize;

function AST_AGUcpAlgFxoparamSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGUcpAlgFxoparamSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGOEMSettingInfoGetResponse
//
function AST_AGOEMSettingInfoGetResponse () {
    this.typeMarker = 'AST_AGOEMSettingInfoGetResponse';
    this._get = null;
}

//
// accessor is AST_AGOEMSettingInfoGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}OEMSettingInfoGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGOEMSettingInfoGetResponse.prototype.setGet
//
function AST_AGOEMSettingInfoGetResponse_getGet() { return this._get;}

AST_AGOEMSettingInfoGetResponse.prototype.getGet = AST_AGOEMSettingInfoGetResponse_getGet;

function AST_AGOEMSettingInfoGetResponse_setGet(value) { this._get = value;}

AST_AGOEMSettingInfoGetResponse.prototype.setGet = AST_AGOEMSettingInfoGetResponse_setGet;
//
// Serialize {urn:ast}AGOEMSettingInfoGetResponse
//
function AST_AGOEMSettingInfoGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGOEMSettingInfoGetResponse.prototype.serialize = AST_AGOEMSettingInfoGetResponse_serialize;

function AST_AGOEMSettingInfoGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGOEMSettingInfoGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_OEMSettingInfoGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemInfoMemoryClean
//
function AST_AGSystemInfoMemoryClean () {
    this.typeMarker = 'AST_AGSystemInfoMemoryClean';
}

//
// Serialize {urn:ast}AGSystemInfoMemoryClean
//
function AST_AGSystemInfoMemoryClean_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemInfoMemoryClean.prototype.serialize = AST_AGSystemInfoMemoryClean_serialize;

function AST_AGSystemInfoMemoryClean_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemInfoMemoryClean();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemToolsFactoryReset
//
function AST_AGSystemToolsFactoryReset () {
    this.typeMarker = 'AST_AGSystemToolsFactoryReset';
    this._rmcdr = 0;
    this._rmsyslog = 0;
}

//
// accessor is AST_AGSystemToolsFactoryReset.prototype.getRmcdr
// element get for rmcdr
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for rmcdr
// setter function is is AST_AGSystemToolsFactoryReset.prototype.setRmcdr
//
function AST_AGSystemToolsFactoryReset_getRmcdr() { return this._rmcdr;}

AST_AGSystemToolsFactoryReset.prototype.getRmcdr = AST_AGSystemToolsFactoryReset_getRmcdr;

function AST_AGSystemToolsFactoryReset_setRmcdr(value) { this._rmcdr = value;}

AST_AGSystemToolsFactoryReset.prototype.setRmcdr = AST_AGSystemToolsFactoryReset_setRmcdr;
//
// accessor is AST_AGSystemToolsFactoryReset.prototype.getRmsyslog
// element get for rmsyslog
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for rmsyslog
// setter function is is AST_AGSystemToolsFactoryReset.prototype.setRmsyslog
//
function AST_AGSystemToolsFactoryReset_getRmsyslog() { return this._rmsyslog;}

AST_AGSystemToolsFactoryReset.prototype.getRmsyslog = AST_AGSystemToolsFactoryReset_getRmsyslog;

function AST_AGSystemToolsFactoryReset_setRmsyslog(value) { this._rmsyslog = value;}

AST_AGSystemToolsFactoryReset.prototype.setRmsyslog = AST_AGSystemToolsFactoryReset_setRmsyslog;
//
// Serialize {urn:ast}AGSystemToolsFactoryReset
//
function AST_AGSystemToolsFactoryReset_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:rmcdr>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._rmcdr);
     xml = xml + '</jns0:rmcdr>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:rmsyslog>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._rmsyslog);
     xml = xml + '</jns0:rmsyslog>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemToolsFactoryReset.prototype.serialize = AST_AGSystemToolsFactoryReset_serialize;

function AST_AGSystemToolsFactoryReset_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemToolsFactoryReset();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing rmcdr');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setRmcdr(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing rmsyslog');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setRmsyslog(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipEndpointsDel
//
function AST_AGSipEndpointsDel () {
    this.typeMarker = 'AST_AGSipEndpointsDel';
    this._sip = null;
}

//
// accessor is AST_AGSipEndpointsDel.prototype.getSip
// element get for sip
// - element type is {urn:ast}SectionArr
// - optional element
// - nillable
//
// element set for sip
// setter function is is AST_AGSipEndpointsDel.prototype.setSip
//
function AST_AGSipEndpointsDel_getSip() { return this._sip;}

AST_AGSipEndpointsDel.prototype.getSip = AST_AGSipEndpointsDel_getSip;

function AST_AGSipEndpointsDel_setSip(value) { this._sip = value;}

AST_AGSipEndpointsDel.prototype.setSip = AST_AGSipEndpointsDel_setSip;
//
// Serialize {urn:ast}AGSipEndpointsDel
//
function AST_AGSipEndpointsDel_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._sip != null) {
      if (this._sip == null) {
       xml = xml + '<jns0:sip xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._sip.serialize(cxfjsutils, 'jns0:sip', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipEndpointsDel.prototype.serialize = AST_AGSipEndpointsDel_serialize;

function AST_AGSipEndpointsDel_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipEndpointsDel();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sip');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'sip')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SectionArr_deserialize(cxfjsutils, curElement);
     }
     newobject.setSip(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RtpSaveResponse
//
function AST_RtpSaveResponse () {
    this.typeMarker = 'AST_RtpSaveResponse';
    this._result = 0;
}

//
// accessor is AST_RtpSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_RtpSaveResponse.prototype.setResult
//
function AST_RtpSaveResponse_getResult() { return this._result;}

AST_RtpSaveResponse.prototype.getResult = AST_RtpSaveResponse_getResult;

function AST_RtpSaveResponse_setResult(value) { this._result = value;}

AST_RtpSaveResponse.prototype.setResult = AST_RtpSaveResponse_setResult;
//
// Serialize {urn:ast}RtpSaveResponse
//
function AST_RtpSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RtpSaveResponse.prototype.serialize = AST_RtpSaveResponse_serialize;

function AST_RtpSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_RtpSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAdvAstcliRunResponse
//
function AST_AGAdvAstcliRunResponse () {
    this.typeMarker = 'AST_AGAdvAstcliRunResponse';
    this._result = null;
}

//
// accessor is AST_AGAdvAstcliRunResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for result
// setter function is is AST_AGAdvAstcliRunResponse.prototype.setResult
//
function AST_AGAdvAstcliRunResponse_getResult() { return this._result;}

AST_AGAdvAstcliRunResponse.prototype.getResult = AST_AGAdvAstcliRunResponse_getResult;

function AST_AGAdvAstcliRunResponse_setResult(value) { this._result = value;}

AST_AGAdvAstcliRunResponse.prototype.setResult = AST_AGAdvAstcliRunResponse_setResult;
//
// Serialize {urn:ast}AGAdvAstcliRunResponse
//
function AST_AGAdvAstcliRunResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._result != null) {
      if (this._result == null) {
       xml = xml + '<jns0:result xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:result>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._result);
       xml = xml + '</jns0:result>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAdvAstcliRunResponse.prototype.serialize = AST_AGAdvAstcliRunResponse_serialize;

function AST_AGAdvAstcliRunResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAdvAstcliRunResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'result')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setResult(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgPickupGetResponse
//
function AST_AGAlgPickupGetResponse () {
    this.typeMarker = 'AST_AGAlgPickupGetResponse';
    this._get = null;
}

//
// accessor is AST_AGAlgPickupGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}AlgPickupGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGAlgPickupGetResponse.prototype.setGet
//
function AST_AGAlgPickupGetResponse_getGet() { return this._get;}

AST_AGAlgPickupGetResponse.prototype.getGet = AST_AGAlgPickupGetResponse_getGet;

function AST_AGAlgPickupGetResponse_setGet(value) { this._get = value;}

AST_AGAlgPickupGetResponse.prototype.setGet = AST_AGAlgPickupGetResponse_setGet;
//
// Serialize {urn:ast}AGAlgPickupGetResponse
//
function AST_AGAlgPickupGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgPickupGetResponse.prototype.serialize = AST_AGAlgPickupGetResponse_serialize;

function AST_AGAlgPickupGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgPickupGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AlgPickupGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGUcpAlgFxoparamSave
//
function AST_AGUcpAlgFxoparamSave () {
    this.typeMarker = 'AST_AGUcpAlgFxoparamSave';
    this._save = null;
}

//
// accessor is AST_AGUcpAlgFxoparamSave.prototype.getSave
// element get for save
// - element type is {urn:ast}UcpAlgFxoparam
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGUcpAlgFxoparamSave.prototype.setSave
//
function AST_AGUcpAlgFxoparamSave_getSave() { return this._save;}

AST_AGUcpAlgFxoparamSave.prototype.getSave = AST_AGUcpAlgFxoparamSave_getSave;

function AST_AGUcpAlgFxoparamSave_setSave(value) { this._save = value;}

AST_AGUcpAlgFxoparamSave.prototype.setSave = AST_AGUcpAlgFxoparamSave_setSave;
//
// Serialize {urn:ast}AGUcpAlgFxoparamSave
//
function AST_AGUcpAlgFxoparamSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGUcpAlgFxoparamSave.prototype.serialize = AST_AGUcpAlgFxoparamSave_serialize;

function AST_AGUcpAlgFxoparamSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGUcpAlgFxoparamSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_UcpAlgFxoparam_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGOEMSettingInfoSaveResponse
//
function AST_AGOEMSettingInfoSaveResponse () {
    this.typeMarker = 'AST_AGOEMSettingInfoSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGOEMSettingInfoSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGOEMSettingInfoSaveResponse.prototype.setResult
//
function AST_AGOEMSettingInfoSaveResponse_getResult() { return this._result;}

AST_AGOEMSettingInfoSaveResponse.prototype.getResult = AST_AGOEMSettingInfoSaveResponse_getResult;

function AST_AGOEMSettingInfoSaveResponse_setResult(value) { this._result = value;}

AST_AGOEMSettingInfoSaveResponse.prototype.setResult = AST_AGOEMSettingInfoSaveResponse_setResult;
//
// Serialize {urn:ast}AGOEMSettingInfoSaveResponse
//
function AST_AGOEMSettingInfoSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGOEMSettingInfoSaveResponse.prototype.serialize = AST_AGOEMSettingInfoSaveResponse_serialize;

function AST_AGOEMSettingInfoSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGOEMSettingInfoSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkOpenvpnSaveResponse
//
function AST_AGNetworkOpenvpnSaveResponse () {
    this.typeMarker = 'AST_AGNetworkOpenvpnSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGNetworkOpenvpnSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGNetworkOpenvpnSaveResponse.prototype.setResult
//
function AST_AGNetworkOpenvpnSaveResponse_getResult() { return this._result;}

AST_AGNetworkOpenvpnSaveResponse.prototype.getResult = AST_AGNetworkOpenvpnSaveResponse_getResult;

function AST_AGNetworkOpenvpnSaveResponse_setResult(value) { this._result = value;}

AST_AGNetworkOpenvpnSaveResponse.prototype.setResult = AST_AGNetworkOpenvpnSaveResponse_setResult;
//
// Serialize {urn:ast}AGNetworkOpenvpnSaveResponse
//
function AST_AGNetworkOpenvpnSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkOpenvpnSaveResponse.prototype.serialize = AST_AGNetworkOpenvpnSaveResponse_serialize;

function AST_AGNetworkOpenvpnSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkOpenvpnSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkWanGetResponse
//
function AST_AGNetworkWanGetResponse () {
    this.typeMarker = 'AST_AGNetworkWanGetResponse';
    this._get = null;
}

//
// accessor is AST_AGNetworkWanGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}NetworkWanGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGNetworkWanGetResponse.prototype.setGet
//
function AST_AGNetworkWanGetResponse_getGet() { return this._get;}

AST_AGNetworkWanGetResponse.prototype.getGet = AST_AGNetworkWanGetResponse_getGet;

function AST_AGNetworkWanGetResponse_setGet(value) { this._get = value;}

AST_AGNetworkWanGetResponse.prototype.setGet = AST_AGNetworkWanGetResponse_setGet;
//
// Serialize {urn:ast}AGNetworkWanGetResponse
//
function AST_AGNetworkWanGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkWanGetResponse.prototype.serialize = AST_AGNetworkWanGetResponse_serialize;

function AST_AGNetworkWanGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkWanGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_NetworkWanGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgChannelAddClientResponse
//
function AST_AGAlgChannelAddClientResponse () {
    this.typeMarker = 'AST_AGAlgChannelAddClientResponse';
    this._result = 0;
}

//
// accessor is AST_AGAlgChannelAddClientResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGAlgChannelAddClientResponse.prototype.setResult
//
function AST_AGAlgChannelAddClientResponse_getResult() { return this._result;}

AST_AGAlgChannelAddClientResponse.prototype.getResult = AST_AGAlgChannelAddClientResponse_getResult;

function AST_AGAlgChannelAddClientResponse_setResult(value) { this._result = value;}

AST_AGAlgChannelAddClientResponse.prototype.setResult = AST_AGAlgChannelAddClientResponse_setResult;
//
// Serialize {urn:ast}AGAlgChannelAddClientResponse
//
function AST_AGAlgChannelAddClientResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgChannelAddClientResponse.prototype.serialize = AST_AGAlgChannelAddClientResponse_serialize;

function AST_AGAlgChannelAddClientResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgChannelAddClientResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGLogGetAll
//
function AST_AGLogGetAll () {
    this.typeMarker = 'AST_AGLogGetAll';
}

//
// Serialize {urn:ast}AGLogGetAll
//
function AST_AGLogGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGLogGetAll.prototype.serialize = AST_AGLogGetAll_serialize;

function AST_AGLogGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGLogGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGLogDelAll
//
function AST_AGLogDelAll () {
    this.typeMarker = 'AST_AGLogDelAll';
    this._name = null;
}

//
// accessor is AST_AGLogDelAll.prototype.getName
// element get for name
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for name
// setter function is is AST_AGLogDelAll.prototype.setName
//
function AST_AGLogDelAll_getName() { return this._name;}

AST_AGLogDelAll.prototype.getName = AST_AGLogDelAll_getName;

function AST_AGLogDelAll_setName(value) { this._name = value;}

AST_AGLogDelAll.prototype.setName = AST_AGLogDelAll_setName;
//
// Serialize {urn:ast}AGLogDelAll
//
function AST_AGLogDelAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._name != null) {
      if (this._name == null) {
       xml = xml + '<jns0:name xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:name>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._name);
       xml = xml + '</jns0:name>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGLogDelAll.prototype.serialize = AST_AGLogDelAll_serialize;

function AST_AGLogDelAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGLogDelAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing name');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'name')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setName(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGjConGetAll
//
function AST_AGjConGetAll () {
    this.typeMarker = 'AST_AGjConGetAll';
}

//
// Serialize {urn:ast}AGjConGetAll
//
function AST_AGjConGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGjConGetAll.prototype.serialize = AST_AGjConGetAll_serialize;

function AST_AGjConGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGjConGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkSnmpSave
//
function AST_AGNetworkSnmpSave () {
    this.typeMarker = 'AST_AGNetworkSnmpSave';
    this._save = null;
}

//
// accessor is AST_AGNetworkSnmpSave.prototype.getSave
// element get for save
// - element type is {urn:ast}SnmpSave
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGNetworkSnmpSave.prototype.setSave
//
function AST_AGNetworkSnmpSave_getSave() { return this._save;}

AST_AGNetworkSnmpSave.prototype.getSave = AST_AGNetworkSnmpSave_getSave;

function AST_AGNetworkSnmpSave_setSave(value) { this._save = value;}

AST_AGNetworkSnmpSave.prototype.setSave = AST_AGNetworkSnmpSave_setSave;
//
// Serialize {urn:ast}AGNetworkSnmpSave
//
function AST_AGNetworkSnmpSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkSnmpSave.prototype.serialize = AST_AGNetworkSnmpSave_serialize;

function AST_AGNetworkSnmpSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkSnmpSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SnmpSave_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAdvTr069SaveResponse
//
function AST_AGAdvTr069SaveResponse () {
    this.typeMarker = 'AST_AGAdvTr069SaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGAdvTr069SaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGAdvTr069SaveResponse.prototype.setResult
//
function AST_AGAdvTr069SaveResponse_getResult() { return this._result;}

AST_AGAdvTr069SaveResponse.prototype.getResult = AST_AGAdvTr069SaveResponse_getResult;

function AST_AGAdvTr069SaveResponse_setResult(value) { this._result = value;}

AST_AGAdvTr069SaveResponse.prototype.setResult = AST_AGAdvTr069SaveResponse_setResult;
//
// Serialize {urn:ast}AGAdvTr069SaveResponse
//
function AST_AGAdvTr069SaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAdvTr069SaveResponse.prototype.serialize = AST_AGAdvTr069SaveResponse_serialize;

function AST_AGAdvTr069SaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAdvTr069SaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGUcpAlgGlbSettingSaveResponse
//
function AST_AGUcpAlgGlbSettingSaveResponse () {
    this.typeMarker = 'AST_AGUcpAlgGlbSettingSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGUcpAlgGlbSettingSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGUcpAlgGlbSettingSaveResponse.prototype.setResult
//
function AST_AGUcpAlgGlbSettingSaveResponse_getResult() { return this._result;}

AST_AGUcpAlgGlbSettingSaveResponse.prototype.getResult = AST_AGUcpAlgGlbSettingSaveResponse_getResult;

function AST_AGUcpAlgGlbSettingSaveResponse_setResult(value) { this._result = value;}

AST_AGUcpAlgGlbSettingSaveResponse.prototype.setResult = AST_AGUcpAlgGlbSettingSaveResponse_setResult;
//
// Serialize {urn:ast}AGUcpAlgGlbSettingSaveResponse
//
function AST_AGUcpAlgGlbSettingSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGUcpAlgGlbSettingSaveResponse.prototype.serialize = AST_AGUcpAlgGlbSettingSaveResponse_serialize;

function AST_AGUcpAlgGlbSettingSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGUcpAlgGlbSettingSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemModuleBoardInfoGet
//
function AST_AGSystemModuleBoardInfoGet () {
    this.typeMarker = 'AST_AGSystemModuleBoardInfoGet';
}

//
// Serialize {urn:ast}AGSystemModuleBoardInfoGet
//
function AST_AGSystemModuleBoardInfoGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemModuleBoardInfoGet.prototype.serialize = AST_AGSystemModuleBoardInfoGet_serialize;

function AST_AGSystemModuleBoardInfoGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemModuleBoardInfoGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGLogSettingsSave
//
function AST_AGLogSettingsSave () {
    this.typeMarker = 'AST_AGLogSettingsSave';
    this._save = null;
}

//
// accessor is AST_AGLogSettingsSave.prototype.getSave
// element get for save
// - element type is {urn:ast}LogSettingSave
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGLogSettingsSave.prototype.setSave
//
function AST_AGLogSettingsSave_getSave() { return this._save;}

AST_AGLogSettingsSave.prototype.getSave = AST_AGLogSettingsSave_getSave;

function AST_AGLogSettingsSave_setSave(value) { this._save = value;}

AST_AGLogSettingsSave.prototype.setSave = AST_AGLogSettingsSave_setSave;
//
// Serialize {urn:ast}AGLogSettingsSave
//
function AST_AGLogSettingsSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGLogSettingsSave.prototype.serialize = AST_AGLogSettingsSave_serialize;

function AST_AGLogSettingsSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGLogSettingsSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_LogSettingSave_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGUcpAlgGlbSettingSave
//
function AST_AGUcpAlgGlbSettingSave () {
    this.typeMarker = 'AST_AGUcpAlgGlbSettingSave';
    this._save = null;
    this._flag = 0;
}

//
// accessor is AST_AGUcpAlgGlbSettingSave.prototype.getSave
// element get for save
// - element type is {urn:ast}UcpAlgGlbSave
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGUcpAlgGlbSettingSave.prototype.setSave
//
function AST_AGUcpAlgGlbSettingSave_getSave() { return this._save;}

AST_AGUcpAlgGlbSettingSave.prototype.getSave = AST_AGUcpAlgGlbSettingSave_getSave;

function AST_AGUcpAlgGlbSettingSave_setSave(value) { this._save = value;}

AST_AGUcpAlgGlbSettingSave.prototype.setSave = AST_AGUcpAlgGlbSettingSave_setSave;
//
// accessor is AST_AGUcpAlgGlbSettingSave.prototype.getFlag
// element get for flag
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for flag
// setter function is is AST_AGUcpAlgGlbSettingSave.prototype.setFlag
//
function AST_AGUcpAlgGlbSettingSave_getFlag() { return this._flag;}

AST_AGUcpAlgGlbSettingSave.prototype.getFlag = AST_AGUcpAlgGlbSettingSave_getFlag;

function AST_AGUcpAlgGlbSettingSave_setFlag(value) { this._flag = value;}

AST_AGUcpAlgGlbSettingSave.prototype.setFlag = AST_AGUcpAlgGlbSettingSave_setFlag;
//
// Serialize {urn:ast}AGUcpAlgGlbSettingSave
//
function AST_AGUcpAlgGlbSettingSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:flag>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._flag);
     xml = xml + '</jns0:flag>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGUcpAlgGlbSettingSave.prototype.serialize = AST_AGUcpAlgGlbSettingSave_serialize;

function AST_AGUcpAlgGlbSettingSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGUcpAlgGlbSettingSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_UcpAlgGlbSave_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing flag');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setFlag(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgDialtableGetResponse
//
function AST_AGAlgDialtableGetResponse () {
    this.typeMarker = 'AST_AGAlgDialtableGetResponse';
    this._get = null;
}

//
// accessor is AST_AGAlgDialtableGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}AlgDialtableGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGAlgDialtableGetResponse.prototype.setGet
//
function AST_AGAlgDialtableGetResponse_getGet() { return this._get;}

AST_AGAlgDialtableGetResponse.prototype.getGet = AST_AGAlgDialtableGetResponse_getGet;

function AST_AGAlgDialtableGetResponse_setGet(value) { this._get = value;}

AST_AGAlgDialtableGetResponse.prototype.setGet = AST_AGAlgDialtableGetResponse_setGet;
//
// Serialize {urn:ast}AGAlgDialtableGetResponse
//
function AST_AGAlgDialtableGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgDialtableGetResponse.prototype.serialize = AST_AGAlgDialtableGetResponse_serialize;

function AST_AGAlgDialtableGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgDialtableGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AlgDialtableGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAdvTr069GetStatusResponse
//
function AST_AGAdvTr069GetStatusResponse () {
    this.typeMarker = 'AST_AGAdvTr069GetStatusResponse';
    this._tr069status = null;
}

//
// accessor is AST_AGAdvTr069GetStatusResponse.prototype.getTr069status
// element get for tr069status
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - optional element
// - nillable
//
// element set for tr069status
// setter function is is AST_AGAdvTr069GetStatusResponse.prototype.setTr069status
//
function AST_AGAdvTr069GetStatusResponse_getTr069status() { return this._tr069status;}

AST_AGAdvTr069GetStatusResponse.prototype.getTr069status = AST_AGAdvTr069GetStatusResponse_getTr069status;

function AST_AGAdvTr069GetStatusResponse_setTr069status(value) { this._tr069status = value;}

AST_AGAdvTr069GetStatusResponse.prototype.setTr069status = AST_AGAdvTr069GetStatusResponse_setTr069status;
//
// Serialize {urn:ast}AGAdvTr069GetStatusResponse
//
function AST_AGAdvTr069GetStatusResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._tr069status != null) {
      if (this._tr069status == null) {
       xml = xml + '<jns0:tr069status xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:tr069status>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._tr069status);
       xml = xml + '</jns0:tr069status>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAdvTr069GetStatusResponse.prototype.serialize = AST_AGAdvTr069GetStatusResponse_serialize;

function AST_AGAdvTr069GetStatusResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAdvTr069GetStatusResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing tr069status');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'tr069status')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = parseInt(value);
     }
     newobject.setTr069status(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAdvAstfileeditorEditDel
//
function AST_AGAdvAstfileeditorEditDel () {
    this.typeMarker = 'AST_AGAdvAstfileeditorEditDel';
    this._fname = null;
}

//
// accessor is AST_AGAdvAstfileeditorEditDel.prototype.getFname
// element get for fname
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for fname
// setter function is is AST_AGAdvAstfileeditorEditDel.prototype.setFname
//
function AST_AGAdvAstfileeditorEditDel_getFname() { return this._fname;}

AST_AGAdvAstfileeditorEditDel.prototype.getFname = AST_AGAdvAstfileeditorEditDel_getFname;

function AST_AGAdvAstfileeditorEditDel_setFname(value) { this._fname = value;}

AST_AGAdvAstfileeditorEditDel.prototype.setFname = AST_AGAdvAstfileeditorEditDel_setFname;
//
// Serialize {urn:ast}AGAdvAstfileeditorEditDel
//
function AST_AGAdvAstfileeditorEditDel_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._fname != null) {
      if (this._fname == null) {
       xml = xml + '<jns0:fname xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:fname>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._fname);
       xml = xml + '</jns0:fname>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAdvAstfileeditorEditDel.prototype.serialize = AST_AGAdvAstfileeditorEditDel_serialize;

function AST_AGAdvAstfileeditorEditDel_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAdvAstfileeditorEditDel();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fname');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'fname')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setFname(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkToolkitGet
//
function AST_AGNetworkToolkitGet () {
    this.typeMarker = 'AST_AGNetworkToolkitGet';
}

//
// Serialize {urn:ast}AGNetworkToolkitGet
//
function AST_AGNetworkToolkitGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkToolkitGet.prototype.serialize = AST_AGNetworkToolkitGet_serialize;

function AST_AGNetworkToolkitGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkToolkitGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkVPNGetConnectStatusResponse
//
function AST_AGNetworkVPNGetConnectStatusResponse () {
    this.typeMarker = 'AST_AGNetworkVPNGetConnectStatusResponse';
    this._connectsta = null;
}

//
// accessor is AST_AGNetworkVPNGetConnectStatusResponse.prototype.getConnectsta
// element get for connectsta
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - optional element
// - nillable
//
// element set for connectsta
// setter function is is AST_AGNetworkVPNGetConnectStatusResponse.prototype.setConnectsta
//
function AST_AGNetworkVPNGetConnectStatusResponse_getConnectsta() { return this._connectsta;}

AST_AGNetworkVPNGetConnectStatusResponse.prototype.getConnectsta = AST_AGNetworkVPNGetConnectStatusResponse_getConnectsta;

function AST_AGNetworkVPNGetConnectStatusResponse_setConnectsta(value) { this._connectsta = value;}

AST_AGNetworkVPNGetConnectStatusResponse.prototype.setConnectsta = AST_AGNetworkVPNGetConnectStatusResponse_setConnectsta;
//
// Serialize {urn:ast}AGNetworkVPNGetConnectStatusResponse
//
function AST_AGNetworkVPNGetConnectStatusResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._connectsta != null) {
      if (this._connectsta == null) {
       xml = xml + '<jns0:connectsta xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:connectsta>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._connectsta);
       xml = xml + '</jns0:connectsta>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkVPNGetConnectStatusResponse.prototype.serialize = AST_AGNetworkVPNGetConnectStatusResponse_serialize;

function AST_AGNetworkVPNGetConnectStatusResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkVPNGetConnectStatusResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing connectsta');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'connectsta')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = parseInt(value);
     }
     newobject.setConnectsta(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemInfoGet
//
function AST_AGSystemInfoGet () {
    this.typeMarker = 'AST_AGSystemInfoGet';
}

//
// Serialize {urn:ast}AGSystemInfoGet
//
function AST_AGSystemInfoGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemInfoGet.prototype.serialize = AST_AGSystemInfoGet_serialize;

function AST_AGSystemInfoGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemInfoGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgChannelGetAll
//
function AST_AGAlgChannelGetAll () {
    this.typeMarker = 'AST_AGAlgChannelGetAll';
}

//
// Serialize {urn:ast}AGAlgChannelGetAll
//
function AST_AGAlgChannelGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgChannelGetAll.prototype.serialize = AST_AGAlgChannelGetAll_serialize;

function AST_AGAlgChannelGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgChannelGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkWanSaveResponse
//
function AST_AGNetworkWanSaveResponse () {
    this.typeMarker = 'AST_AGNetworkWanSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGNetworkWanSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGNetworkWanSaveResponse.prototype.setResult
//
function AST_AGNetworkWanSaveResponse_getResult() { return this._result;}

AST_AGNetworkWanSaveResponse.prototype.getResult = AST_AGNetworkWanSaveResponse_getResult;

function AST_AGNetworkWanSaveResponse_setResult(value) { this._result = value;}

AST_AGNetworkWanSaveResponse.prototype.setResult = AST_AGNetworkWanSaveResponse_setResult;
//
// Serialize {urn:ast}AGNetworkWanSaveResponse
//
function AST_AGNetworkWanSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkWanSaveResponse.prototype.serialize = AST_AGNetworkWanSaveResponse_serialize;

function AST_AGNetworkWanSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkWanSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgGlbSettingGetAll
//
function AST_AGAlgGlbSettingGetAll () {
    this.typeMarker = 'AST_AGAlgGlbSettingGetAll';
}

//
// Serialize {urn:ast}AGAlgGlbSettingGetAll
//
function AST_AGAlgGlbSettingGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgGlbSettingGetAll.prototype.serialize = AST_AGAlgGlbSettingGetAll_serialize;

function AST_AGAlgGlbSettingGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgGlbSettingGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemToolsGetFirmwareInfo
//
function AST_AGSystemToolsGetFirmwareInfo () {
    this.typeMarker = 'AST_AGSystemToolsGetFirmwareInfo';
    this._filename = null;
}

//
// accessor is AST_AGSystemToolsGetFirmwareInfo.prototype.getFilename
// element get for filename
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for filename
// setter function is is AST_AGSystemToolsGetFirmwareInfo.prototype.setFilename
//
function AST_AGSystemToolsGetFirmwareInfo_getFilename() { return this._filename;}

AST_AGSystemToolsGetFirmwareInfo.prototype.getFilename = AST_AGSystemToolsGetFirmwareInfo_getFilename;

function AST_AGSystemToolsGetFirmwareInfo_setFilename(value) { this._filename = value;}

AST_AGSystemToolsGetFirmwareInfo.prototype.setFilename = AST_AGSystemToolsGetFirmwareInfo_setFilename;
//
// Serialize {urn:ast}AGSystemToolsGetFirmwareInfo
//
function AST_AGSystemToolsGetFirmwareInfo_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._filename != null) {
      if (this._filename == null) {
       xml = xml + '<jns0:filename xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:filename>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._filename);
       xml = xml + '</jns0:filename>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemToolsGetFirmwareInfo.prototype.serialize = AST_AGSystemToolsGetFirmwareInfo_serialize;

function AST_AGSystemToolsGetFirmwareInfo_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemToolsGetFirmwareInfo();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing filename');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'filename')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setFilename(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipSecurityGetResponse
//
function AST_AGSipSecurityGetResponse () {
    this.typeMarker = 'AST_AGSipSecurityGetResponse';
    this._get = null;
}

//
// accessor is AST_AGSipSecurityGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}SipSecGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGSipSecurityGetResponse.prototype.setGet
//
function AST_AGSipSecurityGetResponse_getGet() { return this._get;}

AST_AGSipSecurityGetResponse.prototype.getGet = AST_AGSipSecurityGetResponse_getGet;

function AST_AGSipSecurityGetResponse_setGet(value) { this._get = value;}

AST_AGSipSecurityGetResponse.prototype.setGet = AST_AGSipSecurityGetResponse_setGet;
//
// Serialize {urn:ast}AGSipSecurityGetResponse
//
function AST_AGSipSecurityGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipSecurityGetResponse.prototype.serialize = AST_AGSipSecurityGetResponse_serialize;

function AST_AGSipSecurityGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipSecurityGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SipSecGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkRulesGetAllResponse
//
function AST_AGNetworkRulesGetAllResponse () {
    this.typeMarker = 'AST_AGNetworkRulesGetAllResponse';
    this._get = null;
}

//
// accessor is AST_AGNetworkRulesGetAllResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}UcpNetworkRulesGetAll
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGNetworkRulesGetAllResponse.prototype.setGet
//
function AST_AGNetworkRulesGetAllResponse_getGet() { return this._get;}

AST_AGNetworkRulesGetAllResponse.prototype.getGet = AST_AGNetworkRulesGetAllResponse_getGet;

function AST_AGNetworkRulesGetAllResponse_setGet(value) { this._get = value;}

AST_AGNetworkRulesGetAllResponse.prototype.setGet = AST_AGNetworkRulesGetAllResponse_setGet;
//
// Serialize {urn:ast}AGNetworkRulesGetAllResponse
//
function AST_AGNetworkRulesGetAllResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkRulesGetAllResponse.prototype.serialize = AST_AGNetworkRulesGetAllResponse_serialize;

function AST_AGNetworkRulesGetAllResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkRulesGetAllResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_UcpNetworkRulesGetAll_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgChannelSyncResponse
//
function AST_AGAlgChannelSyncResponse () {
    this.typeMarker = 'AST_AGAlgChannelSyncResponse';
    this._result = 0;
}

//
// accessor is AST_AGAlgChannelSyncResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGAlgChannelSyncResponse.prototype.setResult
//
function AST_AGAlgChannelSyncResponse_getResult() { return this._result;}

AST_AGAlgChannelSyncResponse.prototype.getResult = AST_AGAlgChannelSyncResponse_getResult;

function AST_AGAlgChannelSyncResponse_setResult(value) { this._result = value;}

AST_AGAlgChannelSyncResponse.prototype.setResult = AST_AGAlgChannelSyncResponse_setResult;
//
// Serialize {urn:ast}AGAlgChannelSyncResponse
//
function AST_AGAlgChannelSyncResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgChannelSyncResponse.prototype.serialize = AST_AGAlgChannelSyncResponse_serialize;

function AST_AGAlgChannelSyncResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgChannelSyncResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgAutoCallGet
//
function AST_AGAlgAutoCallGet () {
    this.typeMarker = 'AST_AGAlgAutoCallGet';
}

//
// Serialize {urn:ast}AGAlgAutoCallGet
//
function AST_AGAlgAutoCallGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgAutoCallGet.prototype.serialize = AST_AGAlgAutoCallGet_serialize;

function AST_AGAlgAutoCallGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgAutoCallGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkTookitTcpdump
//
function AST_AGNetworkTookitTcpdump () {
    this.typeMarker = 'AST_AGNetworkTookitTcpdump';
    this._flag = 0;
    this._tcpdump = null;
}

//
// accessor is AST_AGNetworkTookitTcpdump.prototype.getFlag
// element get for flag
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for flag
// setter function is is AST_AGNetworkTookitTcpdump.prototype.setFlag
//
function AST_AGNetworkTookitTcpdump_getFlag() { return this._flag;}

AST_AGNetworkTookitTcpdump.prototype.getFlag = AST_AGNetworkTookitTcpdump_getFlag;

function AST_AGNetworkTookitTcpdump_setFlag(value) { this._flag = value;}

AST_AGNetworkTookitTcpdump.prototype.setFlag = AST_AGNetworkTookitTcpdump_setFlag;
//
// accessor is AST_AGNetworkTookitTcpdump.prototype.getTcpdump
// element get for tcpdump
// - element type is {urn:ast}NetworkTookitTcpdump
// - optional element
// - nillable
//
// element set for tcpdump
// setter function is is AST_AGNetworkTookitTcpdump.prototype.setTcpdump
//
function AST_AGNetworkTookitTcpdump_getTcpdump() { return this._tcpdump;}

AST_AGNetworkTookitTcpdump.prototype.getTcpdump = AST_AGNetworkTookitTcpdump_getTcpdump;

function AST_AGNetworkTookitTcpdump_setTcpdump(value) { this._tcpdump = value;}

AST_AGNetworkTookitTcpdump.prototype.setTcpdump = AST_AGNetworkTookitTcpdump_setTcpdump;
//
// Serialize {urn:ast}AGNetworkTookitTcpdump
//
function AST_AGNetworkTookitTcpdump_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:flag>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._flag);
     xml = xml + '</jns0:flag>';
    }
    // block for local variables
    {
     if (this._tcpdump != null) {
      if (this._tcpdump == null) {
       xml = xml + '<jns0:tcpdump xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._tcpdump.serialize(cxfjsutils, 'jns0:tcpdump', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkTookitTcpdump.prototype.serialize = AST_AGNetworkTookitTcpdump_serialize;

function AST_AGNetworkTookitTcpdump_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkTookitTcpdump();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing flag');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setFlag(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing tcpdump');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'tcpdump')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_NetworkTookitTcpdump_deserialize(cxfjsutils, curElement);
     }
     newobject.setTcpdump(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAdvCloudSave
//
function AST_AGAdvCloudSave () {
    this.typeMarker = 'AST_AGAdvCloudSave';
    this._save = null;
}

//
// accessor is AST_AGAdvCloudSave.prototype.getSave
// element get for save
// - element type is {urn:ast}AdvCloudSave
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGAdvCloudSave.prototype.setSave
//
function AST_AGAdvCloudSave_getSave() { return this._save;}

AST_AGAdvCloudSave.prototype.getSave = AST_AGAdvCloudSave_getSave;

function AST_AGAdvCloudSave_setSave(value) { this._save = value;}

AST_AGAdvCloudSave.prototype.setSave = AST_AGAdvCloudSave_setSave;
//
// Serialize {urn:ast}AGAdvCloudSave
//
function AST_AGAdvCloudSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAdvCloudSave.prototype.serialize = AST_AGAdvCloudSave_serialize;

function AST_AGAdvCloudSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAdvCloudSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AdvCloudSave_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingRulsGetOne
//
function AST_AGRoutingRulsGetOne () {
    this.typeMarker = 'AST_AGRoutingRulsGetOne';
    this._rule = null;
}

//
// accessor is AST_AGRoutingRulsGetOne.prototype.getRule
// element get for rule
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for rule
// setter function is is AST_AGRoutingRulsGetOne.prototype.setRule
//
function AST_AGRoutingRulsGetOne_getRule() { return this._rule;}

AST_AGRoutingRulsGetOne.prototype.getRule = AST_AGRoutingRulsGetOne_getRule;

function AST_AGRoutingRulsGetOne_setRule(value) { this._rule = value;}

AST_AGRoutingRulsGetOne.prototype.setRule = AST_AGRoutingRulsGetOne_setRule;
//
// Serialize {urn:ast}AGRoutingRulsGetOne
//
function AST_AGRoutingRulsGetOne_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._rule != null) {
      if (this._rule == null) {
       xml = xml + '<jns0:rule xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:rule>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._rule);
       xml = xml + '</jns0:rule>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingRulsGetOne.prototype.serialize = AST_AGRoutingRulsGetOne_serialize;

function AST_AGRoutingRulsGetOne_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingRulsGetOne();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing rule');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'rule')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setRule(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingGroupsDialGetOne
//
function AST_AGRoutingGroupsDialGetOne () {
    this.typeMarker = 'AST_AGRoutingGroupsDialGetOne';
    this._section = null;
}

//
// accessor is AST_AGRoutingGroupsDialGetOne.prototype.getSection
// element get for section
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for section
// setter function is is AST_AGRoutingGroupsDialGetOne.prototype.setSection
//
function AST_AGRoutingGroupsDialGetOne_getSection() { return this._section;}

AST_AGRoutingGroupsDialGetOne.prototype.getSection = AST_AGRoutingGroupsDialGetOne_getSection;

function AST_AGRoutingGroupsDialGetOne_setSection(value) { this._section = value;}

AST_AGRoutingGroupsDialGetOne.prototype.setSection = AST_AGRoutingGroupsDialGetOne_setSection;
//
// Serialize {urn:ast}AGRoutingGroupsDialGetOne
//
function AST_AGRoutingGroupsDialGetOne_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._section != null) {
      if (this._section == null) {
       xml = xml + '<jns0:section xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:section>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._section);
       xml = xml + '</jns0:section>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingGroupsDialGetOne.prototype.serialize = AST_AGRoutingGroupsDialGetOne_serialize;

function AST_AGRoutingGroupsDialGetOne_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingGroupsDialGetOne();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing section');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'section')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setSection(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingRulesDel
//
function AST_AGRoutingRulesDel () {
    this.typeMarker = 'AST_AGRoutingRulesDel';
    this._sections = null;
}

//
// accessor is AST_AGRoutingRulesDel.prototype.getSections
// element get for sections
// - element type is {urn:ast}SectionArr
// - optional element
// - nillable
//
// element set for sections
// setter function is is AST_AGRoutingRulesDel.prototype.setSections
//
function AST_AGRoutingRulesDel_getSections() { return this._sections;}

AST_AGRoutingRulesDel.prototype.getSections = AST_AGRoutingRulesDel_getSections;

function AST_AGRoutingRulesDel_setSections(value) { this._sections = value;}

AST_AGRoutingRulesDel.prototype.setSections = AST_AGRoutingRulesDel_setSections;
//
// Serialize {urn:ast}AGRoutingRulesDel
//
function AST_AGRoutingRulesDel_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._sections != null) {
      if (this._sections == null) {
       xml = xml + '<jns0:sections xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._sections.serialize(cxfjsutils, 'jns0:sections', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingRulesDel.prototype.serialize = AST_AGRoutingRulesDel_serialize;

function AST_AGRoutingRulesDel_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingRulesDel();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sections');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'sections')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SectionArr_deserialize(cxfjsutils, curElement);
     }
     newobject.setSections(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RtpGetAll
//
function AST_RtpGetAll () {
    this.typeMarker = 'AST_RtpGetAll';
}

//
// Serialize {urn:ast}RtpGetAll
//
function AST_RtpGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RtpGetAll.prototype.serialize = AST_RtpGetAll_serialize;

function AST_RtpGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_RtpGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgDialtableSave
//
function AST_AGAlgDialtableSave () {
    this.typeMarker = 'AST_AGAlgDialtableSave';
    this._save = null;
}

//
// accessor is AST_AGAlgDialtableSave.prototype.getSave
// element get for save
// - element type is {urn:ast}AlgDialtableSave
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGAlgDialtableSave.prototype.setSave
//
function AST_AGAlgDialtableSave_getSave() { return this._save;}

AST_AGAlgDialtableSave.prototype.getSave = AST_AGAlgDialtableSave_getSave;

function AST_AGAlgDialtableSave_setSave(value) { this._save = value;}

AST_AGAlgDialtableSave.prototype.setSave = AST_AGAlgDialtableSave_setSave;
//
// Serialize {urn:ast}AGAlgDialtableSave
//
function AST_AGAlgDialtableSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgDialtableSave.prototype.serialize = AST_AGAlgDialtableSave_serialize;

function AST_AGAlgDialtableSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgDialtableSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AlgDialtableSave_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGFxsGroupDialProvisonSave
//
function AST_AGFxsGroupDialProvisonSave () {
    this.typeMarker = 'AST_AGFxsGroupDialProvisonSave';
    this._grouparr = null;
}

//
// accessor is AST_AGFxsGroupDialProvisonSave.prototype.getGrouparr
// element get for grouparr
// - element type is {urn:ast}FxsGroupDialArr
// - optional element
// - nillable
//
// element set for grouparr
// setter function is is AST_AGFxsGroupDialProvisonSave.prototype.setGrouparr
//
function AST_AGFxsGroupDialProvisonSave_getGrouparr() { return this._grouparr;}

AST_AGFxsGroupDialProvisonSave.prototype.getGrouparr = AST_AGFxsGroupDialProvisonSave_getGrouparr;

function AST_AGFxsGroupDialProvisonSave_setGrouparr(value) { this._grouparr = value;}

AST_AGFxsGroupDialProvisonSave.prototype.setGrouparr = AST_AGFxsGroupDialProvisonSave_setGrouparr;
//
// Serialize {urn:ast}AGFxsGroupDialProvisonSave
//
function AST_AGFxsGroupDialProvisonSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._grouparr != null) {
      if (this._grouparr == null) {
       xml = xml + '<jns0:grouparr xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._grouparr.serialize(cxfjsutils, 'jns0:grouparr', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGFxsGroupDialProvisonSave.prototype.serialize = AST_AGFxsGroupDialProvisonSave_serialize;

function AST_AGFxsGroupDialProvisonSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGFxsGroupDialProvisonSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing grouparr');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'grouparr')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_FxsGroupDialArr_deserialize(cxfjsutils, curElement);
     }
     newobject.setGrouparr(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgGlbSettingGetAllResponse
//
function AST_AGAlgGlbSettingGetAllResponse () {
    this.typeMarker = 'AST_AGAlgGlbSettingGetAllResponse';
    this._get = null;
}

//
// accessor is AST_AGAlgGlbSettingGetAllResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}AlgGlbGetAll
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGAlgGlbSettingGetAllResponse.prototype.setGet
//
function AST_AGAlgGlbSettingGetAllResponse_getGet() { return this._get;}

AST_AGAlgGlbSettingGetAllResponse.prototype.getGet = AST_AGAlgGlbSettingGetAllResponse_getGet;

function AST_AGAlgGlbSettingGetAllResponse_setGet(value) { this._get = value;}

AST_AGAlgGlbSettingGetAllResponse.prototype.setGet = AST_AGAlgGlbSettingGetAllResponse_setGet;
//
// Serialize {urn:ast}AGAlgGlbSettingGetAllResponse
//
function AST_AGAlgGlbSettingGetAllResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgGlbSettingGetAllResponse.prototype.serialize = AST_AGAlgGlbSettingGetAllResponse_serialize;

function AST_AGAlgGlbSettingGetAllResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgGlbSettingGetAllResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AlgGlbGetAll_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingGroupSave
//
function AST_AGRoutingGroupSave () {
    this.typeMarker = 'AST_AGRoutingGroupSave';
    this._oldname = null;
    this._newname = null;
    this._save = null;
}

//
// accessor is AST_AGRoutingGroupSave.prototype.getOldname
// element get for oldname
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for oldname
// setter function is is AST_AGRoutingGroupSave.prototype.setOldname
//
function AST_AGRoutingGroupSave_getOldname() { return this._oldname;}

AST_AGRoutingGroupSave.prototype.getOldname = AST_AGRoutingGroupSave_getOldname;

function AST_AGRoutingGroupSave_setOldname(value) { this._oldname = value;}

AST_AGRoutingGroupSave.prototype.setOldname = AST_AGRoutingGroupSave_setOldname;
//
// accessor is AST_AGRoutingGroupSave.prototype.getNewname
// element get for newname
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for newname
// setter function is is AST_AGRoutingGroupSave.prototype.setNewname
//
function AST_AGRoutingGroupSave_getNewname() { return this._newname;}

AST_AGRoutingGroupSave.prototype.getNewname = AST_AGRoutingGroupSave_getNewname;

function AST_AGRoutingGroupSave_setNewname(value) { this._newname = value;}

AST_AGRoutingGroupSave.prototype.setNewname = AST_AGRoutingGroupSave_setNewname;
//
// accessor is AST_AGRoutingGroupSave.prototype.getSave
// element get for save
// - element type is {urn:ast}RoutingGroup
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGRoutingGroupSave.prototype.setSave
//
function AST_AGRoutingGroupSave_getSave() { return this._save;}

AST_AGRoutingGroupSave.prototype.getSave = AST_AGRoutingGroupSave_getSave;

function AST_AGRoutingGroupSave_setSave(value) { this._save = value;}

AST_AGRoutingGroupSave.prototype.setSave = AST_AGRoutingGroupSave_setSave;
//
// Serialize {urn:ast}AGRoutingGroupSave
//
function AST_AGRoutingGroupSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._oldname != null) {
      if (this._oldname == null) {
       xml = xml + '<jns0:oldname xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:oldname>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._oldname);
       xml = xml + '</jns0:oldname>';
      }
     }
    }
    // block for local variables
    {
     if (this._newname != null) {
      if (this._newname == null) {
       xml = xml + '<jns0:newname xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:newname>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._newname);
       xml = xml + '</jns0:newname>';
      }
     }
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingGroupSave.prototype.serialize = AST_AGRoutingGroupSave_serialize;

function AST_AGRoutingGroupSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingGroupSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing oldname');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'oldname')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setOldname(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing newname');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'newname')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setNewname(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_RoutingGroup_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingGroupSaveResponse
//
function AST_AGRoutingGroupSaveResponse () {
    this.typeMarker = 'AST_AGRoutingGroupSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGRoutingGroupSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGRoutingGroupSaveResponse.prototype.setResult
//
function AST_AGRoutingGroupSaveResponse_getResult() { return this._result;}

AST_AGRoutingGroupSaveResponse.prototype.getResult = AST_AGRoutingGroupSaveResponse_getResult;

function AST_AGRoutingGroupSaveResponse_setResult(value) { this._result = value;}

AST_AGRoutingGroupSaveResponse.prototype.setResult = AST_AGRoutingGroupSaveResponse_setResult;
//
// Serialize {urn:ast}AGRoutingGroupSaveResponse
//
function AST_AGRoutingGroupSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingGroupSaveResponse.prototype.serialize = AST_AGRoutingGroupSaveResponse_serialize;

function AST_AGRoutingGroupSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingGroupSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGjConRelaysSaveResponse
//
function AST_AGjConRelaysSaveResponse () {
    this.typeMarker = 'AST_AGjConRelaysSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGjConRelaysSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGjConRelaysSaveResponse.prototype.setResult
//
function AST_AGjConRelaysSaveResponse_getResult() { return this._result;}

AST_AGjConRelaysSaveResponse.prototype.getResult = AST_AGjConRelaysSaveResponse_getResult;

function AST_AGjConRelaysSaveResponse_setResult(value) { this._result = value;}

AST_AGjConRelaysSaveResponse.prototype.setResult = AST_AGjConRelaysSaveResponse_setResult;
//
// Serialize {urn:ast}AGjConRelaysSaveResponse
//
function AST_AGjConRelaysSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGjConRelaysSaveResponse.prototype.serialize = AST_AGjConRelaysSaveResponse_serialize;

function AST_AGjConRelaysSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGjConRelaysSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkGetResponse
//
function AST_AGNetworkGetResponse () {
    this.typeMarker = 'AST_AGNetworkGetResponse';
    this._get = null;
}

//
// accessor is AST_AGNetworkGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}NetworkGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGNetworkGetResponse.prototype.setGet
//
function AST_AGNetworkGetResponse_getGet() { return this._get;}

AST_AGNetworkGetResponse.prototype.getGet = AST_AGNetworkGetResponse_getGet;

function AST_AGNetworkGetResponse_setGet(value) { this._get = value;}

AST_AGNetworkGetResponse.prototype.setGet = AST_AGNetworkGetResponse_setGet;
//
// Serialize {urn:ast}AGNetworkGetResponse
//
function AST_AGNetworkGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkGetResponse.prototype.serialize = AST_AGNetworkGetResponse_serialize;

function AST_AGNetworkGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_NetworkGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGTagDelResponse
//
function AST_AGTagDelResponse () {
    this.typeMarker = 'AST_AGTagDelResponse';
    this._result = 0;
}

//
// accessor is AST_AGTagDelResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGTagDelResponse.prototype.setResult
//
function AST_AGTagDelResponse_getResult() { return this._result;}

AST_AGTagDelResponse.prototype.getResult = AST_AGTagDelResponse_getResult;

function AST_AGTagDelResponse_setResult(value) { this._result = value;}

AST_AGTagDelResponse.prototype.setResult = AST_AGTagDelResponse_setResult;
//
// Serialize {urn:ast}AGTagDelResponse
//
function AST_AGTagDelResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGTagDelResponse.prototype.serialize = AST_AGTagDelResponse_serialize;

function AST_AGTagDelResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGTagDelResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGOEMSettingInfoSave
//
function AST_AGOEMSettingInfoSave () {
    this.typeMarker = 'AST_AGOEMSettingInfoSave';
    this._save = null;
}

//
// accessor is AST_AGOEMSettingInfoSave.prototype.getSave
// element get for save
// - element type is {urn:ast}OEMSettingInfoSave
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGOEMSettingInfoSave.prototype.setSave
//
function AST_AGOEMSettingInfoSave_getSave() { return this._save;}

AST_AGOEMSettingInfoSave.prototype.getSave = AST_AGOEMSettingInfoSave_getSave;

function AST_AGOEMSettingInfoSave_setSave(value) { this._save = value;}

AST_AGOEMSettingInfoSave.prototype.setSave = AST_AGOEMSettingInfoSave_setSave;
//
// Serialize {urn:ast}AGOEMSettingInfoSave
//
function AST_AGOEMSettingInfoSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGOEMSettingInfoSave.prototype.serialize = AST_AGOEMSettingInfoSave_serialize;

function AST_AGOEMSettingInfoSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGOEMSettingInfoSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_OEMSettingInfoSave_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGjConRelaySaveResponse
//
function AST_AGjConRelaySaveResponse () {
    this.typeMarker = 'AST_AGjConRelaySaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGjConRelaySaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGjConRelaySaveResponse.prototype.setResult
//
function AST_AGjConRelaySaveResponse_getResult() { return this._result;}

AST_AGjConRelaySaveResponse.prototype.getResult = AST_AGjConRelaySaveResponse_getResult;

function AST_AGjConRelaySaveResponse_setResult(value) { this._result = value;}

AST_AGjConRelaySaveResponse.prototype.setResult = AST_AGjConRelaySaveResponse_setResult;
//
// Serialize {urn:ast}AGjConRelaySaveResponse
//
function AST_AGjConRelaySaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGjConRelaySaveResponse.prototype.serialize = AST_AGjConRelaySaveResponse_serialize;

function AST_AGjConRelaySaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGjConRelaySaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSetFXSPortsGainResponse
//
function AST_AGSetFXSPortsGainResponse () {
    this.typeMarker = 'AST_AGSetFXSPortsGainResponse';
    this._result = 0;
}

//
// accessor is AST_AGSetFXSPortsGainResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSetFXSPortsGainResponse.prototype.setResult
//
function AST_AGSetFXSPortsGainResponse_getResult() { return this._result;}

AST_AGSetFXSPortsGainResponse.prototype.getResult = AST_AGSetFXSPortsGainResponse_getResult;

function AST_AGSetFXSPortsGainResponse_setResult(value) { this._result = value;}

AST_AGSetFXSPortsGainResponse.prototype.setResult = AST_AGSetFXSPortsGainResponse_setResult;
//
// Serialize {urn:ast}AGSetFXSPortsGainResponse
//
function AST_AGSetFXSPortsGainResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSetFXSPortsGainResponse.prototype.serialize = AST_AGSetFXSPortsGainResponse_serialize;

function AST_AGSetFXSPortsGainResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSetFXSPortsGainResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipAdvSettingGetResponse
//
function AST_AGSipAdvSettingGetResponse () {
    this.typeMarker = 'AST_AGSipAdvSettingGetResponse';
    this._get = null;
}

//
// accessor is AST_AGSipAdvSettingGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}SipAdvGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGSipAdvSettingGetResponse.prototype.setGet
//
function AST_AGSipAdvSettingGetResponse_getGet() { return this._get;}

AST_AGSipAdvSettingGetResponse.prototype.getGet = AST_AGSipAdvSettingGetResponse_getGet;

function AST_AGSipAdvSettingGetResponse_setGet(value) { this._get = value;}

AST_AGSipAdvSettingGetResponse.prototype.setGet = AST_AGSipAdvSettingGetResponse_setGet;
//
// Serialize {urn:ast}AGSipAdvSettingGetResponse
//
function AST_AGSipAdvSettingGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipAdvSettingGetResponse.prototype.serialize = AST_AGSipAdvSettingGetResponse_serialize;

function AST_AGSipAdvSettingGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipAdvSettingGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SipAdvGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRegisterParaSaveResponse
//
function AST_AGRegisterParaSaveResponse () {
    this.typeMarker = 'AST_AGRegisterParaSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGRegisterParaSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGRegisterParaSaveResponse.prototype.setResult
//
function AST_AGRegisterParaSaveResponse_getResult() { return this._result;}

AST_AGRegisterParaSaveResponse.prototype.getResult = AST_AGRegisterParaSaveResponse_getResult;

function AST_AGRegisterParaSaveResponse_setResult(value) { this._result = value;}

AST_AGRegisterParaSaveResponse.prototype.setResult = AST_AGRegisterParaSaveResponse_setResult;
//
// Serialize {urn:ast}AGRegisterParaSaveResponse
//
function AST_AGRegisterParaSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRegisterParaSaveResponse.prototype.serialize = AST_AGRegisterParaSaveResponse_serialize;

function AST_AGRegisterParaSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRegisterParaSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipBatchEndpointsGet
//
function AST_AGSipBatchEndpointsGet () {
    this.typeMarker = 'AST_AGSipBatchEndpointsGet';
}

//
// Serialize {urn:ast}AGSipBatchEndpointsGet
//
function AST_AGSipBatchEndpointsGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipBatchEndpointsGet.prototype.serialize = AST_AGSipBatchEndpointsGet_serialize;

function AST_AGSipBatchEndpointsGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipBatchEndpointsGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemModuleBoardInfoGetResponse
//
function AST_AGSystemModuleBoardInfoGetResponse () {
    this.typeMarker = 'AST_AGSystemModuleBoardInfoGetResponse';
    this._get = null;
}

//
// accessor is AST_AGSystemModuleBoardInfoGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}ModuleBoardGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGSystemModuleBoardInfoGetResponse.prototype.setGet
//
function AST_AGSystemModuleBoardInfoGetResponse_getGet() { return this._get;}

AST_AGSystemModuleBoardInfoGetResponse.prototype.getGet = AST_AGSystemModuleBoardInfoGetResponse_getGet;

function AST_AGSystemModuleBoardInfoGetResponse_setGet(value) { this._get = value;}

AST_AGSystemModuleBoardInfoGetResponse.prototype.setGet = AST_AGSystemModuleBoardInfoGetResponse_setGet;
//
// Serialize {urn:ast}AGSystemModuleBoardInfoGetResponse
//
function AST_AGSystemModuleBoardInfoGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemModuleBoardInfoGetResponse.prototype.serialize = AST_AGSystemModuleBoardInfoGetResponse_serialize;

function AST_AGSystemModuleBoardInfoGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemModuleBoardInfoGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_ModuleBoardGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemCloseAllserviceResponse
//
function AST_AGSystemCloseAllserviceResponse () {
    this.typeMarker = 'AST_AGSystemCloseAllserviceResponse';
    this._result = 0;
}

//
// accessor is AST_AGSystemCloseAllserviceResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSystemCloseAllserviceResponse.prototype.setResult
//
function AST_AGSystemCloseAllserviceResponse_getResult() { return this._result;}

AST_AGSystemCloseAllserviceResponse.prototype.getResult = AST_AGSystemCloseAllserviceResponse_getResult;

function AST_AGSystemCloseAllserviceResponse_setResult(value) { this._result = value;}

AST_AGSystemCloseAllserviceResponse.prototype.setResult = AST_AGSystemCloseAllserviceResponse_setResult;
//
// Serialize {urn:ast}AGSystemCloseAllserviceResponse
//
function AST_AGSystemCloseAllserviceResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemCloseAllserviceResponse.prototype.serialize = AST_AGSystemCloseAllserviceResponse_serialize;

function AST_AGSystemCloseAllserviceResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemCloseAllserviceResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgGlbSettingSaveResponse
//
function AST_AGAlgGlbSettingSaveResponse () {
    this.typeMarker = 'AST_AGAlgGlbSettingSaveResponse';
    this._reslut = 0;
}

//
// accessor is AST_AGAlgGlbSettingSaveResponse.prototype.getReslut
// element get for reslut
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for reslut
// setter function is is AST_AGAlgGlbSettingSaveResponse.prototype.setReslut
//
function AST_AGAlgGlbSettingSaveResponse_getReslut() { return this._reslut;}

AST_AGAlgGlbSettingSaveResponse.prototype.getReslut = AST_AGAlgGlbSettingSaveResponse_getReslut;

function AST_AGAlgGlbSettingSaveResponse_setReslut(value) { this._reslut = value;}

AST_AGAlgGlbSettingSaveResponse.prototype.setReslut = AST_AGAlgGlbSettingSaveResponse_setReslut;
//
// Serialize {urn:ast}AGAlgGlbSettingSaveResponse
//
function AST_AGAlgGlbSettingSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:reslut>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._reslut);
     xml = xml + '</jns0:reslut>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgGlbSettingSaveResponse.prototype.serialize = AST_AGAlgGlbSettingSaveResponse_serialize;

function AST_AGAlgGlbSettingSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgGlbSettingSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing reslut');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setReslut(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingGroupGetAllResponse
//
function AST_AGRoutingGroupGetAllResponse () {
    this.typeMarker = 'AST_AGRoutingGroupGetAllResponse';
    this._get = null;
}

//
// accessor is AST_AGRoutingGroupGetAllResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}RoutingGroupGetAll
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGRoutingGroupGetAllResponse.prototype.setGet
//
function AST_AGRoutingGroupGetAllResponse_getGet() { return this._get;}

AST_AGRoutingGroupGetAllResponse.prototype.getGet = AST_AGRoutingGroupGetAllResponse_getGet;

function AST_AGRoutingGroupGetAllResponse_setGet(value) { this._get = value;}

AST_AGRoutingGroupGetAllResponse.prototype.setGet = AST_AGRoutingGroupGetAllResponse_setGet;
//
// Serialize {urn:ast}AGRoutingGroupGetAllResponse
//
function AST_AGRoutingGroupGetAllResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingGroupGetAllResponse.prototype.serialize = AST_AGRoutingGroupGetAllResponse_serialize;

function AST_AGRoutingGroupGetAllResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingGroupGetAllResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_RoutingGroupGetAll_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAdvAstcliRun
//
function AST_AGAdvAstcliRun () {
    this.typeMarker = 'AST_AGAdvAstcliRun';
    this._cmd = null;
}

//
// accessor is AST_AGAdvAstcliRun.prototype.getCmd
// element get for cmd
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for cmd
// setter function is is AST_AGAdvAstcliRun.prototype.setCmd
//
function AST_AGAdvAstcliRun_getCmd() { return this._cmd;}

AST_AGAdvAstcliRun.prototype.getCmd = AST_AGAdvAstcliRun_getCmd;

function AST_AGAdvAstcliRun_setCmd(value) { this._cmd = value;}

AST_AGAdvAstcliRun.prototype.setCmd = AST_AGAdvAstcliRun_setCmd;
//
// Serialize {urn:ast}AGAdvAstcliRun
//
function AST_AGAdvAstcliRun_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._cmd != null) {
      if (this._cmd == null) {
       xml = xml + '<jns0:cmd xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:cmd>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._cmd);
       xml = xml + '</jns0:cmd>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAdvAstcliRun.prototype.serialize = AST_AGAdvAstcliRun_serialize;

function AST_AGAdvAstcliRun_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAdvAstcliRun();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing cmd');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'cmd')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setCmd(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGGetSIPEndpointStatusResponse
//
function AST_AGGetSIPEndpointStatusResponse () {
    this.typeMarker = 'AST_AGGetSIPEndpointStatusResponse';
    this._SipStatus = null;
}

//
// accessor is AST_AGGetSIPEndpointStatusResponse.prototype.getSipStatus
// element get for SipStatus
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for SipStatus
// setter function is is AST_AGGetSIPEndpointStatusResponse.prototype.setSipStatus
//
function AST_AGGetSIPEndpointStatusResponse_getSipStatus() { return this._SipStatus;}

AST_AGGetSIPEndpointStatusResponse.prototype.getSipStatus = AST_AGGetSIPEndpointStatusResponse_getSipStatus;

function AST_AGGetSIPEndpointStatusResponse_setSipStatus(value) { this._SipStatus = value;}

AST_AGGetSIPEndpointStatusResponse.prototype.setSipStatus = AST_AGGetSIPEndpointStatusResponse_setSipStatus;
//
// Serialize {urn:ast}AGGetSIPEndpointStatusResponse
//
function AST_AGGetSIPEndpointStatusResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._SipStatus != null) {
      if (this._SipStatus == null) {
       xml = xml + '<jns0:SipStatus xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:SipStatus>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._SipStatus);
       xml = xml + '</jns0:SipStatus>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGGetSIPEndpointStatusResponse.prototype.serialize = AST_AGGetSIPEndpointStatusResponse_serialize;

function AST_AGGetSIPEndpointStatusResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGGetSIPEndpointStatusResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing SipStatus');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'SipStatus')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setSipStatus(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemToolsUpdateOnline
//
function AST_AGSystemToolsUpdateOnline () {
    this.typeMarker = 'AST_AGSystemToolsUpdateOnline';
}

//
// Serialize {urn:ast}AGSystemToolsUpdateOnline
//
function AST_AGSystemToolsUpdateOnline_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemToolsUpdateOnline.prototype.serialize = AST_AGSystemToolsUpdateOnline_serialize;

function AST_AGSystemToolsUpdateOnline_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemToolsUpdateOnline();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGjConIoSettingsGetResponse
//
function AST_AGjConIoSettingsGetResponse () {
    this.typeMarker = 'AST_AGjConIoSettingsGetResponse';
    this._IoSettings = null;
}

//
// accessor is AST_AGjConIoSettingsGetResponse.prototype.getIoSettings
// element get for IoSettings
// - element type is {urn:ast}IoSettingsGet
// - optional element
// - nillable
//
// element set for IoSettings
// setter function is is AST_AGjConIoSettingsGetResponse.prototype.setIoSettings
//
function AST_AGjConIoSettingsGetResponse_getIoSettings() { return this._IoSettings;}

AST_AGjConIoSettingsGetResponse.prototype.getIoSettings = AST_AGjConIoSettingsGetResponse_getIoSettings;

function AST_AGjConIoSettingsGetResponse_setIoSettings(value) { this._IoSettings = value;}

AST_AGjConIoSettingsGetResponse.prototype.setIoSettings = AST_AGjConIoSettingsGetResponse_setIoSettings;
//
// Serialize {urn:ast}AGjConIoSettingsGetResponse
//
function AST_AGjConIoSettingsGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._IoSettings != null) {
      if (this._IoSettings == null) {
       xml = xml + '<jns0:IoSettings xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._IoSettings.serialize(cxfjsutils, 'jns0:IoSettings', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGjConIoSettingsGetResponse.prototype.serialize = AST_AGjConIoSettingsGetResponse_serialize;

function AST_AGjConIoSettingsGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGjConIoSettingsGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing IoSettings');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'IoSettings')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_IoSettingsGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setIoSettings(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkLanGetResponse
//
function AST_AGNetworkLanGetResponse () {
    this.typeMarker = 'AST_AGNetworkLanGetResponse';
    this._get = null;
}

//
// accessor is AST_AGNetworkLanGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}NetworkLanGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGNetworkLanGetResponse.prototype.setGet
//
function AST_AGNetworkLanGetResponse_getGet() { return this._get;}

AST_AGNetworkLanGetResponse.prototype.getGet = AST_AGNetworkLanGetResponse_getGet;

function AST_AGNetworkLanGetResponse_setGet(value) { this._get = value;}

AST_AGNetworkLanGetResponse.prototype.setGet = AST_AGNetworkLanGetResponse_setGet;
//
// Serialize {urn:ast}AGNetworkLanGetResponse
//
function AST_AGNetworkLanGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkLanGetResponse.prototype.serialize = AST_AGNetworkLanGetResponse_serialize;

function AST_AGNetworkLanGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkLanGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_NetworkLanGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGTagList
//
function AST_AGTagList () {
    this.typeMarker = 'AST_AGTagList';
    this._itemstart = 0;
}

//
// accessor is AST_AGTagList.prototype.getItemstart
// element get for itemstart
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for itemstart
// setter function is is AST_AGTagList.prototype.setItemstart
//
function AST_AGTagList_getItemstart() { return this._itemstart;}

AST_AGTagList.prototype.getItemstart = AST_AGTagList_getItemstart;

function AST_AGTagList_setItemstart(value) { this._itemstart = value;}

AST_AGTagList.prototype.setItemstart = AST_AGTagList_setItemstart;
//
// Serialize {urn:ast}AGTagList
//
function AST_AGTagList_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:itemstart>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._itemstart);
     xml = xml + '</jns0:itemstart>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGTagList.prototype.serialize = AST_AGTagList_serialize;

function AST_AGTagList_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGTagList();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing itemstart');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setItemstart(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgFunkySave
//
function AST_AGAlgFunkySave () {
    this.typeMarker = 'AST_AGAlgFunkySave';
    this._save = null;
}

//
// accessor is AST_AGAlgFunkySave.prototype.getSave
// element get for save
// - element type is {urn:ast}AlgFunky
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGAlgFunkySave.prototype.setSave
//
function AST_AGAlgFunkySave_getSave() { return this._save;}

AST_AGAlgFunkySave.prototype.getSave = AST_AGAlgFunkySave_getSave;

function AST_AGAlgFunkySave_setSave(value) { this._save = value;}

AST_AGAlgFunkySave.prototype.setSave = AST_AGAlgFunkySave_setSave;
//
// Serialize {urn:ast}AGAlgFunkySave
//
function AST_AGAlgFunkySave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgFunkySave.prototype.serialize = AST_AGAlgFunkySave_serialize;

function AST_AGAlgFunkySave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgFunkySave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AlgFunky_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemInfoGetResponse
//
function AST_AGSystemInfoGetResponse () {
    this.typeMarker = 'AST_AGSystemInfoGetResponse';
    this._get = null;
}

//
// accessor is AST_AGSystemInfoGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}SysInfoGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGSystemInfoGetResponse.prototype.setGet
//
function AST_AGSystemInfoGetResponse_getGet() { return this._get;}

AST_AGSystemInfoGetResponse.prototype.getGet = AST_AGSystemInfoGetResponse_getGet;

function AST_AGSystemInfoGetResponse_setGet(value) { this._get = value;}

AST_AGSystemInfoGetResponse.prototype.setGet = AST_AGSystemInfoGetResponse_setGet;
//
// Serialize {urn:ast}AGSystemInfoGetResponse
//
function AST_AGSystemInfoGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemInfoGetResponse.prototype.serialize = AST_AGSystemInfoGetResponse_serialize;

function AST_AGSystemInfoGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemInfoGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SysInfoGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}IaxGetAllResponse
//
function AST_IaxGetAllResponse () {
    this.typeMarker = 'AST_IaxGetAllResponse';
    this._result = null;
}

//
// accessor is AST_IaxGetAllResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for result
// setter function is is AST_IaxGetAllResponse.prototype.setResult
//
function AST_IaxGetAllResponse_getResult() { return this._result;}

AST_IaxGetAllResponse.prototype.getResult = AST_IaxGetAllResponse_getResult;

function AST_IaxGetAllResponse_setResult(value) { this._result = value;}

AST_IaxGetAllResponse.prototype.setResult = AST_IaxGetAllResponse_setResult;
//
// Serialize {urn:ast}IaxGetAllResponse
//
function AST_IaxGetAllResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._result != null) {
      if (this._result == null) {
       xml = xml + '<jns0:result xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:result>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._result);
       xml = xml + '</jns0:result>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_IaxGetAllResponse.prototype.serialize = AST_IaxGetAllResponse_serialize;

function AST_IaxGetAllResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_IaxGetAllResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'result')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setResult(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingRulsGetOneResponse
//
function AST_AGRoutingRulsGetOneResponse () {
    this.typeMarker = 'AST_AGRoutingRulsGetOneResponse';
    this._get = null;
}

//
// accessor is AST_AGRoutingRulsGetOneResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}RoutingRulsGetOne
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGRoutingRulsGetOneResponse.prototype.setGet
//
function AST_AGRoutingRulsGetOneResponse_getGet() { return this._get;}

AST_AGRoutingRulsGetOneResponse.prototype.getGet = AST_AGRoutingRulsGetOneResponse_getGet;

function AST_AGRoutingRulsGetOneResponse_setGet(value) { this._get = value;}

AST_AGRoutingRulsGetOneResponse.prototype.setGet = AST_AGRoutingRulsGetOneResponse_setGet;
//
// Serialize {urn:ast}AGRoutingRulsGetOneResponse
//
function AST_AGRoutingRulsGetOneResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingRulsGetOneResponse.prototype.serialize = AST_AGRoutingRulsGetOneResponse_serialize;

function AST_AGRoutingRulsGetOneResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingRulsGetOneResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_RoutingRulsGetOne_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGUcpAlgFxsparamSave
//
function AST_AGUcpAlgFxsparamSave () {
    this.typeMarker = 'AST_AGUcpAlgFxsparamSave';
    this._save = null;
}

//
// accessor is AST_AGUcpAlgFxsparamSave.prototype.getSave
// element get for save
// - element type is {urn:ast}UcpAlgFxsparam
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGUcpAlgFxsparamSave.prototype.setSave
//
function AST_AGUcpAlgFxsparamSave_getSave() { return this._save;}

AST_AGUcpAlgFxsparamSave.prototype.getSave = AST_AGUcpAlgFxsparamSave_getSave;

function AST_AGUcpAlgFxsparamSave_setSave(value) { this._save = value;}

AST_AGUcpAlgFxsparamSave.prototype.setSave = AST_AGUcpAlgFxsparamSave_setSave;
//
// Serialize {urn:ast}AGUcpAlgFxsparamSave
//
function AST_AGUcpAlgFxsparamSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGUcpAlgFxsparamSave.prototype.serialize = AST_AGUcpAlgFxsparamSave_serialize;

function AST_AGUcpAlgFxsparamSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGUcpAlgFxsparamSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_UcpAlgFxsparam_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingGroupsDialDel
//
function AST_AGRoutingGroupsDialDel () {
    this.typeMarker = 'AST_AGRoutingGroupsDialDel';
    this._sections = null;
}

//
// accessor is AST_AGRoutingGroupsDialDel.prototype.getSections
// element get for sections
// - element type is {urn:ast}SectionArr
// - optional element
// - nillable
//
// element set for sections
// setter function is is AST_AGRoutingGroupsDialDel.prototype.setSections
//
function AST_AGRoutingGroupsDialDel_getSections() { return this._sections;}

AST_AGRoutingGroupsDialDel.prototype.getSections = AST_AGRoutingGroupsDialDel_getSections;

function AST_AGRoutingGroupsDialDel_setSections(value) { this._sections = value;}

AST_AGRoutingGroupsDialDel.prototype.setSections = AST_AGRoutingGroupsDialDel_setSections;
//
// Serialize {urn:ast}AGRoutingGroupsDialDel
//
function AST_AGRoutingGroupsDialDel_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._sections != null) {
      if (this._sections == null) {
       xml = xml + '<jns0:sections xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._sections.serialize(cxfjsutils, 'jns0:sections', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingGroupsDialDel.prototype.serialize = AST_AGRoutingGroupsDialDel_serialize;

function AST_AGRoutingGroupsDialDel_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingGroupsDialDel();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sections');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'sections')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SectionArr_deserialize(cxfjsutils, curElement);
     }
     newobject.setSections(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkRulesDelResponse
//
function AST_AGNetworkRulesDelResponse () {
    this.typeMarker = 'AST_AGNetworkRulesDelResponse';
    this._result = 0;
}

//
// accessor is AST_AGNetworkRulesDelResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGNetworkRulesDelResponse.prototype.setResult
//
function AST_AGNetworkRulesDelResponse_getResult() { return this._result;}

AST_AGNetworkRulesDelResponse.prototype.getResult = AST_AGNetworkRulesDelResponse_getResult;

function AST_AGNetworkRulesDelResponse_setResult(value) { this._result = value;}

AST_AGNetworkRulesDelResponse.prototype.setResult = AST_AGNetworkRulesDelResponse_setResult;
//
// Serialize {urn:ast}AGNetworkRulesDelResponse
//
function AST_AGNetworkRulesDelResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkRulesDelResponse.prototype.serialize = AST_AGNetworkRulesDelResponse_serialize;

function AST_AGNetworkRulesDelResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkRulesDelResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipEndpointGetOne
//
function AST_AGSipEndpointGetOne () {
    this.typeMarker = 'AST_AGSipEndpointGetOne';
    this._section = null;
}

//
// accessor is AST_AGSipEndpointGetOne.prototype.getSection
// element get for section
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for section
// setter function is is AST_AGSipEndpointGetOne.prototype.setSection
//
function AST_AGSipEndpointGetOne_getSection() { return this._section;}

AST_AGSipEndpointGetOne.prototype.getSection = AST_AGSipEndpointGetOne_getSection;

function AST_AGSipEndpointGetOne_setSection(value) { this._section = value;}

AST_AGSipEndpointGetOne.prototype.setSection = AST_AGSipEndpointGetOne_setSection;
//
// Serialize {urn:ast}AGSipEndpointGetOne
//
function AST_AGSipEndpointGetOne_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._section != null) {
      if (this._section == null) {
       xml = xml + '<jns0:section xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:section>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._section);
       xml = xml + '</jns0:section>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipEndpointGetOne.prototype.serialize = AST_AGSipEndpointGetOne_serialize;

function AST_AGSipEndpointGetOne_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipEndpointGetOne();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing section');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'section')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setSection(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemToolsFactoryResetResponse
//
function AST_AGSystemToolsFactoryResetResponse () {
    this.typeMarker = 'AST_AGSystemToolsFactoryResetResponse';
    this._result = 0;
}

//
// accessor is AST_AGSystemToolsFactoryResetResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSystemToolsFactoryResetResponse.prototype.setResult
//
function AST_AGSystemToolsFactoryResetResponse_getResult() { return this._result;}

AST_AGSystemToolsFactoryResetResponse.prototype.getResult = AST_AGSystemToolsFactoryResetResponse_getResult;

function AST_AGSystemToolsFactoryResetResponse_setResult(value) { this._result = value;}

AST_AGSystemToolsFactoryResetResponse.prototype.setResult = AST_AGSystemToolsFactoryResetResponse_setResult;
//
// Serialize {urn:ast}AGSystemToolsFactoryResetResponse
//
function AST_AGSystemToolsFactoryResetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemToolsFactoryResetResponse.prototype.serialize = AST_AGSystemToolsFactoryResetResponse_serialize;

function AST_AGSystemToolsFactoryResetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemToolsFactoryResetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAdvTr069Get
//
function AST_AGAdvTr069Get () {
    this.typeMarker = 'AST_AGAdvTr069Get';
}

//
// Serialize {urn:ast}AGAdvTr069Get
//
function AST_AGAdvTr069Get_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAdvTr069Get.prototype.serialize = AST_AGAdvTr069Get_serialize;

function AST_AGAdvTr069Get_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAdvTr069Get();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemLanguageSaveResponse
//
function AST_AGSystemLanguageSaveResponse () {
    this.typeMarker = 'AST_AGSystemLanguageSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGSystemLanguageSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSystemLanguageSaveResponse.prototype.setResult
//
function AST_AGSystemLanguageSaveResponse_getResult() { return this._result;}

AST_AGSystemLanguageSaveResponse.prototype.getResult = AST_AGSystemLanguageSaveResponse_getResult;

function AST_AGSystemLanguageSaveResponse_setResult(value) { this._result = value;}

AST_AGSystemLanguageSaveResponse.prototype.setResult = AST_AGSystemLanguageSaveResponse_setResult;
//
// Serialize {urn:ast}AGSystemLanguageSaveResponse
//
function AST_AGSystemLanguageSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemLanguageSaveResponse.prototype.serialize = AST_AGSystemLanguageSaveResponse_serialize;

function AST_AGSystemLanguageSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemLanguageSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGTagAddResponse
//
function AST_AGTagAddResponse () {
    this.typeMarker = 'AST_AGTagAddResponse';
    this._result = 0;
}

//
// accessor is AST_AGTagAddResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGTagAddResponse.prototype.setResult
//
function AST_AGTagAddResponse_getResult() { return this._result;}

AST_AGTagAddResponse.prototype.getResult = AST_AGTagAddResponse_getResult;

function AST_AGTagAddResponse_setResult(value) { this._result = value;}

AST_AGTagAddResponse.prototype.setResult = AST_AGTagAddResponse_setResult;
//
// Serialize {urn:ast}AGTagAddResponse
//
function AST_AGTagAddResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGTagAddResponse.prototype.serialize = AST_AGTagAddResponse_serialize;

function AST_AGTagAddResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGTagAddResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkRulesDel
//
function AST_AGNetworkRulesDel () {
    this.typeMarker = 'AST_AGNetworkRulesDel';
    this._sections = null;
}

//
// accessor is AST_AGNetworkRulesDel.prototype.getSections
// element get for sections
// - element type is {urn:ast}SectionArr
// - optional element
// - nillable
//
// element set for sections
// setter function is is AST_AGNetworkRulesDel.prototype.setSections
//
function AST_AGNetworkRulesDel_getSections() { return this._sections;}

AST_AGNetworkRulesDel.prototype.getSections = AST_AGNetworkRulesDel_getSections;

function AST_AGNetworkRulesDel_setSections(value) { this._sections = value;}

AST_AGNetworkRulesDel.prototype.setSections = AST_AGNetworkRulesDel_setSections;
//
// Serialize {urn:ast}AGNetworkRulesDel
//
function AST_AGNetworkRulesDel_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._sections != null) {
      if (this._sections == null) {
       xml = xml + '<jns0:sections xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._sections.serialize(cxfjsutils, 'jns0:sections', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkRulesDel.prototype.serialize = AST_AGNetworkRulesDel_serialize;

function AST_AGNetworkRulesDel_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkRulesDel();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sections');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'sections')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SectionArr_deserialize(cxfjsutils, curElement);
     }
     newobject.setSections(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGUcpSystemToolsSndRecordStart
//
function AST_AGUcpSystemToolsSndRecordStart () {
    this.typeMarker = 'AST_AGUcpSystemToolsSndRecordStart';
    this._channel = 0;
}

//
// accessor is AST_AGUcpSystemToolsSndRecordStart.prototype.getChannel
// element get for channel
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for channel
// setter function is is AST_AGUcpSystemToolsSndRecordStart.prototype.setChannel
//
function AST_AGUcpSystemToolsSndRecordStart_getChannel() { return this._channel;}

AST_AGUcpSystemToolsSndRecordStart.prototype.getChannel = AST_AGUcpSystemToolsSndRecordStart_getChannel;

function AST_AGUcpSystemToolsSndRecordStart_setChannel(value) { this._channel = value;}

AST_AGUcpSystemToolsSndRecordStart.prototype.setChannel = AST_AGUcpSystemToolsSndRecordStart_setChannel;
//
// Serialize {urn:ast}AGUcpSystemToolsSndRecordStart
//
function AST_AGUcpSystemToolsSndRecordStart_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:channel>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._channel);
     xml = xml + '</jns0:channel>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGUcpSystemToolsSndRecordStart.prototype.serialize = AST_AGUcpSystemToolsSndRecordStart_serialize;

function AST_AGUcpSystemToolsSndRecordStart_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGUcpSystemToolsSndRecordStart();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing channel');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setChannel(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemModuleUpdateTftp
//
function AST_AGSystemModuleUpdateTftp () {
    this.typeMarker = 'AST_AGSystemModuleUpdateTftp';
}

//
// Serialize {urn:ast}AGSystemModuleUpdateTftp
//
function AST_AGSystemModuleUpdateTftp_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemModuleUpdateTftp.prototype.serialize = AST_AGSystemModuleUpdateTftp_serialize;

function AST_AGSystemModuleUpdateTftp_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemModuleUpdateTftp();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingGroupGetAll
//
function AST_AGRoutingGroupGetAll () {
    this.typeMarker = 'AST_AGRoutingGroupGetAll';
}

//
// Serialize {urn:ast}AGRoutingGroupGetAll
//
function AST_AGRoutingGroupGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingGroupGetAll.prototype.serialize = AST_AGRoutingGroupGetAll_serialize;

function AST_AGRoutingGroupGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingGroupGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingGroupGetNew
//
function AST_AGRoutingGroupGetNew () {
    this.typeMarker = 'AST_AGRoutingGroupGetNew';
}

//
// Serialize {urn:ast}AGRoutingGroupGetNew
//
function AST_AGRoutingGroupGetNew_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingGroupGetNew.prototype.serialize = AST_AGRoutingGroupGetNew_serialize;

function AST_AGRoutingGroupGetNew_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingGroupGetNew();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkTookitPingResponse
//
function AST_AGNetworkTookitPingResponse () {
    this.typeMarker = 'AST_AGNetworkTookitPingResponse';
    this._result = null;
}

//
// accessor is AST_AGNetworkTookitPingResponse.prototype.getResult
// element get for result
// - element type is {urn:ast}Result
// - optional element
// - nillable
//
// element set for result
// setter function is is AST_AGNetworkTookitPingResponse.prototype.setResult
//
function AST_AGNetworkTookitPingResponse_getResult() { return this._result;}

AST_AGNetworkTookitPingResponse.prototype.getResult = AST_AGNetworkTookitPingResponse_getResult;

function AST_AGNetworkTookitPingResponse_setResult(value) { this._result = value;}

AST_AGNetworkTookitPingResponse.prototype.setResult = AST_AGNetworkTookitPingResponse_setResult;
//
// Serialize {urn:ast}AGNetworkTookitPingResponse
//
function AST_AGNetworkTookitPingResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._result != null) {
      if (this._result == null) {
       xml = xml + '<jns0:result xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._result.serialize(cxfjsutils, 'jns0:result', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkTookitPingResponse.prototype.serialize = AST_AGNetworkTookitPingResponse_serialize;

function AST_AGNetworkTookitPingResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkTookitPingResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'result')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_Result_deserialize(cxfjsutils, curElement);
     }
     newobject.setResult(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGFxsSipBindProvisonSaveResponse
//
function AST_AGFxsSipBindProvisonSaveResponse () {
    this.typeMarker = 'AST_AGFxsSipBindProvisonSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGFxsSipBindProvisonSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGFxsSipBindProvisonSaveResponse.prototype.setResult
//
function AST_AGFxsSipBindProvisonSaveResponse_getResult() { return this._result;}

AST_AGFxsSipBindProvisonSaveResponse.prototype.getResult = AST_AGFxsSipBindProvisonSaveResponse_getResult;

function AST_AGFxsSipBindProvisonSaveResponse_setResult(value) { this._result = value;}

AST_AGFxsSipBindProvisonSaveResponse.prototype.setResult = AST_AGFxsSipBindProvisonSaveResponse_setResult;
//
// Serialize {urn:ast}AGFxsSipBindProvisonSaveResponse
//
function AST_AGFxsSipBindProvisonSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGFxsSipBindProvisonSaveResponse.prototype.serialize = AST_AGFxsSipBindProvisonSaveResponse_serialize;

function AST_AGFxsSipBindProvisonSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGFxsSipBindProvisonSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSetHotlineNumber
//
function AST_AGSetHotlineNumber () {
    this.typeMarker = 'AST_AGSetHotlineNumber';
    this._HotlineNumber = null;
    this._port = 0;
}

//
// accessor is AST_AGSetHotlineNumber.prototype.getHotlineNumber
// element get for HotlineNumber
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for HotlineNumber
// setter function is is AST_AGSetHotlineNumber.prototype.setHotlineNumber
//
function AST_AGSetHotlineNumber_getHotlineNumber() { return this._HotlineNumber;}

AST_AGSetHotlineNumber.prototype.getHotlineNumber = AST_AGSetHotlineNumber_getHotlineNumber;

function AST_AGSetHotlineNumber_setHotlineNumber(value) { this._HotlineNumber = value;}

AST_AGSetHotlineNumber.prototype.setHotlineNumber = AST_AGSetHotlineNumber_setHotlineNumber;
//
// accessor is AST_AGSetHotlineNumber.prototype.getPort
// element get for port
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for port
// setter function is is AST_AGSetHotlineNumber.prototype.setPort
//
function AST_AGSetHotlineNumber_getPort() { return this._port;}

AST_AGSetHotlineNumber.prototype.getPort = AST_AGSetHotlineNumber_getPort;

function AST_AGSetHotlineNumber_setPort(value) { this._port = value;}

AST_AGSetHotlineNumber.prototype.setPort = AST_AGSetHotlineNumber_setPort;
//
// Serialize {urn:ast}AGSetHotlineNumber
//
function AST_AGSetHotlineNumber_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._HotlineNumber != null) {
      if (this._HotlineNumber == null) {
       xml = xml + '<jns0:HotlineNumber xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:HotlineNumber>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._HotlineNumber);
       xml = xml + '</jns0:HotlineNumber>';
      }
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:port>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._port);
     xml = xml + '</jns0:port>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSetHotlineNumber.prototype.serialize = AST_AGSetHotlineNumber_serialize;

function AST_AGSetHotlineNumber_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSetHotlineNumber();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing HotlineNumber');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'HotlineNumber')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setHotlineNumber(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing port');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setPort(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkTookitTcpdumpResponse
//
function AST_AGNetworkTookitTcpdumpResponse () {
    this.typeMarker = 'AST_AGNetworkTookitTcpdumpResponse';
    this._result = 0;
}

//
// accessor is AST_AGNetworkTookitTcpdumpResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGNetworkTookitTcpdumpResponse.prototype.setResult
//
function AST_AGNetworkTookitTcpdumpResponse_getResult() { return this._result;}

AST_AGNetworkTookitTcpdumpResponse.prototype.getResult = AST_AGNetworkTookitTcpdumpResponse_getResult;

function AST_AGNetworkTookitTcpdumpResponse_setResult(value) { this._result = value;}

AST_AGNetworkTookitTcpdumpResponse.prototype.setResult = AST_AGNetworkTookitTcpdumpResponse_setResult;
//
// Serialize {urn:ast}AGNetworkTookitTcpdumpResponse
//
function AST_AGNetworkTookitTcpdumpResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkTookitTcpdumpResponse.prototype.serialize = AST_AGNetworkTookitTcpdumpResponse_serialize;

function AST_AGNetworkTookitTcpdumpResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkTookitTcpdumpResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSetHotlineNumberResponse
//
function AST_AGSetHotlineNumberResponse () {
    this.typeMarker = 'AST_AGSetHotlineNumberResponse';
    this._result = 0;
}

//
// accessor is AST_AGSetHotlineNumberResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSetHotlineNumberResponse.prototype.setResult
//
function AST_AGSetHotlineNumberResponse_getResult() { return this._result;}

AST_AGSetHotlineNumberResponse.prototype.getResult = AST_AGSetHotlineNumberResponse_getResult;

function AST_AGSetHotlineNumberResponse_setResult(value) { this._result = value;}

AST_AGSetHotlineNumberResponse.prototype.setResult = AST_AGSetHotlineNumberResponse_setResult;
//
// Serialize {urn:ast}AGSetHotlineNumberResponse
//
function AST_AGSetHotlineNumberResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSetHotlineNumberResponse.prototype.serialize = AST_AGSetHotlineNumberResponse_serialize;

function AST_AGSetHotlineNumberResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSetHotlineNumberResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgFunkyGetResponse
//
function AST_AGAlgFunkyGetResponse () {
    this.typeMarker = 'AST_AGAlgFunkyGetResponse';
    this._get = null;
}

//
// accessor is AST_AGAlgFunkyGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}AlgFunkyGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGAlgFunkyGetResponse.prototype.setGet
//
function AST_AGAlgFunkyGetResponse_getGet() { return this._get;}

AST_AGAlgFunkyGetResponse.prototype.getGet = AST_AGAlgFunkyGetResponse_getGet;

function AST_AGAlgFunkyGetResponse_setGet(value) { this._get = value;}

AST_AGAlgFunkyGetResponse.prototype.setGet = AST_AGAlgFunkyGetResponse_setGet;
//
// Serialize {urn:ast}AGAlgFunkyGetResponse
//
function AST_AGAlgFunkyGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgFunkyGetResponse.prototype.serialize = AST_AGAlgFunkyGetResponse_serialize;

function AST_AGAlgFunkyGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgFunkyGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AlgFunkyGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipFxoBindingGet
//
function AST_AGSipFxoBindingGet () {
    this.typeMarker = 'AST_AGSipFxoBindingGet';
}

//
// Serialize {urn:ast}AGSipFxoBindingGet
//
function AST_AGSipFxoBindingGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipFxoBindingGet.prototype.serialize = AST_AGSipFxoBindingGet_serialize;

function AST_AGSipFxoBindingGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipFxoBindingGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemDemoFlagSave
//
function AST_AGSystemDemoFlagSave () {
    this.typeMarker = 'AST_AGSystemDemoFlagSave';
    this._demoflag = '';
}

//
// accessor is AST_AGSystemDemoFlagSave.prototype.getDemoflag
// element get for demoflag
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for demoflag
// setter function is is AST_AGSystemDemoFlagSave.prototype.setDemoflag
//
function AST_AGSystemDemoFlagSave_getDemoflag() { return this._demoflag;}

AST_AGSystemDemoFlagSave.prototype.getDemoflag = AST_AGSystemDemoFlagSave_getDemoflag;

function AST_AGSystemDemoFlagSave_setDemoflag(value) { this._demoflag = value;}

AST_AGSystemDemoFlagSave.prototype.setDemoflag = AST_AGSystemDemoFlagSave_setDemoflag;
//
// Serialize {urn:ast}AGSystemDemoFlagSave
//
function AST_AGSystemDemoFlagSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:demoflag>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._demoflag);
     xml = xml + '</jns0:demoflag>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemDemoFlagSave.prototype.serialize = AST_AGSystemDemoFlagSave_serialize;

function AST_AGSystemDemoFlagSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemDemoFlagSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing demoflag');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setDemoflag(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkFirewallsaveResponse
//
function AST_AGNetworkFirewallsaveResponse () {
    this.typeMarker = 'AST_AGNetworkFirewallsaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGNetworkFirewallsaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGNetworkFirewallsaveResponse.prototype.setResult
//
function AST_AGNetworkFirewallsaveResponse_getResult() { return this._result;}

AST_AGNetworkFirewallsaveResponse.prototype.getResult = AST_AGNetworkFirewallsaveResponse_getResult;

function AST_AGNetworkFirewallsaveResponse_setResult(value) { this._result = value;}

AST_AGNetworkFirewallsaveResponse.prototype.setResult = AST_AGNetworkFirewallsaveResponse_setResult;
//
// Serialize {urn:ast}AGNetworkFirewallsaveResponse
//
function AST_AGNetworkFirewallsaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkFirewallsaveResponse.prototype.serialize = AST_AGNetworkFirewallsaveResponse_serialize;

function AST_AGNetworkFirewallsaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkFirewallsaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}IaxDelEndpointResponse
//
function AST_IaxDelEndpointResponse () {
    this.typeMarker = 'AST_IaxDelEndpointResponse';
    this._result = 0;
}

//
// accessor is AST_IaxDelEndpointResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_IaxDelEndpointResponse.prototype.setResult
//
function AST_IaxDelEndpointResponse_getResult() { return this._result;}

AST_IaxDelEndpointResponse.prototype.getResult = AST_IaxDelEndpointResponse_getResult;

function AST_IaxDelEndpointResponse_setResult(value) { this._result = value;}

AST_IaxDelEndpointResponse.prototype.setResult = AST_IaxDelEndpointResponse_setResult;
//
// Serialize {urn:ast}IaxDelEndpointResponse
//
function AST_IaxDelEndpointResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_IaxDelEndpointResponse.prototype.serialize = AST_IaxDelEndpointResponse_serialize;

function AST_IaxDelEndpointResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_IaxDelEndpointResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipAdvSettingSave
//
function AST_AGSipAdvSettingSave () {
    this.typeMarker = 'AST_AGSipAdvSettingSave';
    this._save = null;
}

//
// accessor is AST_AGSipAdvSettingSave.prototype.getSave
// element get for save
// - element type is {urn:ast}SipAdvSave
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGSipAdvSettingSave.prototype.setSave
//
function AST_AGSipAdvSettingSave_getSave() { return this._save;}

AST_AGSipAdvSettingSave.prototype.getSave = AST_AGSipAdvSettingSave_getSave;

function AST_AGSipAdvSettingSave_setSave(value) { this._save = value;}

AST_AGSipAdvSettingSave.prototype.setSave = AST_AGSipAdvSettingSave_setSave;
//
// Serialize {urn:ast}AGSipAdvSettingSave
//
function AST_AGSipAdvSettingSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipAdvSettingSave.prototype.serialize = AST_AGSipAdvSettingSave_serialize;

function AST_AGSipAdvSettingSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipAdvSettingSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SipAdvSave_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingAdvSaveResponse
//
function AST_AGRoutingAdvSaveResponse () {
    this.typeMarker = 'AST_AGRoutingAdvSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGRoutingAdvSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGRoutingAdvSaveResponse.prototype.setResult
//
function AST_AGRoutingAdvSaveResponse_getResult() { return this._result;}

AST_AGRoutingAdvSaveResponse.prototype.getResult = AST_AGRoutingAdvSaveResponse_getResult;

function AST_AGRoutingAdvSaveResponse_setResult(value) { this._result = value;}

AST_AGRoutingAdvSaveResponse.prototype.setResult = AST_AGRoutingAdvSaveResponse_setResult;
//
// Serialize {urn:ast}AGRoutingAdvSaveResponse
//
function AST_AGRoutingAdvSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingAdvSaveResponse.prototype.serialize = AST_AGRoutingAdvSaveResponse_serialize;

function AST_AGRoutingAdvSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingAdvSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGjConGetKeys
//
function AST_AGjConGetKeys () {
    this.typeMarker = 'AST_AGjConGetKeys';
    this._board = 0;
    this._keybaord = 0;
}

//
// accessor is AST_AGjConGetKeys.prototype.getBoard
// element get for board
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for board
// setter function is is AST_AGjConGetKeys.prototype.setBoard
//
function AST_AGjConGetKeys_getBoard() { return this._board;}

AST_AGjConGetKeys.prototype.getBoard = AST_AGjConGetKeys_getBoard;

function AST_AGjConGetKeys_setBoard(value) { this._board = value;}

AST_AGjConGetKeys.prototype.setBoard = AST_AGjConGetKeys_setBoard;
//
// accessor is AST_AGjConGetKeys.prototype.getKeybaord
// element get for keybaord
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for keybaord
// setter function is is AST_AGjConGetKeys.prototype.setKeybaord
//
function AST_AGjConGetKeys_getKeybaord() { return this._keybaord;}

AST_AGjConGetKeys.prototype.getKeybaord = AST_AGjConGetKeys_getKeybaord;

function AST_AGjConGetKeys_setKeybaord(value) { this._keybaord = value;}

AST_AGjConGetKeys.prototype.setKeybaord = AST_AGjConGetKeys_setKeybaord;
//
// Serialize {urn:ast}AGjConGetKeys
//
function AST_AGjConGetKeys_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:board>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._board);
     xml = xml + '</jns0:board>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:keybaord>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._keybaord);
     xml = xml + '</jns0:keybaord>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGjConGetKeys.prototype.serialize = AST_AGjConGetKeys_serialize;

function AST_AGjConGetKeys_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGjConGetKeys();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing board');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setBoard(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing keybaord');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setKeybaord(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemToolsAsteriskReboot
//
function AST_AGSystemToolsAsteriskReboot () {
    this.typeMarker = 'AST_AGSystemToolsAsteriskReboot';
}

//
// Serialize {urn:ast}AGSystemToolsAsteriskReboot
//
function AST_AGSystemToolsAsteriskReboot_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemToolsAsteriskReboot.prototype.serialize = AST_AGSystemToolsAsteriskReboot_serialize;

function AST_AGSystemToolsAsteriskReboot_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemToolsAsteriskReboot();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgAutoCallSave
//
function AST_AGAlgAutoCallSave () {
    this.typeMarker = 'AST_AGAlgAutoCallSave';
    this._save = null;
}

//
// accessor is AST_AGAlgAutoCallSave.prototype.getSave
// element get for save
// - element type is {urn:ast}AutoCallSave
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGAlgAutoCallSave.prototype.setSave
//
function AST_AGAlgAutoCallSave_getSave() { return this._save;}

AST_AGAlgAutoCallSave.prototype.getSave = AST_AGAlgAutoCallSave_getSave;

function AST_AGAlgAutoCallSave_setSave(value) { this._save = value;}

AST_AGAlgAutoCallSave.prototype.setSave = AST_AGAlgAutoCallSave_setSave;
//
// Serialize {urn:ast}AGAlgAutoCallSave
//
function AST_AGAlgAutoCallSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgAutoCallSave.prototype.serialize = AST_AGAlgAutoCallSave_serialize;

function AST_AGAlgAutoCallSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgAutoCallSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AutoCallSave_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgChannelAddOneResponse
//
function AST_AGAlgChannelAddOneResponse () {
    this.typeMarker = 'AST_AGAlgChannelAddOneResponse';
    this._result = 0;
}

//
// accessor is AST_AGAlgChannelAddOneResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGAlgChannelAddOneResponse.prototype.setResult
//
function AST_AGAlgChannelAddOneResponse_getResult() { return this._result;}

AST_AGAlgChannelAddOneResponse.prototype.getResult = AST_AGAlgChannelAddOneResponse_getResult;

function AST_AGAlgChannelAddOneResponse_setResult(value) { this._result = value;}

AST_AGAlgChannelAddOneResponse.prototype.setResult = AST_AGAlgChannelAddOneResponse_setResult;
//
// Serialize {urn:ast}AGAlgChannelAddOneResponse
//
function AST_AGAlgChannelAddOneResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgChannelAddOneResponse.prototype.serialize = AST_AGAlgChannelAddOneResponse_serialize;

function AST_AGAlgChannelAddOneResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgChannelAddOneResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingGroupsDel
//
function AST_AGRoutingGroupsDel () {
    this.typeMarker = 'AST_AGRoutingGroupsDel';
    this._sections = null;
}

//
// accessor is AST_AGRoutingGroupsDel.prototype.getSections
// element get for sections
// - element type is {urn:ast}SectionArr
// - optional element
// - nillable
//
// element set for sections
// setter function is is AST_AGRoutingGroupsDel.prototype.setSections
//
function AST_AGRoutingGroupsDel_getSections() { return this._sections;}

AST_AGRoutingGroupsDel.prototype.getSections = AST_AGRoutingGroupsDel_getSections;

function AST_AGRoutingGroupsDel_setSections(value) { this._sections = value;}

AST_AGRoutingGroupsDel.prototype.setSections = AST_AGRoutingGroupsDel_setSections;
//
// Serialize {urn:ast}AGRoutingGroupsDel
//
function AST_AGRoutingGroupsDel_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._sections != null) {
      if (this._sections == null) {
       xml = xml + '<jns0:sections xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._sections.serialize(cxfjsutils, 'jns0:sections', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingGroupsDel.prototype.serialize = AST_AGRoutingGroupsDel_serialize;

function AST_AGRoutingGroupsDel_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingGroupsDel();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sections');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'sections')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SectionArr_deserialize(cxfjsutils, curElement);
     }
     newobject.setSections(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGUcpSystemToolsSndRecordStartResponse
//
function AST_AGUcpSystemToolsSndRecordStartResponse () {
    this.typeMarker = 'AST_AGUcpSystemToolsSndRecordStartResponse';
    this._result = 0;
}

//
// accessor is AST_AGUcpSystemToolsSndRecordStartResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGUcpSystemToolsSndRecordStartResponse.prototype.setResult
//
function AST_AGUcpSystemToolsSndRecordStartResponse_getResult() { return this._result;}

AST_AGUcpSystemToolsSndRecordStartResponse.prototype.getResult = AST_AGUcpSystemToolsSndRecordStartResponse_getResult;

function AST_AGUcpSystemToolsSndRecordStartResponse_setResult(value) { this._result = value;}

AST_AGUcpSystemToolsSndRecordStartResponse.prototype.setResult = AST_AGUcpSystemToolsSndRecordStartResponse_setResult;
//
// Serialize {urn:ast}AGUcpSystemToolsSndRecordStartResponse
//
function AST_AGUcpSystemToolsSndRecordStartResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGUcpSystemToolsSndRecordStartResponse.prototype.serialize = AST_AGUcpSystemToolsSndRecordStartResponse_serialize;

function AST_AGUcpSystemToolsSndRecordStartResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGUcpSystemToolsSndRecordStartResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSysTimeGet
//
function AST_AGSysTimeGet () {
    this.typeMarker = 'AST_AGSysTimeGet';
}

//
// Serialize {urn:ast}AGSysTimeGet
//
function AST_AGSysTimeGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSysTimeGet.prototype.serialize = AST_AGSysTimeGet_serialize;

function AST_AGSysTimeGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSysTimeGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGCommitChekout
//
function AST_AGCommitChekout () {
    this.typeMarker = 'AST_AGCommitChekout';
    this._message = null;
    this._commitid = null;
}

//
// accessor is AST_AGCommitChekout.prototype.getMessage
// element get for message
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for message
// setter function is is AST_AGCommitChekout.prototype.setMessage
//
function AST_AGCommitChekout_getMessage() { return this._message;}

AST_AGCommitChekout.prototype.getMessage = AST_AGCommitChekout_getMessage;

function AST_AGCommitChekout_setMessage(value) { this._message = value;}

AST_AGCommitChekout.prototype.setMessage = AST_AGCommitChekout_setMessage;
//
// accessor is AST_AGCommitChekout.prototype.getCommitid
// element get for commitid
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for commitid
// setter function is is AST_AGCommitChekout.prototype.setCommitid
//
function AST_AGCommitChekout_getCommitid() { return this._commitid;}

AST_AGCommitChekout.prototype.getCommitid = AST_AGCommitChekout_getCommitid;

function AST_AGCommitChekout_setCommitid(value) { this._commitid = value;}

AST_AGCommitChekout.prototype.setCommitid = AST_AGCommitChekout_setCommitid;
//
// Serialize {urn:ast}AGCommitChekout
//
function AST_AGCommitChekout_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._message != null) {
      if (this._message == null) {
       xml = xml + '<jns0:message xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:message>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._message);
       xml = xml + '</jns0:message>';
      }
     }
    }
    // block for local variables
    {
     if (this._commitid != null) {
      if (this._commitid == null) {
       xml = xml + '<jns0:commitid xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:commitid>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._commitid);
       xml = xml + '</jns0:commitid>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGCommitChekout.prototype.serialize = AST_AGCommitChekout_serialize;

function AST_AGCommitChekout_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGCommitChekout();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing message');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'message')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setMessage(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing commitid');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'commitid')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setCommitid(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGjConIoSettingsSaveResponse
//
function AST_AGjConIoSettingsSaveResponse () {
    this.typeMarker = 'AST_AGjConIoSettingsSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGjConIoSettingsSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGjConIoSettingsSaveResponse.prototype.setResult
//
function AST_AGjConIoSettingsSaveResponse_getResult() { return this._result;}

AST_AGjConIoSettingsSaveResponse.prototype.getResult = AST_AGjConIoSettingsSaveResponse_getResult;

function AST_AGjConIoSettingsSaveResponse_setResult(value) { this._result = value;}

AST_AGjConIoSettingsSaveResponse.prototype.setResult = AST_AGjConIoSettingsSaveResponse_setResult;
//
// Serialize {urn:ast}AGjConIoSettingsSaveResponse
//
function AST_AGjConIoSettingsSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGjConIoSettingsSaveResponse.prototype.serialize = AST_AGjConIoSettingsSaveResponse_serialize;

function AST_AGjConIoSettingsSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGjConIoSettingsSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkIPSettingsResponse
//
function AST_AGNetworkIPSettingsResponse () {
    this.typeMarker = 'AST_AGNetworkIPSettingsResponse';
    this._result = 0;
}

//
// accessor is AST_AGNetworkIPSettingsResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGNetworkIPSettingsResponse.prototype.setResult
//
function AST_AGNetworkIPSettingsResponse_getResult() { return this._result;}

AST_AGNetworkIPSettingsResponse.prototype.getResult = AST_AGNetworkIPSettingsResponse_getResult;

function AST_AGNetworkIPSettingsResponse_setResult(value) { this._result = value;}

AST_AGNetworkIPSettingsResponse.prototype.setResult = AST_AGNetworkIPSettingsResponse_setResult;
//
// Serialize {urn:ast}AGNetworkIPSettingsResponse
//
function AST_AGNetworkIPSettingsResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkIPSettingsResponse.prototype.serialize = AST_AGNetworkIPSettingsResponse_serialize;

function AST_AGNetworkIPSettingsResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkIPSettingsResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingRulesDelResponse
//
function AST_AGRoutingRulesDelResponse () {
    this.typeMarker = 'AST_AGRoutingRulesDelResponse';
    this._result = 0;
}

//
// accessor is AST_AGRoutingRulesDelResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGRoutingRulesDelResponse.prototype.setResult
//
function AST_AGRoutingRulesDelResponse_getResult() { return this._result;}

AST_AGRoutingRulesDelResponse.prototype.getResult = AST_AGRoutingRulesDelResponse_getResult;

function AST_AGRoutingRulesDelResponse_setResult(value) { this._result = value;}

AST_AGRoutingRulesDelResponse.prototype.setResult = AST_AGRoutingRulesDelResponse_setResult;
//
// Serialize {urn:ast}AGRoutingRulesDelResponse
//
function AST_AGRoutingRulesDelResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingRulesDelResponse.prototype.serialize = AST_AGRoutingRulesDelResponse_serialize;

function AST_AGRoutingRulesDelResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingRulesDelResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemToolGetResponse
//
function AST_AGSystemToolGetResponse () {
    this.typeMarker = 'AST_AGSystemToolGetResponse';
    this._get = null;
}

//
// accessor is AST_AGSystemToolGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}SysToolGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGSystemToolGetResponse.prototype.setGet
//
function AST_AGSystemToolGetResponse_getGet() { return this._get;}

AST_AGSystemToolGetResponse.prototype.getGet = AST_AGSystemToolGetResponse_getGet;

function AST_AGSystemToolGetResponse_setGet(value) { this._get = value;}

AST_AGSystemToolGetResponse.prototype.setGet = AST_AGSystemToolGetResponse_setGet;
//
// Serialize {urn:ast}AGSystemToolGetResponse
//
function AST_AGSystemToolGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemToolGetResponse.prototype.serialize = AST_AGSystemToolGetResponse_serialize;

function AST_AGSystemToolGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemToolGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SysToolGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgFunkyGet
//
function AST_AGAlgFunkyGet () {
    this.typeMarker = 'AST_AGAlgFunkyGet';
}

//
// Serialize {urn:ast}AGAlgFunkyGet
//
function AST_AGAlgFunkyGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgFunkyGet.prototype.serialize = AST_AGAlgFunkyGet_serialize;

function AST_AGAlgFunkyGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgFunkyGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingGroupsDialGetAllResponse
//
function AST_AGRoutingGroupsDialGetAllResponse () {
    this.typeMarker = 'AST_AGRoutingGroupsDialGetAllResponse';
    this._get = null;
}

//
// accessor is AST_AGRoutingGroupsDialGetAllResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}FxsGroupDialGetAll
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGRoutingGroupsDialGetAllResponse.prototype.setGet
//
function AST_AGRoutingGroupsDialGetAllResponse_getGet() { return this._get;}

AST_AGRoutingGroupsDialGetAllResponse.prototype.getGet = AST_AGRoutingGroupsDialGetAllResponse_getGet;

function AST_AGRoutingGroupsDialGetAllResponse_setGet(value) { this._get = value;}

AST_AGRoutingGroupsDialGetAllResponse.prototype.setGet = AST_AGRoutingGroupsDialGetAllResponse_setGet;
//
// Serialize {urn:ast}AGRoutingGroupsDialGetAllResponse
//
function AST_AGRoutingGroupsDialGetAllResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingGroupsDialGetAllResponse.prototype.serialize = AST_AGRoutingGroupsDialGetAllResponse_serialize;

function AST_AGRoutingGroupsDialGetAllResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingGroupsDialGetAllResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_FxsGroupDialGetAll_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipSecuritySave
//
function AST_AGSipSecuritySave () {
    this.typeMarker = 'AST_AGSipSecuritySave';
    this._sec = null;
}

//
// accessor is AST_AGSipSecuritySave.prototype.getSec
// element get for sec
// - element type is {urn:ast}SipSecSave
// - optional element
// - nillable
//
// element set for sec
// setter function is is AST_AGSipSecuritySave.prototype.setSec
//
function AST_AGSipSecuritySave_getSec() { return this._sec;}

AST_AGSipSecuritySave.prototype.getSec = AST_AGSipSecuritySave_getSec;

function AST_AGSipSecuritySave_setSec(value) { this._sec = value;}

AST_AGSipSecuritySave.prototype.setSec = AST_AGSipSecuritySave_setSec;
//
// Serialize {urn:ast}AGSipSecuritySave
//
function AST_AGSipSecuritySave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._sec != null) {
      if (this._sec == null) {
       xml = xml + '<jns0:sec xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._sec.serialize(cxfjsutils, 'jns0:sec', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipSecuritySave.prototype.serialize = AST_AGSipSecuritySave_serialize;

function AST_AGSipSecuritySave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipSecuritySave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sec');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'sec')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SipSecSave_deserialize(cxfjsutils, curElement);
     }
     newobject.setSec(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}SipGeneralGetAllResponse
//
function AST_SipGeneralGetAllResponse () {
    this.typeMarker = 'AST_SipGeneralGetAllResponse';
    this._result = null;
}

//
// accessor is AST_SipGeneralGetAllResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for result
// setter function is is AST_SipGeneralGetAllResponse.prototype.setResult
//
function AST_SipGeneralGetAllResponse_getResult() { return this._result;}

AST_SipGeneralGetAllResponse.prototype.getResult = AST_SipGeneralGetAllResponse_getResult;

function AST_SipGeneralGetAllResponse_setResult(value) { this._result = value;}

AST_SipGeneralGetAllResponse.prototype.setResult = AST_SipGeneralGetAllResponse_setResult;
//
// Serialize {urn:ast}SipGeneralGetAllResponse
//
function AST_SipGeneralGetAllResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._result != null) {
      if (this._result == null) {
       xml = xml + '<jns0:result xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:result>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._result);
       xml = xml + '</jns0:result>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_SipGeneralGetAllResponse.prototype.serialize = AST_SipGeneralGetAllResponse_serialize;

function AST_SipGeneralGetAllResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_SipGeneralGetAllResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'result')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setResult(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipBendpointSave
//
function AST_AGSipBendpointSave () {
    this.typeMarker = 'AST_AGSipBendpointSave';
    this._save = null;
}

//
// accessor is AST_AGSipBendpointSave.prototype.getSave
// element get for save
// - element type is {urn:ast}SipBendSave
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGSipBendpointSave.prototype.setSave
//
function AST_AGSipBendpointSave_getSave() { return this._save;}

AST_AGSipBendpointSave.prototype.getSave = AST_AGSipBendpointSave_getSave;

function AST_AGSipBendpointSave_setSave(value) { this._save = value;}

AST_AGSipBendpointSave.prototype.setSave = AST_AGSipBendpointSave_setSave;
//
// Serialize {urn:ast}AGSipBendpointSave
//
function AST_AGSipBendpointSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipBendpointSave.prototype.serialize = AST_AGSipBendpointSave_serialize;

function AST_AGSipBendpointSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipBendpointSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SipBendSave_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSysLoginSaveResponse
//
function AST_AGSysLoginSaveResponse () {
    this.typeMarker = 'AST_AGSysLoginSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGSysLoginSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSysLoginSaveResponse.prototype.setResult
//
function AST_AGSysLoginSaveResponse_getResult() { return this._result;}

AST_AGSysLoginSaveResponse.prototype.getResult = AST_AGSysLoginSaveResponse_getResult;

function AST_AGSysLoginSaveResponse_setResult(value) { this._result = value;}

AST_AGSysLoginSaveResponse.prototype.setResult = AST_AGSysLoginSaveResponse_setResult;
//
// Serialize {urn:ast}AGSysLoginSaveResponse
//
function AST_AGSysLoginSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSysLoginSaveResponse.prototype.serialize = AST_AGSysLoginSaveResponse_serialize;

function AST_AGSysLoginSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSysLoginSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkRulesSaveResponse
//
function AST_AGNetworkRulesSaveResponse () {
    this.typeMarker = 'AST_AGNetworkRulesSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGNetworkRulesSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGNetworkRulesSaveResponse.prototype.setResult
//
function AST_AGNetworkRulesSaveResponse_getResult() { return this._result;}

AST_AGNetworkRulesSaveResponse.prototype.getResult = AST_AGNetworkRulesSaveResponse_getResult;

function AST_AGNetworkRulesSaveResponse_setResult(value) { this._result = value;}

AST_AGNetworkRulesSaveResponse.prototype.setResult = AST_AGNetworkRulesSaveResponse_setResult;
//
// Serialize {urn:ast}AGNetworkRulesSaveResponse
//
function AST_AGNetworkRulesSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkRulesSaveResponse.prototype.serialize = AST_AGNetworkRulesSaveResponse_serialize;

function AST_AGNetworkRulesSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkRulesSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSyncAll
//
function AST_AGSyncAll () {
    this.typeMarker = 'AST_AGSyncAll';
}

//
// Serialize {urn:ast}AGSyncAll
//
function AST_AGSyncAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSyncAll.prototype.serialize = AST_AGSyncAll_serialize;

function AST_AGSyncAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSyncAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSysGeneralDelLangResponse
//
function AST_AGSysGeneralDelLangResponse () {
    this.typeMarker = 'AST_AGSysGeneralDelLangResponse';
    this._result = 0;
}

//
// accessor is AST_AGSysGeneralDelLangResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSysGeneralDelLangResponse.prototype.setResult
//
function AST_AGSysGeneralDelLangResponse_getResult() { return this._result;}

AST_AGSysGeneralDelLangResponse.prototype.getResult = AST_AGSysGeneralDelLangResponse_getResult;

function AST_AGSysGeneralDelLangResponse_setResult(value) { this._result = value;}

AST_AGSysGeneralDelLangResponse.prototype.setResult = AST_AGSysGeneralDelLangResponse_setResult;
//
// Serialize {urn:ast}AGSysGeneralDelLangResponse
//
function AST_AGSysGeneralDelLangResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSysGeneralDelLangResponse.prototype.serialize = AST_AGSysGeneralDelLangResponse_serialize;

function AST_AGSysGeneralDelLangResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSysGeneralDelLangResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkIPSettings
//
function AST_AGNetworkIPSettings () {
    this.typeMarker = 'AST_AGNetworkIPSettings';
    this._ipaddr = null;
    this._netmask = null;
    this._gateway = null;
}

//
// accessor is AST_AGNetworkIPSettings.prototype.getIpaddr
// element get for ipaddr
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for ipaddr
// setter function is is AST_AGNetworkIPSettings.prototype.setIpaddr
//
function AST_AGNetworkIPSettings_getIpaddr() { return this._ipaddr;}

AST_AGNetworkIPSettings.prototype.getIpaddr = AST_AGNetworkIPSettings_getIpaddr;

function AST_AGNetworkIPSettings_setIpaddr(value) { this._ipaddr = value;}

AST_AGNetworkIPSettings.prototype.setIpaddr = AST_AGNetworkIPSettings_setIpaddr;
//
// accessor is AST_AGNetworkIPSettings.prototype.getNetmask
// element get for netmask
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for netmask
// setter function is is AST_AGNetworkIPSettings.prototype.setNetmask
//
function AST_AGNetworkIPSettings_getNetmask() { return this._netmask;}

AST_AGNetworkIPSettings.prototype.getNetmask = AST_AGNetworkIPSettings_getNetmask;

function AST_AGNetworkIPSettings_setNetmask(value) { this._netmask = value;}

AST_AGNetworkIPSettings.prototype.setNetmask = AST_AGNetworkIPSettings_setNetmask;
//
// accessor is AST_AGNetworkIPSettings.prototype.getGateway
// element get for gateway
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for gateway
// setter function is is AST_AGNetworkIPSettings.prototype.setGateway
//
function AST_AGNetworkIPSettings_getGateway() { return this._gateway;}

AST_AGNetworkIPSettings.prototype.getGateway = AST_AGNetworkIPSettings_getGateway;

function AST_AGNetworkIPSettings_setGateway(value) { this._gateway = value;}

AST_AGNetworkIPSettings.prototype.setGateway = AST_AGNetworkIPSettings_setGateway;
//
// Serialize {urn:ast}AGNetworkIPSettings
//
function AST_AGNetworkIPSettings_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._ipaddr != null) {
      if (this._ipaddr == null) {
       xml = xml + '<jns0:ipaddr xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:ipaddr>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._ipaddr);
       xml = xml + '</jns0:ipaddr>';
      }
     }
    }
    // block for local variables
    {
     if (this._netmask != null) {
      if (this._netmask == null) {
       xml = xml + '<jns0:netmask xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:netmask>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._netmask);
       xml = xml + '</jns0:netmask>';
      }
     }
    }
    // block for local variables
    {
     if (this._gateway != null) {
      if (this._gateway == null) {
       xml = xml + '<jns0:gateway xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:gateway>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._gateway);
       xml = xml + '</jns0:gateway>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkIPSettings.prototype.serialize = AST_AGNetworkIPSettings_serialize;

function AST_AGNetworkIPSettings_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkIPSettings();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing ipaddr');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'ipaddr')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setIpaddr(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing netmask');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'netmask')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setNetmask(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing gateway');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'gateway')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setGateway(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkBurnMacGetResponse
//
function AST_AGNetworkBurnMacGetResponse () {
    this.typeMarker = 'AST_AGNetworkBurnMacGetResponse';
    this._get = null;
}

//
// accessor is AST_AGNetworkBurnMacGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}NetWorkGetMac
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGNetworkBurnMacGetResponse.prototype.setGet
//
function AST_AGNetworkBurnMacGetResponse_getGet() { return this._get;}

AST_AGNetworkBurnMacGetResponse.prototype.getGet = AST_AGNetworkBurnMacGetResponse_getGet;

function AST_AGNetworkBurnMacGetResponse_setGet(value) { this._get = value;}

AST_AGNetworkBurnMacGetResponse.prototype.setGet = AST_AGNetworkBurnMacGetResponse_setGet;
//
// Serialize {urn:ast}AGNetworkBurnMacGetResponse
//
function AST_AGNetworkBurnMacGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkBurnMacGetResponse.prototype.serialize = AST_AGNetworkBurnMacGetResponse_serialize;

function AST_AGNetworkBurnMacGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkBurnMacGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_NetWorkGetMac_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgGlbSettingSave
//
function AST_AGAlgGlbSettingSave () {
    this.typeMarker = 'AST_AGAlgGlbSettingSave';
    this._save = null;
    this._flag = 0;
}

//
// accessor is AST_AGAlgGlbSettingSave.prototype.getSave
// element get for save
// - element type is {urn:ast}AlgGlbSave
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGAlgGlbSettingSave.prototype.setSave
//
function AST_AGAlgGlbSettingSave_getSave() { return this._save;}

AST_AGAlgGlbSettingSave.prototype.getSave = AST_AGAlgGlbSettingSave_getSave;

function AST_AGAlgGlbSettingSave_setSave(value) { this._save = value;}

AST_AGAlgGlbSettingSave.prototype.setSave = AST_AGAlgGlbSettingSave_setSave;
//
// accessor is AST_AGAlgGlbSettingSave.prototype.getFlag
// element get for flag
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for flag
// setter function is is AST_AGAlgGlbSettingSave.prototype.setFlag
//
function AST_AGAlgGlbSettingSave_getFlag() { return this._flag;}

AST_AGAlgGlbSettingSave.prototype.getFlag = AST_AGAlgGlbSettingSave_getFlag;

function AST_AGAlgGlbSettingSave_setFlag(value) { this._flag = value;}

AST_AGAlgGlbSettingSave.prototype.setFlag = AST_AGAlgGlbSettingSave_setFlag;
//
// Serialize {urn:ast}AGAlgGlbSettingSave
//
function AST_AGAlgGlbSettingSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:flag>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._flag);
     xml = xml + '</jns0:flag>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgGlbSettingSave.prototype.serialize = AST_AGAlgGlbSettingSave_serialize;

function AST_AGAlgGlbSettingSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgGlbSettingSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AlgGlbSave_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing flag');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setFlag(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgChannelAddOne
//
function AST_AGAlgChannelAddOne () {
    this.typeMarker = 'AST_AGAlgChannelAddOne';
    this._channel = '';
    this._signal = '';
}

//
// accessor is AST_AGAlgChannelAddOne.prototype.getChannel
// element get for channel
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedShort
// - required element
//
// element set for channel
// setter function is is AST_AGAlgChannelAddOne.prototype.setChannel
//
function AST_AGAlgChannelAddOne_getChannel() { return this._channel;}

AST_AGAlgChannelAddOne.prototype.getChannel = AST_AGAlgChannelAddOne_getChannel;

function AST_AGAlgChannelAddOne_setChannel(value) { this._channel = value;}

AST_AGAlgChannelAddOne.prototype.setChannel = AST_AGAlgChannelAddOne_setChannel;
//
// accessor is AST_AGAlgChannelAddOne.prototype.getSignal
// element get for signal
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for signal
// setter function is is AST_AGAlgChannelAddOne.prototype.setSignal
//
function AST_AGAlgChannelAddOne_getSignal() { return this._signal;}

AST_AGAlgChannelAddOne.prototype.getSignal = AST_AGAlgChannelAddOne_getSignal;

function AST_AGAlgChannelAddOne_setSignal(value) { this._signal = value;}

AST_AGAlgChannelAddOne.prototype.setSignal = AST_AGAlgChannelAddOne_setSignal;
//
// Serialize {urn:ast}AGAlgChannelAddOne
//
function AST_AGAlgChannelAddOne_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:channel>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._channel);
     xml = xml + '</jns0:channel>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:signal>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._signal);
     xml = xml + '</jns0:signal>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgChannelAddOne.prototype.serialize = AST_AGAlgChannelAddOne_serialize;

function AST_AGAlgChannelAddOne_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgChannelAddOne();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing channel');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setChannel(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing signal');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setSignal(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSysGeneralDebugResponse
//
function AST_AGSysGeneralDebugResponse () {
    this.typeMarker = 'AST_AGSysGeneralDebugResponse';
    this._result = 0;
}

//
// accessor is AST_AGSysGeneralDebugResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSysGeneralDebugResponse.prototype.setResult
//
function AST_AGSysGeneralDebugResponse_getResult() { return this._result;}

AST_AGSysGeneralDebugResponse.prototype.getResult = AST_AGSysGeneralDebugResponse_getResult;

function AST_AGSysGeneralDebugResponse_setResult(value) { this._result = value;}

AST_AGSysGeneralDebugResponse.prototype.setResult = AST_AGSysGeneralDebugResponse_setResult;
//
// Serialize {urn:ast}AGSysGeneralDebugResponse
//
function AST_AGSysGeneralDebugResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSysGeneralDebugResponse.prototype.serialize = AST_AGSysGeneralDebugResponse_serialize;

function AST_AGSysGeneralDebugResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSysGeneralDebugResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGCommitSwitch
//
function AST_AGCommitSwitch () {
    this.typeMarker = 'AST_AGCommitSwitch';
    this._commitsw = 0;
}

//
// accessor is AST_AGCommitSwitch.prototype.getCommitsw
// element get for commitsw
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for commitsw
// setter function is is AST_AGCommitSwitch.prototype.setCommitsw
//
function AST_AGCommitSwitch_getCommitsw() { return this._commitsw;}

AST_AGCommitSwitch.prototype.getCommitsw = AST_AGCommitSwitch_getCommitsw;

function AST_AGCommitSwitch_setCommitsw(value) { this._commitsw = value;}

AST_AGCommitSwitch.prototype.setCommitsw = AST_AGCommitSwitch_setCommitsw;
//
// Serialize {urn:ast}AGCommitSwitch
//
function AST_AGCommitSwitch_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:commitsw>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._commitsw);
     xml = xml + '</jns0:commitsw>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGCommitSwitch.prototype.serialize = AST_AGCommitSwitch_serialize;

function AST_AGCommitSwitch_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGCommitSwitch();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing commitsw');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setCommitsw(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAdvAstfileeditorEditSaveResponse
//
function AST_AGAdvAstfileeditorEditSaveResponse () {
    this.typeMarker = 'AST_AGAdvAstfileeditorEditSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGAdvAstfileeditorEditSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGAdvAstfileeditorEditSaveResponse.prototype.setResult
//
function AST_AGAdvAstfileeditorEditSaveResponse_getResult() { return this._result;}

AST_AGAdvAstfileeditorEditSaveResponse.prototype.getResult = AST_AGAdvAstfileeditorEditSaveResponse_getResult;

function AST_AGAdvAstfileeditorEditSaveResponse_setResult(value) { this._result = value;}

AST_AGAdvAstfileeditorEditSaveResponse.prototype.setResult = AST_AGAdvAstfileeditorEditSaveResponse_setResult;
//
// Serialize {urn:ast}AGAdvAstfileeditorEditSaveResponse
//
function AST_AGAdvAstfileeditorEditSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAdvAstfileeditorEditSaveResponse.prototype.serialize = AST_AGAdvAstfileeditorEditSaveResponse_serialize;

function AST_AGAdvAstfileeditorEditSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAdvAstfileeditorEditSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipEndpointOperation
//
function AST_AGSipEndpointOperation () {
    this.typeMarker = 'AST_AGSipEndpointOperation';
    this._mode = '';
    this._user = null;
    this._passwd = null;
    this._hostip = null;
    this._port = 0;
}

//
// accessor is AST_AGSipEndpointOperation.prototype.getMode
// element get for mode
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for mode
// setter function is is AST_AGSipEndpointOperation.prototype.setMode
//
function AST_AGSipEndpointOperation_getMode() { return this._mode;}

AST_AGSipEndpointOperation.prototype.getMode = AST_AGSipEndpointOperation_getMode;

function AST_AGSipEndpointOperation_setMode(value) { this._mode = value;}

AST_AGSipEndpointOperation.prototype.setMode = AST_AGSipEndpointOperation_setMode;
//
// accessor is AST_AGSipEndpointOperation.prototype.getUser
// element get for user
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for user
// setter function is is AST_AGSipEndpointOperation.prototype.setUser
//
function AST_AGSipEndpointOperation_getUser() { return this._user;}

AST_AGSipEndpointOperation.prototype.getUser = AST_AGSipEndpointOperation_getUser;

function AST_AGSipEndpointOperation_setUser(value) { this._user = value;}

AST_AGSipEndpointOperation.prototype.setUser = AST_AGSipEndpointOperation_setUser;
//
// accessor is AST_AGSipEndpointOperation.prototype.getPasswd
// element get for passwd
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for passwd
// setter function is is AST_AGSipEndpointOperation.prototype.setPasswd
//
function AST_AGSipEndpointOperation_getPasswd() { return this._passwd;}

AST_AGSipEndpointOperation.prototype.getPasswd = AST_AGSipEndpointOperation_getPasswd;

function AST_AGSipEndpointOperation_setPasswd(value) { this._passwd = value;}

AST_AGSipEndpointOperation.prototype.setPasswd = AST_AGSipEndpointOperation_setPasswd;
//
// accessor is AST_AGSipEndpointOperation.prototype.getHostip
// element get for hostip
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for hostip
// setter function is is AST_AGSipEndpointOperation.prototype.setHostip
//
function AST_AGSipEndpointOperation_getHostip() { return this._hostip;}

AST_AGSipEndpointOperation.prototype.getHostip = AST_AGSipEndpointOperation_getHostip;

function AST_AGSipEndpointOperation_setHostip(value) { this._hostip = value;}

AST_AGSipEndpointOperation.prototype.setHostip = AST_AGSipEndpointOperation_setHostip;
//
// accessor is AST_AGSipEndpointOperation.prototype.getPort
// element get for port
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for port
// setter function is is AST_AGSipEndpointOperation.prototype.setPort
//
function AST_AGSipEndpointOperation_getPort() { return this._port;}

AST_AGSipEndpointOperation.prototype.getPort = AST_AGSipEndpointOperation_getPort;

function AST_AGSipEndpointOperation_setPort(value) { this._port = value;}

AST_AGSipEndpointOperation.prototype.setPort = AST_AGSipEndpointOperation_setPort;
//
// Serialize {urn:ast}AGSipEndpointOperation
//
function AST_AGSipEndpointOperation_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:mode>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._mode);
     xml = xml + '</jns0:mode>';
    }
    // block for local variables
    {
     if (this._user != null) {
      if (this._user == null) {
       xml = xml + '<jns0:user xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:user>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._user);
       xml = xml + '</jns0:user>';
      }
     }
    }
    // block for local variables
    {
     if (this._passwd != null) {
      if (this._passwd == null) {
       xml = xml + '<jns0:passwd xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:passwd>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._passwd);
       xml = xml + '</jns0:passwd>';
      }
     }
    }
    // block for local variables
    {
     if (this._hostip != null) {
      if (this._hostip == null) {
       xml = xml + '<jns0:hostip xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:hostip>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._hostip);
       xml = xml + '</jns0:hostip>';
      }
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:port>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._port);
     xml = xml + '</jns0:port>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipEndpointOperation.prototype.serialize = AST_AGSipEndpointOperation_serialize;

function AST_AGSipEndpointOperation_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipEndpointOperation();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing mode');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setMode(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing user');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'user')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setUser(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing passwd');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'passwd')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setPasswd(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing hostip');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'hostip')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setHostip(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing port');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setPort(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkBurnMac
//
function AST_AGNetworkBurnMac () {
    this.typeMarker = 'AST_AGNetworkBurnMac';
    this._LanMac = null;
    this._WanMac = null;
}

//
// accessor is AST_AGNetworkBurnMac.prototype.getLanMac
// element get for LanMac
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for LanMac
// setter function is is AST_AGNetworkBurnMac.prototype.setLanMac
//
function AST_AGNetworkBurnMac_getLanMac() { return this._LanMac;}

AST_AGNetworkBurnMac.prototype.getLanMac = AST_AGNetworkBurnMac_getLanMac;

function AST_AGNetworkBurnMac_setLanMac(value) { this._LanMac = value;}

AST_AGNetworkBurnMac.prototype.setLanMac = AST_AGNetworkBurnMac_setLanMac;
//
// accessor is AST_AGNetworkBurnMac.prototype.getWanMac
// element get for WanMac
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for WanMac
// setter function is is AST_AGNetworkBurnMac.prototype.setWanMac
//
function AST_AGNetworkBurnMac_getWanMac() { return this._WanMac;}

AST_AGNetworkBurnMac.prototype.getWanMac = AST_AGNetworkBurnMac_getWanMac;

function AST_AGNetworkBurnMac_setWanMac(value) { this._WanMac = value;}

AST_AGNetworkBurnMac.prototype.setWanMac = AST_AGNetworkBurnMac_setWanMac;
//
// Serialize {urn:ast}AGNetworkBurnMac
//
function AST_AGNetworkBurnMac_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._LanMac != null) {
      if (this._LanMac == null) {
       xml = xml + '<jns0:LanMac xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:LanMac>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._LanMac);
       xml = xml + '</jns0:LanMac>';
      }
     }
    }
    // block for local variables
    {
     if (this._WanMac != null) {
      if (this._WanMac == null) {
       xml = xml + '<jns0:WanMac xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:WanMac>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._WanMac);
       xml = xml + '</jns0:WanMac>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkBurnMac.prototype.serialize = AST_AGNetworkBurnMac_serialize;

function AST_AGNetworkBurnMac_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkBurnMac();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing LanMac');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'LanMac')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setLanMac(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing WanMac');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'WanMac')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setWanMac(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipEndpointsSyncResponse
//
function AST_AGSipEndpointsSyncResponse () {
    this.typeMarker = 'AST_AGSipEndpointsSyncResponse';
    this._result = 0;
}

//
// accessor is AST_AGSipEndpointsSyncResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSipEndpointsSyncResponse.prototype.setResult
//
function AST_AGSipEndpointsSyncResponse_getResult() { return this._result;}

AST_AGSipEndpointsSyncResponse.prototype.getResult = AST_AGSipEndpointsSyncResponse_getResult;

function AST_AGSipEndpointsSyncResponse_setResult(value) { this._result = value;}

AST_AGSipEndpointsSyncResponse.prototype.setResult = AST_AGSipEndpointsSyncResponse_setResult;
//
// Serialize {urn:ast}AGSipEndpointsSyncResponse
//
function AST_AGSipEndpointsSyncResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipEndpointsSyncResponse.prototype.serialize = AST_AGSipEndpointsSyncResponse_serialize;

function AST_AGSipEndpointsSyncResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipEndpointsSyncResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipBatchEndpointsSave
//
function AST_AGSipBatchEndpointsSave () {
    this.typeMarker = 'AST_AGSipBatchEndpointsSave';
    this._save = null;
}

//
// accessor is AST_AGSipBatchEndpointsSave.prototype.getSave
// element get for save
// - element type is {urn:ast}SipBatchArr
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGSipBatchEndpointsSave.prototype.setSave
//
function AST_AGSipBatchEndpointsSave_getSave() { return this._save;}

AST_AGSipBatchEndpointsSave.prototype.getSave = AST_AGSipBatchEndpointsSave_getSave;

function AST_AGSipBatchEndpointsSave_setSave(value) { this._save = value;}

AST_AGSipBatchEndpointsSave.prototype.setSave = AST_AGSipBatchEndpointsSave_setSave;
//
// Serialize {urn:ast}AGSipBatchEndpointsSave
//
function AST_AGSipBatchEndpointsSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipBatchEndpointsSave.prototype.serialize = AST_AGSipBatchEndpointsSave_serialize;

function AST_AGSipBatchEndpointsSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipBatchEndpointsSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SipBatchArr_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkOpenvpnGetResponse
//
function AST_AGNetworkOpenvpnGetResponse () {
    this.typeMarker = 'AST_AGNetworkOpenvpnGetResponse';
    this._get = null;
}

//
// accessor is AST_AGNetworkOpenvpnGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}NetworkOpenvpnGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGNetworkOpenvpnGetResponse.prototype.setGet
//
function AST_AGNetworkOpenvpnGetResponse_getGet() { return this._get;}

AST_AGNetworkOpenvpnGetResponse.prototype.getGet = AST_AGNetworkOpenvpnGetResponse_getGet;

function AST_AGNetworkOpenvpnGetResponse_setGet(value) { this._get = value;}

AST_AGNetworkOpenvpnGetResponse.prototype.setGet = AST_AGNetworkOpenvpnGetResponse_setGet;
//
// Serialize {urn:ast}AGNetworkOpenvpnGetResponse
//
function AST_AGNetworkOpenvpnGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkOpenvpnGetResponse.prototype.serialize = AST_AGNetworkOpenvpnGetResponse_serialize;

function AST_AGNetworkOpenvpnGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkOpenvpnGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_NetworkOpenvpnGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGjConSetKeyClib
//
function AST_AGjConSetKeyClib () {
    this.typeMarker = 'AST_AGjConSetKeyClib';
    this._board = 0;
    this._keybaord = 0;
}

//
// accessor is AST_AGjConSetKeyClib.prototype.getBoard
// element get for board
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for board
// setter function is is AST_AGjConSetKeyClib.prototype.setBoard
//
function AST_AGjConSetKeyClib_getBoard() { return this._board;}

AST_AGjConSetKeyClib.prototype.getBoard = AST_AGjConSetKeyClib_getBoard;

function AST_AGjConSetKeyClib_setBoard(value) { this._board = value;}

AST_AGjConSetKeyClib.prototype.setBoard = AST_AGjConSetKeyClib_setBoard;
//
// accessor is AST_AGjConSetKeyClib.prototype.getKeybaord
// element get for keybaord
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for keybaord
// setter function is is AST_AGjConSetKeyClib.prototype.setKeybaord
//
function AST_AGjConSetKeyClib_getKeybaord() { return this._keybaord;}

AST_AGjConSetKeyClib.prototype.getKeybaord = AST_AGjConSetKeyClib_getKeybaord;

function AST_AGjConSetKeyClib_setKeybaord(value) { this._keybaord = value;}

AST_AGjConSetKeyClib.prototype.setKeybaord = AST_AGjConSetKeyClib_setKeybaord;
//
// Serialize {urn:ast}AGjConSetKeyClib
//
function AST_AGjConSetKeyClib_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:board>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._board);
     xml = xml + '</jns0:board>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:keybaord>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._keybaord);
     xml = xml + '</jns0:keybaord>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGjConSetKeyClib.prototype.serialize = AST_AGjConSetKeyClib_serialize;

function AST_AGjConSetKeyClib_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGjConSetKeyClib();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing board');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setBoard(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing keybaord');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setKeybaord(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAdvCloudGet
//
function AST_AGAdvCloudGet () {
    this.typeMarker = 'AST_AGAdvCloudGet';
}

//
// Serialize {urn:ast}AGAdvCloudGet
//
function AST_AGAdvCloudGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAdvCloudGet.prototype.serialize = AST_AGAdvCloudGet_serialize;

function AST_AGAdvCloudGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAdvCloudGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkDdnsGetAllResponse
//
function AST_AGNetworkDdnsGetAllResponse () {
    this.typeMarker = 'AST_AGNetworkDdnsGetAllResponse';
    this._get = null;
}

//
// accessor is AST_AGNetworkDdnsGetAllResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}NetworkDdnsGetAll
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGNetworkDdnsGetAllResponse.prototype.setGet
//
function AST_AGNetworkDdnsGetAllResponse_getGet() { return this._get;}

AST_AGNetworkDdnsGetAllResponse.prototype.getGet = AST_AGNetworkDdnsGetAllResponse_getGet;

function AST_AGNetworkDdnsGetAllResponse_setGet(value) { this._get = value;}

AST_AGNetworkDdnsGetAllResponse.prototype.setGet = AST_AGNetworkDdnsGetAllResponse_setGet;
//
// Serialize {urn:ast}AGNetworkDdnsGetAllResponse
//
function AST_AGNetworkDdnsGetAllResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkDdnsGetAllResponse.prototype.serialize = AST_AGNetworkDdnsGetAllResponse_serialize;

function AST_AGNetworkDdnsGetAllResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkDdnsGetAllResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_NetworkDdnsGetAll_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGUcpAlgGlbSettingGetAll
//
function AST_AGUcpAlgGlbSettingGetAll () {
    this.typeMarker = 'AST_AGUcpAlgGlbSettingGetAll';
}

//
// Serialize {urn:ast}AGUcpAlgGlbSettingGetAll
//
function AST_AGUcpAlgGlbSettingGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGUcpAlgGlbSettingGetAll.prototype.serialize = AST_AGUcpAlgGlbSettingGetAll_serialize;

function AST_AGUcpAlgGlbSettingGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGUcpAlgGlbSettingGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGLogCdrGet
//
function AST_AGLogCdrGet () {
    this.typeMarker = 'AST_AGLogCdrGet';
    this._filter = null;
    this._table = null;
    this._page = 0;
    this._pagecount = 0;
}

//
// accessor is AST_AGLogCdrGet.prototype.getFilter
// element get for filter
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for filter
// setter function is is AST_AGLogCdrGet.prototype.setFilter
//
function AST_AGLogCdrGet_getFilter() { return this._filter;}

AST_AGLogCdrGet.prototype.getFilter = AST_AGLogCdrGet_getFilter;

function AST_AGLogCdrGet_setFilter(value) { this._filter = value;}

AST_AGLogCdrGet.prototype.setFilter = AST_AGLogCdrGet_setFilter;
//
// accessor is AST_AGLogCdrGet.prototype.getTable
// element get for table
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for table
// setter function is is AST_AGLogCdrGet.prototype.setTable
//
function AST_AGLogCdrGet_getTable() { return this._table;}

AST_AGLogCdrGet.prototype.getTable = AST_AGLogCdrGet_getTable;

function AST_AGLogCdrGet_setTable(value) { this._table = value;}

AST_AGLogCdrGet.prototype.setTable = AST_AGLogCdrGet_setTable;
//
// accessor is AST_AGLogCdrGet.prototype.getPage
// element get for page
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for page
// setter function is is AST_AGLogCdrGet.prototype.setPage
//
function AST_AGLogCdrGet_getPage() { return this._page;}

AST_AGLogCdrGet.prototype.getPage = AST_AGLogCdrGet_getPage;

function AST_AGLogCdrGet_setPage(value) { this._page = value;}

AST_AGLogCdrGet.prototype.setPage = AST_AGLogCdrGet_setPage;
//
// accessor is AST_AGLogCdrGet.prototype.getPagecount
// element get for pagecount
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for pagecount
// setter function is is AST_AGLogCdrGet.prototype.setPagecount
//
function AST_AGLogCdrGet_getPagecount() { return this._pagecount;}

AST_AGLogCdrGet.prototype.getPagecount = AST_AGLogCdrGet_getPagecount;

function AST_AGLogCdrGet_setPagecount(value) { this._pagecount = value;}

AST_AGLogCdrGet.prototype.setPagecount = AST_AGLogCdrGet_setPagecount;
//
// Serialize {urn:ast}AGLogCdrGet
//
function AST_AGLogCdrGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._filter != null) {
      if (this._filter == null) {
       xml = xml + '<jns0:filter xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:filter>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._filter);
       xml = xml + '</jns0:filter>';
      }
     }
    }
    // block for local variables
    {
     if (this._table != null) {
      if (this._table == null) {
       xml = xml + '<jns0:table xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:table>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._table);
       xml = xml + '</jns0:table>';
      }
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:page>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._page);
     xml = xml + '</jns0:page>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:pagecount>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._pagecount);
     xml = xml + '</jns0:pagecount>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGLogCdrGet.prototype.serialize = AST_AGLogCdrGet_serialize;

function AST_AGLogCdrGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGLogCdrGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing filter');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'filter')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setFilter(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing table');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'table')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setTable(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing page');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setPage(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing pagecount');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setPagecount(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSysGeneralDelLang
//
function AST_AGSysGeneralDelLang () {
    this.typeMarker = 'AST_AGSysGeneralDelLang';
    this._lang = null;
}

//
// accessor is AST_AGSysGeneralDelLang.prototype.getLang
// element get for lang
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for lang
// setter function is is AST_AGSysGeneralDelLang.prototype.setLang
//
function AST_AGSysGeneralDelLang_getLang() { return this._lang;}

AST_AGSysGeneralDelLang.prototype.getLang = AST_AGSysGeneralDelLang_getLang;

function AST_AGSysGeneralDelLang_setLang(value) { this._lang = value;}

AST_AGSysGeneralDelLang.prototype.setLang = AST_AGSysGeneralDelLang_setLang;
//
// Serialize {urn:ast}AGSysGeneralDelLang
//
function AST_AGSysGeneralDelLang_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._lang != null) {
      if (this._lang == null) {
       xml = xml + '<jns0:lang xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:lang>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._lang);
       xml = xml + '</jns0:lang>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSysGeneralDelLang.prototype.serialize = AST_AGSysGeneralDelLang_serialize;

function AST_AGSysGeneralDelLang_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSysGeneralDelLang();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing lang');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'lang')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setLang(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemCloseAllservice
//
function AST_AGSystemCloseAllservice () {
    this.typeMarker = 'AST_AGSystemCloseAllservice';
}

//
// Serialize {urn:ast}AGSystemCloseAllservice
//
function AST_AGSystemCloseAllservice_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemCloseAllservice.prototype.serialize = AST_AGSystemCloseAllservice_serialize;

function AST_AGSystemCloseAllservice_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemCloseAllservice();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgChannelAddClient
//
function AST_AGAlgChannelAddClient () {
    this.typeMarker = 'AST_AGAlgChannelAddClient';
    this._clientInfo = null;
}

//
// accessor is AST_AGAlgChannelAddClient.prototype.getClientInfo
// element get for clientInfo
// - element type is {urn:ast}ClientAdd
// - optional element
// - nillable
//
// element set for clientInfo
// setter function is is AST_AGAlgChannelAddClient.prototype.setClientInfo
//
function AST_AGAlgChannelAddClient_getClientInfo() { return this._clientInfo;}

AST_AGAlgChannelAddClient.prototype.getClientInfo = AST_AGAlgChannelAddClient_getClientInfo;

function AST_AGAlgChannelAddClient_setClientInfo(value) { this._clientInfo = value;}

AST_AGAlgChannelAddClient.prototype.setClientInfo = AST_AGAlgChannelAddClient_setClientInfo;
//
// Serialize {urn:ast}AGAlgChannelAddClient
//
function AST_AGAlgChannelAddClient_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._clientInfo != null) {
      if (this._clientInfo == null) {
       xml = xml + '<jns0:clientInfo xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._clientInfo.serialize(cxfjsutils, 'jns0:clientInfo', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgChannelAddClient.prototype.serialize = AST_AGAlgChannelAddClient_serialize;

function AST_AGAlgChannelAddClient_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgChannelAddClient();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing clientInfo');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'clientInfo')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_ClientAdd_deserialize(cxfjsutils, curElement);
     }
     newobject.setClientInfo(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGOEMSettingInfoGet
//
function AST_AGOEMSettingInfoGet () {
    this.typeMarker = 'AST_AGOEMSettingInfoGet';
}

//
// Serialize {urn:ast}AGOEMSettingInfoGet
//
function AST_AGOEMSettingInfoGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGOEMSettingInfoGet.prototype.serialize = AST_AGOEMSettingInfoGet_serialize;

function AST_AGOEMSettingInfoGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGOEMSettingInfoGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRegisterParaRead
//
function AST_AGRegisterParaRead () {
    this.typeMarker = 'AST_AGRegisterParaRead';
    this._read = null;
}

//
// accessor is AST_AGRegisterParaRead.prototype.getRead
// element get for read
// - element type is {urn:ast}RegisterParaRead
// - optional element
// - nillable
//
// element set for read
// setter function is is AST_AGRegisterParaRead.prototype.setRead
//
function AST_AGRegisterParaRead_getRead() { return this._read;}

AST_AGRegisterParaRead.prototype.getRead = AST_AGRegisterParaRead_getRead;

function AST_AGRegisterParaRead_setRead(value) { this._read = value;}

AST_AGRegisterParaRead.prototype.setRead = AST_AGRegisterParaRead_setRead;
//
// Serialize {urn:ast}AGRegisterParaRead
//
function AST_AGRegisterParaRead_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._read != null) {
      if (this._read == null) {
       xml = xml + '<jns0:read xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._read.serialize(cxfjsutils, 'jns0:read', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRegisterParaRead.prototype.serialize = AST_AGRegisterParaRead_serialize;

function AST_AGRegisterParaRead_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRegisterParaRead();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing read');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'read')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_RegisterParaRead_deserialize(cxfjsutils, curElement);
     }
     newobject.setRead(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAdvAstcliGetResponse
//
function AST_AGAdvAstcliGetResponse () {
    this.typeMarker = 'AST_AGAdvAstcliGetResponse';
    this._combuf = null;
}

//
// accessor is AST_AGAdvAstcliGetResponse.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - optional element
// - nillable
//
// element set for combuf
// setter function is is AST_AGAdvAstcliGetResponse.prototype.setCombuf
//
function AST_AGAdvAstcliGetResponse_getCombuf() { return this._combuf;}

AST_AGAdvAstcliGetResponse.prototype.getCombuf = AST_AGAdvAstcliGetResponse_getCombuf;

function AST_AGAdvAstcliGetResponse_setCombuf(value) { this._combuf = value;}

AST_AGAdvAstcliGetResponse.prototype.setCombuf = AST_AGAdvAstcliGetResponse_setCombuf;
//
// Serialize {urn:ast}AGAdvAstcliGetResponse
//
function AST_AGAdvAstcliGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._combuf != null) {
      if (this._combuf == null) {
       xml = xml + '<jns0:combuf xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAdvAstcliGetResponse.prototype.serialize = AST_AGAdvAstcliGetResponse_serialize;

function AST_AGAdvAstcliGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAdvAstcliGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'combuf')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_common_deserialize(cxfjsutils, curElement);
     }
     newobject.setCombuf(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAdvAstfileeditorEditGetOneResponse
//
function AST_AGAdvAstfileeditorEditGetOneResponse () {
    this.typeMarker = 'AST_AGAdvAstfileeditorEditGetOneResponse';
    this._get = null;
}

//
// accessor is AST_AGAdvAstfileeditorEditGetOneResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}AdvAstFileGetOne
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGAdvAstfileeditorEditGetOneResponse.prototype.setGet
//
function AST_AGAdvAstfileeditorEditGetOneResponse_getGet() { return this._get;}

AST_AGAdvAstfileeditorEditGetOneResponse.prototype.getGet = AST_AGAdvAstfileeditorEditGetOneResponse_getGet;

function AST_AGAdvAstfileeditorEditGetOneResponse_setGet(value) { this._get = value;}

AST_AGAdvAstfileeditorEditGetOneResponse.prototype.setGet = AST_AGAdvAstfileeditorEditGetOneResponse_setGet;
//
// Serialize {urn:ast}AGAdvAstfileeditorEditGetOneResponse
//
function AST_AGAdvAstfileeditorEditGetOneResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAdvAstfileeditorEditGetOneResponse.prototype.serialize = AST_AGAdvAstfileeditorEditGetOneResponse_serialize;

function AST_AGAdvAstfileeditorEditGetOneResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAdvAstfileeditorEditGetOneResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AdvAstFileGetOne_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkRulesGetAll
//
function AST_AGNetworkRulesGetAll () {
    this.typeMarker = 'AST_AGNetworkRulesGetAll';
}

//
// Serialize {urn:ast}AGNetworkRulesGetAll
//
function AST_AGNetworkRulesGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkRulesGetAll.prototype.serialize = AST_AGNetworkRulesGetAll_serialize;

function AST_AGNetworkRulesGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkRulesGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGLogGetAllResponse
//
function AST_AGLogGetAllResponse () {
    this.typeMarker = 'AST_AGLogGetAllResponse';
    this._combuf = null;
}

//
// accessor is AST_AGLogGetAllResponse.prototype.getCombuf
// element get for combuf
// - element type is {urn:ast}common
// - optional element
// - nillable
//
// element set for combuf
// setter function is is AST_AGLogGetAllResponse.prototype.setCombuf
//
function AST_AGLogGetAllResponse_getCombuf() { return this._combuf;}

AST_AGLogGetAllResponse.prototype.getCombuf = AST_AGLogGetAllResponse_getCombuf;

function AST_AGLogGetAllResponse_setCombuf(value) { this._combuf = value;}

AST_AGLogGetAllResponse.prototype.setCombuf = AST_AGLogGetAllResponse_setCombuf;
//
// Serialize {urn:ast}AGLogGetAllResponse
//
function AST_AGLogGetAllResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._combuf != null) {
      if (this._combuf == null) {
       xml = xml + '<jns0:combuf xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._combuf.serialize(cxfjsutils, 'jns0:combuf', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGLogGetAllResponse.prototype.serialize = AST_AGLogGetAllResponse_serialize;

function AST_AGLogGetAllResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGLogGetAllResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing combuf');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'combuf')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_common_deserialize(cxfjsutils, curElement);
     }
     newobject.setCombuf(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgChannelSaveAll
//
function AST_AGAlgChannelSaveAll () {
    this.typeMarker = 'AST_AGAlgChannelSaveAll';
    this._save = null;
}

//
// accessor is AST_AGAlgChannelSaveAll.prototype.getSave
// element get for save
// - element type is {urn:ast}AnaFxsAll
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGAlgChannelSaveAll.prototype.setSave
//
function AST_AGAlgChannelSaveAll_getSave() { return this._save;}

AST_AGAlgChannelSaveAll.prototype.getSave = AST_AGAlgChannelSaveAll_getSave;

function AST_AGAlgChannelSaveAll_setSave(value) { this._save = value;}

AST_AGAlgChannelSaveAll.prototype.setSave = AST_AGAlgChannelSaveAll_setSave;
//
// Serialize {urn:ast}AGAlgChannelSaveAll
//
function AST_AGAlgChannelSaveAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgChannelSaveAll.prototype.serialize = AST_AGAlgChannelSaveAll_serialize;

function AST_AGAlgChannelSaveAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgChannelSaveAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AnaFxsAll_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingGroupsDialSave
//
function AST_AGRoutingGroupsDialSave () {
    this.typeMarker = 'AST_AGRoutingGroupsDialSave';
    this._oldname = null;
    this._newname = null;
    this._save = null;
}

//
// accessor is AST_AGRoutingGroupsDialSave.prototype.getOldname
// element get for oldname
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for oldname
// setter function is is AST_AGRoutingGroupsDialSave.prototype.setOldname
//
function AST_AGRoutingGroupsDialSave_getOldname() { return this._oldname;}

AST_AGRoutingGroupsDialSave.prototype.getOldname = AST_AGRoutingGroupsDialSave_getOldname;

function AST_AGRoutingGroupsDialSave_setOldname(value) { this._oldname = value;}

AST_AGRoutingGroupsDialSave.prototype.setOldname = AST_AGRoutingGroupsDialSave_setOldname;
//
// accessor is AST_AGRoutingGroupsDialSave.prototype.getNewname
// element get for newname
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for newname
// setter function is is AST_AGRoutingGroupsDialSave.prototype.setNewname
//
function AST_AGRoutingGroupsDialSave_getNewname() { return this._newname;}

AST_AGRoutingGroupsDialSave.prototype.getNewname = AST_AGRoutingGroupsDialSave_getNewname;

function AST_AGRoutingGroupsDialSave_setNewname(value) { this._newname = value;}

AST_AGRoutingGroupsDialSave.prototype.setNewname = AST_AGRoutingGroupsDialSave_setNewname;
//
// accessor is AST_AGRoutingGroupsDialSave.prototype.getSave
// element get for save
// - element type is {urn:ast}FxsGroupDial
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGRoutingGroupsDialSave.prototype.setSave
//
function AST_AGRoutingGroupsDialSave_getSave() { return this._save;}

AST_AGRoutingGroupsDialSave.prototype.getSave = AST_AGRoutingGroupsDialSave_getSave;

function AST_AGRoutingGroupsDialSave_setSave(value) { this._save = value;}

AST_AGRoutingGroupsDialSave.prototype.setSave = AST_AGRoutingGroupsDialSave_setSave;
//
// Serialize {urn:ast}AGRoutingGroupsDialSave
//
function AST_AGRoutingGroupsDialSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._oldname != null) {
      if (this._oldname == null) {
       xml = xml + '<jns0:oldname xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:oldname>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._oldname);
       xml = xml + '</jns0:oldname>';
      }
     }
    }
    // block for local variables
    {
     if (this._newname != null) {
      if (this._newname == null) {
       xml = xml + '<jns0:newname xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:newname>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._newname);
       xml = xml + '</jns0:newname>';
      }
     }
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingGroupsDialSave.prototype.serialize = AST_AGRoutingGroupsDialSave_serialize;

function AST_AGRoutingGroupsDialSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingGroupsDialSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing oldname');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'oldname')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setOldname(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing newname');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'newname')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setNewname(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_FxsGroupDial_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgChannelSync
//
function AST_AGAlgChannelSync () {
    this.typeMarker = 'AST_AGAlgChannelSync';
    this._sections = null;
    this._lines = null;
}

//
// accessor is AST_AGAlgChannelSync.prototype.getSections
// element get for sections
// - element type is {urn:ast}SectionArr
// - optional element
// - nillable
//
// element set for sections
// setter function is is AST_AGAlgChannelSync.prototype.setSections
//
function AST_AGAlgChannelSync_getSections() { return this._sections;}

AST_AGAlgChannelSync.prototype.getSections = AST_AGAlgChannelSync_getSections;

function AST_AGAlgChannelSync_setSections(value) { this._sections = value;}

AST_AGAlgChannelSync.prototype.setSections = AST_AGAlgChannelSync_setSections;
//
// accessor is AST_AGAlgChannelSync.prototype.getLines
// element get for lines
// - element type is {urn:ast}LineArr
// - optional element
// - nillable
//
// element set for lines
// setter function is is AST_AGAlgChannelSync.prototype.setLines
//
function AST_AGAlgChannelSync_getLines() { return this._lines;}

AST_AGAlgChannelSync.prototype.getLines = AST_AGAlgChannelSync_getLines;

function AST_AGAlgChannelSync_setLines(value) { this._lines = value;}

AST_AGAlgChannelSync.prototype.setLines = AST_AGAlgChannelSync_setLines;
//
// Serialize {urn:ast}AGAlgChannelSync
//
function AST_AGAlgChannelSync_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._sections != null) {
      if (this._sections == null) {
       xml = xml + '<jns0:sections xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._sections.serialize(cxfjsutils, 'jns0:sections', null);
      }
     }
    }
    // block for local variables
    {
     if (this._lines != null) {
      if (this._lines == null) {
       xml = xml + '<jns0:lines xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._lines.serialize(cxfjsutils, 'jns0:lines', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgChannelSync.prototype.serialize = AST_AGAlgChannelSync_serialize;

function AST_AGAlgChannelSync_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgChannelSync();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sections');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'sections')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SectionArr_deserialize(cxfjsutils, curElement);
     }
     newobject.setSections(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing lines');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'lines')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_LineArr_deserialize(cxfjsutils, curElement);
     }
     newobject.setLines(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingGroupsDialDelResponse
//
function AST_AGRoutingGroupsDialDelResponse () {
    this.typeMarker = 'AST_AGRoutingGroupsDialDelResponse';
    this._result = 0;
}

//
// accessor is AST_AGRoutingGroupsDialDelResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGRoutingGroupsDialDelResponse.prototype.setResult
//
function AST_AGRoutingGroupsDialDelResponse_getResult() { return this._result;}

AST_AGRoutingGroupsDialDelResponse.prototype.getResult = AST_AGRoutingGroupsDialDelResponse_getResult;

function AST_AGRoutingGroupsDialDelResponse_setResult(value) { this._result = value;}

AST_AGRoutingGroupsDialDelResponse.prototype.setResult = AST_AGRoutingGroupsDialDelResponse_setResult;
//
// Serialize {urn:ast}AGRoutingGroupsDialDelResponse
//
function AST_AGRoutingGroupsDialDelResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingGroupsDialDelResponse.prototype.serialize = AST_AGRoutingGroupsDialDelResponse_serialize;

function AST_AGRoutingGroupsDialDelResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingGroupsDialDelResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGUcpAlgDriverGetResponse
//
function AST_AGUcpAlgDriverGetResponse () {
    this.typeMarker = 'AST_AGUcpAlgDriverGetResponse';
    this._get = null;
}

//
// accessor is AST_AGUcpAlgDriverGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}UcpAlgDriverGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGUcpAlgDriverGetResponse.prototype.setGet
//
function AST_AGUcpAlgDriverGetResponse_getGet() { return this._get;}

AST_AGUcpAlgDriverGetResponse.prototype.getGet = AST_AGUcpAlgDriverGetResponse_getGet;

function AST_AGUcpAlgDriverGetResponse_setGet(value) { this._get = value;}

AST_AGUcpAlgDriverGetResponse.prototype.setGet = AST_AGUcpAlgDriverGetResponse_setGet;
//
// Serialize {urn:ast}AGUcpAlgDriverGetResponse
//
function AST_AGUcpAlgDriverGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGUcpAlgDriverGetResponse.prototype.serialize = AST_AGUcpAlgDriverGetResponse_serialize;

function AST_AGUcpAlgDriverGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGUcpAlgDriverGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_UcpAlgDriverGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAdvCloudGetResponse
//
function AST_AGAdvCloudGetResponse () {
    this.typeMarker = 'AST_AGAdvCloudGetResponse';
    this._get = null;
}

//
// accessor is AST_AGAdvCloudGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}AdvCloudGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGAdvCloudGetResponse.prototype.setGet
//
function AST_AGAdvCloudGetResponse_getGet() { return this._get;}

AST_AGAdvCloudGetResponse.prototype.getGet = AST_AGAdvCloudGetResponse_getGet;

function AST_AGAdvCloudGetResponse_setGet(value) { this._get = value;}

AST_AGAdvCloudGetResponse.prototype.setGet = AST_AGAdvCloudGetResponse_setGet;
//
// Serialize {urn:ast}AGAdvCloudGetResponse
//
function AST_AGAdvCloudGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAdvCloudGetResponse.prototype.serialize = AST_AGAdvCloudGetResponse_serialize;

function AST_AGAdvCloudGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAdvCloudGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AdvCloudGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkFirewallGetResponse
//
function AST_AGNetworkFirewallGetResponse () {
    this.typeMarker = 'AST_AGNetworkFirewallGetResponse';
    this._get = null;
}

//
// accessor is AST_AGNetworkFirewallGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}UcpNetworkSwitchGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGNetworkFirewallGetResponse.prototype.setGet
//
function AST_AGNetworkFirewallGetResponse_getGet() { return this._get;}

AST_AGNetworkFirewallGetResponse.prototype.getGet = AST_AGNetworkFirewallGetResponse_getGet;

function AST_AGNetworkFirewallGetResponse_setGet(value) { this._get = value;}

AST_AGNetworkFirewallGetResponse.prototype.setGet = AST_AGNetworkFirewallGetResponse_setGet;
//
// Serialize {urn:ast}AGNetworkFirewallGetResponse
//
function AST_AGNetworkFirewallGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkFirewallGetResponse.prototype.serialize = AST_AGNetworkFirewallGetResponse_serialize;

function AST_AGNetworkFirewallGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkFirewallGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_UcpNetworkSwitchGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgChannelRemoveOneResponse
//
function AST_AGAlgChannelRemoveOneResponse () {
    this.typeMarker = 'AST_AGAlgChannelRemoveOneResponse';
    this._result = 0;
}

//
// accessor is AST_AGAlgChannelRemoveOneResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGAlgChannelRemoveOneResponse.prototype.setResult
//
function AST_AGAlgChannelRemoveOneResponse_getResult() { return this._result;}

AST_AGAlgChannelRemoveOneResponse.prototype.getResult = AST_AGAlgChannelRemoveOneResponse_getResult;

function AST_AGAlgChannelRemoveOneResponse_setResult(value) { this._result = value;}

AST_AGAlgChannelRemoveOneResponse.prototype.setResult = AST_AGAlgChannelRemoveOneResponse_setResult;
//
// Serialize {urn:ast}AGAlgChannelRemoveOneResponse
//
function AST_AGAlgChannelRemoveOneResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgChannelRemoveOneResponse.prototype.serialize = AST_AGAlgChannelRemoveOneResponse_serialize;

function AST_AGAlgChannelRemoveOneResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgChannelRemoveOneResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipFxoBindingSave
//
function AST_AGSipFxoBindingSave () {
    this.typeMarker = 'AST_AGSipFxoBindingSave';
    this._roules = null;
}

//
// accessor is AST_AGSipFxoBindingSave.prototype.getRoules
// element get for roules
// - element type is {urn:ast}SipFxoBindingSaveArr
// - optional element
// - nillable
//
// element set for roules
// setter function is is AST_AGSipFxoBindingSave.prototype.setRoules
//
function AST_AGSipFxoBindingSave_getRoules() { return this._roules;}

AST_AGSipFxoBindingSave.prototype.getRoules = AST_AGSipFxoBindingSave_getRoules;

function AST_AGSipFxoBindingSave_setRoules(value) { this._roules = value;}

AST_AGSipFxoBindingSave.prototype.setRoules = AST_AGSipFxoBindingSave_setRoules;
//
// Serialize {urn:ast}AGSipFxoBindingSave
//
function AST_AGSipFxoBindingSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._roules != null) {
      if (this._roules == null) {
       xml = xml + '<jns0:roules xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._roules.serialize(cxfjsutils, 'jns0:roules', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipFxoBindingSave.prototype.serialize = AST_AGSipFxoBindingSave_serialize;

function AST_AGSipFxoBindingSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipFxoBindingSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing roules');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'roules')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SipFxoBindingSaveArr_deserialize(cxfjsutils, curElement);
     }
     newobject.setRoules(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGCommitAll
//
function AST_AGCommitAll () {
    this.typeMarker = 'AST_AGCommitAll';
    this._message = null;
}

//
// accessor is AST_AGCommitAll.prototype.getMessage
// element get for message
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for message
// setter function is is AST_AGCommitAll.prototype.setMessage
//
function AST_AGCommitAll_getMessage() { return this._message;}

AST_AGCommitAll.prototype.getMessage = AST_AGCommitAll_getMessage;

function AST_AGCommitAll_setMessage(value) { this._message = value;}

AST_AGCommitAll.prototype.setMessage = AST_AGCommitAll_setMessage;
//
// Serialize {urn:ast}AGCommitAll
//
function AST_AGCommitAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._message != null) {
      if (this._message == null) {
       xml = xml + '<jns0:message xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:message>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._message);
       xml = xml + '</jns0:message>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGCommitAll.prototype.serialize = AST_AGCommitAll_serialize;

function AST_AGCommitAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGCommitAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing message');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'message')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setMessage(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgSecSettingCreateKeyResponse
//
function AST_AGAlgSecSettingCreateKeyResponse () {
    this.typeMarker = 'AST_AGAlgSecSettingCreateKeyResponse';
    this._result = 0;
}

//
// accessor is AST_AGAlgSecSettingCreateKeyResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGAlgSecSettingCreateKeyResponse.prototype.setResult
//
function AST_AGAlgSecSettingCreateKeyResponse_getResult() { return this._result;}

AST_AGAlgSecSettingCreateKeyResponse.prototype.getResult = AST_AGAlgSecSettingCreateKeyResponse_getResult;

function AST_AGAlgSecSettingCreateKeyResponse_setResult(value) { this._result = value;}

AST_AGAlgSecSettingCreateKeyResponse.prototype.setResult = AST_AGAlgSecSettingCreateKeyResponse_setResult;
//
// Serialize {urn:ast}AGAlgSecSettingCreateKeyResponse
//
function AST_AGAlgSecSettingCreateKeyResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgSecSettingCreateKeyResponse.prototype.serialize = AST_AGAlgSecSettingCreateKeyResponse_serialize;

function AST_AGAlgSecSettingCreateKeyResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgSecSettingCreateKeyResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}IaxGetAll
//
function AST_IaxGetAll () {
    this.typeMarker = 'AST_IaxGetAll';
}

//
// Serialize {urn:ast}IaxGetAll
//
function AST_IaxGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_IaxGetAll.prototype.serialize = AST_IaxGetAll_serialize;

function AST_IaxGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_IaxGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGjConIoSettingsSave
//
function AST_AGjConIoSettingsSave () {
    this.typeMarker = 'AST_AGjConIoSettingsSave';
    this._board = 0;
    this._IoSettings = null;
}

//
// accessor is AST_AGjConIoSettingsSave.prototype.getBoard
// element get for board
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for board
// setter function is is AST_AGjConIoSettingsSave.prototype.setBoard
//
function AST_AGjConIoSettingsSave_getBoard() { return this._board;}

AST_AGjConIoSettingsSave.prototype.getBoard = AST_AGjConIoSettingsSave_getBoard;

function AST_AGjConIoSettingsSave_setBoard(value) { this._board = value;}

AST_AGjConIoSettingsSave.prototype.setBoard = AST_AGjConIoSettingsSave_setBoard;
//
// accessor is AST_AGjConIoSettingsSave.prototype.getIoSettings
// element get for IoSettings
// - element type is {urn:ast}IoSettingsOne
// - optional element
// - nillable
//
// element set for IoSettings
// setter function is is AST_AGjConIoSettingsSave.prototype.setIoSettings
//
function AST_AGjConIoSettingsSave_getIoSettings() { return this._IoSettings;}

AST_AGjConIoSettingsSave.prototype.getIoSettings = AST_AGjConIoSettingsSave_getIoSettings;

function AST_AGjConIoSettingsSave_setIoSettings(value) { this._IoSettings = value;}

AST_AGjConIoSettingsSave.prototype.setIoSettings = AST_AGjConIoSettingsSave_setIoSettings;
//
// Serialize {urn:ast}AGjConIoSettingsSave
//
function AST_AGjConIoSettingsSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:board>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._board);
     xml = xml + '</jns0:board>';
    }
    // block for local variables
    {
     if (this._IoSettings != null) {
      if (this._IoSettings == null) {
       xml = xml + '<jns0:IoSettings xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._IoSettings.serialize(cxfjsutils, 'jns0:IoSettings', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGjConIoSettingsSave.prototype.serialize = AST_AGjConIoSettingsSave_serialize;

function AST_AGjConIoSettingsSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGjConIoSettingsSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing board');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setBoard(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing IoSettings');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'IoSettings')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_IoSettingsOne_deserialize(cxfjsutils, curElement);
     }
     newobject.setIoSettings(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgChannelSaveResponse
//
function AST_AGAlgChannelSaveResponse () {
    this.typeMarker = 'AST_AGAlgChannelSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGAlgChannelSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGAlgChannelSaveResponse.prototype.setResult
//
function AST_AGAlgChannelSaveResponse_getResult() { return this._result;}

AST_AGAlgChannelSaveResponse.prototype.getResult = AST_AGAlgChannelSaveResponse_getResult;

function AST_AGAlgChannelSaveResponse_setResult(value) { this._result = value;}

AST_AGAlgChannelSaveResponse.prototype.setResult = AST_AGAlgChannelSaveResponse_setResult;
//
// Serialize {urn:ast}AGAlgChannelSaveResponse
//
function AST_AGAlgChannelSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgChannelSaveResponse.prototype.serialize = AST_AGAlgChannelSaveResponse_serialize;

function AST_AGAlgChannelSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgChannelSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAdvAstfileeditorEditGetOne
//
function AST_AGAdvAstfileeditorEditGetOne () {
    this.typeMarker = 'AST_AGAdvAstfileeditorEditGetOne';
    this._fname = null;
}

//
// accessor is AST_AGAdvAstfileeditorEditGetOne.prototype.getFname
// element get for fname
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for fname
// setter function is is AST_AGAdvAstfileeditorEditGetOne.prototype.setFname
//
function AST_AGAdvAstfileeditorEditGetOne_getFname() { return this._fname;}

AST_AGAdvAstfileeditorEditGetOne.prototype.getFname = AST_AGAdvAstfileeditorEditGetOne_getFname;

function AST_AGAdvAstfileeditorEditGetOne_setFname(value) { this._fname = value;}

AST_AGAdvAstfileeditorEditGetOne.prototype.setFname = AST_AGAdvAstfileeditorEditGetOne_setFname;
//
// Serialize {urn:ast}AGAdvAstfileeditorEditGetOne
//
function AST_AGAdvAstfileeditorEditGetOne_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._fname != null) {
      if (this._fname == null) {
       xml = xml + '<jns0:fname xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:fname>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._fname);
       xml = xml + '</jns0:fname>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAdvAstfileeditorEditGetOne.prototype.serialize = AST_AGAdvAstfileeditorEditGetOne_serialize;

function AST_AGAdvAstfileeditorEditGetOne_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAdvAstfileeditorEditGetOne();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fname');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'fname')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setFname(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRegisterParaSave
//
function AST_AGRegisterParaSave () {
    this.typeMarker = 'AST_AGRegisterParaSave';
    this._para = null;
}

//
// accessor is AST_AGRegisterParaSave.prototype.getPara
// element get for para
// - element type is {urn:ast}RegisterPara
// - optional element
// - nillable
//
// element set for para
// setter function is is AST_AGRegisterParaSave.prototype.setPara
//
function AST_AGRegisterParaSave_getPara() { return this._para;}

AST_AGRegisterParaSave.prototype.getPara = AST_AGRegisterParaSave_getPara;

function AST_AGRegisterParaSave_setPara(value) { this._para = value;}

AST_AGRegisterParaSave.prototype.setPara = AST_AGRegisterParaSave_setPara;
//
// Serialize {urn:ast}AGRegisterParaSave
//
function AST_AGRegisterParaSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._para != null) {
      if (this._para == null) {
       xml = xml + '<jns0:para xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._para.serialize(cxfjsutils, 'jns0:para', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRegisterParaSave.prototype.serialize = AST_AGRegisterParaSave_serialize;

function AST_AGRegisterParaSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRegisterParaSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing para');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'para')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_RegisterPara_deserialize(cxfjsutils, curElement);
     }
     newobject.setPara(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSyncAllResponse
//
function AST_AGSyncAllResponse () {
    this.typeMarker = 'AST_AGSyncAllResponse';
    this._result = 0;
}

//
// accessor is AST_AGSyncAllResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSyncAllResponse.prototype.setResult
//
function AST_AGSyncAllResponse_getResult() { return this._result;}

AST_AGSyncAllResponse.prototype.getResult = AST_AGSyncAllResponse_getResult;

function AST_AGSyncAllResponse_setResult(value) { this._result = value;}

AST_AGSyncAllResponse.prototype.setResult = AST_AGSyncAllResponse_setResult;
//
// Serialize {urn:ast}AGSyncAllResponse
//
function AST_AGSyncAllResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSyncAllResponse.prototype.serialize = AST_AGSyncAllResponse_serialize;

function AST_AGSyncAllResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSyncAllResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgSecSettingDeleteFile
//
function AST_AGAlgSecSettingDeleteFile () {
    this.typeMarker = 'AST_AGAlgSecSettingDeleteFile';
    this._filename = null;
}

//
// accessor is AST_AGAlgSecSettingDeleteFile.prototype.getFilename
// element get for filename
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for filename
// setter function is is AST_AGAlgSecSettingDeleteFile.prototype.setFilename
//
function AST_AGAlgSecSettingDeleteFile_getFilename() { return this._filename;}

AST_AGAlgSecSettingDeleteFile.prototype.getFilename = AST_AGAlgSecSettingDeleteFile_getFilename;

function AST_AGAlgSecSettingDeleteFile_setFilename(value) { this._filename = value;}

AST_AGAlgSecSettingDeleteFile.prototype.setFilename = AST_AGAlgSecSettingDeleteFile_setFilename;
//
// Serialize {urn:ast}AGAlgSecSettingDeleteFile
//
function AST_AGAlgSecSettingDeleteFile_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._filename != null) {
      if (this._filename == null) {
       xml = xml + '<jns0:filename xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:filename>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._filename);
       xml = xml + '</jns0:filename>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgSecSettingDeleteFile.prototype.serialize = AST_AGAlgSecSettingDeleteFile_serialize;

function AST_AGAlgSecSettingDeleteFile_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgSecSettingDeleteFile();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing filename');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'filename')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setFilename(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipFxoBindingSaveResponse
//
function AST_AGSipFxoBindingSaveResponse () {
    this.typeMarker = 'AST_AGSipFxoBindingSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGSipFxoBindingSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSipFxoBindingSaveResponse.prototype.setResult
//
function AST_AGSipFxoBindingSaveResponse_getResult() { return this._result;}

AST_AGSipFxoBindingSaveResponse.prototype.getResult = AST_AGSipFxoBindingSaveResponse_getResult;

function AST_AGSipFxoBindingSaveResponse_setResult(value) { this._result = value;}

AST_AGSipFxoBindingSaveResponse.prototype.setResult = AST_AGSipFxoBindingSaveResponse_setResult;
//
// Serialize {urn:ast}AGSipFxoBindingSaveResponse
//
function AST_AGSipFxoBindingSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipFxoBindingSaveResponse.prototype.serialize = AST_AGSipFxoBindingSaveResponse_serialize;

function AST_AGSipFxoBindingSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipFxoBindingSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGUcpSystemToolsSndRecordStopResponse
//
function AST_AGUcpSystemToolsSndRecordStopResponse () {
    this.typeMarker = 'AST_AGUcpSystemToolsSndRecordStopResponse';
    this._result = 0;
}

//
// accessor is AST_AGUcpSystemToolsSndRecordStopResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGUcpSystemToolsSndRecordStopResponse.prototype.setResult
//
function AST_AGUcpSystemToolsSndRecordStopResponse_getResult() { return this._result;}

AST_AGUcpSystemToolsSndRecordStopResponse.prototype.getResult = AST_AGUcpSystemToolsSndRecordStopResponse_getResult;

function AST_AGUcpSystemToolsSndRecordStopResponse_setResult(value) { this._result = value;}

AST_AGUcpSystemToolsSndRecordStopResponse.prototype.setResult = AST_AGUcpSystemToolsSndRecordStopResponse_setResult;
//
// Serialize {urn:ast}AGUcpSystemToolsSndRecordStopResponse
//
function AST_AGUcpSystemToolsSndRecordStopResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGUcpSystemToolsSndRecordStopResponse.prototype.serialize = AST_AGUcpSystemToolsSndRecordStopResponse_serialize;

function AST_AGUcpSystemToolsSndRecordStopResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGUcpSystemToolsSndRecordStopResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSysGeneralSave
//
function AST_AGSysGeneralSave () {
    this.typeMarker = 'AST_AGSysGeneralSave';
    this._save = null;
}

//
// accessor is AST_AGSysGeneralSave.prototype.getSave
// element get for save
// - element type is {urn:ast}SysGeneralSave
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGSysGeneralSave.prototype.setSave
//
function AST_AGSysGeneralSave_getSave() { return this._save;}

AST_AGSysGeneralSave.prototype.getSave = AST_AGSysGeneralSave_getSave;

function AST_AGSysGeneralSave_setSave(value) { this._save = value;}

AST_AGSysGeneralSave.prototype.setSave = AST_AGSysGeneralSave_setSave;
//
// Serialize {urn:ast}AGSysGeneralSave
//
function AST_AGSysGeneralSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSysGeneralSave.prototype.serialize = AST_AGSysGeneralSave_serialize;

function AST_AGSysGeneralSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSysGeneralSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SysGeneralSave_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRS485SetBaudrate
//
function AST_AGRS485SetBaudrate () {
    this.typeMarker = 'AST_AGRS485SetBaudrate';
    this._baudrate = 0;
    this._DevNum = '';
}

//
// accessor is AST_AGRS485SetBaudrate.prototype.getBaudrate
// element get for baudrate
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for baudrate
// setter function is is AST_AGRS485SetBaudrate.prototype.setBaudrate
//
function AST_AGRS485SetBaudrate_getBaudrate() { return this._baudrate;}

AST_AGRS485SetBaudrate.prototype.getBaudrate = AST_AGRS485SetBaudrate_getBaudrate;

function AST_AGRS485SetBaudrate_setBaudrate(value) { this._baudrate = value;}

AST_AGRS485SetBaudrate.prototype.setBaudrate = AST_AGRS485SetBaudrate_setBaudrate;
//
// accessor is AST_AGRS485SetBaudrate.prototype.getDevNum
// element get for DevNum
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for DevNum
// setter function is is AST_AGRS485SetBaudrate.prototype.setDevNum
//
function AST_AGRS485SetBaudrate_getDevNum() { return this._DevNum;}

AST_AGRS485SetBaudrate.prototype.getDevNum = AST_AGRS485SetBaudrate_getDevNum;

function AST_AGRS485SetBaudrate_setDevNum(value) { this._DevNum = value;}

AST_AGRS485SetBaudrate.prototype.setDevNum = AST_AGRS485SetBaudrate_setDevNum;
//
// Serialize {urn:ast}AGRS485SetBaudrate
//
function AST_AGRS485SetBaudrate_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:baudrate>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._baudrate);
     xml = xml + '</jns0:baudrate>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:DevNum>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._DevNum);
     xml = xml + '</jns0:DevNum>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRS485SetBaudrate.prototype.serialize = AST_AGRS485SetBaudrate_serialize;

function AST_AGRS485SetBaudrate_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRS485SetBaudrate();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing baudrate');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setBaudrate(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing DevNum');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setDevNum(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipSecurityGet
//
function AST_AGSipSecurityGet () {
    this.typeMarker = 'AST_AGSipSecurityGet';
}

//
// Serialize {urn:ast}AGSipSecurityGet
//
function AST_AGSipSecurityGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipSecurityGet.prototype.serialize = AST_AGSipSecurityGet_serialize;

function AST_AGSipSecurityGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipSecurityGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemToolsAsteriskRebootResponse
//
function AST_AGSystemToolsAsteriskRebootResponse () {
    this.typeMarker = 'AST_AGSystemToolsAsteriskRebootResponse';
    this._result = 0;
}

//
// accessor is AST_AGSystemToolsAsteriskRebootResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSystemToolsAsteriskRebootResponse.prototype.setResult
//
function AST_AGSystemToolsAsteriskRebootResponse_getResult() { return this._result;}

AST_AGSystemToolsAsteriskRebootResponse.prototype.getResult = AST_AGSystemToolsAsteriskRebootResponse_getResult;

function AST_AGSystemToolsAsteriskRebootResponse_setResult(value) { this._result = value;}

AST_AGSystemToolsAsteriskRebootResponse.prototype.setResult = AST_AGSystemToolsAsteriskRebootResponse_setResult;
//
// Serialize {urn:ast}AGSystemToolsAsteriskRebootResponse
//
function AST_AGSystemToolsAsteriskRebootResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemToolsAsteriskRebootResponse.prototype.serialize = AST_AGSystemToolsAsteriskRebootResponse_serialize;

function AST_AGSystemToolsAsteriskRebootResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemToolsAsteriskRebootResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGFxsSpeedialProvisionSave
//
function AST_AGFxsSpeedialProvisionSave () {
    this.typeMarker = 'AST_AGFxsSpeedialProvisionSave';
    this._dialarr = null;
}

//
// accessor is AST_AGFxsSpeedialProvisionSave.prototype.getDialarr
// element get for dialarr
// - element type is {urn:ast}ProvFxsSpeedDailArr
// - optional element
// - nillable
//
// element set for dialarr
// setter function is is AST_AGFxsSpeedialProvisionSave.prototype.setDialarr
//
function AST_AGFxsSpeedialProvisionSave_getDialarr() { return this._dialarr;}

AST_AGFxsSpeedialProvisionSave.prototype.getDialarr = AST_AGFxsSpeedialProvisionSave_getDialarr;

function AST_AGFxsSpeedialProvisionSave_setDialarr(value) { this._dialarr = value;}

AST_AGFxsSpeedialProvisionSave.prototype.setDialarr = AST_AGFxsSpeedialProvisionSave_setDialarr;
//
// Serialize {urn:ast}AGFxsSpeedialProvisionSave
//
function AST_AGFxsSpeedialProvisionSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._dialarr != null) {
      if (this._dialarr == null) {
       xml = xml + '<jns0:dialarr xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._dialarr.serialize(cxfjsutils, 'jns0:dialarr', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGFxsSpeedialProvisionSave.prototype.serialize = AST_AGFxsSpeedialProvisionSave_serialize;

function AST_AGFxsSpeedialProvisionSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGFxsSpeedialProvisionSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing dialarr');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'dialarr')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_ProvFxsSpeedDailArr_deserialize(cxfjsutils, curElement);
     }
     newobject.setDialarr(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingRulsGetAll
//
function AST_AGRoutingRulsGetAll () {
    this.typeMarker = 'AST_AGRoutingRulsGetAll';
}

//
// Serialize {urn:ast}AGRoutingRulsGetAll
//
function AST_AGRoutingRulsGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingRulsGetAll.prototype.serialize = AST_AGRoutingRulsGetAll_serialize;

function AST_AGRoutingRulsGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingRulsGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRegisterParaGetResponse
//
function AST_AGRegisterParaGetResponse () {
    this.typeMarker = 'AST_AGRegisterParaGetResponse';
    this._get = null;
}

//
// accessor is AST_AGRegisterParaGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}RegisterParaGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGRegisterParaGetResponse.prototype.setGet
//
function AST_AGRegisterParaGetResponse_getGet() { return this._get;}

AST_AGRegisterParaGetResponse.prototype.getGet = AST_AGRegisterParaGetResponse_getGet;

function AST_AGRegisterParaGetResponse_setGet(value) { this._get = value;}

AST_AGRegisterParaGetResponse.prototype.setGet = AST_AGRegisterParaGetResponse_setGet;
//
// Serialize {urn:ast}AGRegisterParaGetResponse
//
function AST_AGRegisterParaGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRegisterParaGetResponse.prototype.serialize = AST_AGRegisterParaGetResponse_serialize;

function AST_AGRegisterParaGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRegisterParaGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_RegisterParaGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingRulsGetAllResponse
//
function AST_AGRoutingRulsGetAllResponse () {
    this.typeMarker = 'AST_AGRoutingRulsGetAllResponse';
    this._get = null;
}

//
// accessor is AST_AGRoutingRulsGetAllResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}RoutingRulesGetAll
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGRoutingRulsGetAllResponse.prototype.setGet
//
function AST_AGRoutingRulsGetAllResponse_getGet() { return this._get;}

AST_AGRoutingRulsGetAllResponse.prototype.getGet = AST_AGRoutingRulsGetAllResponse_getGet;

function AST_AGRoutingRulsGetAllResponse_setGet(value) { this._get = value;}

AST_AGRoutingRulsGetAllResponse.prototype.setGet = AST_AGRoutingRulsGetAllResponse_setGet;
//
// Serialize {urn:ast}AGRoutingRulsGetAllResponse
//
function AST_AGRoutingRulsGetAllResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingRulsGetAllResponse.prototype.serialize = AST_AGRoutingRulsGetAllResponse_serialize;

function AST_AGRoutingRulsGetAllResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingRulsGetAllResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_RoutingRulesGetAll_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAdvTr069GetStatus
//
function AST_AGAdvTr069GetStatus () {
    this.typeMarker = 'AST_AGAdvTr069GetStatus';
}

//
// Serialize {urn:ast}AGAdvTr069GetStatus
//
function AST_AGAdvTr069GetStatus_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAdvTr069GetStatus.prototype.serialize = AST_AGAdvTr069GetStatus_serialize;

function AST_AGAdvTr069GetStatus_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAdvTr069GetStatus();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSysLoginGet
//
function AST_AGSysLoginGet () {
    this.typeMarker = 'AST_AGSysLoginGet';
}

//
// Serialize {urn:ast}AGSysLoginGet
//
function AST_AGSysLoginGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSysLoginGet.prototype.serialize = AST_AGSysLoginGet_serialize;

function AST_AGSysLoginGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSysLoginGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingGroupsDialGetAll
//
function AST_AGRoutingGroupsDialGetAll () {
    this.typeMarker = 'AST_AGRoutingGroupsDialGetAll';
}

//
// Serialize {urn:ast}AGRoutingGroupsDialGetAll
//
function AST_AGRoutingGroupsDialGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingGroupsDialGetAll.prototype.serialize = AST_AGRoutingGroupsDialGetAll_serialize;

function AST_AGRoutingGroupsDialGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingGroupsDialGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RoutingSaveResponse
//
function AST_RoutingSaveResponse () {
    this.typeMarker = 'AST_RoutingSaveResponse';
    this._result = 0;
}

//
// accessor is AST_RoutingSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_RoutingSaveResponse.prototype.setResult
//
function AST_RoutingSaveResponse_getResult() { return this._result;}

AST_RoutingSaveResponse.prototype.getResult = AST_RoutingSaveResponse_getResult;

function AST_RoutingSaveResponse_setResult(value) { this._result = value;}

AST_RoutingSaveResponse.prototype.setResult = AST_RoutingSaveResponse_setResult;
//
// Serialize {urn:ast}RoutingSaveResponse
//
function AST_RoutingSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RoutingSaveResponse.prototype.serialize = AST_RoutingSaveResponse_serialize;

function AST_RoutingSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_RoutingSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgGlbSettingGetOne
//
function AST_AGAlgGlbSettingGetOne () {
    this.typeMarker = 'AST_AGAlgGlbSettingGetOne';
    this._section = null;
}

//
// accessor is AST_AGAlgGlbSettingGetOne.prototype.getSection
// element get for section
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for section
// setter function is is AST_AGAlgGlbSettingGetOne.prototype.setSection
//
function AST_AGAlgGlbSettingGetOne_getSection() { return this._section;}

AST_AGAlgGlbSettingGetOne.prototype.getSection = AST_AGAlgGlbSettingGetOne_getSection;

function AST_AGAlgGlbSettingGetOne_setSection(value) { this._section = value;}

AST_AGAlgGlbSettingGetOne.prototype.setSection = AST_AGAlgGlbSettingGetOne_setSection;
//
// Serialize {urn:ast}AGAlgGlbSettingGetOne
//
function AST_AGAlgGlbSettingGetOne_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._section != null) {
      if (this._section == null) {
       xml = xml + '<jns0:section xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:section>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._section);
       xml = xml + '</jns0:section>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgGlbSettingGetOne.prototype.serialize = AST_AGAlgGlbSettingGetOne_serialize;

function AST_AGAlgGlbSettingGetOne_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgGlbSettingGetOne();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing section');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'section')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setSection(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingAdvSave
//
function AST_AGRoutingAdvSave () {
    this.typeMarker = 'AST_AGRoutingAdvSave';
    this._save = null;
}

//
// accessor is AST_AGRoutingAdvSave.prototype.getSave
// element get for save
// - element type is {urn:ast}RoutingAdvSave
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGRoutingAdvSave.prototype.setSave
//
function AST_AGRoutingAdvSave_getSave() { return this._save;}

AST_AGRoutingAdvSave.prototype.getSave = AST_AGRoutingAdvSave_getSave;

function AST_AGRoutingAdvSave_setSave(value) { this._save = value;}

AST_AGRoutingAdvSave.prototype.setSave = AST_AGRoutingAdvSave_setSave;
//
// Serialize {urn:ast}AGRoutingAdvSave
//
function AST_AGRoutingAdvSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingAdvSave.prototype.serialize = AST_AGRoutingAdvSave_serialize;

function AST_AGRoutingAdvSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingAdvSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_RoutingAdvSave_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingAdvGet
//
function AST_AGRoutingAdvGet () {
    this.typeMarker = 'AST_AGRoutingAdvGet';
}

//
// Serialize {urn:ast}AGRoutingAdvGet
//
function AST_AGRoutingAdvGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingAdvGet.prototype.serialize = AST_AGRoutingAdvGet_serialize;

function AST_AGRoutingAdvGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingAdvGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGCommitLookupResponse
//
function AST_AGCommitLookupResponse () {
    this.typeMarker = 'AST_AGCommitLookupResponse';
    this._get = null;
}

//
// accessor is AST_AGCommitLookupResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}LookupGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGCommitLookupResponse.prototype.setGet
//
function AST_AGCommitLookupResponse_getGet() { return this._get;}

AST_AGCommitLookupResponse.prototype.getGet = AST_AGCommitLookupResponse_getGet;

function AST_AGCommitLookupResponse_setGet(value) { this._get = value;}

AST_AGCommitLookupResponse.prototype.setGet = AST_AGCommitLookupResponse_setGet;
//
// Serialize {urn:ast}AGCommitLookupResponse
//
function AST_AGCommitLookupResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGCommitLookupResponse.prototype.serialize = AST_AGCommitLookupResponse_serialize;

function AST_AGCommitLookupResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGCommitLookupResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_LookupGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RoutingGetAll
//
function AST_RoutingGetAll () {
    this.typeMarker = 'AST_RoutingGetAll';
}

//
// Serialize {urn:ast}RoutingGetAll
//
function AST_RoutingGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RoutingGetAll.prototype.serialize = AST_RoutingGetAll_serialize;

function AST_RoutingGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_RoutingGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAdvCloudGetStatus
//
function AST_AGAdvCloudGetStatus () {
    this.typeMarker = 'AST_AGAdvCloudGetStatus';
}

//
// Serialize {urn:ast}AGAdvCloudGetStatus
//
function AST_AGAdvCloudGetStatus_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAdvCloudGetStatus.prototype.serialize = AST_AGAdvCloudGetStatus_serialize;

function AST_AGAdvCloudGetStatus_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAdvCloudGetStatus();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSetRemoteProvisionAddressResponse
//
function AST_AGSetRemoteProvisionAddressResponse () {
    this.typeMarker = 'AST_AGSetRemoteProvisionAddressResponse';
    this._result = 0;
}

//
// accessor is AST_AGSetRemoteProvisionAddressResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSetRemoteProvisionAddressResponse.prototype.setResult
//
function AST_AGSetRemoteProvisionAddressResponse_getResult() { return this._result;}

AST_AGSetRemoteProvisionAddressResponse.prototype.getResult = AST_AGSetRemoteProvisionAddressResponse_getResult;

function AST_AGSetRemoteProvisionAddressResponse_setResult(value) { this._result = value;}

AST_AGSetRemoteProvisionAddressResponse.prototype.setResult = AST_AGSetRemoteProvisionAddressResponse_setResult;
//
// Serialize {urn:ast}AGSetRemoteProvisionAddressResponse
//
function AST_AGSetRemoteProvisionAddressResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSetRemoteProvisionAddressResponse.prototype.serialize = AST_AGSetRemoteProvisionAddressResponse_serialize;

function AST_AGSetRemoteProvisionAddressResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSetRemoteProvisionAddressResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSysGeneralDebug
//
function AST_AGSysGeneralDebug () {
    this.typeMarker = 'AST_AGSysGeneralDebug';
    this._debug = 0;
}

//
// accessor is AST_AGSysGeneralDebug.prototype.getDebug
// element get for debug
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for debug
// setter function is is AST_AGSysGeneralDebug.prototype.setDebug
//
function AST_AGSysGeneralDebug_getDebug() { return this._debug;}

AST_AGSysGeneralDebug.prototype.getDebug = AST_AGSysGeneralDebug_getDebug;

function AST_AGSysGeneralDebug_setDebug(value) { this._debug = value;}

AST_AGSysGeneralDebug.prototype.setDebug = AST_AGSysGeneralDebug_setDebug;
//
// Serialize {urn:ast}AGSysGeneralDebug
//
function AST_AGSysGeneralDebug_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:debug>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._debug);
     xml = xml + '</jns0:debug>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSysGeneralDebug.prototype.serialize = AST_AGSysGeneralDebug_serialize;

function AST_AGSysGeneralDebug_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSysGeneralDebug();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing debug');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setDebug(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemModuleUpdateTftpResponse
//
function AST_AGSystemModuleUpdateTftpResponse () {
    this.typeMarker = 'AST_AGSystemModuleUpdateTftpResponse';
    this._result = 0;
}

//
// accessor is AST_AGSystemModuleUpdateTftpResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSystemModuleUpdateTftpResponse.prototype.setResult
//
function AST_AGSystemModuleUpdateTftpResponse_getResult() { return this._result;}

AST_AGSystemModuleUpdateTftpResponse.prototype.getResult = AST_AGSystemModuleUpdateTftpResponse_getResult;

function AST_AGSystemModuleUpdateTftpResponse_setResult(value) { this._result = value;}

AST_AGSystemModuleUpdateTftpResponse.prototype.setResult = AST_AGSystemModuleUpdateTftpResponse_setResult;
//
// Serialize {urn:ast}AGSystemModuleUpdateTftpResponse
//
function AST_AGSystemModuleUpdateTftpResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemModuleUpdateTftpResponse.prototype.serialize = AST_AGSystemModuleUpdateTftpResponse_serialize;

function AST_AGSystemModuleUpdateTftpResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemModuleUpdateTftpResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGLogSettingsGetResponse
//
function AST_AGLogSettingsGetResponse () {
    this.typeMarker = 'AST_AGLogSettingsGetResponse';
    this._get = null;
}

//
// accessor is AST_AGLogSettingsGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}LogSettingGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGLogSettingsGetResponse.prototype.setGet
//
function AST_AGLogSettingsGetResponse_getGet() { return this._get;}

AST_AGLogSettingsGetResponse.prototype.getGet = AST_AGLogSettingsGetResponse_getGet;

function AST_AGLogSettingsGetResponse_setGet(value) { this._get = value;}

AST_AGLogSettingsGetResponse.prototype.setGet = AST_AGLogSettingsGetResponse_setGet;
//
// Serialize {urn:ast}AGLogSettingsGetResponse
//
function AST_AGLogSettingsGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGLogSettingsGetResponse.prototype.serialize = AST_AGLogSettingsGetResponse_serialize;

function AST_AGLogSettingsGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGLogSettingsGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_LogSettingGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgSecSettingDeleteKey
//
function AST_AGAlgSecSettingDeleteKey () {
    this.typeMarker = 'AST_AGAlgSecSettingDeleteKey';
    this._section = null;
}

//
// accessor is AST_AGAlgSecSettingDeleteKey.prototype.getSection
// element get for section
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for section
// setter function is is AST_AGAlgSecSettingDeleteKey.prototype.setSection
//
function AST_AGAlgSecSettingDeleteKey_getSection() { return this._section;}

AST_AGAlgSecSettingDeleteKey.prototype.getSection = AST_AGAlgSecSettingDeleteKey_getSection;

function AST_AGAlgSecSettingDeleteKey_setSection(value) { this._section = value;}

AST_AGAlgSecSettingDeleteKey.prototype.setSection = AST_AGAlgSecSettingDeleteKey_setSection;
//
// Serialize {urn:ast}AGAlgSecSettingDeleteKey
//
function AST_AGAlgSecSettingDeleteKey_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._section != null) {
      if (this._section == null) {
       xml = xml + '<jns0:section xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:section>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._section);
       xml = xml + '</jns0:section>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgSecSettingDeleteKey.prototype.serialize = AST_AGAlgSecSettingDeleteKey_serialize;

function AST_AGAlgSecSettingDeleteKey_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgSecSettingDeleteKey();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing section');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'section')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setSection(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSysGeneralGetResponse
//
function AST_AGSysGeneralGetResponse () {
    this.typeMarker = 'AST_AGSysGeneralGetResponse';
    this._get = null;
}

//
// accessor is AST_AGSysGeneralGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}SysGeneralGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGSysGeneralGetResponse.prototype.setGet
//
function AST_AGSysGeneralGetResponse_getGet() { return this._get;}

AST_AGSysGeneralGetResponse.prototype.getGet = AST_AGSysGeneralGetResponse_getGet;

function AST_AGSysGeneralGetResponse_setGet(value) { this._get = value;}

AST_AGSysGeneralGetResponse.prototype.setGet = AST_AGSysGeneralGetResponse_setGet;
//
// Serialize {urn:ast}AGSysGeneralGetResponse
//
function AST_AGSysGeneralGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSysGeneralGetResponse.prototype.serialize = AST_AGSysGeneralGetResponse_serialize;

function AST_AGSysGeneralGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSysGeneralGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SysGeneralGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemAutoUpdateSaveResponse
//
function AST_AGSystemAutoUpdateSaveResponse () {
    this.typeMarker = 'AST_AGSystemAutoUpdateSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGSystemAutoUpdateSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSystemAutoUpdateSaveResponse.prototype.setResult
//
function AST_AGSystemAutoUpdateSaveResponse_getResult() { return this._result;}

AST_AGSystemAutoUpdateSaveResponse.prototype.getResult = AST_AGSystemAutoUpdateSaveResponse_getResult;

function AST_AGSystemAutoUpdateSaveResponse_setResult(value) { this._result = value;}

AST_AGSystemAutoUpdateSaveResponse.prototype.setResult = AST_AGSystemAutoUpdateSaveResponse_setResult;
//
// Serialize {urn:ast}AGSystemAutoUpdateSaveResponse
//
function AST_AGSystemAutoUpdateSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemAutoUpdateSaveResponse.prototype.serialize = AST_AGSystemAutoUpdateSaveResponse_serialize;

function AST_AGSystemAutoUpdateSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemAutoUpdateSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgPickupGet
//
function AST_AGAlgPickupGet () {
    this.typeMarker = 'AST_AGAlgPickupGet';
}

//
// Serialize {urn:ast}AGAlgPickupGet
//
function AST_AGAlgPickupGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgPickupGet.prototype.serialize = AST_AGAlgPickupGet_serialize;

function AST_AGAlgPickupGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgPickupGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGTagAdd
//
function AST_AGTagAdd () {
    this.typeMarker = 'AST_AGTagAdd';
    this._message = null;
}

//
// accessor is AST_AGTagAdd.prototype.getMessage
// element get for message
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for message
// setter function is is AST_AGTagAdd.prototype.setMessage
//
function AST_AGTagAdd_getMessage() { return this._message;}

AST_AGTagAdd.prototype.getMessage = AST_AGTagAdd_getMessage;

function AST_AGTagAdd_setMessage(value) { this._message = value;}

AST_AGTagAdd.prototype.setMessage = AST_AGTagAdd_setMessage;
//
// Serialize {urn:ast}AGTagAdd
//
function AST_AGTagAdd_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._message != null) {
      if (this._message == null) {
       xml = xml + '<jns0:message xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:message>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._message);
       xml = xml + '</jns0:message>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGTagAdd.prototype.serialize = AST_AGTagAdd_serialize;

function AST_AGTagAdd_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGTagAdd();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing message');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'message')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setMessage(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemDHCPUpdateGetResponse
//
function AST_AGSystemDHCPUpdateGetResponse () {
    this.typeMarker = 'AST_AGSystemDHCPUpdateGetResponse';
    this._get = null;
}

//
// accessor is AST_AGSystemDHCPUpdateGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}DHCPUpdateGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGSystemDHCPUpdateGetResponse.prototype.setGet
//
function AST_AGSystemDHCPUpdateGetResponse_getGet() { return this._get;}

AST_AGSystemDHCPUpdateGetResponse.prototype.getGet = AST_AGSystemDHCPUpdateGetResponse_getGet;

function AST_AGSystemDHCPUpdateGetResponse_setGet(value) { this._get = value;}

AST_AGSystemDHCPUpdateGetResponse.prototype.setGet = AST_AGSystemDHCPUpdateGetResponse_setGet;
//
// Serialize {urn:ast}AGSystemDHCPUpdateGetResponse
//
function AST_AGSystemDHCPUpdateGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemDHCPUpdateGetResponse.prototype.serialize = AST_AGSystemDHCPUpdateGetResponse_serialize;

function AST_AGSystemDHCPUpdateGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemDHCPUpdateGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_DHCPUpdateGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemToolsUpdateOnlineResponse
//
function AST_AGSystemToolsUpdateOnlineResponse () {
    this.typeMarker = 'AST_AGSystemToolsUpdateOnlineResponse';
    this._result = 0;
}

//
// accessor is AST_AGSystemToolsUpdateOnlineResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSystemToolsUpdateOnlineResponse.prototype.setResult
//
function AST_AGSystemToolsUpdateOnlineResponse_getResult() { return this._result;}

AST_AGSystemToolsUpdateOnlineResponse.prototype.getResult = AST_AGSystemToolsUpdateOnlineResponse_getResult;

function AST_AGSystemToolsUpdateOnlineResponse_setResult(value) { this._result = value;}

AST_AGSystemToolsUpdateOnlineResponse.prototype.setResult = AST_AGSystemToolsUpdateOnlineResponse_setResult;
//
// Serialize {urn:ast}AGSystemToolsUpdateOnlineResponse
//
function AST_AGSystemToolsUpdateOnlineResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemToolsUpdateOnlineResponse.prototype.serialize = AST_AGSystemToolsUpdateOnlineResponse_serialize;

function AST_AGSystemToolsUpdateOnlineResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemToolsUpdateOnlineResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgSecSettingCreateKey
//
function AST_AGAlgSecSettingCreateKey () {
    this.typeMarker = 'AST_AGAlgSecSettingCreateKey';
    this._key = null;
}

//
// accessor is AST_AGAlgSecSettingCreateKey.prototype.getKey
// element get for key
// - element type is {urn:ast}SipKey
// - optional element
// - nillable
//
// element set for key
// setter function is is AST_AGAlgSecSettingCreateKey.prototype.setKey
//
function AST_AGAlgSecSettingCreateKey_getKey() { return this._key;}

AST_AGAlgSecSettingCreateKey.prototype.getKey = AST_AGAlgSecSettingCreateKey_getKey;

function AST_AGAlgSecSettingCreateKey_setKey(value) { this._key = value;}

AST_AGAlgSecSettingCreateKey.prototype.setKey = AST_AGAlgSecSettingCreateKey_setKey;
//
// Serialize {urn:ast}AGAlgSecSettingCreateKey
//
function AST_AGAlgSecSettingCreateKey_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._key != null) {
      if (this._key == null) {
       xml = xml + '<jns0:key xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._key.serialize(cxfjsutils, 'jns0:key', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgSecSettingCreateKey.prototype.serialize = AST_AGAlgSecSettingCreateKey_serialize;

function AST_AGAlgSecSettingCreateKey_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgSecSettingCreateKey();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing key');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'key')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SipKey_deserialize(cxfjsutils, curElement);
     }
     newobject.setKey(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemToolsUpdatefirewareResponse
//
function AST_AGSystemToolsUpdatefirewareResponse () {
    this.typeMarker = 'AST_AGSystemToolsUpdatefirewareResponse';
    this._result = 0;
}

//
// accessor is AST_AGSystemToolsUpdatefirewareResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSystemToolsUpdatefirewareResponse.prototype.setResult
//
function AST_AGSystemToolsUpdatefirewareResponse_getResult() { return this._result;}

AST_AGSystemToolsUpdatefirewareResponse.prototype.getResult = AST_AGSystemToolsUpdatefirewareResponse_getResult;

function AST_AGSystemToolsUpdatefirewareResponse_setResult(value) { this._result = value;}

AST_AGSystemToolsUpdatefirewareResponse.prototype.setResult = AST_AGSystemToolsUpdatefirewareResponse_setResult;
//
// Serialize {urn:ast}AGSystemToolsUpdatefirewareResponse
//
function AST_AGSystemToolsUpdatefirewareResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemToolsUpdatefirewareResponse.prototype.serialize = AST_AGSystemToolsUpdatefirewareResponse_serialize;

function AST_AGSystemToolsUpdatefirewareResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemToolsUpdatefirewareResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipEndpointsDelResponse
//
function AST_AGSipEndpointsDelResponse () {
    this.typeMarker = 'AST_AGSipEndpointsDelResponse';
    this._result = 0;
}

//
// accessor is AST_AGSipEndpointsDelResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSipEndpointsDelResponse.prototype.setResult
//
function AST_AGSipEndpointsDelResponse_getResult() { return this._result;}

AST_AGSipEndpointsDelResponse.prototype.getResult = AST_AGSipEndpointsDelResponse_getResult;

function AST_AGSipEndpointsDelResponse_setResult(value) { this._result = value;}

AST_AGSipEndpointsDelResponse.prototype.setResult = AST_AGSipEndpointsDelResponse_setResult;
//
// Serialize {urn:ast}AGSipEndpointsDelResponse
//
function AST_AGSipEndpointsDelResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipEndpointsDelResponse.prototype.serialize = AST_AGSipEndpointsDelResponse_serialize;

function AST_AGSipEndpointsDelResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipEndpointsDelResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGjConSetKeyClibResponse
//
function AST_AGjConSetKeyClibResponse () {
    this.typeMarker = 'AST_AGjConSetKeyClibResponse';
    this._result = 0;
}

//
// accessor is AST_AGjConSetKeyClibResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGjConSetKeyClibResponse.prototype.setResult
//
function AST_AGjConSetKeyClibResponse_getResult() { return this._result;}

AST_AGjConSetKeyClibResponse.prototype.getResult = AST_AGjConSetKeyClibResponse_getResult;

function AST_AGjConSetKeyClibResponse_setResult(value) { this._result = value;}

AST_AGjConSetKeyClibResponse.prototype.setResult = AST_AGjConSetKeyClibResponse_setResult;
//
// Serialize {urn:ast}AGjConSetKeyClibResponse
//
function AST_AGjConSetKeyClibResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGjConSetKeyClibResponse.prototype.serialize = AST_AGjConSetKeyClibResponse_serialize;

function AST_AGjConSetKeyClibResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGjConSetKeyClibResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}GroupGetAllResponse
//
function AST_GroupGetAllResponse () {
    this.typeMarker = 'AST_GroupGetAllResponse';
    this._result = null;
}

//
// accessor is AST_GroupGetAllResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for result
// setter function is is AST_GroupGetAllResponse.prototype.setResult
//
function AST_GroupGetAllResponse_getResult() { return this._result;}

AST_GroupGetAllResponse.prototype.getResult = AST_GroupGetAllResponse_getResult;

function AST_GroupGetAllResponse_setResult(value) { this._result = value;}

AST_GroupGetAllResponse.prototype.setResult = AST_GroupGetAllResponse_setResult;
//
// Serialize {urn:ast}GroupGetAllResponse
//
function AST_GroupGetAllResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._result != null) {
      if (this._result == null) {
       xml = xml + '<jns0:result xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:result>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._result);
       xml = xml + '</jns0:result>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_GroupGetAllResponse.prototype.serialize = AST_GroupGetAllResponse_serialize;

function AST_GroupGetAllResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_GroupGetAllResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'result')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setResult(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGCommitLookup
//
function AST_AGCommitLookup () {
    this.typeMarker = 'AST_AGCommitLookup';
    this._itemstart = 0;
}

//
// accessor is AST_AGCommitLookup.prototype.getItemstart
// element get for itemstart
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for itemstart
// setter function is is AST_AGCommitLookup.prototype.setItemstart
//
function AST_AGCommitLookup_getItemstart() { return this._itemstart;}

AST_AGCommitLookup.prototype.getItemstart = AST_AGCommitLookup_getItemstart;

function AST_AGCommitLookup_setItemstart(value) { this._itemstart = value;}

AST_AGCommitLookup.prototype.setItemstart = AST_AGCommitLookup_setItemstart;
//
// Serialize {urn:ast}AGCommitLookup
//
function AST_AGCommitLookup_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:itemstart>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._itemstart);
     xml = xml + '</jns0:itemstart>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGCommitLookup.prototype.serialize = AST_AGCommitLookup_serialize;

function AST_AGCommitLookup_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGCommitLookup();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing itemstart');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setItemstart(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGFxsSipBindProvisonSave
//
function AST_AGFxsSipBindProvisonSave () {
    this.typeMarker = 'AST_AGFxsSipBindProvisonSave';
    this._bindarr = null;
}

//
// accessor is AST_AGFxsSipBindProvisonSave.prototype.getBindarr
// element get for bindarr
// - element type is {urn:ast}ProvAnaBindArr
// - optional element
// - nillable
//
// element set for bindarr
// setter function is is AST_AGFxsSipBindProvisonSave.prototype.setBindarr
//
function AST_AGFxsSipBindProvisonSave_getBindarr() { return this._bindarr;}

AST_AGFxsSipBindProvisonSave.prototype.getBindarr = AST_AGFxsSipBindProvisonSave_getBindarr;

function AST_AGFxsSipBindProvisonSave_setBindarr(value) { this._bindarr = value;}

AST_AGFxsSipBindProvisonSave.prototype.setBindarr = AST_AGFxsSipBindProvisonSave_setBindarr;
//
// Serialize {urn:ast}AGFxsSipBindProvisonSave
//
function AST_AGFxsSipBindProvisonSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._bindarr != null) {
      if (this._bindarr == null) {
       xml = xml + '<jns0:bindarr xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._bindarr.serialize(cxfjsutils, 'jns0:bindarr', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGFxsSipBindProvisonSave.prototype.serialize = AST_AGFxsSipBindProvisonSave_serialize;

function AST_AGFxsSipBindProvisonSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGFxsSipBindProvisonSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing bindarr');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'bindarr')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_ProvAnaBindArr_deserialize(cxfjsutils, curElement);
     }
     newobject.setBindarr(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipEndpointsNewGetResponse
//
function AST_AGSipEndpointsNewGetResponse () {
    this.typeMarker = 'AST_AGSipEndpointsNewGetResponse';
    this._get = null;
}

//
// accessor is AST_AGSipEndpointsNewGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}SipNewGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGSipEndpointsNewGetResponse.prototype.setGet
//
function AST_AGSipEndpointsNewGetResponse_getGet() { return this._get;}

AST_AGSipEndpointsNewGetResponse.prototype.getGet = AST_AGSipEndpointsNewGetResponse_getGet;

function AST_AGSipEndpointsNewGetResponse_setGet(value) { this._get = value;}

AST_AGSipEndpointsNewGetResponse.prototype.setGet = AST_AGSipEndpointsNewGetResponse_setGet;
//
// Serialize {urn:ast}AGSipEndpointsNewGetResponse
//
function AST_AGSipEndpointsNewGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipEndpointsNewGetResponse.prototype.serialize = AST_AGSipEndpointsNewGetResponse_serialize;

function AST_AGSipEndpointsNewGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipEndpointsNewGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SipNewGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipEndpointGetOneResponse
//
function AST_AGSipEndpointGetOneResponse () {
    this.typeMarker = 'AST_AGSipEndpointGetOneResponse';
    this._get = null;
}

//
// accessor is AST_AGSipEndpointGetOneResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}SipGetOne
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGSipEndpointGetOneResponse.prototype.setGet
//
function AST_AGSipEndpointGetOneResponse_getGet() { return this._get;}

AST_AGSipEndpointGetOneResponse.prototype.getGet = AST_AGSipEndpointGetOneResponse_getGet;

function AST_AGSipEndpointGetOneResponse_setGet(value) { this._get = value;}

AST_AGSipEndpointGetOneResponse.prototype.setGet = AST_AGSipEndpointGetOneResponse_setGet;
//
// Serialize {urn:ast}AGSipEndpointGetOneResponse
//
function AST_AGSipEndpointGetOneResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipEndpointGetOneResponse.prototype.serialize = AST_AGSipEndpointGetOneResponse_serialize;

function AST_AGSipEndpointGetOneResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipEndpointGetOneResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SipGetOne_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkTookitPing
//
function AST_AGNetworkTookitPing () {
    this.typeMarker = 'AST_AGNetworkTookitPing';
    this._cmd = 0;
    this._flag = 0;
    this._src = null;
}

//
// accessor is AST_AGNetworkTookitPing.prototype.getCmd
// element get for cmd
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for cmd
// setter function is is AST_AGNetworkTookitPing.prototype.setCmd
//
function AST_AGNetworkTookitPing_getCmd() { return this._cmd;}

AST_AGNetworkTookitPing.prototype.getCmd = AST_AGNetworkTookitPing_getCmd;

function AST_AGNetworkTookitPing_setCmd(value) { this._cmd = value;}

AST_AGNetworkTookitPing.prototype.setCmd = AST_AGNetworkTookitPing_setCmd;
//
// accessor is AST_AGNetworkTookitPing.prototype.getFlag
// element get for flag
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for flag
// setter function is is AST_AGNetworkTookitPing.prototype.setFlag
//
function AST_AGNetworkTookitPing_getFlag() { return this._flag;}

AST_AGNetworkTookitPing.prototype.getFlag = AST_AGNetworkTookitPing_getFlag;

function AST_AGNetworkTookitPing_setFlag(value) { this._flag = value;}

AST_AGNetworkTookitPing.prototype.setFlag = AST_AGNetworkTookitPing_setFlag;
//
// accessor is AST_AGNetworkTookitPing.prototype.getSrc
// element get for src
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for src
// setter function is is AST_AGNetworkTookitPing.prototype.setSrc
//
function AST_AGNetworkTookitPing_getSrc() { return this._src;}

AST_AGNetworkTookitPing.prototype.getSrc = AST_AGNetworkTookitPing_getSrc;

function AST_AGNetworkTookitPing_setSrc(value) { this._src = value;}

AST_AGNetworkTookitPing.prototype.setSrc = AST_AGNetworkTookitPing_setSrc;
//
// Serialize {urn:ast}AGNetworkTookitPing
//
function AST_AGNetworkTookitPing_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:cmd>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._cmd);
     xml = xml + '</jns0:cmd>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:flag>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._flag);
     xml = xml + '</jns0:flag>';
    }
    // block for local variables
    {
     if (this._src != null) {
      if (this._src == null) {
       xml = xml + '<jns0:src xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:src>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._src);
       xml = xml + '</jns0:src>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkTookitPing.prototype.serialize = AST_AGNetworkTookitPing_serialize;

function AST_AGNetworkTookitPing_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkTookitPing();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing cmd');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setCmd(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing flag');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setFlag(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing src');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'src')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setSrc(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RoutingDelResponse
//
function AST_RoutingDelResponse () {
    this.typeMarker = 'AST_RoutingDelResponse';
    this._result = 0;
}

//
// accessor is AST_RoutingDelResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_RoutingDelResponse.prototype.setResult
//
function AST_RoutingDelResponse_getResult() { return this._result;}

AST_RoutingDelResponse.prototype.getResult = AST_RoutingDelResponse_getResult;

function AST_RoutingDelResponse_setResult(value) { this._result = value;}

AST_RoutingDelResponse.prototype.setResult = AST_RoutingDelResponse_setResult;
//
// Serialize {urn:ast}RoutingDelResponse
//
function AST_RoutingDelResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RoutingDelResponse.prototype.serialize = AST_RoutingDelResponse_serialize;

function AST_RoutingDelResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_RoutingDelResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemToolsSystemSwitchResponse
//
function AST_AGSystemToolsSystemSwitchResponse () {
    this.typeMarker = 'AST_AGSystemToolsSystemSwitchResponse';
    this._result = 0;
}

//
// accessor is AST_AGSystemToolsSystemSwitchResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSystemToolsSystemSwitchResponse.prototype.setResult
//
function AST_AGSystemToolsSystemSwitchResponse_getResult() { return this._result;}

AST_AGSystemToolsSystemSwitchResponse.prototype.getResult = AST_AGSystemToolsSystemSwitchResponse_getResult;

function AST_AGSystemToolsSystemSwitchResponse_setResult(value) { this._result = value;}

AST_AGSystemToolsSystemSwitchResponse.prototype.setResult = AST_AGSystemToolsSystemSwitchResponse_setResult;
//
// Serialize {urn:ast}AGSystemToolsSystemSwitchResponse
//
function AST_AGSystemToolsSystemSwitchResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemToolsSystemSwitchResponse.prototype.serialize = AST_AGSystemToolsSystemSwitchResponse_serialize;

function AST_AGSystemToolsSystemSwitchResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemToolsSystemSwitchResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingGroupsDialGetOneResponse
//
function AST_AGRoutingGroupsDialGetOneResponse () {
    this.typeMarker = 'AST_AGRoutingGroupsDialGetOneResponse';
    this._get = null;
}

//
// accessor is AST_AGRoutingGroupsDialGetOneResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}FxsGroupDialGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGRoutingGroupsDialGetOneResponse.prototype.setGet
//
function AST_AGRoutingGroupsDialGetOneResponse_getGet() { return this._get;}

AST_AGRoutingGroupsDialGetOneResponse.prototype.getGet = AST_AGRoutingGroupsDialGetOneResponse_getGet;

function AST_AGRoutingGroupsDialGetOneResponse_setGet(value) { this._get = value;}

AST_AGRoutingGroupsDialGetOneResponse.prototype.setGet = AST_AGRoutingGroupsDialGetOneResponse_setGet;
//
// Serialize {urn:ast}AGRoutingGroupsDialGetOneResponse
//
function AST_AGRoutingGroupsDialGetOneResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingGroupsDialGetOneResponse.prototype.serialize = AST_AGRoutingGroupsDialGetOneResponse_serialize;

function AST_AGRoutingGroupsDialGetOneResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingGroupsDialGetOneResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_FxsGroupDialGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkVPNGetConnectStatus
//
function AST_AGNetworkVPNGetConnectStatus () {
    this.typeMarker = 'AST_AGNetworkVPNGetConnectStatus';
    this._vpntype = null;
}

//
// accessor is AST_AGNetworkVPNGetConnectStatus.prototype.getVpntype
// element get for vpntype
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for vpntype
// setter function is is AST_AGNetworkVPNGetConnectStatus.prototype.setVpntype
//
function AST_AGNetworkVPNGetConnectStatus_getVpntype() { return this._vpntype;}

AST_AGNetworkVPNGetConnectStatus.prototype.getVpntype = AST_AGNetworkVPNGetConnectStatus_getVpntype;

function AST_AGNetworkVPNGetConnectStatus_setVpntype(value) { this._vpntype = value;}

AST_AGNetworkVPNGetConnectStatus.prototype.setVpntype = AST_AGNetworkVPNGetConnectStatus_setVpntype;
//
// Serialize {urn:ast}AGNetworkVPNGetConnectStatus
//
function AST_AGNetworkVPNGetConnectStatus_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._vpntype != null) {
      if (this._vpntype == null) {
       xml = xml + '<jns0:vpntype xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:vpntype>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._vpntype);
       xml = xml + '</jns0:vpntype>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkVPNGetConnectStatus.prototype.serialize = AST_AGNetworkVPNGetConnectStatus_serialize;

function AST_AGNetworkVPNGetConnectStatus_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkVPNGetConnectStatus();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing vpntype');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'vpntype')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setVpntype(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipEndpointSave
//
function AST_AGSipEndpointSave () {
    this.typeMarker = 'AST_AGSipEndpointSave';
    this._oldname = null;
    this._newname = null;
    this._context = null;
    this._lines = null;
    this._sections = null;
}

//
// accessor is AST_AGSipEndpointSave.prototype.getOldname
// element get for oldname
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for oldname
// setter function is is AST_AGSipEndpointSave.prototype.setOldname
//
function AST_AGSipEndpointSave_getOldname() { return this._oldname;}

AST_AGSipEndpointSave.prototype.getOldname = AST_AGSipEndpointSave_getOldname;

function AST_AGSipEndpointSave_setOldname(value) { this._oldname = value;}

AST_AGSipEndpointSave.prototype.setOldname = AST_AGSipEndpointSave_setOldname;
//
// accessor is AST_AGSipEndpointSave.prototype.getNewname
// element get for newname
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for newname
// setter function is is AST_AGSipEndpointSave.prototype.setNewname
//
function AST_AGSipEndpointSave_getNewname() { return this._newname;}

AST_AGSipEndpointSave.prototype.getNewname = AST_AGSipEndpointSave_getNewname;

function AST_AGSipEndpointSave_setNewname(value) { this._newname = value;}

AST_AGSipEndpointSave.prototype.setNewname = AST_AGSipEndpointSave_setNewname;
//
// accessor is AST_AGSipEndpointSave.prototype.getContext
// element get for context
// - element type is {urn:ast}SipContext
// - optional element
// - nillable
//
// element set for context
// setter function is is AST_AGSipEndpointSave.prototype.setContext
//
function AST_AGSipEndpointSave_getContext() { return this._context;}

AST_AGSipEndpointSave.prototype.getContext = AST_AGSipEndpointSave_getContext;

function AST_AGSipEndpointSave_setContext(value) { this._context = value;}

AST_AGSipEndpointSave.prototype.setContext = AST_AGSipEndpointSave_setContext;
//
// accessor is AST_AGSipEndpointSave.prototype.getLines
// element get for lines
// - element type is {urn:ast}LineArr
// - optional element
// - nillable
//
// element set for lines
// setter function is is AST_AGSipEndpointSave.prototype.setLines
//
function AST_AGSipEndpointSave_getLines() { return this._lines;}

AST_AGSipEndpointSave.prototype.getLines = AST_AGSipEndpointSave_getLines;

function AST_AGSipEndpointSave_setLines(value) { this._lines = value;}

AST_AGSipEndpointSave.prototype.setLines = AST_AGSipEndpointSave_setLines;
//
// accessor is AST_AGSipEndpointSave.prototype.getSections
// element get for sections
// - element type is {urn:ast}SectionArr
// - optional element
// - nillable
//
// element set for sections
// setter function is is AST_AGSipEndpointSave.prototype.setSections
//
function AST_AGSipEndpointSave_getSections() { return this._sections;}

AST_AGSipEndpointSave.prototype.getSections = AST_AGSipEndpointSave_getSections;

function AST_AGSipEndpointSave_setSections(value) { this._sections = value;}

AST_AGSipEndpointSave.prototype.setSections = AST_AGSipEndpointSave_setSections;
//
// Serialize {urn:ast}AGSipEndpointSave
//
function AST_AGSipEndpointSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._oldname != null) {
      if (this._oldname == null) {
       xml = xml + '<jns0:oldname xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:oldname>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._oldname);
       xml = xml + '</jns0:oldname>';
      }
     }
    }
    // block for local variables
    {
     if (this._newname != null) {
      if (this._newname == null) {
       xml = xml + '<jns0:newname xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:newname>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._newname);
       xml = xml + '</jns0:newname>';
      }
     }
    }
    // block for local variables
    {
     if (this._context != null) {
      if (this._context == null) {
       xml = xml + '<jns0:context xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._context.serialize(cxfjsutils, 'jns0:context', null);
      }
     }
    }
    // block for local variables
    {
     if (this._lines != null) {
      if (this._lines == null) {
       xml = xml + '<jns0:lines xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._lines.serialize(cxfjsutils, 'jns0:lines', null);
      }
     }
    }
    // block for local variables
    {
     if (this._sections != null) {
      if (this._sections == null) {
       xml = xml + '<jns0:sections xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._sections.serialize(cxfjsutils, 'jns0:sections', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipEndpointSave.prototype.serialize = AST_AGSipEndpointSave_serialize;

function AST_AGSipEndpointSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipEndpointSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing oldname');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'oldname')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setOldname(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing newname');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'newname')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setNewname(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing context');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'context')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SipContext_deserialize(cxfjsutils, curElement);
     }
     newobject.setContext(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing lines');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'lines')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_LineArr_deserialize(cxfjsutils, curElement);
     }
     newobject.setLines(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing sections');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'sections')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SectionArr_deserialize(cxfjsutils, curElement);
     }
     newobject.setSections(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkFirewallGet
//
function AST_AGNetworkFirewallGet () {
    this.typeMarker = 'AST_AGNetworkFirewallGet';
}

//
// Serialize {urn:ast}AGNetworkFirewallGet
//
function AST_AGNetworkFirewallGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkFirewallGet.prototype.serialize = AST_AGNetworkFirewallGet_serialize;

function AST_AGNetworkFirewallGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkFirewallGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgChannelGetAllResponse
//
function AST_AGAlgChannelGetAllResponse () {
    this.typeMarker = 'AST_AGAlgChannelGetAllResponse';
    this._get = null;
}

//
// accessor is AST_AGAlgChannelGetAllResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}AnaGetAll
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGAlgChannelGetAllResponse.prototype.setGet
//
function AST_AGAlgChannelGetAllResponse_getGet() { return this._get;}

AST_AGAlgChannelGetAllResponse.prototype.getGet = AST_AGAlgChannelGetAllResponse_getGet;

function AST_AGAlgChannelGetAllResponse_setGet(value) { this._get = value;}

AST_AGAlgChannelGetAllResponse.prototype.setGet = AST_AGAlgChannelGetAllResponse_setGet;
//
// Serialize {urn:ast}AGAlgChannelGetAllResponse
//
function AST_AGAlgChannelGetAllResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgChannelGetAllResponse.prototype.serialize = AST_AGAlgChannelGetAllResponse_serialize;

function AST_AGAlgChannelGetAllResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgChannelGetAllResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AnaGetAll_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGUcpSystemToolsSndRecordStop
//
function AST_AGUcpSystemToolsSndRecordStop () {
    this.typeMarker = 'AST_AGUcpSystemToolsSndRecordStop';
    this._channel = 0;
}

//
// accessor is AST_AGUcpSystemToolsSndRecordStop.prototype.getChannel
// element get for channel
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for channel
// setter function is is AST_AGUcpSystemToolsSndRecordStop.prototype.setChannel
//
function AST_AGUcpSystemToolsSndRecordStop_getChannel() { return this._channel;}

AST_AGUcpSystemToolsSndRecordStop.prototype.getChannel = AST_AGUcpSystemToolsSndRecordStop_getChannel;

function AST_AGUcpSystemToolsSndRecordStop_setChannel(value) { this._channel = value;}

AST_AGUcpSystemToolsSndRecordStop.prototype.setChannel = AST_AGUcpSystemToolsSndRecordStop_setChannel;
//
// Serialize {urn:ast}AGUcpSystemToolsSndRecordStop
//
function AST_AGUcpSystemToolsSndRecordStop_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:channel>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._channel);
     xml = xml + '</jns0:channel>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGUcpSystemToolsSndRecordStop.prototype.serialize = AST_AGUcpSystemToolsSndRecordStop_serialize;

function AST_AGUcpSystemToolsSndRecordStop_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGUcpSystemToolsSndRecordStop();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing channel');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setChannel(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}IaxSaveEndpointResponse
//
function AST_IaxSaveEndpointResponse () {
    this.typeMarker = 'AST_IaxSaveEndpointResponse';
    this._result = 0;
}

//
// accessor is AST_IaxSaveEndpointResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_IaxSaveEndpointResponse.prototype.setResult
//
function AST_IaxSaveEndpointResponse_getResult() { return this._result;}

AST_IaxSaveEndpointResponse.prototype.getResult = AST_IaxSaveEndpointResponse_getResult;

function AST_IaxSaveEndpointResponse_setResult(value) { this._result = value;}

AST_IaxSaveEndpointResponse.prototype.setResult = AST_IaxSaveEndpointResponse_setResult;
//
// Serialize {urn:ast}IaxSaveEndpointResponse
//
function AST_IaxSaveEndpointResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_IaxSaveEndpointResponse.prototype.serialize = AST_IaxSaveEndpointResponse_serialize;

function AST_IaxSaveEndpointResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_IaxSaveEndpointResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGjConGetAllResponse
//
function AST_AGjConGetAllResponse () {
    this.typeMarker = 'AST_AGjConGetAllResponse';
    this._jCons = null;
}

//
// accessor is AST_AGjConGetAllResponse.prototype.getJCons
// element get for jCons
// - element type is {urn:ast}jConGetAll
// - optional element
// - nillable
//
// element set for jCons
// setter function is is AST_AGjConGetAllResponse.prototype.setJCons
//
function AST_AGjConGetAllResponse_getJCons() { return this._jCons;}

AST_AGjConGetAllResponse.prototype.getJCons = AST_AGjConGetAllResponse_getJCons;

function AST_AGjConGetAllResponse_setJCons(value) { this._jCons = value;}

AST_AGjConGetAllResponse.prototype.setJCons = AST_AGjConGetAllResponse_setJCons;
//
// Serialize {urn:ast}AGjConGetAllResponse
//
function AST_AGjConGetAllResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._jCons != null) {
      if (this._jCons == null) {
       xml = xml + '<jns0:jCons xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._jCons.serialize(cxfjsutils, 'jns0:jCons', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGjConGetAllResponse.prototype.serialize = AST_AGjConGetAllResponse_serialize;

function AST_AGjConGetAllResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGjConGetAllResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing jCons');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'jCons')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_jConGetAll_deserialize(cxfjsutils, curElement);
     }
     newobject.setJCons(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSysTimeGetResponse
//
function AST_AGSysTimeGetResponse () {
    this.typeMarker = 'AST_AGSysTimeGetResponse';
    this._get = null;
}

//
// accessor is AST_AGSysTimeGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}SysTimeGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGSysTimeGetResponse.prototype.setGet
//
function AST_AGSysTimeGetResponse_getGet() { return this._get;}

AST_AGSysTimeGetResponse.prototype.getGet = AST_AGSysTimeGetResponse_getGet;

function AST_AGSysTimeGetResponse_setGet(value) { this._get = value;}

AST_AGSysTimeGetResponse.prototype.setGet = AST_AGSysTimeGetResponse_setGet;
//
// Serialize {urn:ast}AGSysTimeGetResponse
//
function AST_AGSysTimeGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSysTimeGetResponse.prototype.serialize = AST_AGSysTimeGetResponse_serialize;

function AST_AGSysTimeGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSysTimeGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SysTimeGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipAdvSettingGet
//
function AST_AGSipAdvSettingGet () {
    this.typeMarker = 'AST_AGSipAdvSettingGet';
}

//
// Serialize {urn:ast}AGSipAdvSettingGet
//
function AST_AGSipAdvSettingGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipAdvSettingGet.prototype.serialize = AST_AGSipAdvSettingGet_serialize;

function AST_AGSipAdvSettingGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipAdvSettingGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgPickupSaveResponse
//
function AST_AGAlgPickupSaveResponse () {
    this.typeMarker = 'AST_AGAlgPickupSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGAlgPickupSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGAlgPickupSaveResponse.prototype.setResult
//
function AST_AGAlgPickupSaveResponse_getResult() { return this._result;}

AST_AGAlgPickupSaveResponse.prototype.getResult = AST_AGAlgPickupSaveResponse_getResult;

function AST_AGAlgPickupSaveResponse_setResult(value) { this._result = value;}

AST_AGAlgPickupSaveResponse.prototype.setResult = AST_AGAlgPickupSaveResponse_setResult;
//
// Serialize {urn:ast}AGAlgPickupSaveResponse
//
function AST_AGAlgPickupSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgPickupSaveResponse.prototype.serialize = AST_AGAlgPickupSaveResponse_serialize;

function AST_AGAlgPickupSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgPickupSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGUcpAlgFxoparamGetAll
//
function AST_AGUcpAlgFxoparamGetAll () {
    this.typeMarker = 'AST_AGUcpAlgFxoparamGetAll';
}

//
// Serialize {urn:ast}AGUcpAlgFxoparamGetAll
//
function AST_AGUcpAlgFxoparamGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGUcpAlgFxoparamGetAll.prototype.serialize = AST_AGUcpAlgFxoparamGetAll_serialize;

function AST_AGUcpAlgFxoparamGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGUcpAlgFxoparamGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemWsapiReload
//
function AST_AGSystemWsapiReload () {
    this.typeMarker = 'AST_AGSystemWsapiReload';
}

//
// Serialize {urn:ast}AGSystemWsapiReload
//
function AST_AGSystemWsapiReload_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemWsapiReload.prototype.serialize = AST_AGSystemWsapiReload_serialize;

function AST_AGSystemWsapiReload_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemWsapiReload();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGUcpAlgDriverSave
//
function AST_AGUcpAlgDriverSave () {
    this.typeMarker = 'AST_AGUcpAlgDriverSave';
    this._driver = null;
}

//
// accessor is AST_AGUcpAlgDriverSave.prototype.getDriver
// element get for driver
// - element type is {urn:ast}UcpAlgDriverParam
// - optional element
// - nillable
//
// element set for driver
// setter function is is AST_AGUcpAlgDriverSave.prototype.setDriver
//
function AST_AGUcpAlgDriverSave_getDriver() { return this._driver;}

AST_AGUcpAlgDriverSave.prototype.getDriver = AST_AGUcpAlgDriverSave_getDriver;

function AST_AGUcpAlgDriverSave_setDriver(value) { this._driver = value;}

AST_AGUcpAlgDriverSave.prototype.setDriver = AST_AGUcpAlgDriverSave_setDriver;
//
// Serialize {urn:ast}AGUcpAlgDriverSave
//
function AST_AGUcpAlgDriverSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._driver != null) {
      if (this._driver == null) {
       xml = xml + '<jns0:driver xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._driver.serialize(cxfjsutils, 'jns0:driver', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGUcpAlgDriverSave.prototype.serialize = AST_AGUcpAlgDriverSave_serialize;

function AST_AGUcpAlgDriverSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGUcpAlgDriverSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing driver');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'driver')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_UcpAlgDriverParam_deserialize(cxfjsutils, curElement);
     }
     newobject.setDriver(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGjConRelayGetOne
//
function AST_AGjConRelayGetOne () {
    this.typeMarker = 'AST_AGjConRelayGetOne';
    this._board = 0;
}

//
// accessor is AST_AGjConRelayGetOne.prototype.getBoard
// element get for board
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for board
// setter function is is AST_AGjConRelayGetOne.prototype.setBoard
//
function AST_AGjConRelayGetOne_getBoard() { return this._board;}

AST_AGjConRelayGetOne.prototype.getBoard = AST_AGjConRelayGetOne_getBoard;

function AST_AGjConRelayGetOne_setBoard(value) { this._board = value;}

AST_AGjConRelayGetOne.prototype.setBoard = AST_AGjConRelayGetOne_setBoard;
//
// Serialize {urn:ast}AGjConRelayGetOne
//
function AST_AGjConRelayGetOne_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:board>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._board);
     xml = xml + '</jns0:board>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGjConRelayGetOne.prototype.serialize = AST_AGjConRelayGetOne_serialize;

function AST_AGjConRelayGetOne_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGjConRelayGetOne();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing board');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setBoard(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemAutoUpdateSave
//
function AST_AGSystemAutoUpdateSave () {
    this.typeMarker = 'AST_AGSystemAutoUpdateSave';
    this._save = null;
}

//
// accessor is AST_AGSystemAutoUpdateSave.prototype.getSave
// element get for save
// - element type is {urn:ast}AutoProvisionSave
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGSystemAutoUpdateSave.prototype.setSave
//
function AST_AGSystemAutoUpdateSave_getSave() { return this._save;}

AST_AGSystemAutoUpdateSave.prototype.getSave = AST_AGSystemAutoUpdateSave_getSave;

function AST_AGSystemAutoUpdateSave_setSave(value) { this._save = value;}

AST_AGSystemAutoUpdateSave.prototype.setSave = AST_AGSystemAutoUpdateSave_setSave;
//
// Serialize {urn:ast}AGSystemAutoUpdateSave
//
function AST_AGSystemAutoUpdateSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemAutoUpdateSave.prototype.serialize = AST_AGSystemAutoUpdateSave_serialize;

function AST_AGSystemAutoUpdateSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemAutoUpdateSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AutoProvisionSave_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRegisterParaReadResponse
//
function AST_AGRegisterParaReadResponse () {
    this.typeMarker = 'AST_AGRegisterParaReadResponse';
    this._para = null;
}

//
// accessor is AST_AGRegisterParaReadResponse.prototype.getPara
// element get for para
// - element type is {urn:ast}RegisterPara
// - optional element
// - nillable
//
// element set for para
// setter function is is AST_AGRegisterParaReadResponse.prototype.setPara
//
function AST_AGRegisterParaReadResponse_getPara() { return this._para;}

AST_AGRegisterParaReadResponse.prototype.getPara = AST_AGRegisterParaReadResponse_getPara;

function AST_AGRegisterParaReadResponse_setPara(value) { this._para = value;}

AST_AGRegisterParaReadResponse.prototype.setPara = AST_AGRegisterParaReadResponse_setPara;
//
// Serialize {urn:ast}AGRegisterParaReadResponse
//
function AST_AGRegisterParaReadResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._para != null) {
      if (this._para == null) {
       xml = xml + '<jns0:para xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._para.serialize(cxfjsutils, 'jns0:para', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRegisterParaReadResponse.prototype.serialize = AST_AGRegisterParaReadResponse_serialize;

function AST_AGRegisterParaReadResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRegisterParaReadResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing para');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'para')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_RegisterPara_deserialize(cxfjsutils, curElement);
     }
     newobject.setPara(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAdvAstapiSaveResponse
//
function AST_AGAdvAstapiSaveResponse () {
    this.typeMarker = 'AST_AGAdvAstapiSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGAdvAstapiSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGAdvAstapiSaveResponse.prototype.setResult
//
function AST_AGAdvAstapiSaveResponse_getResult() { return this._result;}

AST_AGAdvAstapiSaveResponse.prototype.getResult = AST_AGAdvAstapiSaveResponse_getResult;

function AST_AGAdvAstapiSaveResponse_setResult(value) { this._result = value;}

AST_AGAdvAstapiSaveResponse.prototype.setResult = AST_AGAdvAstapiSaveResponse_setResult;
//
// Serialize {urn:ast}AGAdvAstapiSaveResponse
//
function AST_AGAdvAstapiSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAdvAstapiSaveResponse.prototype.serialize = AST_AGAdvAstapiSaveResponse_serialize;

function AST_AGAdvAstapiSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAdvAstapiSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSysTimeSaveResponse
//
function AST_AGSysTimeSaveResponse () {
    this.typeMarker = 'AST_AGSysTimeSaveResponse';
    this._result = null;
}

//
// accessor is AST_AGSysTimeSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for result
// setter function is is AST_AGSysTimeSaveResponse.prototype.setResult
//
function AST_AGSysTimeSaveResponse_getResult() { return this._result;}

AST_AGSysTimeSaveResponse.prototype.getResult = AST_AGSysTimeSaveResponse_getResult;

function AST_AGSysTimeSaveResponse_setResult(value) { this._result = value;}

AST_AGSysTimeSaveResponse.prototype.setResult = AST_AGSysTimeSaveResponse_setResult;
//
// Serialize {urn:ast}AGSysTimeSaveResponse
//
function AST_AGSysTimeSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._result != null) {
      if (this._result == null) {
       xml = xml + '<jns0:result xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:result>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._result);
       xml = xml + '</jns0:result>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSysTimeSaveResponse.prototype.serialize = AST_AGSysTimeSaveResponse_serialize;

function AST_AGSysTimeSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSysTimeSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'result')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setResult(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGjConIoSettingsGet
//
function AST_AGjConIoSettingsGet () {
    this.typeMarker = 'AST_AGjConIoSettingsGet';
    this._board = 0;
}

//
// accessor is AST_AGjConIoSettingsGet.prototype.getBoard
// element get for board
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for board
// setter function is is AST_AGjConIoSettingsGet.prototype.setBoard
//
function AST_AGjConIoSettingsGet_getBoard() { return this._board;}

AST_AGjConIoSettingsGet.prototype.getBoard = AST_AGjConIoSettingsGet_getBoard;

function AST_AGjConIoSettingsGet_setBoard(value) { this._board = value;}

AST_AGjConIoSettingsGet.prototype.setBoard = AST_AGjConIoSettingsGet_setBoard;
//
// Serialize {urn:ast}AGjConIoSettingsGet
//
function AST_AGjConIoSettingsGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:board>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._board);
     xml = xml + '</jns0:board>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGjConIoSettingsGet.prototype.serialize = AST_AGjConIoSettingsGet_serialize;

function AST_AGjConIoSettingsGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGjConIoSettingsGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing board');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setBoard(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemInfoMemoryCleanResponse
//
function AST_AGSystemInfoMemoryCleanResponse () {
    this.typeMarker = 'AST_AGSystemInfoMemoryCleanResponse';
    this._result = 0;
}

//
// accessor is AST_AGSystemInfoMemoryCleanResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSystemInfoMemoryCleanResponse.prototype.setResult
//
function AST_AGSystemInfoMemoryCleanResponse_getResult() { return this._result;}

AST_AGSystemInfoMemoryCleanResponse.prototype.getResult = AST_AGSystemInfoMemoryCleanResponse_getResult;

function AST_AGSystemInfoMemoryCleanResponse_setResult(value) { this._result = value;}

AST_AGSystemInfoMemoryCleanResponse.prototype.setResult = AST_AGSystemInfoMemoryCleanResponse_setResult;
//
// Serialize {urn:ast}AGSystemInfoMemoryCleanResponse
//
function AST_AGSystemInfoMemoryCleanResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemInfoMemoryCleanResponse.prototype.serialize = AST_AGSystemInfoMemoryCleanResponse_serialize;

function AST_AGSystemInfoMemoryCleanResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemInfoMemoryCleanResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgGlbSettingGetOneResponse
//
function AST_AGAlgGlbSettingGetOneResponse () {
    this.typeMarker = 'AST_AGAlgGlbSettingGetOneResponse';
    this._get = null;
}

//
// accessor is AST_AGAlgGlbSettingGetOneResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}AlgGlbGetOne
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGAlgGlbSettingGetOneResponse.prototype.setGet
//
function AST_AGAlgGlbSettingGetOneResponse_getGet() { return this._get;}

AST_AGAlgGlbSettingGetOneResponse.prototype.getGet = AST_AGAlgGlbSettingGetOneResponse_getGet;

function AST_AGAlgGlbSettingGetOneResponse_setGet(value) { this._get = value;}

AST_AGAlgGlbSettingGetOneResponse.prototype.setGet = AST_AGAlgGlbSettingGetOneResponse_setGet;
//
// Serialize {urn:ast}AGAlgGlbSettingGetOneResponse
//
function AST_AGAlgGlbSettingGetOneResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgGlbSettingGetOneResponse.prototype.serialize = AST_AGAlgGlbSettingGetOneResponse_serialize;

function AST_AGAlgGlbSettingGetOneResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgGlbSettingGetOneResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AlgGlbGetOne_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGUcpAlgGlbSettingGetAllResponse
//
function AST_AGUcpAlgGlbSettingGetAllResponse () {
    this.typeMarker = 'AST_AGUcpAlgGlbSettingGetAllResponse';
    this._get = null;
}

//
// accessor is AST_AGUcpAlgGlbSettingGetAllResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}UcpAlgGlbGetAll
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGUcpAlgGlbSettingGetAllResponse.prototype.setGet
//
function AST_AGUcpAlgGlbSettingGetAllResponse_getGet() { return this._get;}

AST_AGUcpAlgGlbSettingGetAllResponse.prototype.getGet = AST_AGUcpAlgGlbSettingGetAllResponse_getGet;

function AST_AGUcpAlgGlbSettingGetAllResponse_setGet(value) { this._get = value;}

AST_AGUcpAlgGlbSettingGetAllResponse.prototype.setGet = AST_AGUcpAlgGlbSettingGetAllResponse_setGet;
//
// Serialize {urn:ast}AGUcpAlgGlbSettingGetAllResponse
//
function AST_AGUcpAlgGlbSettingGetAllResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGUcpAlgGlbSettingGetAllResponse.prototype.serialize = AST_AGUcpAlgGlbSettingGetAllResponse_serialize;

function AST_AGUcpAlgGlbSettingGetAllResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGUcpAlgGlbSettingGetAllResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_UcpAlgGlbGetAll_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}IaxGeneralSave
//
function AST_IaxGeneralSave () {
    this.typeMarker = 'AST_IaxGeneralSave';
    this._oldSection = null;
    this._newSection = null;
    this._datachunk = null;
}

//
// accessor is AST_IaxGeneralSave.prototype.getOldSection
// element get for oldSection
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for oldSection
// setter function is is AST_IaxGeneralSave.prototype.setOldSection
//
function AST_IaxGeneralSave_getOldSection() { return this._oldSection;}

AST_IaxGeneralSave.prototype.getOldSection = AST_IaxGeneralSave_getOldSection;

function AST_IaxGeneralSave_setOldSection(value) { this._oldSection = value;}

AST_IaxGeneralSave.prototype.setOldSection = AST_IaxGeneralSave_setOldSection;
//
// accessor is AST_IaxGeneralSave.prototype.getNewSection
// element get for newSection
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for newSection
// setter function is is AST_IaxGeneralSave.prototype.setNewSection
//
function AST_IaxGeneralSave_getNewSection() { return this._newSection;}

AST_IaxGeneralSave.prototype.getNewSection = AST_IaxGeneralSave_getNewSection;

function AST_IaxGeneralSave_setNewSection(value) { this._newSection = value;}

AST_IaxGeneralSave.prototype.setNewSection = AST_IaxGeneralSave_setNewSection;
//
// accessor is AST_IaxGeneralSave.prototype.getDatachunk
// element get for datachunk
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for datachunk
// setter function is is AST_IaxGeneralSave.prototype.setDatachunk
//
function AST_IaxGeneralSave_getDatachunk() { return this._datachunk;}

AST_IaxGeneralSave.prototype.getDatachunk = AST_IaxGeneralSave_getDatachunk;

function AST_IaxGeneralSave_setDatachunk(value) { this._datachunk = value;}

AST_IaxGeneralSave.prototype.setDatachunk = AST_IaxGeneralSave_setDatachunk;
//
// Serialize {urn:ast}IaxGeneralSave
//
function AST_IaxGeneralSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._oldSection != null) {
      if (this._oldSection == null) {
       xml = xml + '<jns0:oldSection xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:oldSection>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._oldSection);
       xml = xml + '</jns0:oldSection>';
      }
     }
    }
    // block for local variables
    {
     if (this._newSection != null) {
      if (this._newSection == null) {
       xml = xml + '<jns0:newSection xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:newSection>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._newSection);
       xml = xml + '</jns0:newSection>';
      }
     }
    }
    // block for local variables
    {
     if (this._datachunk != null) {
      if (this._datachunk == null) {
       xml = xml + '<jns0:datachunk xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:datachunk>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._datachunk);
       xml = xml + '</jns0:datachunk>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_IaxGeneralSave.prototype.serialize = AST_IaxGeneralSave_serialize;

function AST_IaxGeneralSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_IaxGeneralSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing oldSection');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'oldSection')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setOldSection(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing newSection');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'newSection')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setNewSection(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing datachunk');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'datachunk')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setDatachunk(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkGet
//
function AST_AGNetworkGet () {
    this.typeMarker = 'AST_AGNetworkGet';
}

//
// Serialize {urn:ast}AGNetworkGet
//
function AST_AGNetworkGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkGet.prototype.serialize = AST_AGNetworkGet_serialize;

function AST_AGNetworkGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkFirewallsave
//
function AST_AGNetworkFirewallsave () {
    this.typeMarker = 'AST_AGNetworkFirewallsave';
    this._save = null;
}

//
// accessor is AST_AGNetworkFirewallsave.prototype.getSave
// element get for save
// - element type is {urn:ast}UcpNetworkSwitch
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGNetworkFirewallsave.prototype.setSave
//
function AST_AGNetworkFirewallsave_getSave() { return this._save;}

AST_AGNetworkFirewallsave.prototype.getSave = AST_AGNetworkFirewallsave_getSave;

function AST_AGNetworkFirewallsave_setSave(value) { this._save = value;}

AST_AGNetworkFirewallsave.prototype.setSave = AST_AGNetworkFirewallsave_setSave;
//
// Serialize {urn:ast}AGNetworkFirewallsave
//
function AST_AGNetworkFirewallsave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkFirewallsave.prototype.serialize = AST_AGNetworkFirewallsave_serialize;

function AST_AGNetworkFirewallsave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkFirewallsave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_UcpNetworkSwitch_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemWsapiReloadResponse
//
function AST_AGSystemWsapiReloadResponse () {
    this.typeMarker = 'AST_AGSystemWsapiReloadResponse';
    this._result = 0;
}

//
// accessor is AST_AGSystemWsapiReloadResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSystemWsapiReloadResponse.prototype.setResult
//
function AST_AGSystemWsapiReloadResponse_getResult() { return this._result;}

AST_AGSystemWsapiReloadResponse.prototype.getResult = AST_AGSystemWsapiReloadResponse_getResult;

function AST_AGSystemWsapiReloadResponse_setResult(value) { this._result = value;}

AST_AGSystemWsapiReloadResponse.prototype.setResult = AST_AGSystemWsapiReloadResponse_setResult;
//
// Serialize {urn:ast}AGSystemWsapiReloadResponse
//
function AST_AGSystemWsapiReloadResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemWsapiReloadResponse.prototype.serialize = AST_AGSystemWsapiReloadResponse_serialize;

function AST_AGSystemWsapiReloadResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemWsapiReloadResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}IaxGeneralGetAllResponse
//
function AST_IaxGeneralGetAllResponse () {
    this.typeMarker = 'AST_IaxGeneralGetAllResponse';
    this._result = null;
}

//
// accessor is AST_IaxGeneralGetAllResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for result
// setter function is is AST_IaxGeneralGetAllResponse.prototype.setResult
//
function AST_IaxGeneralGetAllResponse_getResult() { return this._result;}

AST_IaxGeneralGetAllResponse.prototype.getResult = AST_IaxGeneralGetAllResponse_getResult;

function AST_IaxGeneralGetAllResponse_setResult(value) { this._result = value;}

AST_IaxGeneralGetAllResponse.prototype.setResult = AST_IaxGeneralGetAllResponse_setResult;
//
// Serialize {urn:ast}IaxGeneralGetAllResponse
//
function AST_IaxGeneralGetAllResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._result != null) {
      if (this._result == null) {
       xml = xml + '<jns0:result xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:result>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._result);
       xml = xml + '</jns0:result>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_IaxGeneralGetAllResponse.prototype.serialize = AST_IaxGeneralGetAllResponse_serialize;

function AST_IaxGeneralGetAllResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_IaxGeneralGetAllResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'result')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setResult(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGUcpAlgFxsparamSaveResponse
//
function AST_AGUcpAlgFxsparamSaveResponse () {
    this.typeMarker = 'AST_AGUcpAlgFxsparamSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGUcpAlgFxsparamSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGUcpAlgFxsparamSaveResponse.prototype.setResult
//
function AST_AGUcpAlgFxsparamSaveResponse_getResult() { return this._result;}

AST_AGUcpAlgFxsparamSaveResponse.prototype.getResult = AST_AGUcpAlgFxsparamSaveResponse_getResult;

function AST_AGUcpAlgFxsparamSaveResponse_setResult(value) { this._result = value;}

AST_AGUcpAlgFxsparamSaveResponse.prototype.setResult = AST_AGUcpAlgFxsparamSaveResponse_setResult;
//
// Serialize {urn:ast}AGUcpAlgFxsparamSaveResponse
//
function AST_AGUcpAlgFxsparamSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGUcpAlgFxsparamSaveResponse.prototype.serialize = AST_AGUcpAlgFxsparamSaveResponse_serialize;

function AST_AGUcpAlgFxsparamSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGUcpAlgFxsparamSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipFxoBindingGetResponse
//
function AST_AGSipFxoBindingGetResponse () {
    this.typeMarker = 'AST_AGSipFxoBindingGetResponse';
    this._get = null;
}

//
// accessor is AST_AGSipFxoBindingGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}SipFxoBindingGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGSipFxoBindingGetResponse.prototype.setGet
//
function AST_AGSipFxoBindingGetResponse_getGet() { return this._get;}

AST_AGSipFxoBindingGetResponse.prototype.getGet = AST_AGSipFxoBindingGetResponse_getGet;

function AST_AGSipFxoBindingGetResponse_setGet(value) { this._get = value;}

AST_AGSipFxoBindingGetResponse.prototype.setGet = AST_AGSipFxoBindingGetResponse_setGet;
//
// Serialize {urn:ast}AGSipFxoBindingGetResponse
//
function AST_AGSipFxoBindingGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipFxoBindingGetResponse.prototype.serialize = AST_AGSipFxoBindingGetResponse_serialize;

function AST_AGSipFxoBindingGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipFxoBindingGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SipFxoBindingGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgChannelUnlimited
//
function AST_AGAlgChannelUnlimited () {
    this.typeMarker = 'AST_AGAlgChannelUnlimited';
    this._channel = 0;
}

//
// accessor is AST_AGAlgChannelUnlimited.prototype.getChannel
// element get for channel
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for channel
// setter function is is AST_AGAlgChannelUnlimited.prototype.setChannel
//
function AST_AGAlgChannelUnlimited_getChannel() { return this._channel;}

AST_AGAlgChannelUnlimited.prototype.getChannel = AST_AGAlgChannelUnlimited_getChannel;

function AST_AGAlgChannelUnlimited_setChannel(value) { this._channel = value;}

AST_AGAlgChannelUnlimited.prototype.setChannel = AST_AGAlgChannelUnlimited_setChannel;
//
// Serialize {urn:ast}AGAlgChannelUnlimited
//
function AST_AGAlgChannelUnlimited_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:channel>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._channel);
     xml = xml + '</jns0:channel>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgChannelUnlimited.prototype.serialize = AST_AGAlgChannelUnlimited_serialize;

function AST_AGAlgChannelUnlimited_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgChannelUnlimited();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing channel');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setChannel(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGTagListResponse
//
function AST_AGTagListResponse () {
    this.typeMarker = 'AST_AGTagListResponse';
    this._get = null;
}

//
// accessor is AST_AGTagListResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}TagGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGTagListResponse.prototype.setGet
//
function AST_AGTagListResponse_getGet() { return this._get;}

AST_AGTagListResponse.prototype.getGet = AST_AGTagListResponse_getGet;

function AST_AGTagListResponse_setGet(value) { this._get = value;}

AST_AGTagListResponse.prototype.setGet = AST_AGTagListResponse_setGet;
//
// Serialize {urn:ast}AGTagListResponse
//
function AST_AGTagListResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGTagListResponse.prototype.serialize = AST_AGTagListResponse_serialize;

function AST_AGTagListResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGTagListResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_TagGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgAutoCallTestResponse
//
function AST_AGAlgAutoCallTestResponse () {
    this.typeMarker = 'AST_AGAlgAutoCallTestResponse';
    this._result = null;
}

//
// accessor is AST_AGAlgAutoCallTestResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for result
// setter function is is AST_AGAlgAutoCallTestResponse.prototype.setResult
//
function AST_AGAlgAutoCallTestResponse_getResult() { return this._result;}

AST_AGAlgAutoCallTestResponse.prototype.getResult = AST_AGAlgAutoCallTestResponse_getResult;

function AST_AGAlgAutoCallTestResponse_setResult(value) { this._result = value;}

AST_AGAlgAutoCallTestResponse.prototype.setResult = AST_AGAlgAutoCallTestResponse_setResult;
//
// Serialize {urn:ast}AGAlgAutoCallTestResponse
//
function AST_AGAlgAutoCallTestResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._result != null) {
      if (this._result == null) {
       xml = xml + '<jns0:result xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:result>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._result);
       xml = xml + '</jns0:result>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgAutoCallTestResponse.prototype.serialize = AST_AGAlgAutoCallTestResponse_serialize;

function AST_AGAlgAutoCallTestResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgAutoCallTestResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'result')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setResult(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemToolsGetFirmwareInfoResponse
//
function AST_AGSystemToolsGetFirmwareInfoResponse () {
    this.typeMarker = 'AST_AGSystemToolsGetFirmwareInfoResponse';
    this._result = null;
}

//
// accessor is AST_AGSystemToolsGetFirmwareInfoResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for result
// setter function is is AST_AGSystemToolsGetFirmwareInfoResponse.prototype.setResult
//
function AST_AGSystemToolsGetFirmwareInfoResponse_getResult() { return this._result;}

AST_AGSystemToolsGetFirmwareInfoResponse.prototype.getResult = AST_AGSystemToolsGetFirmwareInfoResponse_getResult;

function AST_AGSystemToolsGetFirmwareInfoResponse_setResult(value) { this._result = value;}

AST_AGSystemToolsGetFirmwareInfoResponse.prototype.setResult = AST_AGSystemToolsGetFirmwareInfoResponse_setResult;
//
// Serialize {urn:ast}AGSystemToolsGetFirmwareInfoResponse
//
function AST_AGSystemToolsGetFirmwareInfoResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._result != null) {
      if (this._result == null) {
       xml = xml + '<jns0:result xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:result>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._result);
       xml = xml + '</jns0:result>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemToolsGetFirmwareInfoResponse.prototype.serialize = AST_AGSystemToolsGetFirmwareInfoResponse_serialize;

function AST_AGSystemToolsGetFirmwareInfoResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemToolsGetFirmwareInfoResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'result')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setResult(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemDemoFlagSaveResponse
//
function AST_AGSystemDemoFlagSaveResponse () {
    this.typeMarker = 'AST_AGSystemDemoFlagSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGSystemDemoFlagSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSystemDemoFlagSaveResponse.prototype.setResult
//
function AST_AGSystemDemoFlagSaveResponse_getResult() { return this._result;}

AST_AGSystemDemoFlagSaveResponse.prototype.getResult = AST_AGSystemDemoFlagSaveResponse_getResult;

function AST_AGSystemDemoFlagSaveResponse_setResult(value) { this._result = value;}

AST_AGSystemDemoFlagSaveResponse.prototype.setResult = AST_AGSystemDemoFlagSaveResponse_setResult;
//
// Serialize {urn:ast}AGSystemDemoFlagSaveResponse
//
function AST_AGSystemDemoFlagSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemDemoFlagSaveResponse.prototype.serialize = AST_AGSystemDemoFlagSaveResponse_serialize;

function AST_AGSystemDemoFlagSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemDemoFlagSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSetRemoteProvisionAddress
//
function AST_AGSetRemoteProvisionAddress () {
    this.typeMarker = 'AST_AGSetRemoteProvisionAddress';
    this._RemoteProvisionAddress = null;
    this._UpgradeSwitch = '';
}

//
// accessor is AST_AGSetRemoteProvisionAddress.prototype.getRemoteProvisionAddress
// element get for RemoteProvisionAddress
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for RemoteProvisionAddress
// setter function is is AST_AGSetRemoteProvisionAddress.prototype.setRemoteProvisionAddress
//
function AST_AGSetRemoteProvisionAddress_getRemoteProvisionAddress() { return this._RemoteProvisionAddress;}

AST_AGSetRemoteProvisionAddress.prototype.getRemoteProvisionAddress = AST_AGSetRemoteProvisionAddress_getRemoteProvisionAddress;

function AST_AGSetRemoteProvisionAddress_setRemoteProvisionAddress(value) { this._RemoteProvisionAddress = value;}

AST_AGSetRemoteProvisionAddress.prototype.setRemoteProvisionAddress = AST_AGSetRemoteProvisionAddress_setRemoteProvisionAddress;
//
// accessor is AST_AGSetRemoteProvisionAddress.prototype.getUpgradeSwitch
// element get for UpgradeSwitch
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedByte
// - required element
//
// element set for UpgradeSwitch
// setter function is is AST_AGSetRemoteProvisionAddress.prototype.setUpgradeSwitch
//
function AST_AGSetRemoteProvisionAddress_getUpgradeSwitch() { return this._UpgradeSwitch;}

AST_AGSetRemoteProvisionAddress.prototype.getUpgradeSwitch = AST_AGSetRemoteProvisionAddress_getUpgradeSwitch;

function AST_AGSetRemoteProvisionAddress_setUpgradeSwitch(value) { this._UpgradeSwitch = value;}

AST_AGSetRemoteProvisionAddress.prototype.setUpgradeSwitch = AST_AGSetRemoteProvisionAddress_setUpgradeSwitch;
//
// Serialize {urn:ast}AGSetRemoteProvisionAddress
//
function AST_AGSetRemoteProvisionAddress_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._RemoteProvisionAddress != null) {
      if (this._RemoteProvisionAddress == null) {
       xml = xml + '<jns0:RemoteProvisionAddress xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:RemoteProvisionAddress>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._RemoteProvisionAddress);
       xml = xml + '</jns0:RemoteProvisionAddress>';
      }
     }
    }
    // block for local variables
    {
     xml = xml + '<jns0:UpgradeSwitch>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._UpgradeSwitch);
     xml = xml + '</jns0:UpgradeSwitch>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSetRemoteProvisionAddress.prototype.serialize = AST_AGSetRemoteProvisionAddress_serialize;

function AST_AGSetRemoteProvisionAddress_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSetRemoteProvisionAddress();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing RemoteProvisionAddress');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'RemoteProvisionAddress')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setRemoteProvisionAddress(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing UpgradeSwitch');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setUpgradeSwitch(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkDdnsGetSave
//
function AST_AGNetworkDdnsGetSave () {
    this.typeMarker = 'AST_AGNetworkDdnsGetSave';
    this._save = null;
}

//
// accessor is AST_AGNetworkDdnsGetSave.prototype.getSave
// element get for save
// - element type is {urn:ast}NetworkDdnsSave
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGNetworkDdnsGetSave.prototype.setSave
//
function AST_AGNetworkDdnsGetSave_getSave() { return this._save;}

AST_AGNetworkDdnsGetSave.prototype.getSave = AST_AGNetworkDdnsGetSave_getSave;

function AST_AGNetworkDdnsGetSave_setSave(value) { this._save = value;}

AST_AGNetworkDdnsGetSave.prototype.setSave = AST_AGNetworkDdnsGetSave_setSave;
//
// Serialize {urn:ast}AGNetworkDdnsGetSave
//
function AST_AGNetworkDdnsGetSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkDdnsGetSave.prototype.serialize = AST_AGNetworkDdnsGetSave_serialize;

function AST_AGNetworkDdnsGetSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkDdnsGetSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_NetworkDdnsSave_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkSnmpGetResponse
//
function AST_AGNetworkSnmpGetResponse () {
    this.typeMarker = 'AST_AGNetworkSnmpGetResponse';
    this._get = null;
}

//
// accessor is AST_AGNetworkSnmpGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}SnmpGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGNetworkSnmpGetResponse.prototype.setGet
//
function AST_AGNetworkSnmpGetResponse_getGet() { return this._get;}

AST_AGNetworkSnmpGetResponse.prototype.getGet = AST_AGNetworkSnmpGetResponse_getGet;

function AST_AGNetworkSnmpGetResponse_setGet(value) { this._get = value;}

AST_AGNetworkSnmpGetResponse.prototype.setGet = AST_AGNetworkSnmpGetResponse_setGet;
//
// Serialize {urn:ast}AGNetworkSnmpGetResponse
//
function AST_AGNetworkSnmpGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkSnmpGetResponse.prototype.serialize = AST_AGNetworkSnmpGetResponse_serialize;

function AST_AGNetworkSnmpGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkSnmpGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SnmpGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGjConGetKeysResponse
//
function AST_AGjConGetKeysResponse () {
    this.typeMarker = 'AST_AGjConGetKeysResponse';
    this._keys = null;
}

//
// accessor is AST_AGjConGetKeysResponse.prototype.getKeys
// element get for keys
// - element type is {urn:ast}keyboards
// - optional element
// - nillable
//
// element set for keys
// setter function is is AST_AGjConGetKeysResponse.prototype.setKeys
//
function AST_AGjConGetKeysResponse_getKeys() { return this._keys;}

AST_AGjConGetKeysResponse.prototype.getKeys = AST_AGjConGetKeysResponse_getKeys;

function AST_AGjConGetKeysResponse_setKeys(value) { this._keys = value;}

AST_AGjConGetKeysResponse.prototype.setKeys = AST_AGjConGetKeysResponse_setKeys;
//
// Serialize {urn:ast}AGjConGetKeysResponse
//
function AST_AGjConGetKeysResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._keys != null) {
      if (this._keys == null) {
       xml = xml + '<jns0:keys xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._keys.serialize(cxfjsutils, 'jns0:keys', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGjConGetKeysResponse.prototype.serialize = AST_AGjConGetKeysResponse_serialize;

function AST_AGjConGetKeysResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGjConGetKeysResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing keys');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'keys')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_keyboards_deserialize(cxfjsutils, curElement);
     }
     newobject.setKeys(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGjConConfigKeyboardMapResponse
//
function AST_AGjConConfigKeyboardMapResponse () {
    this.typeMarker = 'AST_AGjConConfigKeyboardMapResponse';
    this._result = 0;
}

//
// accessor is AST_AGjConConfigKeyboardMapResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGjConConfigKeyboardMapResponse.prototype.setResult
//
function AST_AGjConConfigKeyboardMapResponse_getResult() { return this._result;}

AST_AGjConConfigKeyboardMapResponse.prototype.getResult = AST_AGjConConfigKeyboardMapResponse_getResult;

function AST_AGjConConfigKeyboardMapResponse_setResult(value) { this._result = value;}

AST_AGjConConfigKeyboardMapResponse.prototype.setResult = AST_AGjConConfigKeyboardMapResponse_setResult;
//
// Serialize {urn:ast}AGjConConfigKeyboardMapResponse
//
function AST_AGjConConfigKeyboardMapResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGjConConfigKeyboardMapResponse.prototype.serialize = AST_AGjConConfigKeyboardMapResponse_serialize;

function AST_AGjConConfigKeyboardMapResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGjConConfigKeyboardMapResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSetFXSPortsGain
//
function AST_AGSetFXSPortsGain () {
    this.typeMarker = 'AST_AGSetFXSPortsGain';
    this._fxsport = 0;
    this._rxgain = 0.0;
    this._txgain = 0.0;
}

//
// accessor is AST_AGSetFXSPortsGain.prototype.getFxsport
// element get for fxsport
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for fxsport
// setter function is is AST_AGSetFXSPortsGain.prototype.setFxsport
//
function AST_AGSetFXSPortsGain_getFxsport() { return this._fxsport;}

AST_AGSetFXSPortsGain.prototype.getFxsport = AST_AGSetFXSPortsGain_getFxsport;

function AST_AGSetFXSPortsGain_setFxsport(value) { this._fxsport = value;}

AST_AGSetFXSPortsGain.prototype.setFxsport = AST_AGSetFXSPortsGain_setFxsport;
//
// accessor is AST_AGSetFXSPortsGain.prototype.getRxgain
// element get for rxgain
// - element type is {http://www.w3.org/2001/XMLSchema}float
// - required element
//
// element set for rxgain
// setter function is is AST_AGSetFXSPortsGain.prototype.setRxgain
//
function AST_AGSetFXSPortsGain_getRxgain() { return this._rxgain;}

AST_AGSetFXSPortsGain.prototype.getRxgain = AST_AGSetFXSPortsGain_getRxgain;

function AST_AGSetFXSPortsGain_setRxgain(value) { this._rxgain = value;}

AST_AGSetFXSPortsGain.prototype.setRxgain = AST_AGSetFXSPortsGain_setRxgain;
//
// accessor is AST_AGSetFXSPortsGain.prototype.getTxgain
// element get for txgain
// - element type is {http://www.w3.org/2001/XMLSchema}float
// - required element
//
// element set for txgain
// setter function is is AST_AGSetFXSPortsGain.prototype.setTxgain
//
function AST_AGSetFXSPortsGain_getTxgain() { return this._txgain;}

AST_AGSetFXSPortsGain.prototype.getTxgain = AST_AGSetFXSPortsGain_getTxgain;

function AST_AGSetFXSPortsGain_setTxgain(value) { this._txgain = value;}

AST_AGSetFXSPortsGain.prototype.setTxgain = AST_AGSetFXSPortsGain_setTxgain;
//
// Serialize {urn:ast}AGSetFXSPortsGain
//
function AST_AGSetFXSPortsGain_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:fxsport>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._fxsport);
     xml = xml + '</jns0:fxsport>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:rxgain>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._rxgain);
     xml = xml + '</jns0:rxgain>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:txgain>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._txgain);
     xml = xml + '</jns0:txgain>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSetFXSPortsGain.prototype.serialize = AST_AGSetFXSPortsGain_serialize;

function AST_AGSetFXSPortsGain_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSetFXSPortsGain();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fxsport');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setFxsport(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing rxgain');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseFloat(value);
    }
    newobject.setRxgain(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing txgain');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseFloat(value);
    }
    newobject.setTxgain(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGjConConfigKeyboardMap
//
function AST_AGjConConfigKeyboardMap () {
    this.typeMarker = 'AST_AGjConConfigKeyboardMap';
    this._keyboard = 0;
    this._old = '';
    this._val = '';
}

//
// accessor is AST_AGjConConfigKeyboardMap.prototype.getKeyboard
// element get for keyboard
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for keyboard
// setter function is is AST_AGjConConfigKeyboardMap.prototype.setKeyboard
//
function AST_AGjConConfigKeyboardMap_getKeyboard() { return this._keyboard;}

AST_AGjConConfigKeyboardMap.prototype.getKeyboard = AST_AGjConConfigKeyboardMap_getKeyboard;

function AST_AGjConConfigKeyboardMap_setKeyboard(value) { this._keyboard = value;}

AST_AGjConConfigKeyboardMap.prototype.setKeyboard = AST_AGjConConfigKeyboardMap_setKeyboard;
//
// accessor is AST_AGjConConfigKeyboardMap.prototype.getOld
// element get for old
// - element type is {http://www.w3.org/2001/XMLSchema}byte
// - required element
//
// element set for old
// setter function is is AST_AGjConConfigKeyboardMap.prototype.setOld
//
function AST_AGjConConfigKeyboardMap_getOld() { return this._old;}

AST_AGjConConfigKeyboardMap.prototype.getOld = AST_AGjConConfigKeyboardMap_getOld;

function AST_AGjConConfigKeyboardMap_setOld(value) { this._old = value;}

AST_AGjConConfigKeyboardMap.prototype.setOld = AST_AGjConConfigKeyboardMap_setOld;
//
// accessor is AST_AGjConConfigKeyboardMap.prototype.getVal
// element get for val
// - element type is {http://www.w3.org/2001/XMLSchema}byte
// - required element
//
// element set for val
// setter function is is AST_AGjConConfigKeyboardMap.prototype.setVal
//
function AST_AGjConConfigKeyboardMap_getVal() { return this._val;}

AST_AGjConConfigKeyboardMap.prototype.getVal = AST_AGjConConfigKeyboardMap_getVal;

function AST_AGjConConfigKeyboardMap_setVal(value) { this._val = value;}

AST_AGjConConfigKeyboardMap.prototype.setVal = AST_AGjConConfigKeyboardMap_setVal;
//
// Serialize {urn:ast}AGjConConfigKeyboardMap
//
function AST_AGjConConfigKeyboardMap_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:keyboard>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._keyboard);
     xml = xml + '</jns0:keyboard>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:old>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._old);
     xml = xml + '</jns0:old>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:val>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._val);
     xml = xml + '</jns0:val>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGjConConfigKeyboardMap.prototype.serialize = AST_AGjConConfigKeyboardMap_serialize;

function AST_AGjConConfigKeyboardMap_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGjConConfigKeyboardMap();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing keyboard');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setKeyboard(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing old');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setOld(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing val');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setVal(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgChannelRemoveOne
//
function AST_AGAlgChannelRemoveOne () {
    this.typeMarker = 'AST_AGAlgChannelRemoveOne';
    this._channel = '';
}

//
// accessor is AST_AGAlgChannelRemoveOne.prototype.getChannel
// element get for channel
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedShort
// - required element
//
// element set for channel
// setter function is is AST_AGAlgChannelRemoveOne.prototype.setChannel
//
function AST_AGAlgChannelRemoveOne_getChannel() { return this._channel;}

AST_AGAlgChannelRemoveOne.prototype.getChannel = AST_AGAlgChannelRemoveOne_getChannel;

function AST_AGAlgChannelRemoveOne_setChannel(value) { this._channel = value;}

AST_AGAlgChannelRemoveOne.prototype.setChannel = AST_AGAlgChannelRemoveOne_setChannel;
//
// Serialize {urn:ast}AGAlgChannelRemoveOne
//
function AST_AGAlgChannelRemoveOne_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:channel>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._channel);
     xml = xml + '</jns0:channel>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgChannelRemoveOne.prototype.serialize = AST_AGAlgChannelRemoveOne_serialize;

function AST_AGAlgChannelRemoveOne_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgChannelRemoveOne();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing channel');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = value;
    }
    newobject.setChannel(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgAutoCallGetResponse
//
function AST_AGAlgAutoCallGetResponse () {
    this.typeMarker = 'AST_AGAlgAutoCallGetResponse';
    this._get = null;
}

//
// accessor is AST_AGAlgAutoCallGetResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}AutoCallGet
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGAlgAutoCallGetResponse.prototype.setGet
//
function AST_AGAlgAutoCallGetResponse_getGet() { return this._get;}

AST_AGAlgAutoCallGetResponse.prototype.getGet = AST_AGAlgAutoCallGetResponse_getGet;

function AST_AGAlgAutoCallGetResponse_setGet(value) { this._get = value;}

AST_AGAlgAutoCallGetResponse.prototype.setGet = AST_AGAlgAutoCallGetResponse_setGet;
//
// Serialize {urn:ast}AGAlgAutoCallGetResponse
//
function AST_AGAlgAutoCallGetResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgAutoCallGetResponse.prototype.serialize = AST_AGAlgAutoCallGetResponse_serialize;

function AST_AGAlgAutoCallGetResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgAutoCallGetResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AutoCallGet_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGCommitAllResponse
//
function AST_AGCommitAllResponse () {
    this.typeMarker = 'AST_AGCommitAllResponse';
    this._result = 0;
}

//
// accessor is AST_AGCommitAllResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGCommitAllResponse.prototype.setResult
//
function AST_AGCommitAllResponse_getResult() { return this._result;}

AST_AGCommitAllResponse.prototype.getResult = AST_AGCommitAllResponse_getResult;

function AST_AGCommitAllResponse_setResult(value) { this._result = value;}

AST_AGCommitAllResponse.prototype.setResult = AST_AGCommitAllResponse_setResult;
//
// Serialize {urn:ast}AGCommitAllResponse
//
function AST_AGCommitAllResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGCommitAllResponse.prototype.serialize = AST_AGCommitAllResponse_serialize;

function AST_AGCommitAllResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGCommitAllResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipBatchEndpointsSaveResponse
//
function AST_AGSipBatchEndpointsSaveResponse () {
    this.typeMarker = 'AST_AGSipBatchEndpointsSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGSipBatchEndpointsSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGSipBatchEndpointsSaveResponse.prototype.setResult
//
function AST_AGSipBatchEndpointsSaveResponse_getResult() { return this._result;}

AST_AGSipBatchEndpointsSaveResponse.prototype.getResult = AST_AGSipBatchEndpointsSaveResponse_getResult;

function AST_AGSipBatchEndpointsSaveResponse_setResult(value) { this._result = value;}

AST_AGSipBatchEndpointsSaveResponse.prototype.setResult = AST_AGSipBatchEndpointsSaveResponse_setResult;
//
// Serialize {urn:ast}AGSipBatchEndpointsSaveResponse
//
function AST_AGSipBatchEndpointsSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipBatchEndpointsSaveResponse.prototype.serialize = AST_AGSipBatchEndpointsSaveResponse_serialize;

function AST_AGSipBatchEndpointsSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipBatchEndpointsSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgSecSettingDeleteFileResponse
//
function AST_AGAlgSecSettingDeleteFileResponse () {
    this.typeMarker = 'AST_AGAlgSecSettingDeleteFileResponse';
    this._result = 0;
}

//
// accessor is AST_AGAlgSecSettingDeleteFileResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGAlgSecSettingDeleteFileResponse.prototype.setResult
//
function AST_AGAlgSecSettingDeleteFileResponse_getResult() { return this._result;}

AST_AGAlgSecSettingDeleteFileResponse.prototype.getResult = AST_AGAlgSecSettingDeleteFileResponse_getResult;

function AST_AGAlgSecSettingDeleteFileResponse_setResult(value) { this._result = value;}

AST_AGAlgSecSettingDeleteFileResponse.prototype.setResult = AST_AGAlgSecSettingDeleteFileResponse_setResult;
//
// Serialize {urn:ast}AGAlgSecSettingDeleteFileResponse
//
function AST_AGAlgSecSettingDeleteFileResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgSecSettingDeleteFileResponse.prototype.serialize = AST_AGAlgSecSettingDeleteFileResponse_serialize;

function AST_AGAlgSecSettingDeleteFileResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgSecSettingDeleteFileResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSipBendpointGet
//
function AST_AGSipBendpointGet () {
    this.typeMarker = 'AST_AGSipBendpointGet';
}

//
// Serialize {urn:ast}AGSipBendpointGet
//
function AST_AGSipBendpointGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSipBendpointGet.prototype.serialize = AST_AGSipBendpointGet_serialize;

function AST_AGSipBendpointGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSipBendpointGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemLanguageSave
//
function AST_AGSystemLanguageSave () {
    this.typeMarker = 'AST_AGSystemLanguageSave';
    this._language = null;
}

//
// accessor is AST_AGSystemLanguageSave.prototype.getLanguage
// element get for language
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for language
// setter function is is AST_AGSystemLanguageSave.prototype.setLanguage
//
function AST_AGSystemLanguageSave_getLanguage() { return this._language;}

AST_AGSystemLanguageSave.prototype.getLanguage = AST_AGSystemLanguageSave_getLanguage;

function AST_AGSystemLanguageSave_setLanguage(value) { this._language = value;}

AST_AGSystemLanguageSave.prototype.setLanguage = AST_AGSystemLanguageSave_setLanguage;
//
// Serialize {urn:ast}AGSystemLanguageSave
//
function AST_AGSystemLanguageSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._language != null) {
      if (this._language == null) {
       xml = xml + '<jns0:language xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:language>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._language);
       xml = xml + '</jns0:language>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemLanguageSave.prototype.serialize = AST_AGSystemLanguageSave_serialize;

function AST_AGSystemLanguageSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemLanguageSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing language');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'language')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setLanguage(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAdvCloudGetStatusResponse
//
function AST_AGAdvCloudGetStatusResponse () {
    this.typeMarker = 'AST_AGAdvCloudGetStatusResponse';
    this._cloudstatus = null;
}

//
// accessor is AST_AGAdvCloudGetStatusResponse.prototype.getCloudstatus
// element get for cloudstatus
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - optional element
// - nillable
//
// element set for cloudstatus
// setter function is is AST_AGAdvCloudGetStatusResponse.prototype.setCloudstatus
//
function AST_AGAdvCloudGetStatusResponse_getCloudstatus() { return this._cloudstatus;}

AST_AGAdvCloudGetStatusResponse.prototype.getCloudstatus = AST_AGAdvCloudGetStatusResponse_getCloudstatus;

function AST_AGAdvCloudGetStatusResponse_setCloudstatus(value) { this._cloudstatus = value;}

AST_AGAdvCloudGetStatusResponse.prototype.setCloudstatus = AST_AGAdvCloudGetStatusResponse_setCloudstatus;
//
// Serialize {urn:ast}AGAdvCloudGetStatusResponse
//
function AST_AGAdvCloudGetStatusResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._cloudstatus != null) {
      if (this._cloudstatus == null) {
       xml = xml + '<jns0:cloudstatus xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:cloudstatus>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._cloudstatus);
       xml = xml + '</jns0:cloudstatus>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAdvCloudGetStatusResponse.prototype.serialize = AST_AGAdvCloudGetStatusResponse_serialize;

function AST_AGAdvCloudGetStatusResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAdvCloudGetStatusResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing cloudstatus');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'cloudstatus')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = parseInt(value);
     }
     newobject.setCloudstatus(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgPickupSave
//
function AST_AGAlgPickupSave () {
    this.typeMarker = 'AST_AGAlgPickupSave';
    this._pickup = null;
    this._arr = null;
}

//
// accessor is AST_AGAlgPickupSave.prototype.getPickup
// element get for pickup
// - element type is {urn:ast}AlgPickup
// - optional element
// - nillable
//
// element set for pickup
// setter function is is AST_AGAlgPickupSave.prototype.setPickup
//
function AST_AGAlgPickupSave_getPickup() { return this._pickup;}

AST_AGAlgPickupSave.prototype.getPickup = AST_AGAlgPickupSave_getPickup;

function AST_AGAlgPickupSave_setPickup(value) { this._pickup = value;}

AST_AGAlgPickupSave.prototype.setPickup = AST_AGAlgPickupSave_setPickup;
//
// accessor is AST_AGAlgPickupSave.prototype.getArr
// element get for arr
// - element type is {urn:ast}AlgPickupChnArr
// - optional element
// - nillable
//
// element set for arr
// setter function is is AST_AGAlgPickupSave.prototype.setArr
//
function AST_AGAlgPickupSave_getArr() { return this._arr;}

AST_AGAlgPickupSave.prototype.getArr = AST_AGAlgPickupSave_getArr;

function AST_AGAlgPickupSave_setArr(value) { this._arr = value;}

AST_AGAlgPickupSave.prototype.setArr = AST_AGAlgPickupSave_setArr;
//
// Serialize {urn:ast}AGAlgPickupSave
//
function AST_AGAlgPickupSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._pickup != null) {
      if (this._pickup == null) {
       xml = xml + '<jns0:pickup xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._pickup.serialize(cxfjsutils, 'jns0:pickup', null);
      }
     }
    }
    // block for local variables
    {
     if (this._arr != null) {
      if (this._arr == null) {
       xml = xml + '<jns0:arr xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._arr.serialize(cxfjsutils, 'jns0:arr', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgPickupSave.prototype.serialize = AST_AGAlgPickupSave_serialize;

function AST_AGAlgPickupSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgPickupSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing pickup');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'pickup')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AlgPickup_deserialize(cxfjsutils, curElement);
     }
     newobject.setPickup(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing arr');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'arr')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AlgPickupChnArr_deserialize(cxfjsutils, curElement);
     }
     newobject.setArr(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkOpenvpnGet
//
function AST_AGNetworkOpenvpnGet () {
    this.typeMarker = 'AST_AGNetworkOpenvpnGet';
}

//
// Serialize {urn:ast}AGNetworkOpenvpnGet
//
function AST_AGNetworkOpenvpnGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkOpenvpnGet.prototype.serialize = AST_AGNetworkOpenvpnGet_serialize;

function AST_AGNetworkOpenvpnGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkOpenvpnGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGUcpAlgFxsparamGet
//
function AST_AGUcpAlgFxsparamGet () {
    this.typeMarker = 'AST_AGUcpAlgFxsparamGet';
}

//
// Serialize {urn:ast}AGUcpAlgFxsparamGet
//
function AST_AGUcpAlgFxsparamGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGUcpAlgFxsparamGet.prototype.serialize = AST_AGUcpAlgFxsparamGet_serialize;

function AST_AGUcpAlgFxsparamGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGUcpAlgFxsparamGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGLogCdrDel
//
function AST_AGLogCdrDel () {
    this.typeMarker = 'AST_AGLogCdrDel';
    this._filter = null;
    this._table = null;
}

//
// accessor is AST_AGLogCdrDel.prototype.getFilter
// element get for filter
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for filter
// setter function is is AST_AGLogCdrDel.prototype.setFilter
//
function AST_AGLogCdrDel_getFilter() { return this._filter;}

AST_AGLogCdrDel.prototype.getFilter = AST_AGLogCdrDel_getFilter;

function AST_AGLogCdrDel_setFilter(value) { this._filter = value;}

AST_AGLogCdrDel.prototype.setFilter = AST_AGLogCdrDel_setFilter;
//
// accessor is AST_AGLogCdrDel.prototype.getTable
// element get for table
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for table
// setter function is is AST_AGLogCdrDel.prototype.setTable
//
function AST_AGLogCdrDel_getTable() { return this._table;}

AST_AGLogCdrDel.prototype.getTable = AST_AGLogCdrDel_getTable;

function AST_AGLogCdrDel_setTable(value) { this._table = value;}

AST_AGLogCdrDel.prototype.setTable = AST_AGLogCdrDel_setTable;
//
// Serialize {urn:ast}AGLogCdrDel
//
function AST_AGLogCdrDel_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._filter != null) {
      if (this._filter == null) {
       xml = xml + '<jns0:filter xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:filter>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._filter);
       xml = xml + '</jns0:filter>';
      }
     }
    }
    // block for local variables
    {
     if (this._table != null) {
      if (this._table == null) {
       xml = xml + '<jns0:table xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:table>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._table);
       xml = xml + '</jns0:table>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGLogCdrDel.prototype.serialize = AST_AGLogCdrDel_serialize;

function AST_AGLogCdrDel_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGLogCdrDel();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing filter');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'filter')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setFilter(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing table');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'table')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setTable(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}GroupGetAll
//
function AST_GroupGetAll () {
    this.typeMarker = 'AST_GroupGetAll';
}

//
// Serialize {urn:ast}GroupGetAll
//
function AST_GroupGetAll_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_GroupGetAll.prototype.serialize = AST_GroupGetAll_serialize;

function AST_GroupGetAll_deserialize (cxfjsutils, element) {
    var newobject = new AST_GroupGetAll();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGGetFXSPortsStatus
//
function AST_AGGetFXSPortsStatus () {
    this.typeMarker = 'AST_AGGetFXSPortsStatus';
    this._fxsport = 0;
}

//
// accessor is AST_AGGetFXSPortsStatus.prototype.getFxsport
// element get for fxsport
// - element type is {http://www.w3.org/2001/XMLSchema}unsignedInt
// - required element
//
// element set for fxsport
// setter function is is AST_AGGetFXSPortsStatus.prototype.setFxsport
//
function AST_AGGetFXSPortsStatus_getFxsport() { return this._fxsport;}

AST_AGGetFXSPortsStatus.prototype.getFxsport = AST_AGGetFXSPortsStatus_getFxsport;

function AST_AGGetFXSPortsStatus_setFxsport(value) { this._fxsport = value;}

AST_AGGetFXSPortsStatus.prototype.setFxsport = AST_AGGetFXSPortsStatus_setFxsport;
//
// Serialize {urn:ast}AGGetFXSPortsStatus
//
function AST_AGGetFXSPortsStatus_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:fxsport>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._fxsport);
     xml = xml + '</jns0:fxsport>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGGetFXSPortsStatus.prototype.serialize = AST_AGGetFXSPortsStatus_serialize;

function AST_AGGetFXSPortsStatus_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGGetFXSPortsStatus();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing fxsport');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setFxsport(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGUcpAlgDriverSaveResponse
//
function AST_AGUcpAlgDriverSaveResponse () {
    this.typeMarker = 'AST_AGUcpAlgDriverSaveResponse';
    this._result = 0;
}

//
// accessor is AST_AGUcpAlgDriverSaveResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGUcpAlgDriverSaveResponse.prototype.setResult
//
function AST_AGUcpAlgDriverSaveResponse_getResult() { return this._result;}

AST_AGUcpAlgDriverSaveResponse.prototype.getResult = AST_AGUcpAlgDriverSaveResponse_getResult;

function AST_AGUcpAlgDriverSaveResponse_setResult(value) { this._result = value;}

AST_AGUcpAlgDriverSaveResponse.prototype.setResult = AST_AGUcpAlgDriverSaveResponse_setResult;
//
// Serialize {urn:ast}AGUcpAlgDriverSaveResponse
//
function AST_AGUcpAlgDriverSaveResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGUcpAlgDriverSaveResponse.prototype.serialize = AST_AGUcpAlgDriverSaveResponse_serialize;

function AST_AGUcpAlgDriverSaveResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGUcpAlgDriverSaveResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSystemStatusGet
//
function AST_AGSystemStatusGet () {
    this.typeMarker = 'AST_AGSystemStatusGet';
}

//
// Serialize {urn:ast}AGSystemStatusGet
//
function AST_AGSystemStatusGet_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSystemStatusGet.prototype.serialize = AST_AGSystemStatusGet_serialize;

function AST_AGSystemStatusGet_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSystemStatusGet();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGSysTimeSave
//
function AST_AGSysTimeSave () {
    this.typeMarker = 'AST_AGSysTimeSave';
    this._save = null;
    this._cmd1 = null;
    this._cmd2 = null;
}

//
// accessor is AST_AGSysTimeSave.prototype.getSave
// element get for save
// - element type is {urn:ast}SysTimeSave
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGSysTimeSave.prototype.setSave
//
function AST_AGSysTimeSave_getSave() { return this._save;}

AST_AGSysTimeSave.prototype.getSave = AST_AGSysTimeSave_getSave;

function AST_AGSysTimeSave_setSave(value) { this._save = value;}

AST_AGSysTimeSave.prototype.setSave = AST_AGSysTimeSave_setSave;
//
// accessor is AST_AGSysTimeSave.prototype.getCmd1
// element get for cmd1
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for cmd1
// setter function is is AST_AGSysTimeSave.prototype.setCmd1
//
function AST_AGSysTimeSave_getCmd1() { return this._cmd1;}

AST_AGSysTimeSave.prototype.getCmd1 = AST_AGSysTimeSave_getCmd1;

function AST_AGSysTimeSave_setCmd1(value) { this._cmd1 = value;}

AST_AGSysTimeSave.prototype.setCmd1 = AST_AGSysTimeSave_setCmd1;
//
// accessor is AST_AGSysTimeSave.prototype.getCmd2
// element get for cmd2
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for cmd2
// setter function is is AST_AGSysTimeSave.prototype.setCmd2
//
function AST_AGSysTimeSave_getCmd2() { return this._cmd2;}

AST_AGSysTimeSave.prototype.getCmd2 = AST_AGSysTimeSave_getCmd2;

function AST_AGSysTimeSave_setCmd2(value) { this._cmd2 = value;}

AST_AGSysTimeSave.prototype.setCmd2 = AST_AGSysTimeSave_setCmd2;
//
// Serialize {urn:ast}AGSysTimeSave
//
function AST_AGSysTimeSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    // block for local variables
    {
     if (this._cmd1 != null) {
      if (this._cmd1 == null) {
       xml = xml + '<jns0:cmd1 xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:cmd1>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._cmd1);
       xml = xml + '</jns0:cmd1>';
      }
     }
    }
    // block for local variables
    {
     if (this._cmd2 != null) {
      if (this._cmd2 == null) {
       xml = xml + '<jns0:cmd2 xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:cmd2>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._cmd2);
       xml = xml + '</jns0:cmd2>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGSysTimeSave.prototype.serialize = AST_AGSysTimeSave_serialize;

function AST_AGSysTimeSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGSysTimeSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_SysTimeSave_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing cmd1');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'cmd1')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setCmd1(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing cmd2');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'cmd2')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setCmd2(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingGroupGetOneResponse
//
function AST_AGRoutingGroupGetOneResponse () {
    this.typeMarker = 'AST_AGRoutingGroupGetOneResponse';
    this._get = null;
}

//
// accessor is AST_AGRoutingGroupGetOneResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}RoutingGroupGetOne
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGRoutingGroupGetOneResponse.prototype.setGet
//
function AST_AGRoutingGroupGetOneResponse_getGet() { return this._get;}

AST_AGRoutingGroupGetOneResponse.prototype.getGet = AST_AGRoutingGroupGetOneResponse_getGet;

function AST_AGRoutingGroupGetOneResponse_setGet(value) { this._get = value;}

AST_AGRoutingGroupGetOneResponse.prototype.setGet = AST_AGRoutingGroupGetOneResponse_setGet;
//
// Serialize {urn:ast}AGRoutingGroupGetOneResponse
//
function AST_AGRoutingGroupGetOneResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingGroupGetOneResponse.prototype.serialize = AST_AGRoutingGroupGetOneResponse_serialize;

function AST_AGRoutingGroupGetOneResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingGroupGetOneResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_RoutingGroupGetOne_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkBurnMacResponse
//
function AST_AGNetworkBurnMacResponse () {
    this.typeMarker = 'AST_AGNetworkBurnMacResponse';
    this._result = 0;
}

//
// accessor is AST_AGNetworkBurnMacResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}int
// - required element
//
// element set for result
// setter function is is AST_AGNetworkBurnMacResponse.prototype.setResult
//
function AST_AGNetworkBurnMacResponse_getResult() { return this._result;}

AST_AGNetworkBurnMacResponse.prototype.getResult = AST_AGNetworkBurnMacResponse_getResult;

function AST_AGNetworkBurnMacResponse_setResult(value) { this._result = value;}

AST_AGNetworkBurnMacResponse.prototype.setResult = AST_AGNetworkBurnMacResponse_setResult;
//
// Serialize {urn:ast}AGNetworkBurnMacResponse
//
function AST_AGNetworkBurnMacResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     xml = xml + '<jns0:result>';
     xml = xml + cxfjsutils.escapeXmlEntities(this._result);
     xml = xml + '</jns0:result>';
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkBurnMacResponse.prototype.serialize = AST_AGNetworkBurnMacResponse_serialize;

function AST_AGNetworkBurnMacResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkBurnMacResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    var value = null;
    if (!cxfjsutils.isElementNil(curElement)) {
     value = cxfjsutils.getNodeText(curElement);
     item = parseInt(value);
    }
    newobject.setResult(item);
    var item = null;
    if (curElement != null) {
     curElement = cxfjsutils.getNextElementSibling(curElement);
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAdvTr069Save
//
function AST_AGAdvTr069Save () {
    this.typeMarker = 'AST_AGAdvTr069Save';
    this._save = null;
}

//
// accessor is AST_AGAdvTr069Save.prototype.getSave
// element get for save
// - element type is {urn:ast}AdvTr069Save
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGAdvTr069Save.prototype.setSave
//
function AST_AGAdvTr069Save_getSave() { return this._save;}

AST_AGAdvTr069Save.prototype.getSave = AST_AGAdvTr069Save_getSave;

function AST_AGAdvTr069Save_setSave(value) { this._save = value;}

AST_AGAdvTr069Save.prototype.setSave = AST_AGAdvTr069Save_setSave;
//
// Serialize {urn:ast}AGAdvTr069Save
//
function AST_AGAdvTr069Save_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAdvTr069Save.prototype.serialize = AST_AGAdvTr069Save_serialize;

function AST_AGAdvTr069Save_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAdvTr069Save();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_AdvTr069Save_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGNetworkRulesGetOneResponse
//
function AST_AGNetworkRulesGetOneResponse () {
    this.typeMarker = 'AST_AGNetworkRulesGetOneResponse';
    this._get = null;
}

//
// accessor is AST_AGNetworkRulesGetOneResponse.prototype.getGet
// element get for get
// - element type is {urn:ast}UcpNetworkRulesGetOne
// - optional element
// - nillable
//
// element set for get
// setter function is is AST_AGNetworkRulesGetOneResponse.prototype.setGet
//
function AST_AGNetworkRulesGetOneResponse_getGet() { return this._get;}

AST_AGNetworkRulesGetOneResponse.prototype.getGet = AST_AGNetworkRulesGetOneResponse_getGet;

function AST_AGNetworkRulesGetOneResponse_setGet(value) { this._get = value;}

AST_AGNetworkRulesGetOneResponse.prototype.setGet = AST_AGNetworkRulesGetOneResponse_setGet;
//
// Serialize {urn:ast}AGNetworkRulesGetOneResponse
//
function AST_AGNetworkRulesGetOneResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._get != null) {
      if (this._get == null) {
       xml = xml + '<jns0:get xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._get.serialize(cxfjsutils, 'jns0:get', null);
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGNetworkRulesGetOneResponse.prototype.serialize = AST_AGNetworkRulesGetOneResponse_serialize;

function AST_AGNetworkRulesGetOneResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGNetworkRulesGetOneResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing get');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'get')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_UcpNetworkRulesGetOne_deserialize(cxfjsutils, curElement);
     }
     newobject.setGet(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RoutingGetAllResponse
//
function AST_RoutingGetAllResponse () {
    this.typeMarker = 'AST_RoutingGetAllResponse';
    this._result = null;
}

//
// accessor is AST_RoutingGetAllResponse.prototype.getResult
// element get for result
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for result
// setter function is is AST_RoutingGetAllResponse.prototype.setResult
//
function AST_RoutingGetAllResponse_getResult() { return this._result;}

AST_RoutingGetAllResponse.prototype.getResult = AST_RoutingGetAllResponse_getResult;

function AST_RoutingGetAllResponse_setResult(value) { this._result = value;}

AST_RoutingGetAllResponse.prototype.setResult = AST_RoutingGetAllResponse_setResult;
//
// Serialize {urn:ast}RoutingGetAllResponse
//
function AST_RoutingGetAllResponse_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._result != null) {
      if (this._result == null) {
       xml = xml + '<jns0:result xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:result>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._result);
       xml = xml + '</jns0:result>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RoutingGetAllResponse.prototype.serialize = AST_RoutingGetAllResponse_serialize;

function AST_RoutingGetAllResponse_deserialize (cxfjsutils, element) {
    var newobject = new AST_RoutingGetAllResponse();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing result');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'result')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setResult(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGAlgChannelGetOne
//
function AST_AGAlgChannelGetOne () {
    this.typeMarker = 'AST_AGAlgChannelGetOne';
    this._channel = null;
}

//
// accessor is AST_AGAlgChannelGetOne.prototype.getChannel
// element get for channel
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for channel
// setter function is is AST_AGAlgChannelGetOne.prototype.setChannel
//
function AST_AGAlgChannelGetOne_getChannel() { return this._channel;}

AST_AGAlgChannelGetOne.prototype.getChannel = AST_AGAlgChannelGetOne_getChannel;

function AST_AGAlgChannelGetOne_setChannel(value) { this._channel = value;}

AST_AGAlgChannelGetOne.prototype.setChannel = AST_AGAlgChannelGetOne_setChannel;
//
// Serialize {urn:ast}AGAlgChannelGetOne
//
function AST_AGAlgChannelGetOne_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._channel != null) {
      if (this._channel == null) {
       xml = xml + '<jns0:channel xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:channel>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._channel);
       xml = xml + '</jns0:channel>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGAlgChannelGetOne.prototype.serialize = AST_AGAlgChannelGetOne_serialize;

function AST_AGAlgChannelGetOne_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGAlgChannelGetOne();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing channel');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'channel')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setChannel(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}AGRoutingRulsSave
//
function AST_AGRoutingRulsSave () {
    this.typeMarker = 'AST_AGRoutingRulsSave';
    this._oldroutingname = null;
    this._newroutingname = null;
    this._save = null;
    this._cidnumber = null;
    this._passwd = null;
}

//
// accessor is AST_AGRoutingRulsSave.prototype.getOldroutingname
// element get for oldroutingname
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for oldroutingname
// setter function is is AST_AGRoutingRulsSave.prototype.setOldroutingname
//
function AST_AGRoutingRulsSave_getOldroutingname() { return this._oldroutingname;}

AST_AGRoutingRulsSave.prototype.getOldroutingname = AST_AGRoutingRulsSave_getOldroutingname;

function AST_AGRoutingRulsSave_setOldroutingname(value) { this._oldroutingname = value;}

AST_AGRoutingRulsSave.prototype.setOldroutingname = AST_AGRoutingRulsSave_setOldroutingname;
//
// accessor is AST_AGRoutingRulsSave.prototype.getNewroutingname
// element get for newroutingname
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for newroutingname
// setter function is is AST_AGRoutingRulsSave.prototype.setNewroutingname
//
function AST_AGRoutingRulsSave_getNewroutingname() { return this._newroutingname;}

AST_AGRoutingRulsSave.prototype.getNewroutingname = AST_AGRoutingRulsSave_getNewroutingname;

function AST_AGRoutingRulsSave_setNewroutingname(value) { this._newroutingname = value;}

AST_AGRoutingRulsSave.prototype.setNewroutingname = AST_AGRoutingRulsSave_setNewroutingname;
//
// accessor is AST_AGRoutingRulsSave.prototype.getSave
// element get for save
// - element type is {urn:ast}RoutingContex
// - optional element
// - nillable
//
// element set for save
// setter function is is AST_AGRoutingRulsSave.prototype.setSave
//
function AST_AGRoutingRulsSave_getSave() { return this._save;}

AST_AGRoutingRulsSave.prototype.getSave = AST_AGRoutingRulsSave_getSave;

function AST_AGRoutingRulsSave_setSave(value) { this._save = value;}

AST_AGRoutingRulsSave.prototype.setSave = AST_AGRoutingRulsSave_setSave;
//
// accessor is AST_AGRoutingRulsSave.prototype.getCidnumber
// element get for cidnumber
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for cidnumber
// setter function is is AST_AGRoutingRulsSave.prototype.setCidnumber
//
function AST_AGRoutingRulsSave_getCidnumber() { return this._cidnumber;}

AST_AGRoutingRulsSave.prototype.getCidnumber = AST_AGRoutingRulsSave_getCidnumber;

function AST_AGRoutingRulsSave_setCidnumber(value) { this._cidnumber = value;}

AST_AGRoutingRulsSave.prototype.setCidnumber = AST_AGRoutingRulsSave_setCidnumber;
//
// accessor is AST_AGRoutingRulsSave.prototype.getPasswd
// element get for passwd
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for passwd
// setter function is is AST_AGRoutingRulsSave.prototype.setPasswd
//
function AST_AGRoutingRulsSave_getPasswd() { return this._passwd;}

AST_AGRoutingRulsSave.prototype.getPasswd = AST_AGRoutingRulsSave_getPasswd;

function AST_AGRoutingRulsSave_setPasswd(value) { this._passwd = value;}

AST_AGRoutingRulsSave.prototype.setPasswd = AST_AGRoutingRulsSave_setPasswd;
//
// Serialize {urn:ast}AGRoutingRulsSave
//
function AST_AGRoutingRulsSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._oldroutingname != null) {
      if (this._oldroutingname == null) {
       xml = xml + '<jns0:oldroutingname xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:oldroutingname>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._oldroutingname);
       xml = xml + '</jns0:oldroutingname>';
      }
     }
    }
    // block for local variables
    {
     if (this._newroutingname != null) {
      if (this._newroutingname == null) {
       xml = xml + '<jns0:newroutingname xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:newroutingname>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._newroutingname);
       xml = xml + '</jns0:newroutingname>';
      }
     }
    }
    // block for local variables
    {
     if (this._save != null) {
      if (this._save == null) {
       xml = xml + '<jns0:save xsi:nil=\'true\'/>';
      } else {
       xml = xml + this._save.serialize(cxfjsutils, 'jns0:save', null);
      }
     }
    }
    // block for local variables
    {
     if (this._cidnumber != null) {
      if (this._cidnumber == null) {
       xml = xml + '<jns0:cidnumber xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:cidnumber>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._cidnumber);
       xml = xml + '</jns0:cidnumber>';
      }
     }
    }
    // block for local variables
    {
     if (this._passwd != null) {
      if (this._passwd == null) {
       xml = xml + '<jns0:passwd xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:passwd>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._passwd);
       xml = xml + '</jns0:passwd>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_AGRoutingRulsSave.prototype.serialize = AST_AGRoutingRulsSave_serialize;

function AST_AGRoutingRulsSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_AGRoutingRulsSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing oldroutingname');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'oldroutingname')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setOldroutingname(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing newroutingname');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'newroutingname')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setNewroutingname(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing save');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'save')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      item = AST_RoutingContex_deserialize(cxfjsutils, curElement);
     }
     newobject.setSave(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing cidnumber');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'cidnumber')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setCidnumber(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing passwd');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'passwd')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setPasswd(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Constructor for XML Schema item {urn:ast}RtpSave
//
function AST_RtpSave () {
    this.typeMarker = 'AST_RtpSave';
    this._oldSection = null;
    this._newSection = null;
    this._datachunk = null;
}

//
// accessor is AST_RtpSave.prototype.getOldSection
// element get for oldSection
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for oldSection
// setter function is is AST_RtpSave.prototype.setOldSection
//
function AST_RtpSave_getOldSection() { return this._oldSection;}

AST_RtpSave.prototype.getOldSection = AST_RtpSave_getOldSection;

function AST_RtpSave_setOldSection(value) { this._oldSection = value;}

AST_RtpSave.prototype.setOldSection = AST_RtpSave_setOldSection;
//
// accessor is AST_RtpSave.prototype.getNewSection
// element get for newSection
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for newSection
// setter function is is AST_RtpSave.prototype.setNewSection
//
function AST_RtpSave_getNewSection() { return this._newSection;}

AST_RtpSave.prototype.getNewSection = AST_RtpSave_getNewSection;

function AST_RtpSave_setNewSection(value) { this._newSection = value;}

AST_RtpSave.prototype.setNewSection = AST_RtpSave_setNewSection;
//
// accessor is AST_RtpSave.prototype.getDatachunk
// element get for datachunk
// - element type is {http://www.w3.org/2001/XMLSchema}string
// - optional element
// - nillable
//
// element set for datachunk
// setter function is is AST_RtpSave.prototype.setDatachunk
//
function AST_RtpSave_getDatachunk() { return this._datachunk;}

AST_RtpSave.prototype.getDatachunk = AST_RtpSave_getDatachunk;

function AST_RtpSave_setDatachunk(value) { this._datachunk = value;}

AST_RtpSave.prototype.setDatachunk = AST_RtpSave_setDatachunk;
//
// Serialize {urn:ast}RtpSave
//
function AST_RtpSave_serialize(cxfjsutils, elementName, extraNamespaces) {
    var xml = '';
    if (elementName !== null) {
     xml = xml + '<';
     xml = xml + elementName;
     xml = xml + ' ';
     xml = xml + 'xmlns:jns0=\'urn:ast\' ';
     if (extraNamespaces) {
      xml = xml + ' ' + extraNamespaces;
     }
     xml = xml + '>';
    }
    // block for local variables
    {
     if (this._oldSection != null) {
      if (this._oldSection == null) {
       xml = xml + '<jns0:oldSection xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:oldSection>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._oldSection);
       xml = xml + '</jns0:oldSection>';
      }
     }
    }
    // block for local variables
    {
     if (this._newSection != null) {
      if (this._newSection == null) {
       xml = xml + '<jns0:newSection xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:newSection>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._newSection);
       xml = xml + '</jns0:newSection>';
      }
     }
    }
    // block for local variables
    {
     if (this._datachunk != null) {
      if (this._datachunk == null) {
       xml = xml + '<jns0:datachunk xsi:nil=\'true\'/>';
      } else {
       xml = xml + '<jns0:datachunk>';
       xml = xml + cxfjsutils.escapeXmlEntities(this._datachunk);
       xml = xml + '</jns0:datachunk>';
      }
     }
    }
    if (elementName !== null) {
     xml = xml + '</';
     xml = xml + elementName;
     xml = xml + '>';
    }
    return xml;
}

AST_RtpSave.prototype.serialize = AST_RtpSave_serialize;

function AST_RtpSave_deserialize (cxfjsutils, element) {
    var newobject = new AST_RtpSave();
    cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));
    var curElement = cxfjsutils.getFirstElementChild(element);
    var item;
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing oldSection');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'oldSection')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setOldSection(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing newSection');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'newSection')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setNewSection(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));
    cxfjsutils.trace('processing datachunk');
    if (curElement != null && cxfjsutils.isNodeNamedNS(curElement, 'urn:ast', 'datachunk')) {
     var value = null;
     if (!cxfjsutils.isElementNil(curElement)) {
      value = cxfjsutils.getNodeText(curElement);
      item = value;
     }
     newobject.setDatachunk(item);
     var item = null;
     if (curElement != null) {
      curElement = cxfjsutils.getNextElementSibling(curElement);
     }
    }
    return newobject;
}

//
// Definitions for service: {urn:ast/AST.wsdl}AST
//

// Javascript for {urn:ast/AST.wsdl}ASTPortType

function urn_ast_AST_wsdl_ASTPortType () {
    this.jsutils = new CxfApacheOrgUtil();
    this.jsutils.interfaceObject = this;
    this.synchronous = false;
    this.url = null;
    this.client = null;
    this.response = null;
    this.globalElementSerializers = [];
    this.globalElementDeserializers = [];
    this.globalElementSerializers['{urn:ast}AGSysGeneralSaveResponse'] = AST_AGSysGeneralSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSysGeneralSaveResponse'] = AST_AGSysGeneralSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAdvTr069GetResponse'] = AST_AGAdvTr069GetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAdvTr069GetResponse'] = AST_AGAdvTr069GetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkLanSave'] = AST_AGNetworkLanSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkLanSave'] = AST_AGNetworkLanSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGjConRelaysSave'] = AST_AGjConRelaysSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGjConRelaysSave'] = AST_AGjConRelaysSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGAdvCloudSaveResponse'] = AST_AGAdvCloudSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAdvCloudSaveResponse'] = AST_AGAdvCloudSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSysGeneralGet'] = AST_AGSysGeneralGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGSysGeneralGet'] = AST_AGSysGeneralGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgChannelSave'] = AST_AGAlgChannelSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgChannelSave'] = AST_AGAlgChannelSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkBurnMacGet'] = AST_AGNetworkBurnMacGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkBurnMacGet'] = AST_AGNetworkBurnMacGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGAdvAstapiGet'] = AST_AGAdvAstapiGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGAdvAstapiGet'] = AST_AGAdvAstapiGet_deserialize;
    this.globalElementSerializers['{urn:ast}RoutingSave'] = AST_RoutingSave_serialize;
    this.globalElementDeserializers['{urn:ast}RoutingSave'] = AST_RoutingSave_deserialize;
    this.globalElementSerializers['{urn:ast}IaxDelEndpoint'] = AST_IaxDelEndpoint_serialize;
    this.globalElementDeserializers['{urn:ast}IaxDelEndpoint'] = AST_IaxDelEndpoint_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkSnmpGet'] = AST_AGNetworkSnmpGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkSnmpGet'] = AST_AGNetworkSnmpGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingGroupsDialSaveResponse'] = AST_AGRoutingGroupsDialSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingGroupsDialSaveResponse'] = AST_AGRoutingGroupsDialSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkLanSaveResponse'] = AST_AGNetworkLanSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkLanSaveResponse'] = AST_AGNetworkLanSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGRegisterParaGet'] = AST_AGRegisterParaGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGRegisterParaGet'] = AST_AGRegisterParaGet_deserialize;
    this.globalElementSerializers['{urn:ast}RtpGetAllResponse'] = AST_RtpGetAllResponse_serialize;
    this.globalElementDeserializers['{urn:ast}RtpGetAllResponse'] = AST_RtpGetAllResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingGroupGetNewResponse'] = AST_AGRoutingGroupGetNewResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingGroupGetNewResponse'] = AST_AGRoutingGroupGetNewResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingRulesSaveOrderResponse'] = AST_AGRoutingRulesSaveOrderResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingRulesSaveOrderResponse'] = AST_AGRoutingRulesSaveOrderResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgFunkySaveResponse'] = AST_AGAlgFunkySaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgFunkySaveResponse'] = AST_AGAlgFunkySaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemToolsUpdatefireware'] = AST_AGSystemToolsUpdatefireware_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemToolsUpdatefireware'] = AST_AGSystemToolsUpdatefireware_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipBendpointGetResponse'] = AST_AGSipBendpointGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipBendpointGetResponse'] = AST_AGSipBendpointGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGGetFXSPortsStatusResponse'] = AST_AGGetFXSPortsStatusResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGGetFXSPortsStatusResponse'] = AST_AGGetFXSPortsStatusResponse_deserialize;
    this.globalElementSerializers['{urn:ast}SipGeneralGetAll'] = AST_SipGeneralGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}SipGeneralGetAll'] = AST_SipGeneralGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}AGSysLoginSave'] = AST_AGSysLoginSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGSysLoginSave'] = AST_AGSysLoginSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgChannelSaveAllResponse'] = AST_AGAlgChannelSaveAllResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgChannelSaveAllResponse'] = AST_AGAlgChannelSaveAllResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGTagDel'] = AST_AGTagDel_serialize;
    this.globalElementDeserializers['{urn:ast}AGTagDel'] = AST_AGTagDel_deserialize;
    this.globalElementSerializers['{urn:ast}RoutingOrderResponse'] = AST_RoutingOrderResponse_serialize;
    this.globalElementDeserializers['{urn:ast}RoutingOrderResponse'] = AST_RoutingOrderResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkWanGet'] = AST_AGNetworkWanGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkWanGet'] = AST_AGNetworkWanGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkRulesGetOne'] = AST_AGNetworkRulesGetOne_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkRulesGetOne'] = AST_AGNetworkRulesGetOne_deserialize;
    this.globalElementSerializers['{urn:ast}AGAdvAstcliGet'] = AST_AGAdvAstcliGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGAdvAstcliGet'] = AST_AGAdvAstcliGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemToolGet'] = AST_AGSystemToolGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemToolGet'] = AST_AGSystemToolGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingRulsSaveResponse'] = AST_AGRoutingRulsSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingRulsSaveResponse'] = AST_AGRoutingRulsSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingGroupsDelResponse'] = AST_AGRoutingGroupsDelResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingGroupsDelResponse'] = AST_AGRoutingGroupsDelResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkDdnsGetAll'] = AST_AGNetworkDdnsGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkDdnsGetAll'] = AST_AGNetworkDdnsGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipEndpointsNewGet'] = AST_AGSipEndpointsNewGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipEndpointsNewGet'] = AST_AGSipEndpointsNewGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipEndpointOperationResponse'] = AST_AGSipEndpointOperationResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipEndpointOperationResponse'] = AST_AGSipEndpointOperationResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipEndpointsSync'] = AST_AGSipEndpointsSync_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipEndpointsSync'] = AST_AGSipEndpointsSync_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipAdvSettingSaveResponse'] = AST_AGSipAdvSettingSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipAdvSettingSaveResponse'] = AST_AGSipAdvSettingSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}SipGeneralSaveResponse'] = AST_SipGeneralSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}SipGeneralSaveResponse'] = AST_SipGeneralSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGUcpAlgDriverGet'] = AST_AGUcpAlgDriverGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGUcpAlgDriverGet'] = AST_AGUcpAlgDriverGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgSecSettingDeleteKeyResponse'] = AST_AGAlgSecSettingDeleteKeyResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgSecSettingDeleteKeyResponse'] = AST_AGAlgSecSettingDeleteKeyResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkLanGet'] = AST_AGNetworkLanGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkLanGet'] = AST_AGNetworkLanGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemDHCPUpdateGet'] = AST_AGSystemDHCPUpdateGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemDHCPUpdateGet'] = AST_AGSystemDHCPUpdateGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGAdvAstfileeditorEditGetAll'] = AST_AGAdvAstfileeditorEditGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}AGAdvAstfileeditorEditGetAll'] = AST_AGAdvAstfileeditorEditGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkRulesSave'] = AST_AGNetworkRulesSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkRulesSave'] = AST_AGNetworkRulesSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGLogSettingsGet'] = AST_AGLogSettingsGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGLogSettingsGet'] = AST_AGLogSettingsGet_deserialize;
    this.globalElementSerializers['{urn:ast}IaxGeneralGetAll'] = AST_IaxGeneralGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}IaxGeneralGetAll'] = AST_IaxGeneralGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}GroupDel'] = AST_GroupDel_serialize;
    this.globalElementDeserializers['{urn:ast}GroupDel'] = AST_GroupDel_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemStatusGetResponse'] = AST_AGSystemStatusGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemStatusGetResponse'] = AST_AGSystemStatusGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgAutoCallSaveResponse'] = AST_AGAlgAutoCallSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgAutoCallSaveResponse'] = AST_AGAlgAutoCallSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgDialtableGet'] = AST_AGAlgDialtableGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgDialtableGet'] = AST_AGAlgDialtableGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingAdvGetResponse'] = AST_AGRoutingAdvGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingAdvGetResponse'] = AST_AGRoutingAdvGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemDHCPUpdateSave'] = AST_AGSystemDHCPUpdateSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemDHCPUpdateSave'] = AST_AGSystemDHCPUpdateSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipEndpointGetAllResponse'] = AST_AGSipEndpointGetAllResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipEndpointGetAllResponse'] = AST_AGSipEndpointGetAllResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkOpenvpnSave'] = AST_AGNetworkOpenvpnSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkOpenvpnSave'] = AST_AGNetworkOpenvpnSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgAutoCallTest'] = AST_AGAlgAutoCallTest_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgAutoCallTest'] = AST_AGAlgAutoCallTest_deserialize;
    this.globalElementSerializers['{urn:ast}IaxSaveEndpoint'] = AST_IaxSaveEndpoint_serialize;
    this.globalElementDeserializers['{urn:ast}IaxSaveEndpoint'] = AST_IaxSaveEndpoint_deserialize;
    this.globalElementSerializers['{urn:ast}AGCommitChekoutResponse'] = AST_AGCommitChekoutResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGCommitChekoutResponse'] = AST_AGCommitChekoutResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgChannelUnlimitedResponse'] = AST_AGAlgChannelUnlimitedResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgChannelUnlimitedResponse'] = AST_AGAlgChannelUnlimitedResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGLogCdrGetResponse'] = AST_AGLogCdrGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGLogCdrGetResponse'] = AST_AGLogCdrGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipEndpointGetAll'] = AST_AGSipEndpointGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipEndpointGetAll'] = AST_AGSipEndpointGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}AGLogCdrGenFileResponse'] = AST_AGLogCdrGenFileResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGLogCdrGenFileResponse'] = AST_AGLogCdrGenFileResponse_deserialize;
    this.globalElementSerializers['{urn:ast}RoutingDel'] = AST_RoutingDel_serialize;
    this.globalElementDeserializers['{urn:ast}RoutingDel'] = AST_RoutingDel_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingGroupGetOne'] = AST_AGRoutingGroupGetOne_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingGroupGetOne'] = AST_AGRoutingGroupGetOne_deserialize;
    this.globalElementSerializers['{urn:ast}AGUcpAlgFxoparamGetAllResponse'] = AST_AGUcpAlgFxoparamGetAllResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGUcpAlgFxoparamGetAllResponse'] = AST_AGUcpAlgFxoparamGetAllResponse_deserialize;
    this.globalElementSerializers['{urn:ast}SipGeneralSave'] = AST_SipGeneralSave_serialize;
    this.globalElementDeserializers['{urn:ast}SipGeneralSave'] = AST_SipGeneralSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgChannelRemoveClient'] = AST_AGAlgChannelRemoveClient_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgChannelRemoveClient'] = AST_AGAlgChannelRemoveClient_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgChannelGetOneResponse'] = AST_AGAlgChannelGetOneResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgChannelGetOneResponse'] = AST_AGAlgChannelGetOneResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipEndpointSaveResponse'] = AST_AGSipEndpointSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipEndpointSaveResponse'] = AST_AGSipEndpointSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGUcpAlgFxsparamGetResponse'] = AST_AGUcpAlgFxsparamGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGUcpAlgFxsparamGetResponse'] = AST_AGUcpAlgFxsparamGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgChannelRemoveClientResponse'] = AST_AGAlgChannelRemoveClientResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgChannelRemoveClientResponse'] = AST_AGAlgChannelRemoveClientResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemToolsSystemRebootResponse'] = AST_AGSystemToolsSystemRebootResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemToolsSystemRebootResponse'] = AST_AGSystemToolsSystemRebootResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipBendpointSaveResponse'] = AST_AGSipBendpointSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipBendpointSaveResponse'] = AST_AGSipBendpointSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkToolkitGetResponse'] = AST_AGNetworkToolkitGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkToolkitGetResponse'] = AST_AGNetworkToolkitGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}GroupSaveResponse'] = AST_GroupSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}GroupSaveResponse'] = AST_GroupSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipBatchEndpointsGetResponse'] = AST_AGSipBatchEndpointsGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipBatchEndpointsGetResponse'] = AST_AGSipBatchEndpointsGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAdvAstfileeditorEditSave'] = AST_AGAdvAstfileeditorEditSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGAdvAstfileeditorEditSave'] = AST_AGAdvAstfileeditorEditSave_deserialize;
    this.globalElementSerializers['{urn:ast}GroupSave'] = AST_GroupSave_serialize;
    this.globalElementDeserializers['{urn:ast}GroupSave'] = AST_GroupSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkSnmpSaveResponse'] = AST_AGNetworkSnmpSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkSnmpSaveResponse'] = AST_AGNetworkSnmpSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}RoutingOrder'] = AST_RoutingOrder_serialize;
    this.globalElementDeserializers['{urn:ast}RoutingOrder'] = AST_RoutingOrder_deserialize;
    this.globalElementSerializers['{urn:ast}AGRS485SetBaudrateResponse'] = AST_AGRS485SetBaudrateResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGRS485SetBaudrateResponse'] = AST_AGRS485SetBaudrateResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGLogCdrDelResponse'] = AST_AGLogCdrDelResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGLogCdrDelResponse'] = AST_AGLogCdrDelResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkDdnsGetSaveResponse'] = AST_AGNetworkDdnsGetSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkDdnsGetSaveResponse'] = AST_AGNetworkDdnsGetSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemDHCPUpdateSaveResponse'] = AST_AGSystemDHCPUpdateSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemDHCPUpdateSaveResponse'] = AST_AGSystemDHCPUpdateSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGGetSIPEndpointStatus'] = AST_AGGetSIPEndpointStatus_serialize;
    this.globalElementDeserializers['{urn:ast}AGGetSIPEndpointStatus'] = AST_AGGetSIPEndpointStatus_deserialize;
    this.globalElementSerializers['{urn:ast}IaxGeneralSaveResponse'] = AST_IaxGeneralSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}IaxGeneralSaveResponse'] = AST_IaxGeneralSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGLogDelAllResponse'] = AST_AGLogDelAllResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGLogDelAllResponse'] = AST_AGLogDelAllResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkWanSave'] = AST_AGNetworkWanSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkWanSave'] = AST_AGNetworkWanSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGAdvAstfileeditorEditGetAllResponse'] = AST_AGAdvAstfileeditorEditGetAllResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAdvAstfileeditorEditGetAllResponse'] = AST_AGAdvAstfileeditorEditGetAllResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipSecuritySaveResponse'] = AST_AGSipSecuritySaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipSecuritySaveResponse'] = AST_AGSipSecuritySaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemAutoUpdateGet'] = AST_AGSystemAutoUpdateGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemAutoUpdateGet'] = AST_AGSystemAutoUpdateGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGLogSettingsSaveResponse'] = AST_AGLogSettingsSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGLogSettingsSaveResponse'] = AST_AGLogSettingsSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkSaveResponse'] = AST_AGNetworkSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkSaveResponse'] = AST_AGNetworkSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingRulesSaveOrder'] = AST_AGRoutingRulesSaveOrder_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingRulesSaveOrder'] = AST_AGRoutingRulesSaveOrder_deserialize;
    this.globalElementSerializers['{urn:ast}AGFxsSpeedialProvisionSaveResponse'] = AST_AGFxsSpeedialProvisionSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGFxsSpeedialProvisionSaveResponse'] = AST_AGFxsSpeedialProvisionSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGCommitSwitchResponse'] = AST_AGCommitSwitchResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGCommitSwitchResponse'] = AST_AGCommitSwitchResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemToolsSystemSwitch'] = AST_AGSystemToolsSystemSwitch_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemToolsSystemSwitch'] = AST_AGSystemToolsSystemSwitch_deserialize;
    this.globalElementSerializers['{urn:ast}GroupDelResponse'] = AST_GroupDelResponse_serialize;
    this.globalElementDeserializers['{urn:ast}GroupDelResponse'] = AST_GroupDelResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemToolsSystemReboot'] = AST_AGSystemToolsSystemReboot_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemToolsSystemReboot'] = AST_AGSystemToolsSystemReboot_deserialize;
    this.globalElementSerializers['{urn:ast}AGjConRelaySave'] = AST_AGjConRelaySave_serialize;
    this.globalElementDeserializers['{urn:ast}AGjConRelaySave'] = AST_AGjConRelaySave_deserialize;
    this.globalElementSerializers['{urn:ast}AGAdvAstapiGetResponse'] = AST_AGAdvAstapiGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAdvAstapiGetResponse'] = AST_AGAdvAstapiGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemAutoUpdateGetResponse'] = AST_AGSystemAutoUpdateGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemAutoUpdateGetResponse'] = AST_AGSystemAutoUpdateGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGFxsGroupDialProvisonSaveResponse'] = AST_AGFxsGroupDialProvisonSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGFxsGroupDialProvisonSaveResponse'] = AST_AGFxsGroupDialProvisonSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGLogCdrGenFile'] = AST_AGLogCdrGenFile_serialize;
    this.globalElementDeserializers['{urn:ast}AGLogCdrGenFile'] = AST_AGLogCdrGenFile_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgDialtableSaveResponse'] = AST_AGAlgDialtableSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgDialtableSaveResponse'] = AST_AGAlgDialtableSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkSave'] = AST_AGNetworkSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkSave'] = AST_AGNetworkSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGAdvAstfileeditorEditDelResponse'] = AST_AGAdvAstfileeditorEditDelResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAdvAstfileeditorEditDelResponse'] = AST_AGAdvAstfileeditorEditDelResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAdvAstapiSave'] = AST_AGAdvAstapiSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGAdvAstapiSave'] = AST_AGAdvAstapiSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGSysLoginGetResponse'] = AST_AGSysLoginGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSysLoginGetResponse'] = AST_AGSysLoginGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGjConRelayGetOneResponse'] = AST_AGjConRelayGetOneResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGjConRelayGetOneResponse'] = AST_AGjConRelayGetOneResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGUcpAlgFxoparamSaveResponse'] = AST_AGUcpAlgFxoparamSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGUcpAlgFxoparamSaveResponse'] = AST_AGUcpAlgFxoparamSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGOEMSettingInfoGetResponse'] = AST_AGOEMSettingInfoGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGOEMSettingInfoGetResponse'] = AST_AGOEMSettingInfoGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemInfoMemoryClean'] = AST_AGSystemInfoMemoryClean_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemInfoMemoryClean'] = AST_AGSystemInfoMemoryClean_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemToolsFactoryReset'] = AST_AGSystemToolsFactoryReset_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemToolsFactoryReset'] = AST_AGSystemToolsFactoryReset_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipEndpointsDel'] = AST_AGSipEndpointsDel_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipEndpointsDel'] = AST_AGSipEndpointsDel_deserialize;
    this.globalElementSerializers['{urn:ast}RtpSaveResponse'] = AST_RtpSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}RtpSaveResponse'] = AST_RtpSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAdvAstcliRunResponse'] = AST_AGAdvAstcliRunResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAdvAstcliRunResponse'] = AST_AGAdvAstcliRunResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgPickupGetResponse'] = AST_AGAlgPickupGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgPickupGetResponse'] = AST_AGAlgPickupGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGUcpAlgFxoparamSave'] = AST_AGUcpAlgFxoparamSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGUcpAlgFxoparamSave'] = AST_AGUcpAlgFxoparamSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGOEMSettingInfoSaveResponse'] = AST_AGOEMSettingInfoSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGOEMSettingInfoSaveResponse'] = AST_AGOEMSettingInfoSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkOpenvpnSaveResponse'] = AST_AGNetworkOpenvpnSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkOpenvpnSaveResponse'] = AST_AGNetworkOpenvpnSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkWanGetResponse'] = AST_AGNetworkWanGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkWanGetResponse'] = AST_AGNetworkWanGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgChannelAddClientResponse'] = AST_AGAlgChannelAddClientResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgChannelAddClientResponse'] = AST_AGAlgChannelAddClientResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGLogGetAll'] = AST_AGLogGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}AGLogGetAll'] = AST_AGLogGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}AGLogDelAll'] = AST_AGLogDelAll_serialize;
    this.globalElementDeserializers['{urn:ast}AGLogDelAll'] = AST_AGLogDelAll_deserialize;
    this.globalElementSerializers['{urn:ast}AGjConGetAll'] = AST_AGjConGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}AGjConGetAll'] = AST_AGjConGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkSnmpSave'] = AST_AGNetworkSnmpSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkSnmpSave'] = AST_AGNetworkSnmpSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGAdvTr069SaveResponse'] = AST_AGAdvTr069SaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAdvTr069SaveResponse'] = AST_AGAdvTr069SaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGUcpAlgGlbSettingSaveResponse'] = AST_AGUcpAlgGlbSettingSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGUcpAlgGlbSettingSaveResponse'] = AST_AGUcpAlgGlbSettingSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemModuleBoardInfoGet'] = AST_AGSystemModuleBoardInfoGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemModuleBoardInfoGet'] = AST_AGSystemModuleBoardInfoGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGLogSettingsSave'] = AST_AGLogSettingsSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGLogSettingsSave'] = AST_AGLogSettingsSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGUcpAlgGlbSettingSave'] = AST_AGUcpAlgGlbSettingSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGUcpAlgGlbSettingSave'] = AST_AGUcpAlgGlbSettingSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgDialtableGetResponse'] = AST_AGAlgDialtableGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgDialtableGetResponse'] = AST_AGAlgDialtableGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAdvTr069GetStatusResponse'] = AST_AGAdvTr069GetStatusResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAdvTr069GetStatusResponse'] = AST_AGAdvTr069GetStatusResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAdvAstfileeditorEditDel'] = AST_AGAdvAstfileeditorEditDel_serialize;
    this.globalElementDeserializers['{urn:ast}AGAdvAstfileeditorEditDel'] = AST_AGAdvAstfileeditorEditDel_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkToolkitGet'] = AST_AGNetworkToolkitGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkToolkitGet'] = AST_AGNetworkToolkitGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkVPNGetConnectStatusResponse'] = AST_AGNetworkVPNGetConnectStatusResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkVPNGetConnectStatusResponse'] = AST_AGNetworkVPNGetConnectStatusResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemInfoGet'] = AST_AGSystemInfoGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemInfoGet'] = AST_AGSystemInfoGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgChannelGetAll'] = AST_AGAlgChannelGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgChannelGetAll'] = AST_AGAlgChannelGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkWanSaveResponse'] = AST_AGNetworkWanSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkWanSaveResponse'] = AST_AGNetworkWanSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgGlbSettingGetAll'] = AST_AGAlgGlbSettingGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgGlbSettingGetAll'] = AST_AGAlgGlbSettingGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemToolsGetFirmwareInfo'] = AST_AGSystemToolsGetFirmwareInfo_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemToolsGetFirmwareInfo'] = AST_AGSystemToolsGetFirmwareInfo_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipSecurityGetResponse'] = AST_AGSipSecurityGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipSecurityGetResponse'] = AST_AGSipSecurityGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkRulesGetAllResponse'] = AST_AGNetworkRulesGetAllResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkRulesGetAllResponse'] = AST_AGNetworkRulesGetAllResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgChannelSyncResponse'] = AST_AGAlgChannelSyncResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgChannelSyncResponse'] = AST_AGAlgChannelSyncResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgAutoCallGet'] = AST_AGAlgAutoCallGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgAutoCallGet'] = AST_AGAlgAutoCallGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkTookitTcpdump'] = AST_AGNetworkTookitTcpdump_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkTookitTcpdump'] = AST_AGNetworkTookitTcpdump_deserialize;
    this.globalElementSerializers['{urn:ast}AGAdvCloudSave'] = AST_AGAdvCloudSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGAdvCloudSave'] = AST_AGAdvCloudSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingRulsGetOne'] = AST_AGRoutingRulsGetOne_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingRulsGetOne'] = AST_AGRoutingRulsGetOne_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingGroupsDialGetOne'] = AST_AGRoutingGroupsDialGetOne_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingGroupsDialGetOne'] = AST_AGRoutingGroupsDialGetOne_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingRulesDel'] = AST_AGRoutingRulesDel_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingRulesDel'] = AST_AGRoutingRulesDel_deserialize;
    this.globalElementSerializers['{urn:ast}RtpGetAll'] = AST_RtpGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}RtpGetAll'] = AST_RtpGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgDialtableSave'] = AST_AGAlgDialtableSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgDialtableSave'] = AST_AGAlgDialtableSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGFxsGroupDialProvisonSave'] = AST_AGFxsGroupDialProvisonSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGFxsGroupDialProvisonSave'] = AST_AGFxsGroupDialProvisonSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgGlbSettingGetAllResponse'] = AST_AGAlgGlbSettingGetAllResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgGlbSettingGetAllResponse'] = AST_AGAlgGlbSettingGetAllResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingGroupSave'] = AST_AGRoutingGroupSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingGroupSave'] = AST_AGRoutingGroupSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingGroupSaveResponse'] = AST_AGRoutingGroupSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingGroupSaveResponse'] = AST_AGRoutingGroupSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGjConRelaysSaveResponse'] = AST_AGjConRelaysSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGjConRelaysSaveResponse'] = AST_AGjConRelaysSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkGetResponse'] = AST_AGNetworkGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkGetResponse'] = AST_AGNetworkGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGTagDelResponse'] = AST_AGTagDelResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGTagDelResponse'] = AST_AGTagDelResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGOEMSettingInfoSave'] = AST_AGOEMSettingInfoSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGOEMSettingInfoSave'] = AST_AGOEMSettingInfoSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGjConRelaySaveResponse'] = AST_AGjConRelaySaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGjConRelaySaveResponse'] = AST_AGjConRelaySaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSetFXSPortsGainResponse'] = AST_AGSetFXSPortsGainResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSetFXSPortsGainResponse'] = AST_AGSetFXSPortsGainResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipAdvSettingGetResponse'] = AST_AGSipAdvSettingGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipAdvSettingGetResponse'] = AST_AGSipAdvSettingGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGRegisterParaSaveResponse'] = AST_AGRegisterParaSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGRegisterParaSaveResponse'] = AST_AGRegisterParaSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipBatchEndpointsGet'] = AST_AGSipBatchEndpointsGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipBatchEndpointsGet'] = AST_AGSipBatchEndpointsGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemModuleBoardInfoGetResponse'] = AST_AGSystemModuleBoardInfoGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemModuleBoardInfoGetResponse'] = AST_AGSystemModuleBoardInfoGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemCloseAllserviceResponse'] = AST_AGSystemCloseAllserviceResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemCloseAllserviceResponse'] = AST_AGSystemCloseAllserviceResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgGlbSettingSaveResponse'] = AST_AGAlgGlbSettingSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgGlbSettingSaveResponse'] = AST_AGAlgGlbSettingSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingGroupGetAllResponse'] = AST_AGRoutingGroupGetAllResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingGroupGetAllResponse'] = AST_AGRoutingGroupGetAllResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAdvAstcliRun'] = AST_AGAdvAstcliRun_serialize;
    this.globalElementDeserializers['{urn:ast}AGAdvAstcliRun'] = AST_AGAdvAstcliRun_deserialize;
    this.globalElementSerializers['{urn:ast}AGGetSIPEndpointStatusResponse'] = AST_AGGetSIPEndpointStatusResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGGetSIPEndpointStatusResponse'] = AST_AGGetSIPEndpointStatusResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemToolsUpdateOnline'] = AST_AGSystemToolsUpdateOnline_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemToolsUpdateOnline'] = AST_AGSystemToolsUpdateOnline_deserialize;
    this.globalElementSerializers['{urn:ast}AGjConIoSettingsGetResponse'] = AST_AGjConIoSettingsGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGjConIoSettingsGetResponse'] = AST_AGjConIoSettingsGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkLanGetResponse'] = AST_AGNetworkLanGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkLanGetResponse'] = AST_AGNetworkLanGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGTagList'] = AST_AGTagList_serialize;
    this.globalElementDeserializers['{urn:ast}AGTagList'] = AST_AGTagList_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgFunkySave'] = AST_AGAlgFunkySave_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgFunkySave'] = AST_AGAlgFunkySave_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemInfoGetResponse'] = AST_AGSystemInfoGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemInfoGetResponse'] = AST_AGSystemInfoGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}IaxGetAllResponse'] = AST_IaxGetAllResponse_serialize;
    this.globalElementDeserializers['{urn:ast}IaxGetAllResponse'] = AST_IaxGetAllResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingRulsGetOneResponse'] = AST_AGRoutingRulsGetOneResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingRulsGetOneResponse'] = AST_AGRoutingRulsGetOneResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGUcpAlgFxsparamSave'] = AST_AGUcpAlgFxsparamSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGUcpAlgFxsparamSave'] = AST_AGUcpAlgFxsparamSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingGroupsDialDel'] = AST_AGRoutingGroupsDialDel_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingGroupsDialDel'] = AST_AGRoutingGroupsDialDel_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkRulesDelResponse'] = AST_AGNetworkRulesDelResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkRulesDelResponse'] = AST_AGNetworkRulesDelResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipEndpointGetOne'] = AST_AGSipEndpointGetOne_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipEndpointGetOne'] = AST_AGSipEndpointGetOne_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemToolsFactoryResetResponse'] = AST_AGSystemToolsFactoryResetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemToolsFactoryResetResponse'] = AST_AGSystemToolsFactoryResetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAdvTr069Get'] = AST_AGAdvTr069Get_serialize;
    this.globalElementDeserializers['{urn:ast}AGAdvTr069Get'] = AST_AGAdvTr069Get_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemLanguageSaveResponse'] = AST_AGSystemLanguageSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemLanguageSaveResponse'] = AST_AGSystemLanguageSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGTagAddResponse'] = AST_AGTagAddResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGTagAddResponse'] = AST_AGTagAddResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkRulesDel'] = AST_AGNetworkRulesDel_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkRulesDel'] = AST_AGNetworkRulesDel_deserialize;
    this.globalElementSerializers['{urn:ast}AGUcpSystemToolsSndRecordStart'] = AST_AGUcpSystemToolsSndRecordStart_serialize;
    this.globalElementDeserializers['{urn:ast}AGUcpSystemToolsSndRecordStart'] = AST_AGUcpSystemToolsSndRecordStart_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemModuleUpdateTftp'] = AST_AGSystemModuleUpdateTftp_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemModuleUpdateTftp'] = AST_AGSystemModuleUpdateTftp_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingGroupGetAll'] = AST_AGRoutingGroupGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingGroupGetAll'] = AST_AGRoutingGroupGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingGroupGetNew'] = AST_AGRoutingGroupGetNew_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingGroupGetNew'] = AST_AGRoutingGroupGetNew_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkTookitPingResponse'] = AST_AGNetworkTookitPingResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkTookitPingResponse'] = AST_AGNetworkTookitPingResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGFxsSipBindProvisonSaveResponse'] = AST_AGFxsSipBindProvisonSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGFxsSipBindProvisonSaveResponse'] = AST_AGFxsSipBindProvisonSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSetHotlineNumber'] = AST_AGSetHotlineNumber_serialize;
    this.globalElementDeserializers['{urn:ast}AGSetHotlineNumber'] = AST_AGSetHotlineNumber_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkTookitTcpdumpResponse'] = AST_AGNetworkTookitTcpdumpResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkTookitTcpdumpResponse'] = AST_AGNetworkTookitTcpdumpResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSetHotlineNumberResponse'] = AST_AGSetHotlineNumberResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSetHotlineNumberResponse'] = AST_AGSetHotlineNumberResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgFunkyGetResponse'] = AST_AGAlgFunkyGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgFunkyGetResponse'] = AST_AGAlgFunkyGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipFxoBindingGet'] = AST_AGSipFxoBindingGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipFxoBindingGet'] = AST_AGSipFxoBindingGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemDemoFlagSave'] = AST_AGSystemDemoFlagSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemDemoFlagSave'] = AST_AGSystemDemoFlagSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkFirewallsaveResponse'] = AST_AGNetworkFirewallsaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkFirewallsaveResponse'] = AST_AGNetworkFirewallsaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}IaxDelEndpointResponse'] = AST_IaxDelEndpointResponse_serialize;
    this.globalElementDeserializers['{urn:ast}IaxDelEndpointResponse'] = AST_IaxDelEndpointResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipAdvSettingSave'] = AST_AGSipAdvSettingSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipAdvSettingSave'] = AST_AGSipAdvSettingSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingAdvSaveResponse'] = AST_AGRoutingAdvSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingAdvSaveResponse'] = AST_AGRoutingAdvSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGjConGetKeys'] = AST_AGjConGetKeys_serialize;
    this.globalElementDeserializers['{urn:ast}AGjConGetKeys'] = AST_AGjConGetKeys_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemToolsAsteriskReboot'] = AST_AGSystemToolsAsteriskReboot_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemToolsAsteriskReboot'] = AST_AGSystemToolsAsteriskReboot_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgAutoCallSave'] = AST_AGAlgAutoCallSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgAutoCallSave'] = AST_AGAlgAutoCallSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgChannelAddOneResponse'] = AST_AGAlgChannelAddOneResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgChannelAddOneResponse'] = AST_AGAlgChannelAddOneResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingGroupsDel'] = AST_AGRoutingGroupsDel_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingGroupsDel'] = AST_AGRoutingGroupsDel_deserialize;
    this.globalElementSerializers['{urn:ast}AGUcpSystemToolsSndRecordStartResponse'] = AST_AGUcpSystemToolsSndRecordStartResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGUcpSystemToolsSndRecordStartResponse'] = AST_AGUcpSystemToolsSndRecordStartResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSysTimeGet'] = AST_AGSysTimeGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGSysTimeGet'] = AST_AGSysTimeGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGCommitChekout'] = AST_AGCommitChekout_serialize;
    this.globalElementDeserializers['{urn:ast}AGCommitChekout'] = AST_AGCommitChekout_deserialize;
    this.globalElementSerializers['{urn:ast}AGjConIoSettingsSaveResponse'] = AST_AGjConIoSettingsSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGjConIoSettingsSaveResponse'] = AST_AGjConIoSettingsSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkIPSettingsResponse'] = AST_AGNetworkIPSettingsResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkIPSettingsResponse'] = AST_AGNetworkIPSettingsResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingRulesDelResponse'] = AST_AGRoutingRulesDelResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingRulesDelResponse'] = AST_AGRoutingRulesDelResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemToolGetResponse'] = AST_AGSystemToolGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemToolGetResponse'] = AST_AGSystemToolGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgFunkyGet'] = AST_AGAlgFunkyGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgFunkyGet'] = AST_AGAlgFunkyGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingGroupsDialGetAllResponse'] = AST_AGRoutingGroupsDialGetAllResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingGroupsDialGetAllResponse'] = AST_AGRoutingGroupsDialGetAllResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipSecuritySave'] = AST_AGSipSecuritySave_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipSecuritySave'] = AST_AGSipSecuritySave_deserialize;
    this.globalElementSerializers['{urn:ast}SipGeneralGetAllResponse'] = AST_SipGeneralGetAllResponse_serialize;
    this.globalElementDeserializers['{urn:ast}SipGeneralGetAllResponse'] = AST_SipGeneralGetAllResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipBendpointSave'] = AST_AGSipBendpointSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipBendpointSave'] = AST_AGSipBendpointSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGSysLoginSaveResponse'] = AST_AGSysLoginSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSysLoginSaveResponse'] = AST_AGSysLoginSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkRulesSaveResponse'] = AST_AGNetworkRulesSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkRulesSaveResponse'] = AST_AGNetworkRulesSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSyncAll'] = AST_AGSyncAll_serialize;
    this.globalElementDeserializers['{urn:ast}AGSyncAll'] = AST_AGSyncAll_deserialize;
    this.globalElementSerializers['{urn:ast}AGSysGeneralDelLangResponse'] = AST_AGSysGeneralDelLangResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSysGeneralDelLangResponse'] = AST_AGSysGeneralDelLangResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkIPSettings'] = AST_AGNetworkIPSettings_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkIPSettings'] = AST_AGNetworkIPSettings_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkBurnMacGetResponse'] = AST_AGNetworkBurnMacGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkBurnMacGetResponse'] = AST_AGNetworkBurnMacGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgGlbSettingSave'] = AST_AGAlgGlbSettingSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgGlbSettingSave'] = AST_AGAlgGlbSettingSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgChannelAddOne'] = AST_AGAlgChannelAddOne_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgChannelAddOne'] = AST_AGAlgChannelAddOne_deserialize;
    this.globalElementSerializers['{urn:ast}AGSysGeneralDebugResponse'] = AST_AGSysGeneralDebugResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSysGeneralDebugResponse'] = AST_AGSysGeneralDebugResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGCommitSwitch'] = AST_AGCommitSwitch_serialize;
    this.globalElementDeserializers['{urn:ast}AGCommitSwitch'] = AST_AGCommitSwitch_deserialize;
    this.globalElementSerializers['{urn:ast}AGAdvAstfileeditorEditSaveResponse'] = AST_AGAdvAstfileeditorEditSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAdvAstfileeditorEditSaveResponse'] = AST_AGAdvAstfileeditorEditSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipEndpointOperation'] = AST_AGSipEndpointOperation_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipEndpointOperation'] = AST_AGSipEndpointOperation_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkBurnMac'] = AST_AGNetworkBurnMac_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkBurnMac'] = AST_AGNetworkBurnMac_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipEndpointsSyncResponse'] = AST_AGSipEndpointsSyncResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipEndpointsSyncResponse'] = AST_AGSipEndpointsSyncResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipBatchEndpointsSave'] = AST_AGSipBatchEndpointsSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipBatchEndpointsSave'] = AST_AGSipBatchEndpointsSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkOpenvpnGetResponse'] = AST_AGNetworkOpenvpnGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkOpenvpnGetResponse'] = AST_AGNetworkOpenvpnGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGjConSetKeyClib'] = AST_AGjConSetKeyClib_serialize;
    this.globalElementDeserializers['{urn:ast}AGjConSetKeyClib'] = AST_AGjConSetKeyClib_deserialize;
    this.globalElementSerializers['{urn:ast}AGAdvCloudGet'] = AST_AGAdvCloudGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGAdvCloudGet'] = AST_AGAdvCloudGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkDdnsGetAllResponse'] = AST_AGNetworkDdnsGetAllResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkDdnsGetAllResponse'] = AST_AGNetworkDdnsGetAllResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGUcpAlgGlbSettingGetAll'] = AST_AGUcpAlgGlbSettingGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}AGUcpAlgGlbSettingGetAll'] = AST_AGUcpAlgGlbSettingGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}AGLogCdrGet'] = AST_AGLogCdrGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGLogCdrGet'] = AST_AGLogCdrGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGSysGeneralDelLang'] = AST_AGSysGeneralDelLang_serialize;
    this.globalElementDeserializers['{urn:ast}AGSysGeneralDelLang'] = AST_AGSysGeneralDelLang_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemCloseAllservice'] = AST_AGSystemCloseAllservice_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemCloseAllservice'] = AST_AGSystemCloseAllservice_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgChannelAddClient'] = AST_AGAlgChannelAddClient_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgChannelAddClient'] = AST_AGAlgChannelAddClient_deserialize;
    this.globalElementSerializers['{urn:ast}AGOEMSettingInfoGet'] = AST_AGOEMSettingInfoGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGOEMSettingInfoGet'] = AST_AGOEMSettingInfoGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGRegisterParaRead'] = AST_AGRegisterParaRead_serialize;
    this.globalElementDeserializers['{urn:ast}AGRegisterParaRead'] = AST_AGRegisterParaRead_deserialize;
    this.globalElementSerializers['{urn:ast}AGAdvAstcliGetResponse'] = AST_AGAdvAstcliGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAdvAstcliGetResponse'] = AST_AGAdvAstcliGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAdvAstfileeditorEditGetOneResponse'] = AST_AGAdvAstfileeditorEditGetOneResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAdvAstfileeditorEditGetOneResponse'] = AST_AGAdvAstfileeditorEditGetOneResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkRulesGetAll'] = AST_AGNetworkRulesGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkRulesGetAll'] = AST_AGNetworkRulesGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}AGLogGetAllResponse'] = AST_AGLogGetAllResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGLogGetAllResponse'] = AST_AGLogGetAllResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgChannelSaveAll'] = AST_AGAlgChannelSaveAll_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgChannelSaveAll'] = AST_AGAlgChannelSaveAll_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingGroupsDialSave'] = AST_AGRoutingGroupsDialSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingGroupsDialSave'] = AST_AGRoutingGroupsDialSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgChannelSync'] = AST_AGAlgChannelSync_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgChannelSync'] = AST_AGAlgChannelSync_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingGroupsDialDelResponse'] = AST_AGRoutingGroupsDialDelResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingGroupsDialDelResponse'] = AST_AGRoutingGroupsDialDelResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGUcpAlgDriverGetResponse'] = AST_AGUcpAlgDriverGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGUcpAlgDriverGetResponse'] = AST_AGUcpAlgDriverGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAdvCloudGetResponse'] = AST_AGAdvCloudGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAdvCloudGetResponse'] = AST_AGAdvCloudGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkFirewallGetResponse'] = AST_AGNetworkFirewallGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkFirewallGetResponse'] = AST_AGNetworkFirewallGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgChannelRemoveOneResponse'] = AST_AGAlgChannelRemoveOneResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgChannelRemoveOneResponse'] = AST_AGAlgChannelRemoveOneResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipFxoBindingSave'] = AST_AGSipFxoBindingSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipFxoBindingSave'] = AST_AGSipFxoBindingSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGCommitAll'] = AST_AGCommitAll_serialize;
    this.globalElementDeserializers['{urn:ast}AGCommitAll'] = AST_AGCommitAll_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgSecSettingCreateKeyResponse'] = AST_AGAlgSecSettingCreateKeyResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgSecSettingCreateKeyResponse'] = AST_AGAlgSecSettingCreateKeyResponse_deserialize;
    this.globalElementSerializers['{urn:ast}IaxGetAll'] = AST_IaxGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}IaxGetAll'] = AST_IaxGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}AGjConIoSettingsSave'] = AST_AGjConIoSettingsSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGjConIoSettingsSave'] = AST_AGjConIoSettingsSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgChannelSaveResponse'] = AST_AGAlgChannelSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgChannelSaveResponse'] = AST_AGAlgChannelSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAdvAstfileeditorEditGetOne'] = AST_AGAdvAstfileeditorEditGetOne_serialize;
    this.globalElementDeserializers['{urn:ast}AGAdvAstfileeditorEditGetOne'] = AST_AGAdvAstfileeditorEditGetOne_deserialize;
    this.globalElementSerializers['{urn:ast}AGRegisterParaSave'] = AST_AGRegisterParaSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGRegisterParaSave'] = AST_AGRegisterParaSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGSyncAllResponse'] = AST_AGSyncAllResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSyncAllResponse'] = AST_AGSyncAllResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgSecSettingDeleteFile'] = AST_AGAlgSecSettingDeleteFile_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgSecSettingDeleteFile'] = AST_AGAlgSecSettingDeleteFile_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipFxoBindingSaveResponse'] = AST_AGSipFxoBindingSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipFxoBindingSaveResponse'] = AST_AGSipFxoBindingSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGUcpSystemToolsSndRecordStopResponse'] = AST_AGUcpSystemToolsSndRecordStopResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGUcpSystemToolsSndRecordStopResponse'] = AST_AGUcpSystemToolsSndRecordStopResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSysGeneralSave'] = AST_AGSysGeneralSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGSysGeneralSave'] = AST_AGSysGeneralSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGRS485SetBaudrate'] = AST_AGRS485SetBaudrate_serialize;
    this.globalElementDeserializers['{urn:ast}AGRS485SetBaudrate'] = AST_AGRS485SetBaudrate_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipSecurityGet'] = AST_AGSipSecurityGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipSecurityGet'] = AST_AGSipSecurityGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemToolsAsteriskRebootResponse'] = AST_AGSystemToolsAsteriskRebootResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemToolsAsteriskRebootResponse'] = AST_AGSystemToolsAsteriskRebootResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGFxsSpeedialProvisionSave'] = AST_AGFxsSpeedialProvisionSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGFxsSpeedialProvisionSave'] = AST_AGFxsSpeedialProvisionSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingRulsGetAll'] = AST_AGRoutingRulsGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingRulsGetAll'] = AST_AGRoutingRulsGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}AGRegisterParaGetResponse'] = AST_AGRegisterParaGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGRegisterParaGetResponse'] = AST_AGRegisterParaGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingRulsGetAllResponse'] = AST_AGRoutingRulsGetAllResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingRulsGetAllResponse'] = AST_AGRoutingRulsGetAllResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAdvTr069GetStatus'] = AST_AGAdvTr069GetStatus_serialize;
    this.globalElementDeserializers['{urn:ast}AGAdvTr069GetStatus'] = AST_AGAdvTr069GetStatus_deserialize;
    this.globalElementSerializers['{urn:ast}AGSysLoginGet'] = AST_AGSysLoginGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGSysLoginGet'] = AST_AGSysLoginGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingGroupsDialGetAll'] = AST_AGRoutingGroupsDialGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingGroupsDialGetAll'] = AST_AGRoutingGroupsDialGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}RoutingSaveResponse'] = AST_RoutingSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}RoutingSaveResponse'] = AST_RoutingSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgGlbSettingGetOne'] = AST_AGAlgGlbSettingGetOne_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgGlbSettingGetOne'] = AST_AGAlgGlbSettingGetOne_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingAdvSave'] = AST_AGRoutingAdvSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingAdvSave'] = AST_AGRoutingAdvSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingAdvGet'] = AST_AGRoutingAdvGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingAdvGet'] = AST_AGRoutingAdvGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGCommitLookupResponse'] = AST_AGCommitLookupResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGCommitLookupResponse'] = AST_AGCommitLookupResponse_deserialize;
    this.globalElementSerializers['{urn:ast}RoutingGetAll'] = AST_RoutingGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}RoutingGetAll'] = AST_RoutingGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}AGAdvCloudGetStatus'] = AST_AGAdvCloudGetStatus_serialize;
    this.globalElementDeserializers['{urn:ast}AGAdvCloudGetStatus'] = AST_AGAdvCloudGetStatus_deserialize;
    this.globalElementSerializers['{urn:ast}AGSetRemoteProvisionAddressResponse'] = AST_AGSetRemoteProvisionAddressResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSetRemoteProvisionAddressResponse'] = AST_AGSetRemoteProvisionAddressResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSysGeneralDebug'] = AST_AGSysGeneralDebug_serialize;
    this.globalElementDeserializers['{urn:ast}AGSysGeneralDebug'] = AST_AGSysGeneralDebug_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemModuleUpdateTftpResponse'] = AST_AGSystemModuleUpdateTftpResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemModuleUpdateTftpResponse'] = AST_AGSystemModuleUpdateTftpResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGLogSettingsGetResponse'] = AST_AGLogSettingsGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGLogSettingsGetResponse'] = AST_AGLogSettingsGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgSecSettingDeleteKey'] = AST_AGAlgSecSettingDeleteKey_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgSecSettingDeleteKey'] = AST_AGAlgSecSettingDeleteKey_deserialize;
    this.globalElementSerializers['{urn:ast}AGSysGeneralGetResponse'] = AST_AGSysGeneralGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSysGeneralGetResponse'] = AST_AGSysGeneralGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemAutoUpdateSaveResponse'] = AST_AGSystemAutoUpdateSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemAutoUpdateSaveResponse'] = AST_AGSystemAutoUpdateSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgPickupGet'] = AST_AGAlgPickupGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgPickupGet'] = AST_AGAlgPickupGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGTagAdd'] = AST_AGTagAdd_serialize;
    this.globalElementDeserializers['{urn:ast}AGTagAdd'] = AST_AGTagAdd_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemDHCPUpdateGetResponse'] = AST_AGSystemDHCPUpdateGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemDHCPUpdateGetResponse'] = AST_AGSystemDHCPUpdateGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemToolsUpdateOnlineResponse'] = AST_AGSystemToolsUpdateOnlineResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemToolsUpdateOnlineResponse'] = AST_AGSystemToolsUpdateOnlineResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgSecSettingCreateKey'] = AST_AGAlgSecSettingCreateKey_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgSecSettingCreateKey'] = AST_AGAlgSecSettingCreateKey_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemToolsUpdatefirewareResponse'] = AST_AGSystemToolsUpdatefirewareResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemToolsUpdatefirewareResponse'] = AST_AGSystemToolsUpdatefirewareResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipEndpointsDelResponse'] = AST_AGSipEndpointsDelResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipEndpointsDelResponse'] = AST_AGSipEndpointsDelResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGjConSetKeyClibResponse'] = AST_AGjConSetKeyClibResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGjConSetKeyClibResponse'] = AST_AGjConSetKeyClibResponse_deserialize;
    this.globalElementSerializers['{urn:ast}GroupGetAllResponse'] = AST_GroupGetAllResponse_serialize;
    this.globalElementDeserializers['{urn:ast}GroupGetAllResponse'] = AST_GroupGetAllResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGCommitLookup'] = AST_AGCommitLookup_serialize;
    this.globalElementDeserializers['{urn:ast}AGCommitLookup'] = AST_AGCommitLookup_deserialize;
    this.globalElementSerializers['{urn:ast}AGFxsSipBindProvisonSave'] = AST_AGFxsSipBindProvisonSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGFxsSipBindProvisonSave'] = AST_AGFxsSipBindProvisonSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipEndpointsNewGetResponse'] = AST_AGSipEndpointsNewGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipEndpointsNewGetResponse'] = AST_AGSipEndpointsNewGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipEndpointGetOneResponse'] = AST_AGSipEndpointGetOneResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipEndpointGetOneResponse'] = AST_AGSipEndpointGetOneResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkTookitPing'] = AST_AGNetworkTookitPing_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkTookitPing'] = AST_AGNetworkTookitPing_deserialize;
    this.globalElementSerializers['{urn:ast}RoutingDelResponse'] = AST_RoutingDelResponse_serialize;
    this.globalElementDeserializers['{urn:ast}RoutingDelResponse'] = AST_RoutingDelResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemToolsSystemSwitchResponse'] = AST_AGSystemToolsSystemSwitchResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemToolsSystemSwitchResponse'] = AST_AGSystemToolsSystemSwitchResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingGroupsDialGetOneResponse'] = AST_AGRoutingGroupsDialGetOneResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingGroupsDialGetOneResponse'] = AST_AGRoutingGroupsDialGetOneResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkVPNGetConnectStatus'] = AST_AGNetworkVPNGetConnectStatus_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkVPNGetConnectStatus'] = AST_AGNetworkVPNGetConnectStatus_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipEndpointSave'] = AST_AGSipEndpointSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipEndpointSave'] = AST_AGSipEndpointSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkFirewallGet'] = AST_AGNetworkFirewallGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkFirewallGet'] = AST_AGNetworkFirewallGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgChannelGetAllResponse'] = AST_AGAlgChannelGetAllResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgChannelGetAllResponse'] = AST_AGAlgChannelGetAllResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGUcpSystemToolsSndRecordStop'] = AST_AGUcpSystemToolsSndRecordStop_serialize;
    this.globalElementDeserializers['{urn:ast}AGUcpSystemToolsSndRecordStop'] = AST_AGUcpSystemToolsSndRecordStop_deserialize;
    this.globalElementSerializers['{urn:ast}IaxSaveEndpointResponse'] = AST_IaxSaveEndpointResponse_serialize;
    this.globalElementDeserializers['{urn:ast}IaxSaveEndpointResponse'] = AST_IaxSaveEndpointResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGjConGetAllResponse'] = AST_AGjConGetAllResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGjConGetAllResponse'] = AST_AGjConGetAllResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSysTimeGetResponse'] = AST_AGSysTimeGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSysTimeGetResponse'] = AST_AGSysTimeGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipAdvSettingGet'] = AST_AGSipAdvSettingGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipAdvSettingGet'] = AST_AGSipAdvSettingGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgPickupSaveResponse'] = AST_AGAlgPickupSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgPickupSaveResponse'] = AST_AGAlgPickupSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGUcpAlgFxoparamGetAll'] = AST_AGUcpAlgFxoparamGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}AGUcpAlgFxoparamGetAll'] = AST_AGUcpAlgFxoparamGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemWsapiReload'] = AST_AGSystemWsapiReload_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemWsapiReload'] = AST_AGSystemWsapiReload_deserialize;
    this.globalElementSerializers['{urn:ast}AGUcpAlgDriverSave'] = AST_AGUcpAlgDriverSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGUcpAlgDriverSave'] = AST_AGUcpAlgDriverSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGjConRelayGetOne'] = AST_AGjConRelayGetOne_serialize;
    this.globalElementDeserializers['{urn:ast}AGjConRelayGetOne'] = AST_AGjConRelayGetOne_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemAutoUpdateSave'] = AST_AGSystemAutoUpdateSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemAutoUpdateSave'] = AST_AGSystemAutoUpdateSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGRegisterParaReadResponse'] = AST_AGRegisterParaReadResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGRegisterParaReadResponse'] = AST_AGRegisterParaReadResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAdvAstapiSaveResponse'] = AST_AGAdvAstapiSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAdvAstapiSaveResponse'] = AST_AGAdvAstapiSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSysTimeSaveResponse'] = AST_AGSysTimeSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSysTimeSaveResponse'] = AST_AGSysTimeSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGjConIoSettingsGet'] = AST_AGjConIoSettingsGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGjConIoSettingsGet'] = AST_AGjConIoSettingsGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemInfoMemoryCleanResponse'] = AST_AGSystemInfoMemoryCleanResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemInfoMemoryCleanResponse'] = AST_AGSystemInfoMemoryCleanResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgGlbSettingGetOneResponse'] = AST_AGAlgGlbSettingGetOneResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgGlbSettingGetOneResponse'] = AST_AGAlgGlbSettingGetOneResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGUcpAlgGlbSettingGetAllResponse'] = AST_AGUcpAlgGlbSettingGetAllResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGUcpAlgGlbSettingGetAllResponse'] = AST_AGUcpAlgGlbSettingGetAllResponse_deserialize;
    this.globalElementSerializers['{urn:ast}IaxGeneralSave'] = AST_IaxGeneralSave_serialize;
    this.globalElementDeserializers['{urn:ast}IaxGeneralSave'] = AST_IaxGeneralSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkGet'] = AST_AGNetworkGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkGet'] = AST_AGNetworkGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkFirewallsave'] = AST_AGNetworkFirewallsave_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkFirewallsave'] = AST_AGNetworkFirewallsave_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemWsapiReloadResponse'] = AST_AGSystemWsapiReloadResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemWsapiReloadResponse'] = AST_AGSystemWsapiReloadResponse_deserialize;
    this.globalElementSerializers['{urn:ast}IaxGeneralGetAllResponse'] = AST_IaxGeneralGetAllResponse_serialize;
    this.globalElementDeserializers['{urn:ast}IaxGeneralGetAllResponse'] = AST_IaxGeneralGetAllResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGUcpAlgFxsparamSaveResponse'] = AST_AGUcpAlgFxsparamSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGUcpAlgFxsparamSaveResponse'] = AST_AGUcpAlgFxsparamSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipFxoBindingGetResponse'] = AST_AGSipFxoBindingGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipFxoBindingGetResponse'] = AST_AGSipFxoBindingGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgChannelUnlimited'] = AST_AGAlgChannelUnlimited_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgChannelUnlimited'] = AST_AGAlgChannelUnlimited_deserialize;
    this.globalElementSerializers['{urn:ast}AGTagListResponse'] = AST_AGTagListResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGTagListResponse'] = AST_AGTagListResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgAutoCallTestResponse'] = AST_AGAlgAutoCallTestResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgAutoCallTestResponse'] = AST_AGAlgAutoCallTestResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemToolsGetFirmwareInfoResponse'] = AST_AGSystemToolsGetFirmwareInfoResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemToolsGetFirmwareInfoResponse'] = AST_AGSystemToolsGetFirmwareInfoResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemDemoFlagSaveResponse'] = AST_AGSystemDemoFlagSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemDemoFlagSaveResponse'] = AST_AGSystemDemoFlagSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSetRemoteProvisionAddress'] = AST_AGSetRemoteProvisionAddress_serialize;
    this.globalElementDeserializers['{urn:ast}AGSetRemoteProvisionAddress'] = AST_AGSetRemoteProvisionAddress_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkDdnsGetSave'] = AST_AGNetworkDdnsGetSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkDdnsGetSave'] = AST_AGNetworkDdnsGetSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkSnmpGetResponse'] = AST_AGNetworkSnmpGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkSnmpGetResponse'] = AST_AGNetworkSnmpGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGjConGetKeysResponse'] = AST_AGjConGetKeysResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGjConGetKeysResponse'] = AST_AGjConGetKeysResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGjConConfigKeyboardMapResponse'] = AST_AGjConConfigKeyboardMapResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGjConConfigKeyboardMapResponse'] = AST_AGjConConfigKeyboardMapResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSetFXSPortsGain'] = AST_AGSetFXSPortsGain_serialize;
    this.globalElementDeserializers['{urn:ast}AGSetFXSPortsGain'] = AST_AGSetFXSPortsGain_deserialize;
    this.globalElementSerializers['{urn:ast}AGjConConfigKeyboardMap'] = AST_AGjConConfigKeyboardMap_serialize;
    this.globalElementDeserializers['{urn:ast}AGjConConfigKeyboardMap'] = AST_AGjConConfigKeyboardMap_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgChannelRemoveOne'] = AST_AGAlgChannelRemoveOne_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgChannelRemoveOne'] = AST_AGAlgChannelRemoveOne_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgAutoCallGetResponse'] = AST_AGAlgAutoCallGetResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgAutoCallGetResponse'] = AST_AGAlgAutoCallGetResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGCommitAllResponse'] = AST_AGCommitAllResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGCommitAllResponse'] = AST_AGCommitAllResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipBatchEndpointsSaveResponse'] = AST_AGSipBatchEndpointsSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipBatchEndpointsSaveResponse'] = AST_AGSipBatchEndpointsSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgSecSettingDeleteFileResponse'] = AST_AGAlgSecSettingDeleteFileResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgSecSettingDeleteFileResponse'] = AST_AGAlgSecSettingDeleteFileResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSipBendpointGet'] = AST_AGSipBendpointGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGSipBendpointGet'] = AST_AGSipBendpointGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemLanguageSave'] = AST_AGSystemLanguageSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemLanguageSave'] = AST_AGSystemLanguageSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGAdvCloudGetStatusResponse'] = AST_AGAdvCloudGetStatusResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGAdvCloudGetStatusResponse'] = AST_AGAdvCloudGetStatusResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgPickupSave'] = AST_AGAlgPickupSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgPickupSave'] = AST_AGAlgPickupSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkOpenvpnGet'] = AST_AGNetworkOpenvpnGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkOpenvpnGet'] = AST_AGNetworkOpenvpnGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGUcpAlgFxsparamGet'] = AST_AGUcpAlgFxsparamGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGUcpAlgFxsparamGet'] = AST_AGUcpAlgFxsparamGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGLogCdrDel'] = AST_AGLogCdrDel_serialize;
    this.globalElementDeserializers['{urn:ast}AGLogCdrDel'] = AST_AGLogCdrDel_deserialize;
    this.globalElementSerializers['{urn:ast}GroupGetAll'] = AST_GroupGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}GroupGetAll'] = AST_GroupGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}AGGetFXSPortsStatus'] = AST_AGGetFXSPortsStatus_serialize;
    this.globalElementDeserializers['{urn:ast}AGGetFXSPortsStatus'] = AST_AGGetFXSPortsStatus_deserialize;
    this.globalElementSerializers['{urn:ast}AGUcpAlgDriverSaveResponse'] = AST_AGUcpAlgDriverSaveResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGUcpAlgDriverSaveResponse'] = AST_AGUcpAlgDriverSaveResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGSystemStatusGet'] = AST_AGSystemStatusGet_serialize;
    this.globalElementDeserializers['{urn:ast}AGSystemStatusGet'] = AST_AGSystemStatusGet_deserialize;
    this.globalElementSerializers['{urn:ast}AGSysTimeSave'] = AST_AGSysTimeSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGSysTimeSave'] = AST_AGSysTimeSave_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingGroupGetOneResponse'] = AST_AGRoutingGroupGetOneResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingGroupGetOneResponse'] = AST_AGRoutingGroupGetOneResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkBurnMacResponse'] = AST_AGNetworkBurnMacResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkBurnMacResponse'] = AST_AGNetworkBurnMacResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAdvTr069Save'] = AST_AGAdvTr069Save_serialize;
    this.globalElementDeserializers['{urn:ast}AGAdvTr069Save'] = AST_AGAdvTr069Save_deserialize;
    this.globalElementSerializers['{urn:ast}AGNetworkRulesGetOneResponse'] = AST_AGNetworkRulesGetOneResponse_serialize;
    this.globalElementDeserializers['{urn:ast}AGNetworkRulesGetOneResponse'] = AST_AGNetworkRulesGetOneResponse_deserialize;
    this.globalElementSerializers['{urn:ast}RoutingGetAllResponse'] = AST_RoutingGetAllResponse_serialize;
    this.globalElementDeserializers['{urn:ast}RoutingGetAllResponse'] = AST_RoutingGetAllResponse_deserialize;
    this.globalElementSerializers['{urn:ast}AGAlgChannelGetOne'] = AST_AGAlgChannelGetOne_serialize;
    this.globalElementDeserializers['{urn:ast}AGAlgChannelGetOne'] = AST_AGAlgChannelGetOne_deserialize;
    this.globalElementSerializers['{urn:ast}AGRoutingRulsSave'] = AST_AGRoutingRulsSave_serialize;
    this.globalElementDeserializers['{urn:ast}AGRoutingRulsSave'] = AST_AGRoutingRulsSave_deserialize;
    this.globalElementSerializers['{urn:ast}RtpSave'] = AST_RtpSave_serialize;
    this.globalElementDeserializers['{urn:ast}RtpSave'] = AST_RtpSave_deserialize;
    this.globalElementSerializers['{urn:ast}NetworkDdnsGetAll'] = AST_NetworkDdnsGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}NetworkDdnsGetAll'] = AST_NetworkDdnsGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}NetworkSave'] = AST_NetworkSave_serialize;
    this.globalElementDeserializers['{urn:ast}NetworkSave'] = AST_NetworkSave_deserialize;
    this.globalElementSerializers['{urn:ast}SipBendGet'] = AST_SipBendGet_serialize;
    this.globalElementDeserializers['{urn:ast}SipBendGet'] = AST_SipBendGet_deserialize;
    this.globalElementSerializers['{urn:ast}jConsBoard'] = AST_jConsBoard_serialize;
    this.globalElementDeserializers['{urn:ast}jConsBoard'] = AST_jConsBoard_deserialize;
    this.globalElementSerializers['{urn:ast}UcpNetworkRulesGetOne'] = AST_UcpNetworkRulesGetOne_serialize;
    this.globalElementDeserializers['{urn:ast}UcpNetworkRulesGetOne'] = AST_UcpNetworkRulesGetOne_deserialize;
    this.globalElementSerializers['{urn:ast}FxsSpeeddialArr'] = AST_FxsSpeeddialArr_serialize;
    this.globalElementDeserializers['{urn:ast}FxsSpeeddialArr'] = AST_FxsSpeeddialArr_deserialize;
    this.globalElementSerializers['{urn:ast}SysLoginGeneral'] = AST_SysLoginGeneral_serialize;
    this.globalElementDeserializers['{urn:ast}SysLoginGeneral'] = AST_SysLoginGeneral_deserialize;
    this.globalElementSerializers['{urn:ast}UcpNetworkSwitch'] = AST_UcpNetworkSwitch_serialize;
    this.globalElementDeserializers['{urn:ast}UcpNetworkSwitch'] = AST_UcpNetworkSwitch_deserialize;
    this.globalElementSerializers['{urn:ast}SipBend'] = AST_SipBend_serialize;
    this.globalElementDeserializers['{urn:ast}SipBend'] = AST_SipBend_deserialize;
    this.globalElementSerializers['{urn:ast}AdvAstGeneral'] = AST_AdvAstGeneral_serialize;
    this.globalElementDeserializers['{urn:ast}AdvAstGeneral'] = AST_AdvAstGeneral_deserialize;
    this.globalElementSerializers['{urn:ast}SipBatchSip'] = AST_SipBatchSip_serialize;
    this.globalElementDeserializers['{urn:ast}SipBatchSip'] = AST_SipBatchSip_deserialize;
    this.globalElementSerializers['{urn:ast}NetworkOpenvpn'] = AST_NetworkOpenvpn_serialize;
    this.globalElementDeserializers['{urn:ast}NetworkOpenvpn'] = AST_NetworkOpenvpn_deserialize;
    this.globalElementSerializers['{urn:ast}AlgFax'] = AST_AlgFax_serialize;
    this.globalElementDeserializers['{urn:ast}AlgFax'] = AST_AlgFax_deserialize;
    this.globalElementSerializers['{urn:ast}UcpAlgGlbSave'] = AST_UcpAlgGlbSave_serialize;
    this.globalElementDeserializers['{urn:ast}UcpAlgGlbSave'] = AST_UcpAlgGlbSave_deserialize;
    this.globalElementSerializers['{urn:ast}NetworkDdnsGeneral'] = AST_NetworkDdnsGeneral_serialize;
    this.globalElementDeserializers['{urn:ast}NetworkDdnsGeneral'] = AST_NetworkDdnsGeneral_deserialize;
    this.globalElementSerializers['{urn:ast}UcpAlgFxsparamGet'] = AST_UcpAlgFxsparamGet_serialize;
    this.globalElementDeserializers['{urn:ast}UcpAlgFxsparamGet'] = AST_UcpAlgFxsparamGet_deserialize;
    this.globalElementSerializers['{urn:ast}SipSecGet'] = AST_SipSecGet_serialize;
    this.globalElementDeserializers['{urn:ast}SipSecGet'] = AST_SipSecGet_deserialize;
    this.globalElementSerializers['{urn:ast}UcpAlgFxoGlobal'] = AST_UcpAlgFxoGlobal_serialize;
    this.globalElementDeserializers['{urn:ast}UcpAlgFxoGlobal'] = AST_UcpAlgFxoGlobal_deserialize;
    this.globalElementSerializers['{urn:ast}SnmpAccess'] = AST_SnmpAccess_serialize;
    this.globalElementDeserializers['{urn:ast}SnmpAccess'] = AST_SnmpAccess_deserialize;
    this.globalElementSerializers['{urn:ast}FxsSpeeddial'] = AST_FxsSpeeddial_serialize;
    this.globalElementDeserializers['{urn:ast}FxsSpeeddial'] = AST_FxsSpeeddial_deserialize;
    this.globalElementSerializers['{urn:ast}SipAnalog'] = AST_SipAnalog_serialize;
    this.globalElementDeserializers['{urn:ast}SipAnalog'] = AST_SipAnalog_deserialize;
    this.globalElementSerializers['{urn:ast}SipAna'] = AST_SipAna_serialize;
    this.globalElementDeserializers['{urn:ast}SipAna'] = AST_SipAna_deserialize;
    this.globalElementSerializers['{urn:ast}SysInfoGet'] = AST_SysInfoGet_serialize;
    this.globalElementDeserializers['{urn:ast}SysInfoGet'] = AST_SysInfoGet_deserialize;
    this.globalElementSerializers['{urn:ast}NetworkDdnsSave'] = AST_NetworkDdnsSave_serialize;
    this.globalElementDeserializers['{urn:ast}NetworkDdnsSave'] = AST_NetworkDdnsSave_deserialize;
    this.globalElementSerializers['{urn:ast}ModuleBoardInfo'] = AST_ModuleBoardInfo_serialize;
    this.globalElementDeserializers['{urn:ast}ModuleBoardInfo'] = AST_ModuleBoardInfo_deserialize;
    this.globalElementSerializers['{urn:ast}AnaArr'] = AST_AnaArr_serialize;
    this.globalElementDeserializers['{urn:ast}AnaArr'] = AST_AnaArr_deserialize;
    this.globalElementSerializers['{urn:ast}LogCdrArr'] = AST_LogCdrArr_serialize;
    this.globalElementDeserializers['{urn:ast}LogCdrArr'] = AST_LogCdrArr_deserialize;
    this.globalElementSerializers['{urn:ast}ProvAnaBind'] = AST_ProvAnaBind_serialize;
    this.globalElementDeserializers['{urn:ast}ProvAnaBind'] = AST_ProvAnaBind_deserialize;
    this.globalElementSerializers['{urn:ast}NetworkOpenvpnGet'] = AST_NetworkOpenvpnGet_serialize;
    this.globalElementDeserializers['{urn:ast}NetworkOpenvpnGet'] = AST_NetworkOpenvpnGet_deserialize;
    this.globalElementSerializers['{urn:ast}AlgPickupChn'] = AST_AlgPickupChn_serialize;
    this.globalElementDeserializers['{urn:ast}AlgPickupChn'] = AST_AlgPickupChn_deserialize;
    this.globalElementSerializers['{urn:ast}NetWorkGetMac'] = AST_NetWorkGetMac_serialize;
    this.globalElementDeserializers['{urn:ast}NetWorkGetMac'] = AST_NetWorkGetMac_deserialize;
    this.globalElementSerializers['{urn:ast}UcpAlgCalllimitStatusArr'] = AST_UcpAlgCalllimitStatusArr_serialize;
    this.globalElementDeserializers['{urn:ast}UcpAlgCalllimitStatusArr'] = AST_UcpAlgCalllimitStatusArr_deserialize;
    this.globalElementSerializers['{urn:ast}LookupGet'] = AST_LookupGet_serialize;
    this.globalElementDeserializers['{urn:ast}LookupGet'] = AST_LookupGet_deserialize;
    this.globalElementSerializers['{urn:ast}NetworkLanSave'] = AST_NetworkLanSave_serialize;
    this.globalElementDeserializers['{urn:ast}NetworkLanSave'] = AST_NetworkLanSave_deserialize;
    this.globalElementSerializers['{urn:ast}RoutingGetArr'] = AST_RoutingGetArr_serialize;
    this.globalElementDeserializers['{urn:ast}RoutingGetArr'] = AST_RoutingGetArr_deserialize;
    this.globalElementSerializers['{urn:ast}UcpAlgCalllimit'] = AST_UcpAlgCalllimit_serialize;
    this.globalElementDeserializers['{urn:ast}UcpAlgCalllimit'] = AST_UcpAlgCalllimit_deserialize;
    this.globalElementSerializers['{urn:ast}SipBendSave'] = AST_SipBendSave_serialize;
    this.globalElementDeserializers['{urn:ast}SipBendSave'] = AST_SipBendSave_deserialize;
    this.globalElementSerializers['{urn:ast}ClientAdd'] = AST_ClientAdd_serialize;
    this.globalElementDeserializers['{urn:ast}ClientAdd'] = AST_ClientAdd_deserialize;
    this.globalElementSerializers['{urn:ast}AnaChn'] = AST_AnaChn_serialize;
    this.globalElementDeserializers['{urn:ast}AnaChn'] = AST_AnaChn_deserialize;
    this.globalElementSerializers['{urn:ast}NetworkWanGet'] = AST_NetworkWanGet_serialize;
    this.globalElementDeserializers['{urn:ast}NetworkWanGet'] = AST_NetworkWanGet_deserialize;
    this.globalElementSerializers['{urn:ast}UcpAlgFxoparam'] = AST_UcpAlgFxoparam_serialize;
    this.globalElementDeserializers['{urn:ast}UcpAlgFxoparam'] = AST_UcpAlgFxoparam_deserialize;
    this.globalElementSerializers['{urn:ast}AnaGetAll'] = AST_AnaGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}AnaGetAll'] = AST_AnaGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}AnaFxsAll'] = AST_AnaFxsAll_serialize;
    this.globalElementDeserializers['{urn:ast}AnaFxsAll'] = AST_AnaFxsAll_deserialize;
    this.globalElementSerializers['{urn:ast}ModuleBoardGet'] = AST_ModuleBoardGet_serialize;
    this.globalElementDeserializers['{urn:ast}ModuleBoardGet'] = AST_ModuleBoardGet_deserialize;
    this.globalElementSerializers['{urn:ast}FileArr'] = AST_FileArr_serialize;
    this.globalElementDeserializers['{urn:ast}FileArr'] = AST_FileArr_deserialize;
    this.globalElementSerializers['{urn:ast}AdvAstSave'] = AST_AdvAstSave_serialize;
    this.globalElementDeserializers['{urn:ast}AdvAstSave'] = AST_AdvAstSave_deserialize;
    this.globalElementSerializers['{urn:ast}LogSettingSave'] = AST_LogSettingSave_serialize;
    this.globalElementDeserializers['{urn:ast}LogSettingSave'] = AST_LogSettingSave_deserialize;
    this.globalElementSerializers['{urn:ast}SysInfo'] = AST_SysInfo_serialize;
    this.globalElementDeserializers['{urn:ast}SysInfo'] = AST_SysInfo_deserialize;
    this.globalElementSerializers['{urn:ast}ClientRemove'] = AST_ClientRemove_serialize;
    this.globalElementDeserializers['{urn:ast}ClientRemove'] = AST_ClientRemove_deserialize;
    this.globalElementSerializers['{urn:ast}LogCdr'] = AST_LogCdr_serialize;
    this.globalElementDeserializers['{urn:ast}LogCdr'] = AST_LogCdr_deserialize;
    this.globalElementSerializers['{urn:ast}SnmpGet'] = AST_SnmpGet_serialize;
    this.globalElementDeserializers['{urn:ast}SnmpGet'] = AST_SnmpGet_deserialize;
    this.globalElementSerializers['{urn:ast}RoutingAna'] = AST_RoutingAna_serialize;
    this.globalElementDeserializers['{urn:ast}RoutingAna'] = AST_RoutingAna_deserialize;
    this.globalElementSerializers['{urn:ast}UcpAlgFxsparam'] = AST_UcpAlgFxsparam_serialize;
    this.globalElementDeserializers['{urn:ast}UcpAlgFxsparam'] = AST_UcpAlgFxsparam_deserialize;
    this.globalElementSerializers['{urn:ast}Lookup'] = AST_Lookup_serialize;
    this.globalElementDeserializers['{urn:ast}Lookup'] = AST_Lookup_deserialize;
    this.globalElementSerializers['{urn:ast}SnmpV3'] = AST_SnmpV3_serialize;
    this.globalElementDeserializers['{urn:ast}SnmpV3'] = AST_SnmpV3_deserialize;
    this.globalElementSerializers['{urn:ast}RoutingGroupGetOne'] = AST_RoutingGroupGetOne_serialize;
    this.globalElementDeserializers['{urn:ast}RoutingGroupGetOne'] = AST_RoutingGroupGetOne_deserialize;
    this.globalElementSerializers['{urn:ast}SipBatchGet'] = AST_SipBatchGet_serialize;
    this.globalElementDeserializers['{urn:ast}SipBatchGet'] = AST_SipBatchGet_deserialize;
    this.globalElementSerializers['{urn:ast}RegisterParaGet'] = AST_RegisterParaGet_serialize;
    this.globalElementDeserializers['{urn:ast}RegisterParaGet'] = AST_RegisterParaGet_deserialize;
    this.globalElementSerializers['{urn:ast}Array16OfunsignedByte'] = AST_Array16OfunsignedByte_serialize;
    this.globalElementDeserializers['{urn:ast}Array16OfunsignedByte'] = AST_Array16OfunsignedByte_deserialize;
    this.globalElementSerializers['{urn:ast}AdvAstFileGet'] = AST_AdvAstFileGet_serialize;
    this.globalElementDeserializers['{urn:ast}AdvAstFileGet'] = AST_AdvAstFileGet_deserialize;
    this.globalElementSerializers['{urn:ast}Result'] = AST_Result_serialize;
    this.globalElementDeserializers['{urn:ast}Result'] = AST_Result_deserialize;
    this.globalElementSerializers['{urn:ast}UcpAlgCalllimitGet'] = AST_UcpAlgCalllimitGet_serialize;
    this.globalElementDeserializers['{urn:ast}UcpAlgCalllimitGet'] = AST_UcpAlgCalllimitGet_deserialize;
    this.globalElementSerializers['{urn:ast}IoSettingsOne'] = AST_IoSettingsOne_serialize;
    this.globalElementDeserializers['{urn:ast}IoSettingsOne'] = AST_IoSettingsOne_deserialize;
    this.globalElementSerializers['{urn:ast}jConGetAll'] = AST_jConGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}jConGetAll'] = AST_jConGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}SipGetArr'] = AST_SipGetArr_serialize;
    this.globalElementDeserializers['{urn:ast}SipGetArr'] = AST_SipGetArr_deserialize;
    this.globalElementSerializers['{urn:ast}AlgFunkyGet'] = AST_AlgFunkyGet_serialize;
    this.globalElementDeserializers['{urn:ast}AlgFunkyGet'] = AST_AlgFunkyGet_deserialize;
    this.globalElementSerializers['{urn:ast}RoutingGroup'] = AST_RoutingGroup_serialize;
    this.globalElementDeserializers['{urn:ast}RoutingGroup'] = AST_RoutingGroup_deserialize;
    this.globalElementSerializers['{urn:ast}Ana'] = AST_Ana_serialize;
    this.globalElementDeserializers['{urn:ast}Ana'] = AST_Ana_deserialize;
    this.globalElementSerializers['{urn:ast}SipGetOne'] = AST_SipGetOne_serialize;
    this.globalElementDeserializers['{urn:ast}SipGetOne'] = AST_SipGetOne_deserialize;
    this.globalElementSerializers['{urn:ast}File'] = AST_File_serialize;
    this.globalElementDeserializers['{urn:ast}File'] = AST_File_deserialize;
    this.globalElementSerializers['{urn:ast}SnmpCommunity'] = AST_SnmpCommunity_serialize;
    this.globalElementDeserializers['{urn:ast}SnmpCommunity'] = AST_SnmpCommunity_deserialize;
    this.globalElementSerializers['{urn:ast}SipGet'] = AST_SipGet_serialize;
    this.globalElementDeserializers['{urn:ast}SipGet'] = AST_SipGet_deserialize;
    this.globalElementSerializers['{urn:ast}TagGet'] = AST_TagGet_serialize;
    this.globalElementDeserializers['{urn:ast}TagGet'] = AST_TagGet_deserialize;
    this.globalElementSerializers['{urn:ast}NetworkWan'] = AST_NetworkWan_serialize;
    this.globalElementDeserializers['{urn:ast}NetworkWan'] = AST_NetworkWan_deserialize;
    this.globalElementSerializers['{urn:ast}Channel'] = AST_Channel_serialize;
    this.globalElementDeserializers['{urn:ast}Channel'] = AST_Channel_deserialize;
    this.globalElementSerializers['{urn:ast}keyboards'] = AST_keyboards_serialize;
    this.globalElementDeserializers['{urn:ast}keyboards'] = AST_keyboards_deserialize;
    this.globalElementSerializers['{urn:ast}SipGen'] = AST_SipGen_serialize;
    this.globalElementDeserializers['{urn:ast}SipGen'] = AST_SipGen_deserialize;
    this.globalElementSerializers['{urn:ast}RoutingRulesGetAll'] = AST_RoutingRulesGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}RoutingRulesGetAll'] = AST_RoutingRulesGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}UcpAlgFxoparamGetAll'] = AST_UcpAlgFxoparamGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}UcpAlgFxoparamGetAll'] = AST_UcpAlgFxoparamGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}SipSecSave'] = AST_SipSecSave_serialize;
    this.globalElementDeserializers['{urn:ast}SipSecSave'] = AST_SipSecSave_deserialize;
    this.globalElementSerializers['{urn:ast}SysLoginSsh'] = AST_SysLoginSsh_serialize;
    this.globalElementDeserializers['{urn:ast}SysLoginSsh'] = AST_SysLoginSsh_deserialize;
    this.globalElementSerializers['{urn:ast}AutoCallChn'] = AST_AutoCallChn_serialize;
    this.globalElementDeserializers['{urn:ast}AutoCallChn'] = AST_AutoCallChn_deserialize;
    this.globalElementSerializers['{urn:ast}LogGwContext'] = AST_LogGwContext_serialize;
    this.globalElementDeserializers['{urn:ast}LogGwContext'] = AST_LogGwContext_deserialize;
    this.globalElementSerializers['{urn:ast}Anainfo'] = AST_Anainfo_serialize;
    this.globalElementDeserializers['{urn:ast}Anainfo'] = AST_Anainfo_deserialize;
    this.globalElementSerializers['{urn:ast}UcpNetworkRules'] = AST_UcpNetworkRules_serialize;
    this.globalElementDeserializers['{urn:ast}UcpNetworkRules'] = AST_UcpNetworkRules_deserialize;
    this.globalElementSerializers['{urn:ast}SipNewGet'] = AST_SipNewGet_serialize;
    this.globalElementDeserializers['{urn:ast}SipNewGet'] = AST_SipNewGet_deserialize;
    this.globalElementSerializers['{urn:ast}AutoCallTest'] = AST_AutoCallTest_serialize;
    this.globalElementDeserializers['{urn:ast}AutoCallTest'] = AST_AutoCallTest_deserialize;
    this.globalElementSerializers['{urn:ast}FxsGroupDialArr'] = AST_FxsGroupDialArr_serialize;
    this.globalElementDeserializers['{urn:ast}FxsGroupDialArr'] = AST_FxsGroupDialArr_deserialize;
    this.globalElementSerializers['{urn:ast}AdvTr069Save'] = AST_AdvTr069Save_serialize;
    this.globalElementDeserializers['{urn:ast}AdvTr069Save'] = AST_AdvTr069Save_deserialize;
    this.globalElementSerializers['{urn:ast}AnaContextFxoks'] = AST_AnaContextFxoks_serialize;
    this.globalElementDeserializers['{urn:ast}AnaContextFxoks'] = AST_AnaContextFxoks_deserialize;
    this.globalElementSerializers['{urn:ast}SipContext'] = AST_SipContext_serialize;
    this.globalElementDeserializers['{urn:ast}SipContext'] = AST_SipContext_deserialize;
    this.globalElementSerializers['{urn:ast}RoutingAdvSave'] = AST_RoutingAdvSave_serialize;
    this.globalElementDeserializers['{urn:ast}RoutingAdvSave'] = AST_RoutingAdvSave_deserialize;
    this.globalElementSerializers['{urn:ast}ChannelArr'] = AST_ChannelArr_serialize;
    this.globalElementDeserializers['{urn:ast}ChannelArr'] = AST_ChannelArr_deserialize;
    this.globalElementSerializers['{urn:ast}SipAnalogArr'] = AST_SipAnalogArr_serialize;
    this.globalElementDeserializers['{urn:ast}SipAnalogArr'] = AST_SipAnalogArr_deserialize;
    this.globalElementSerializers['{urn:ast}AdvCloudGet'] = AST_AdvCloudGet_serialize;
    this.globalElementDeserializers['{urn:ast}AdvCloudGet'] = AST_AdvCloudGet_deserialize;
    this.globalElementSerializers['{urn:ast}SipAdvSTUN'] = AST_SipAdvSTUN_serialize;
    this.globalElementDeserializers['{urn:ast}SipAdvSTUN'] = AST_SipAdvSTUN_deserialize;
    this.globalElementSerializers['{urn:ast}SipBatch'] = AST_SipBatch_serialize;
    this.globalElementDeserializers['{urn:ast}SipBatch'] = AST_SipBatch_deserialize;
    this.globalElementSerializers['{urn:ast}NetworkTookitGet'] = AST_NetworkTookitGet_serialize;
    this.globalElementDeserializers['{urn:ast}NetworkTookitGet'] = AST_NetworkTookitGet_deserialize;
    this.globalElementSerializers['{urn:ast}AlgGlbGetAll'] = AST_AlgGlbGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}AlgGlbGetAll'] = AST_AlgGlbGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}NetworkWanSave'] = AST_NetworkWanSave_serialize;
    this.globalElementDeserializers['{urn:ast}NetworkWanSave'] = AST_NetworkWanSave_deserialize;
    this.globalElementSerializers['{urn:ast}SnmpSecurityGroup'] = AST_SnmpSecurityGroup_serialize;
    this.globalElementDeserializers['{urn:ast}SnmpSecurityGroup'] = AST_SnmpSecurityGroup_deserialize;
    this.globalElementSerializers['{urn:ast}SectionArr'] = AST_SectionArr_serialize;
    this.globalElementDeserializers['{urn:ast}SectionArr'] = AST_SectionArr_deserialize;
    this.globalElementSerializers['{urn:ast}AutoProvisionGet'] = AST_AutoProvisionGet_serialize;
    this.globalElementDeserializers['{urn:ast}AutoProvisionGet'] = AST_AutoProvisionGet_deserialize;
    this.globalElementSerializers['{urn:ast}NetworkDdnsComArr'] = AST_NetworkDdnsComArr_serialize;
    this.globalElementDeserializers['{urn:ast}NetworkDdnsComArr'] = AST_NetworkDdnsComArr_deserialize;
    this.globalElementSerializers['{urn:ast}SipAdvGet'] = AST_SipAdvGet_serialize;
    this.globalElementDeserializers['{urn:ast}SipAdvGet'] = AST_SipAdvGet_deserialize;
    this.globalElementSerializers['{urn:ast}SysTimeSave'] = AST_SysTimeSave_serialize;
    this.globalElementDeserializers['{urn:ast}SysTimeSave'] = AST_SysTimeSave_deserialize;
    this.globalElementSerializers['{urn:ast}AdvCloudGeneral'] = AST_AdvCloudGeneral_serialize;
    this.globalElementDeserializers['{urn:ast}AdvCloudGeneral'] = AST_AdvCloudGeneral_deserialize;
    this.globalElementSerializers['{urn:ast}SipBendArr'] = AST_SipBendArr_serialize;
    this.globalElementDeserializers['{urn:ast}SipBendArr'] = AST_SipBendArr_deserialize;
    this.globalElementSerializers['{urn:ast}SipAdv'] = AST_SipAdv_serialize;
    this.globalElementDeserializers['{urn:ast}SipAdv'] = AST_SipAdv_deserialize;
    this.globalElementSerializers['{urn:ast}SipFxoBindingGet'] = AST_SipFxoBindingGet_serialize;
    this.globalElementDeserializers['{urn:ast}SipFxoBindingGet'] = AST_SipFxoBindingGet_deserialize;
    this.globalElementSerializers['{urn:ast}FxsGroupDial'] = AST_FxsGroupDial_serialize;
    this.globalElementDeserializers['{urn:ast}FxsGroupDial'] = AST_FxsGroupDial_deserialize;
    this.globalElementSerializers['{urn:ast}AlgPickupChnArr'] = AST_AlgPickupChnArr_serialize;
    this.globalElementDeserializers['{urn:ast}AlgPickupChnArr'] = AST_AlgPickupChnArr_deserialize;
    this.globalElementSerializers['{urn:ast}AutoProvision'] = AST_AutoProvision_serialize;
    this.globalElementDeserializers['{urn:ast}AutoProvision'] = AST_AutoProvision_deserialize;
    this.globalElementSerializers['{urn:ast}RoutingAdvGet'] = AST_RoutingAdvGet_serialize;
    this.globalElementDeserializers['{urn:ast}RoutingAdvGet'] = AST_RoutingAdvGet_deserialize;
    this.globalElementSerializers['{urn:ast}UcpAlgDriverParam'] = AST_UcpAlgDriverParam_serialize;
    this.globalElementDeserializers['{urn:ast}UcpAlgDriverParam'] = AST_UcpAlgDriverParam_deserialize;
    this.globalElementSerializers['{urn:ast}RoutingGet'] = AST_RoutingGet_serialize;
    this.globalElementDeserializers['{urn:ast}RoutingGet'] = AST_RoutingGet_deserialize;
    this.globalElementSerializers['{urn:ast}LogCdrGet'] = AST_LogCdrGet_serialize;
    this.globalElementDeserializers['{urn:ast}LogCdrGet'] = AST_LogCdrGet_deserialize;
    this.globalElementSerializers['{urn:ast}DHCPUpdateGet'] = AST_DHCPUpdateGet_serialize;
    this.globalElementDeserializers['{urn:ast}DHCPUpdateGet'] = AST_DHCPUpdateGet_deserialize;
    this.globalElementSerializers['{urn:ast}AdvTr069General'] = AST_AdvTr069General_serialize;
    this.globalElementDeserializers['{urn:ast}AdvTr069General'] = AST_AdvTr069General_deserialize;
    this.globalElementSerializers['{urn:ast}OEMSettingInfoSave'] = AST_OEMSettingInfoSave_serialize;
    this.globalElementDeserializers['{urn:ast}OEMSettingInfoSave'] = AST_OEMSettingInfoSave_deserialize;
    this.globalElementSerializers['{urn:ast}AlgGlb'] = AST_AlgGlb_serialize;
    this.globalElementDeserializers['{urn:ast}AlgGlb'] = AST_AlgGlb_deserialize;
    this.globalElementSerializers['{urn:ast}Line'] = AST_Line_serialize;
    this.globalElementDeserializers['{urn:ast}Line'] = AST_Line_deserialize;
    this.globalElementSerializers['{urn:ast}AlgFunky'] = AST_AlgFunky_serialize;
    this.globalElementDeserializers['{urn:ast}AlgFunky'] = AST_AlgFunky_deserialize;
    this.globalElementSerializers['{urn:ast}LogGwContextArr'] = AST_LogGwContextArr_serialize;
    this.globalElementDeserializers['{urn:ast}LogGwContextArr'] = AST_LogGwContextArr_deserialize;
    this.globalElementSerializers['{urn:ast}AlgPickupGet'] = AST_AlgPickupGet_serialize;
    this.globalElementDeserializers['{urn:ast}AlgPickupGet'] = AST_AlgPickupGet_deserialize;
    this.globalElementSerializers['{urn:ast}NetworkGet'] = AST_NetworkGet_serialize;
    this.globalElementDeserializers['{urn:ast}NetworkGet'] = AST_NetworkGet_deserialize;
    this.globalElementSerializers['{urn:ast}UcpAlgGlobal'] = AST_UcpAlgGlobal_serialize;
    this.globalElementDeserializers['{urn:ast}UcpAlgGlobal'] = AST_UcpAlgGlobal_deserialize;
    this.globalElementSerializers['{urn:ast}SipOneArr'] = AST_SipOneArr_serialize;
    this.globalElementDeserializers['{urn:ast}SipOneArr'] = AST_SipOneArr_deserialize;
    this.globalElementSerializers['{urn:ast}LogMorContext'] = AST_LogMorContext_serialize;
    this.globalElementDeserializers['{urn:ast}LogMorContext'] = AST_LogMorContext_deserialize;
    this.globalElementSerializers['{urn:ast}RelayGetOne'] = AST_RelayGetOne_serialize;
    this.globalElementDeserializers['{urn:ast}RelayGetOne'] = AST_RelayGetOne_deserialize;
    this.globalElementSerializers['{urn:ast}OEMSettingInfo'] = AST_OEMSettingInfo_serialize;
    this.globalElementDeserializers['{urn:ast}OEMSettingInfo'] = AST_OEMSettingInfo_deserialize;
    this.globalElementSerializers['{urn:ast}AdvAstGetAll'] = AST_AdvAstGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}AdvAstGetAll'] = AST_AdvAstGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}SipAnaArr'] = AST_SipAnaArr_serialize;
    this.globalElementDeserializers['{urn:ast}SipAnaArr'] = AST_SipAnaArr_deserialize;
    this.globalElementSerializers['{urn:ast}AnaChnArr'] = AST_AnaChnArr_serialize;
    this.globalElementDeserializers['{urn:ast}AnaChnArr'] = AST_AnaChnArr_deserialize;
    this.globalElementSerializers['{urn:ast}UcpAlgGlbGetAll'] = AST_UcpAlgGlbGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}UcpAlgGlbGetAll'] = AST_UcpAlgGlbGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}SnmpUserAdd'] = AST_SnmpUserAdd_serialize;
    this.globalElementDeserializers['{urn:ast}SnmpUserAdd'] = AST_SnmpUserAdd_deserialize;
    this.globalElementSerializers['{urn:ast}RoutingAnaArr'] = AST_RoutingAnaArr_serialize;
    this.globalElementDeserializers['{urn:ast}RoutingAnaArr'] = AST_RoutingAnaArr_deserialize;
    this.globalElementSerializers['{urn:ast}AlgDialtableSave'] = AST_AlgDialtableSave_serialize;
    this.globalElementDeserializers['{urn:ast}AlgDialtableSave'] = AST_AlgDialtableSave_deserialize;
    this.globalElementSerializers['{urn:ast}UcpAlgDahdiContent'] = AST_UcpAlgDahdiContent_serialize;
    this.globalElementDeserializers['{urn:ast}UcpAlgDahdiContent'] = AST_UcpAlgDahdiContent_deserialize;
    this.globalElementSerializers['{urn:ast}AutoCallChnArr'] = AST_AutoCallChnArr_serialize;
    this.globalElementDeserializers['{urn:ast}AutoCallChnArr'] = AST_AutoCallChnArr_deserialize;
    this.globalElementSerializers['{urn:ast}SystemFeatures'] = AST_SystemFeatures_serialize;
    this.globalElementDeserializers['{urn:ast}SystemFeatures'] = AST_SystemFeatures_deserialize;
    this.globalElementSerializers['{urn:ast}Sipinfo'] = AST_Sipinfo_serialize;
    this.globalElementDeserializers['{urn:ast}Sipinfo'] = AST_Sipinfo_deserialize;
    this.globalElementSerializers['{urn:ast}UcpNetworkRulesGetAll'] = AST_UcpNetworkRulesGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}UcpNetworkRulesGetAll'] = AST_UcpNetworkRulesGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}RoutingContex'] = AST_RoutingContex_serialize;
    this.globalElementDeserializers['{urn:ast}RoutingContex'] = AST_RoutingContex_deserialize;
    this.globalElementSerializers['{urn:ast}AnaGetOne'] = AST_AnaGetOne_serialize;
    this.globalElementDeserializers['{urn:ast}AnaGetOne'] = AST_AnaGetOne_deserialize;
    this.globalElementSerializers['{urn:ast}AlgBusyTone'] = AST_AlgBusyTone_serialize;
    this.globalElementDeserializers['{urn:ast}AlgBusyTone'] = AST_AlgBusyTone_deserialize;
    this.globalElementSerializers['{urn:ast}FxsGroupDialGetAll'] = AST_FxsGroupDialGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}FxsGroupDialGetAll'] = AST_FxsGroupDialGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}NetworkinfoArr'] = AST_NetworkinfoArr_serialize;
    this.globalElementDeserializers['{urn:ast}NetworkinfoArr'] = AST_NetworkinfoArr_deserialize;
    this.globalElementSerializers['{urn:ast}AlgGlobal'] = AST_AlgGlobal_serialize;
    this.globalElementDeserializers['{urn:ast}AlgGlobal'] = AST_AlgGlobal_deserialize;
    this.globalElementSerializers['{urn:ast}UcpNetworkRulesArr'] = AST_UcpNetworkRulesArr_serialize;
    this.globalElementDeserializers['{urn:ast}UcpNetworkRulesArr'] = AST_UcpNetworkRulesArr_deserialize;
    this.globalElementSerializers['{urn:ast}ProvFxsSpeedDailArr'] = AST_ProvFxsSpeedDailArr_serialize;
    this.globalElementDeserializers['{urn:ast}ProvFxsSpeedDailArr'] = AST_ProvFxsSpeedDailArr_deserialize;
    this.globalElementSerializers['{urn:ast}Networkinfo'] = AST_Networkinfo_serialize;
    this.globalElementDeserializers['{urn:ast}Networkinfo'] = AST_Networkinfo_deserialize;
    this.globalElementSerializers['{urn:ast}AutoCallGet'] = AST_AutoCallGet_serialize;
    this.globalElementDeserializers['{urn:ast}AutoCallGet'] = AST_AutoCallGet_deserialize;
    this.globalElementSerializers['{urn:ast}SysTool'] = AST_SysTool_serialize;
    this.globalElementDeserializers['{urn:ast}SysTool'] = AST_SysTool_deserialize;
    this.globalElementSerializers['{urn:ast}AlgPickup'] = AST_AlgPickup_serialize;
    this.globalElementDeserializers['{urn:ast}AlgPickup'] = AST_AlgPickup_deserialize;
    this.globalElementSerializers['{urn:ast}UcpAlgDriverGet'] = AST_UcpAlgDriverGet_serialize;
    this.globalElementDeserializers['{urn:ast}UcpAlgDriverGet'] = AST_UcpAlgDriverGet_deserialize;
    this.globalElementSerializers['{urn:ast}SnmpView'] = AST_SnmpView_serialize;
    this.globalElementDeserializers['{urn:ast}SnmpView'] = AST_SnmpView_deserialize;
    this.globalElementSerializers['{urn:ast}SnmpGeneral'] = AST_SnmpGeneral_serialize;
    this.globalElementDeserializers['{urn:ast}SnmpGeneral'] = AST_SnmpGeneral_deserialize;
    this.globalElementSerializers['{urn:ast}LookupArr'] = AST_LookupArr_serialize;
    this.globalElementDeserializers['{urn:ast}LookupArr'] = AST_LookupArr_deserialize;
    this.globalElementSerializers['{urn:ast}SnmpConfParam'] = AST_SnmpConfParam_serialize;
    this.globalElementDeserializers['{urn:ast}SnmpConfParam'] = AST_SnmpConfParam_deserialize;
    this.globalElementSerializers['{urn:ast}NetworkDns'] = AST_NetworkDns_serialize;
    this.globalElementDeserializers['{urn:ast}NetworkDns'] = AST_NetworkDns_deserialize;
    this.globalElementSerializers['{urn:ast}LineArr'] = AST_LineArr_serialize;
    this.globalElementDeserializers['{urn:ast}LineArr'] = AST_LineArr_deserialize;
    this.globalElementSerializers['{urn:ast}SysDate'] = AST_SysDate_serialize;
    this.globalElementDeserializers['{urn:ast}SysDate'] = AST_SysDate_deserialize;
    this.globalElementSerializers['{urn:ast}SysAuto'] = AST_SysAuto_serialize;
    this.globalElementDeserializers['{urn:ast}SysAuto'] = AST_SysAuto_deserialize;
    this.globalElementSerializers['{urn:ast}SysStatusGet'] = AST_SysStatusGet_serialize;
    this.globalElementDeserializers['{urn:ast}SysStatusGet'] = AST_SysStatusGet_deserialize;
    this.globalElementSerializers['{urn:ast}Section'] = AST_Section_serialize;
    this.globalElementDeserializers['{urn:ast}Section'] = AST_Section_deserialize;
    this.globalElementSerializers['{urn:ast}SipAdvSave'] = AST_SipAdvSave_serialize;
    this.globalElementDeserializers['{urn:ast}SipAdvSave'] = AST_SipAdvSave_deserialize;
    this.globalElementSerializers['{urn:ast}RoutingRulesArr'] = AST_RoutingRulesArr_serialize;
    this.globalElementDeserializers['{urn:ast}RoutingRulesArr'] = AST_RoutingRulesArr_deserialize;
    this.globalElementSerializers['{urn:ast}RoutingRules'] = AST_RoutingRules_serialize;
    this.globalElementDeserializers['{urn:ast}RoutingRules'] = AST_RoutingRules_deserialize;
    this.globalElementSerializers['{urn:ast}NetworkDdnsCom'] = AST_NetworkDdnsCom_serialize;
    this.globalElementDeserializers['{urn:ast}NetworkDdnsCom'] = AST_NetworkDdnsCom_deserialize;
    this.globalElementSerializers['{urn:ast}IoSettingsGet'] = AST_IoSettingsGet_serialize;
    this.globalElementDeserializers['{urn:ast}IoSettingsGet'] = AST_IoSettingsGet_deserialize;
    this.globalElementSerializers['{urn:ast}UcpAlgCalllimitArr'] = AST_UcpAlgCalllimitArr_serialize;
    this.globalElementDeserializers['{urn:ast}UcpAlgCalllimitArr'] = AST_UcpAlgCalllimitArr_deserialize;
    this.globalElementSerializers['{urn:ast}SipBatchSipArr'] = AST_SipBatchSipArr_serialize;
    this.globalElementDeserializers['{urn:ast}SipBatchSipArr'] = AST_SipBatchSipArr_deserialize;
    this.globalElementSerializers['{urn:ast}SipinfoArr'] = AST_SipinfoArr_serialize;
    this.globalElementDeserializers['{urn:ast}SipinfoArr'] = AST_SipinfoArr_deserialize;
    this.globalElementSerializers['{urn:ast}SysTime'] = AST_SysTime_serialize;
    this.globalElementDeserializers['{urn:ast}SysTime'] = AST_SysTime_deserialize;
    this.globalElementSerializers['{urn:ast}NetworkLanGet'] = AST_NetworkLanGet_serialize;
    this.globalElementDeserializers['{urn:ast}NetworkLanGet'] = AST_NetworkLanGet_deserialize;
    this.globalElementSerializers['{urn:ast}NetworkTookitTcpdump'] = AST_NetworkTookitTcpdump_serialize;
    this.globalElementDeserializers['{urn:ast}NetworkTookitTcpdump'] = AST_NetworkTookitTcpdump_deserialize;
    this.globalElementSerializers['{urn:ast}RoutingRulsGetOne'] = AST_RoutingRulsGetOne_serialize;
    this.globalElementDeserializers['{urn:ast}RoutingRulsGetOne'] = AST_RoutingRulsGetOne_deserialize;
    this.globalElementSerializers['{urn:ast}LogMorContextArr'] = AST_LogMorContextArr_serialize;
    this.globalElementDeserializers['{urn:ast}LogMorContextArr'] = AST_LogMorContextArr_deserialize;
    this.globalElementSerializers['{urn:ast}AdvAstFileGetOne'] = AST_AdvAstFileGetOne_serialize;
    this.globalElementDeserializers['{urn:ast}AdvAstFileGetOne'] = AST_AdvAstFileGetOne_deserialize;
    this.globalElementSerializers['{urn:ast}LogGwSysklog'] = AST_LogGwSysklog_serialize;
    this.globalElementDeserializers['{urn:ast}LogGwSysklog'] = AST_LogGwSysklog_deserialize;
    this.globalElementSerializers['{urn:ast}SipFxoBindingSaveArr'] = AST_SipFxoBindingSaveArr_serialize;
    this.globalElementDeserializers['{urn:ast}SipFxoBindingSaveArr'] = AST_SipFxoBindingSaveArr_deserialize;
    this.globalElementSerializers['{urn:ast}NetworkEthName'] = AST_NetworkEthName_serialize;
    this.globalElementDeserializers['{urn:ast}NetworkEthName'] = AST_NetworkEthName_deserialize;
    this.globalElementSerializers['{urn:ast}SipBatchArr'] = AST_SipBatchArr_serialize;
    this.globalElementDeserializers['{urn:ast}SipBatchArr'] = AST_SipBatchArr_deserialize;
    this.globalElementSerializers['{urn:ast}SipFxoBindingSave'] = AST_SipFxoBindingSave_serialize;
    this.globalElementDeserializers['{urn:ast}SipFxoBindingSave'] = AST_SipFxoBindingSave_deserialize;
    this.globalElementSerializers['{urn:ast}Sip'] = AST_Sip_serialize;
    this.globalElementDeserializers['{urn:ast}Sip'] = AST_Sip_deserialize;
    this.globalElementSerializers['{urn:ast}SnmpSave'] = AST_SnmpSave_serialize;
    this.globalElementDeserializers['{urn:ast}SnmpSave'] = AST_SnmpSave_deserialize;
    this.globalElementSerializers['{urn:ast}UcpNetworkSwitchGet'] = AST_UcpNetworkSwitchGet_serialize;
    this.globalElementDeserializers['{urn:ast}UcpNetworkSwitchGet'] = AST_UcpNetworkSwitchGet_deserialize;
    this.globalElementSerializers['{urn:ast}RegisterParaRead'] = AST_RegisterParaRead_serialize;
    this.globalElementDeserializers['{urn:ast}RegisterParaRead'] = AST_RegisterParaRead_deserialize;
    this.globalElementSerializers['{urn:ast}RegisterPara'] = AST_RegisterPara_serialize;
    this.globalElementDeserializers['{urn:ast}RegisterPara'] = AST_RegisterPara_deserialize;
    this.globalElementSerializers['{urn:ast}ProvFxsSpeedDial'] = AST_ProvFxsSpeedDial_serialize;
    this.globalElementDeserializers['{urn:ast}ProvFxsSpeedDial'] = AST_ProvFxsSpeedDial_deserialize;
    this.globalElementSerializers['{urn:ast}AlgGlbGetOne'] = AST_AlgGlbGetOne_serialize;
    this.globalElementDeserializers['{urn:ast}AlgGlbGetOne'] = AST_AlgGlbGetOne_deserialize;
    this.globalElementSerializers['{urn:ast}SysToolGet'] = AST_SysToolGet_serialize;
    this.globalElementDeserializers['{urn:ast}SysToolGet'] = AST_SysToolGet_deserialize;
    this.globalElementSerializers['{urn:ast}AdvTr069Get'] = AST_AdvTr069Get_serialize;
    this.globalElementDeserializers['{urn:ast}AdvTr069Get'] = AST_AdvTr069Get_deserialize;
    this.globalElementSerializers['{urn:ast}AnaFxs'] = AST_AnaFxs_serialize;
    this.globalElementDeserializers['{urn:ast}AnaFxs'] = AST_AnaFxs_deserialize;
    this.globalElementSerializers['{urn:ast}AdvCloudSave'] = AST_AdvCloudSave_serialize;
    this.globalElementDeserializers['{urn:ast}AdvCloudSave'] = AST_AdvCloudSave_deserialize;
    this.globalElementSerializers['{urn:ast}LogSettingGet'] = AST_LogSettingGet_serialize;
    this.globalElementDeserializers['{urn:ast}LogSettingGet'] = AST_LogSettingGet_deserialize;
    this.globalElementSerializers['{urn:ast}OEMSettingInfoGet'] = AST_OEMSettingInfoGet_serialize;
    this.globalElementDeserializers['{urn:ast}OEMSettingInfoGet'] = AST_OEMSettingInfoGet_deserialize;
    this.globalElementSerializers['{urn:ast}RoutingGroupGetAll'] = AST_RoutingGroupGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}RoutingGroupGetAll'] = AST_RoutingGroupGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}SipOne'] = AST_SipOne_serialize;
    this.globalElementDeserializers['{urn:ast}SipOne'] = AST_SipOne_deserialize;
    this.globalElementSerializers['{urn:ast}AlgGlbSave'] = AST_AlgGlbSave_serialize;
    this.globalElementDeserializers['{urn:ast}AlgGlbSave'] = AST_AlgGlbSave_deserialize;
    this.globalElementSerializers['{urn:ast}RoutingGroupGetNew'] = AST_RoutingGroupGetNew_serialize;
    this.globalElementDeserializers['{urn:ast}RoutingGroupGetNew'] = AST_RoutingGroupGetNew_deserialize;
    this.globalElementSerializers['{urn:ast}common'] = AST_common_serialize;
    this.globalElementDeserializers['{urn:ast}common'] = AST_common_deserialize;
    this.globalElementSerializers['{urn:ast}SipKeyArr'] = AST_SipKeyArr_serialize;
    this.globalElementDeserializers['{urn:ast}SipKeyArr'] = AST_SipKeyArr_deserialize;
    this.globalElementSerializers['{urn:ast}SipArr'] = AST_SipArr_serialize;
    this.globalElementDeserializers['{urn:ast}SipArr'] = AST_SipArr_deserialize;
    this.globalElementSerializers['{urn:ast}AutoProvisionSave'] = AST_AutoProvisionSave_serialize;
    this.globalElementDeserializers['{urn:ast}AutoProvisionSave'] = AST_AutoProvisionSave_deserialize;
    this.globalElementSerializers['{urn:ast}SipKey'] = AST_SipKey_serialize;
    this.globalElementDeserializers['{urn:ast}SipKey'] = AST_SipKey_deserialize;
    this.globalElementSerializers['{urn:ast}Relay'] = AST_Relay_serialize;
    this.globalElementDeserializers['{urn:ast}Relay'] = AST_Relay_deserialize;
    this.globalElementSerializers['{urn:ast}AnaContextFxsks'] = AST_AnaContextFxsks_serialize;
    this.globalElementDeserializers['{urn:ast}AnaContextFxsks'] = AST_AnaContextFxsks_deserialize;
    this.globalElementSerializers['{urn:ast}FxsGroupDialGet'] = AST_FxsGroupDialGet_serialize;
    this.globalElementDeserializers['{urn:ast}FxsGroupDialGet'] = AST_FxsGroupDialGet_deserialize;
    this.globalElementSerializers['{urn:ast}SysCompyInfo'] = AST_SysCompyInfo_serialize;
    this.globalElementDeserializers['{urn:ast}SysCompyInfo'] = AST_SysCompyInfo_deserialize;
    this.globalElementSerializers['{urn:ast}SipRtp'] = AST_SipRtp_serialize;
    this.globalElementDeserializers['{urn:ast}SipRtp'] = AST_SipRtp_deserialize;
    this.globalElementSerializers['{urn:ast}ModuleBoardInfoArr'] = AST_ModuleBoardInfoArr_serialize;
    this.globalElementDeserializers['{urn:ast}ModuleBoardInfoArr'] = AST_ModuleBoardInfoArr_deserialize;
    this.globalElementSerializers['{urn:ast}SystemFuncFlag'] = AST_SystemFuncFlag_serialize;
    this.globalElementDeserializers['{urn:ast}SystemFuncFlag'] = AST_SystemFuncFlag_deserialize;
    this.globalElementSerializers['{urn:ast}UcpAlgCalllimitStatus'] = AST_UcpAlgCalllimitStatus_serialize;
    this.globalElementDeserializers['{urn:ast}UcpAlgCalllimitStatus'] = AST_UcpAlgCalllimitStatus_deserialize;
    this.globalElementSerializers['{urn:ast}AutoCallSave'] = AST_AutoCallSave_serialize;
    this.globalElementDeserializers['{urn:ast}AutoCallSave'] = AST_AutoCallSave_deserialize;
    this.globalElementSerializers['{urn:ast}AnainfoArr'] = AST_AnainfoArr_serialize;
    this.globalElementDeserializers['{urn:ast}AnainfoArr'] = AST_AnainfoArr_deserialize;
    this.globalElementSerializers['{urn:ast}SysGeneralSave'] = AST_SysGeneralSave_serialize;
    this.globalElementDeserializers['{urn:ast}SysGeneralSave'] = AST_SysGeneralSave_deserialize;
    this.globalElementSerializers['{urn:ast}SipGetAll'] = AST_SipGetAll_serialize;
    this.globalElementDeserializers['{urn:ast}SipGetAll'] = AST_SipGetAll_deserialize;
    this.globalElementSerializers['{urn:ast}AlgDialtableGet'] = AST_AlgDialtableGet_serialize;
    this.globalElementDeserializers['{urn:ast}AlgDialtableGet'] = AST_AlgDialtableGet_deserialize;
    this.globalElementSerializers['{urn:ast}NetworkLan'] = AST_NetworkLan_serialize;
    this.globalElementDeserializers['{urn:ast}NetworkLan'] = AST_NetworkLan_deserialize;
    this.globalElementSerializers['{urn:ast}AnaSave'] = AST_AnaSave_serialize;
    this.globalElementDeserializers['{urn:ast}AnaSave'] = AST_AnaSave_deserialize;
    this.globalElementSerializers['{urn:ast}SysLoginGet'] = AST_SysLoginGet_serialize;
    this.globalElementDeserializers['{urn:ast}SysLoginGet'] = AST_SysLoginGet_deserialize;
    this.globalElementSerializers['{urn:ast}SysLoginSave'] = AST_SysLoginSave_serialize;
    this.globalElementDeserializers['{urn:ast}SysLoginSave'] = AST_SysLoginSave_deserialize;
    this.globalElementSerializers['{urn:ast}SnmpV1V2C'] = AST_SnmpV1V2C_serialize;
    this.globalElementDeserializers['{urn:ast}SnmpV1V2C'] = AST_SnmpV1V2C_deserialize;
    this.globalElementSerializers['{urn:ast}ProvAnaBindArr'] = AST_ProvAnaBindArr_serialize;
    this.globalElementDeserializers['{urn:ast}ProvAnaBindArr'] = AST_ProvAnaBindArr_deserialize;
    this.globalElementSerializers['{urn:ast}SysTimeGet'] = AST_SysTimeGet_serialize;
    this.globalElementDeserializers['{urn:ast}SysTimeGet'] = AST_SysTimeGet_deserialize;
    this.globalElementSerializers['{urn:ast}RoutingGroupArr'] = AST_RoutingGroupArr_serialize;
    this.globalElementDeserializers['{urn:ast}RoutingGroupArr'] = AST_RoutingGroupArr_deserialize;
    this.globalElementSerializers['{urn:ast}SysGeneralGet'] = AST_SysGeneralGet_serialize;
    this.globalElementDeserializers['{urn:ast}SysGeneralGet'] = AST_SysGeneralGet_deserialize;
}

function urn_ast_AST_wsdl_AGUcpAlgFxsparamSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGUcpAlgFxsparamSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGUcpAlgFxsparamSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgFxsparamSave_onsuccess = urn_ast_AST_wsdl_AGUcpAlgFxsparamSave_op_onsuccess;

function urn_ast_AST_wsdl_AGUcpAlgFxsparamSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgFxsparamSave_onerror = urn_ast_AST_wsdl_AGUcpAlgFxsparamSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGUcpAlgFxsparamSave
// Wrapped operation.
// parameter save
// - Object constructor is AST_UcpAlgFxsparam
//
function urn_ast_AST_wsdl_AGUcpAlgFxsparamSave_op(successCallback, errorCallback, save) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = save;
    xml = this.AGUcpAlgFxsparamSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGUcpAlgFxsparamSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGUcpAlgFxsparamSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgFxsparamSave = urn_ast_AST_wsdl_AGUcpAlgFxsparamSave_op;

function urn_ast_AST_wsdl_AGUcpAlgFxsparamSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGUcpAlgFxsparamSave();
    wrapperObj.setSave(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGUcpAlgFxsparamSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgFxsparamSaveRequest_serializeInput = urn_ast_AST_wsdl_AGUcpAlgFxsparamSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGUcpAlgFxsparamSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGUcpAlgFxsparamSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAlgFunkySave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAlgFunkySaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAlgFunkySaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgFunkySave_onsuccess = urn_ast_AST_wsdl_AGAlgFunkySave_op_onsuccess;

function urn_ast_AST_wsdl_AGAlgFunkySave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgFunkySave_onerror = urn_ast_AST_wsdl_AGAlgFunkySave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAlgFunkySave
// Wrapped operation.
// parameter save
// - Object constructor is AST_AlgFunky
//
function urn_ast_AST_wsdl_AGAlgFunkySave_op(successCallback, errorCallback, save) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = save;
    xml = this.AGAlgFunkySaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAlgFunkySave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAlgFunkySave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgFunkySave = urn_ast_AST_wsdl_AGAlgFunkySave_op;

function urn_ast_AST_wsdl_AGAlgFunkySaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAlgFunkySave();
    wrapperObj.setSave(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAlgFunkySave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgFunkySaveRequest_serializeInput = urn_ast_AST_wsdl_AGAlgFunkySaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGAlgFunkySaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAlgFunkySaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAlgChannelGetOne_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAlgChannelGetOneResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAlgChannelGetOneResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelGetOne_onsuccess = urn_ast_AST_wsdl_AGAlgChannelGetOne_op_onsuccess;

function urn_ast_AST_wsdl_AGAlgChannelGetOne_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelGetOne_onerror = urn_ast_AST_wsdl_AGAlgChannelGetOne_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAlgChannelGetOne
// Wrapped operation.
// parameter channel
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_AGAlgChannelGetOne_op(successCallback, errorCallback, channel) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = channel;
    xml = this.AGAlgChannelGetOneRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAlgChannelGetOne_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAlgChannelGetOne_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelGetOne = urn_ast_AST_wsdl_AGAlgChannelGetOne_op;

function urn_ast_AST_wsdl_AGAlgChannelGetOneRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAlgChannelGetOne();
    wrapperObj.setChannel(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAlgChannelGetOne', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelGetOneRequest_serializeInput = urn_ast_AST_wsdl_AGAlgChannelGetOneRequest_serializeInput;

function urn_ast_AST_wsdl_AGAlgChannelGetOneResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAlgChannelGetOneResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGRoutingRulsSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGRoutingRulsSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGRoutingRulsSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingRulsSave_onsuccess = urn_ast_AST_wsdl_AGRoutingRulsSave_op_onsuccess;

function urn_ast_AST_wsdl_AGRoutingRulsSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingRulsSave_onerror = urn_ast_AST_wsdl_AGRoutingRulsSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGRoutingRulsSave
// Wrapped operation.
// parameter oldroutingname
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter newroutingname
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter save
// - Object constructor is AST_RoutingContex
// parameter cidnumber
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter passwd
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_AGRoutingRulsSave_op(successCallback, errorCallback, oldroutingname, newroutingname, save, cidnumber, passwd) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(5);
    args[0] = oldroutingname;
    args[1] = newroutingname;
    args[2] = save;
    args[3] = cidnumber;
    args[4] = passwd;
    xml = this.AGRoutingRulsSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGRoutingRulsSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGRoutingRulsSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingRulsSave = urn_ast_AST_wsdl_AGRoutingRulsSave_op;

function urn_ast_AST_wsdl_AGRoutingRulsSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGRoutingRulsSave();
    wrapperObj.setOldroutingname(args[0]);
    wrapperObj.setNewroutingname(args[1]);
    wrapperObj.setSave(args[2]);
    wrapperObj.setCidnumber(args[3]);
    wrapperObj.setPasswd(args[4]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGRoutingRulsSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingRulsSaveRequest_serializeInput = urn_ast_AST_wsdl_AGRoutingRulsSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGRoutingRulsSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGRoutingRulsSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_RtpSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_RtpSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_RtpSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.RtpSave_onsuccess = urn_ast_AST_wsdl_RtpSave_op_onsuccess;

function urn_ast_AST_wsdl_RtpSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.RtpSave_onerror = urn_ast_AST_wsdl_RtpSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}RtpSave
// Wrapped operation.
// parameter oldSection
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter newSection
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter datachunk
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_RtpSave_op(successCallback, errorCallback, oldSection, newSection, datachunk) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(3);
    args[0] = oldSection;
    args[1] = newSection;
    args[2] = datachunk;
    xml = this.RtpSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.RtpSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.RtpSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.RtpSave = urn_ast_AST_wsdl_RtpSave_op;

function urn_ast_AST_wsdl_RtpSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_RtpSave();
    wrapperObj.setOldSection(args[0]);
    wrapperObj.setNewSection(args[1]);
    wrapperObj.setDatachunk(args[2]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:RtpSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.RtpSaveRequest_serializeInput = urn_ast_AST_wsdl_RtpSaveRequest_serializeInput;

function urn_ast_AST_wsdl_RtpSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_RtpSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGTagList_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGTagListResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGTagListResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGTagList_onsuccess = urn_ast_AST_wsdl_AGTagList_op_onsuccess;

function urn_ast_AST_wsdl_AGTagList_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGTagList_onerror = urn_ast_AST_wsdl_AGTagList_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGTagList
// Wrapped operation.
// parameter itemstart
// - simple type {http://www.w3.org/2001/XMLSchema}unsignedInt//
function urn_ast_AST_wsdl_AGTagList_op(successCallback, errorCallback, itemstart) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = itemstart;
    xml = this.AGTagListRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGTagList_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGTagList_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGTagList = urn_ast_AST_wsdl_AGTagList_op;

function urn_ast_AST_wsdl_AGTagListRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGTagList();
    wrapperObj.setItemstart(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGTagList', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGTagListRequest_serializeInput = urn_ast_AST_wsdl_AGTagListRequest_serializeInput;

function urn_ast_AST_wsdl_AGTagListResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGTagListResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAdvTr069Save_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAdvTr069SaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAdvTr069SaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvTr069Save_onsuccess = urn_ast_AST_wsdl_AGAdvTr069Save_op_onsuccess;

function urn_ast_AST_wsdl_AGAdvTr069Save_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvTr069Save_onerror = urn_ast_AST_wsdl_AGAdvTr069Save_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAdvTr069Save
// Wrapped operation.
// parameter save
// - Object constructor is AST_AdvTr069Save
//
function urn_ast_AST_wsdl_AGAdvTr069Save_op(successCallback, errorCallback, save) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = save;
    xml = this.AGAdvTr069SaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAdvTr069Save_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAdvTr069Save_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvTr069Save = urn_ast_AST_wsdl_AGAdvTr069Save_op;

function urn_ast_AST_wsdl_AGAdvTr069SaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAdvTr069Save();
    wrapperObj.setSave(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAdvTr069Save', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvTr069SaveRequest_serializeInput = urn_ast_AST_wsdl_AGAdvTr069SaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGAdvTr069SaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAdvTr069SaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAdvAstcliRun_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAdvAstcliRunResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAdvAstcliRunResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstcliRun_onsuccess = urn_ast_AST_wsdl_AGAdvAstcliRun_op_onsuccess;

function urn_ast_AST_wsdl_AGAdvAstcliRun_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstcliRun_onerror = urn_ast_AST_wsdl_AGAdvAstcliRun_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAdvAstcliRun
// Wrapped operation.
// parameter cmd
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_AGAdvAstcliRun_op(successCallback, errorCallback, cmd) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = cmd;
    xml = this.AGAdvAstcliRunRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAdvAstcliRun_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAdvAstcliRun_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstcliRun = urn_ast_AST_wsdl_AGAdvAstcliRun_op;

function urn_ast_AST_wsdl_AGAdvAstcliRunRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAdvAstcliRun();
    wrapperObj.setCmd(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAdvAstcliRun', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstcliRunRequest_serializeInput = urn_ast_AST_wsdl_AGAdvAstcliRunRequest_serializeInput;

function urn_ast_AST_wsdl_AGAdvAstcliRunResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAdvAstcliRunResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSystemToolsUpdateOnline_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSystemToolsUpdateOnlineResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSystemToolsUpdateOnlineResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolsUpdateOnline_onsuccess = urn_ast_AST_wsdl_AGSystemToolsUpdateOnline_op_onsuccess;

function urn_ast_AST_wsdl_AGSystemToolsUpdateOnline_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolsUpdateOnline_onerror = urn_ast_AST_wsdl_AGSystemToolsUpdateOnline_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSystemToolsUpdateOnline
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGSystemToolsUpdateOnline_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGSystemToolsUpdateOnlineRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSystemToolsUpdateOnline_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSystemToolsUpdateOnline_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolsUpdateOnline = urn_ast_AST_wsdl_AGSystemToolsUpdateOnline_op;

function urn_ast_AST_wsdl_AGSystemToolsUpdateOnlineRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSystemToolsUpdateOnline();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSystemToolsUpdateOnline', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolsUpdateOnlineRequest_serializeInput = urn_ast_AST_wsdl_AGSystemToolsUpdateOnlineRequest_serializeInput;

function urn_ast_AST_wsdl_AGSystemToolsUpdateOnlineResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSystemToolsUpdateOnlineResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSysTimeSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSysTimeSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSysTimeSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysTimeSave_onsuccess = urn_ast_AST_wsdl_AGSysTimeSave_op_onsuccess;

function urn_ast_AST_wsdl_AGSysTimeSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysTimeSave_onerror = urn_ast_AST_wsdl_AGSysTimeSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSysTimeSave
// Wrapped operation.
// parameter save
// - Object constructor is AST_SysTimeSave
// parameter cmd1
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter cmd2
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_AGSysTimeSave_op(successCallback, errorCallback, save, cmd1, cmd2) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(3);
    args[0] = save;
    args[1] = cmd1;
    args[2] = cmd2;
    xml = this.AGSysTimeSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSysTimeSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSysTimeSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysTimeSave = urn_ast_AST_wsdl_AGSysTimeSave_op;

function urn_ast_AST_wsdl_AGSysTimeSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSysTimeSave();
    wrapperObj.setSave(args[0]);
    wrapperObj.setCmd1(args[1]);
    wrapperObj.setCmd2(args[2]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSysTimeSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysTimeSaveRequest_serializeInput = urn_ast_AST_wsdl_AGSysTimeSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGSysTimeSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSysTimeSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSystemStatusGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSystemStatusGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSystemStatusGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemStatusGet_onsuccess = urn_ast_AST_wsdl_AGSystemStatusGet_op_onsuccess;

function urn_ast_AST_wsdl_AGSystemStatusGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemStatusGet_onerror = urn_ast_AST_wsdl_AGSystemStatusGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSystemStatusGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGSystemStatusGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGSystemStatusGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSystemStatusGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSystemStatusGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemStatusGet = urn_ast_AST_wsdl_AGSystemStatusGet_op;

function urn_ast_AST_wsdl_AGSystemStatusGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSystemStatusGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSystemStatusGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemStatusGetRequest_serializeInput = urn_ast_AST_wsdl_AGSystemStatusGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGSystemStatusGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSystemStatusGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGUcpAlgFxsparamGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGUcpAlgFxsparamGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGUcpAlgFxsparamGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgFxsparamGet_onsuccess = urn_ast_AST_wsdl_AGUcpAlgFxsparamGet_op_onsuccess;

function urn_ast_AST_wsdl_AGUcpAlgFxsparamGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgFxsparamGet_onerror = urn_ast_AST_wsdl_AGUcpAlgFxsparamGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGUcpAlgFxsparamGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGUcpAlgFxsparamGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGUcpAlgFxsparamGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGUcpAlgFxsparamGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGUcpAlgFxsparamGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgFxsparamGet = urn_ast_AST_wsdl_AGUcpAlgFxsparamGet_op;

function urn_ast_AST_wsdl_AGUcpAlgFxsparamGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGUcpAlgFxsparamGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGUcpAlgFxsparamGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgFxsparamGetRequest_serializeInput = urn_ast_AST_wsdl_AGUcpAlgFxsparamGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGUcpAlgFxsparamGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGUcpAlgFxsparamGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGLogCdrDel_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGLogCdrDelResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGLogCdrDelResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGLogCdrDel_onsuccess = urn_ast_AST_wsdl_AGLogCdrDel_op_onsuccess;

function urn_ast_AST_wsdl_AGLogCdrDel_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGLogCdrDel_onerror = urn_ast_AST_wsdl_AGLogCdrDel_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGLogCdrDel
// Wrapped operation.
// parameter filter
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter table
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_AGLogCdrDel_op(successCallback, errorCallback, filter, table) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(2);
    args[0] = filter;
    args[1] = table;
    xml = this.AGLogCdrDelRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGLogCdrDel_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGLogCdrDel_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGLogCdrDel = urn_ast_AST_wsdl_AGLogCdrDel_op;

function urn_ast_AST_wsdl_AGLogCdrDelRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGLogCdrDel();
    wrapperObj.setFilter(args[0]);
    wrapperObj.setTable(args[1]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGLogCdrDel', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGLogCdrDelRequest_serializeInput = urn_ast_AST_wsdl_AGLogCdrDelRequest_serializeInput;

function urn_ast_AST_wsdl_AGLogCdrDelResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGLogCdrDelResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_GroupGetAll_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_GroupGetAllResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_GroupGetAllResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.GroupGetAll_onsuccess = urn_ast_AST_wsdl_GroupGetAll_op_onsuccess;

function urn_ast_AST_wsdl_GroupGetAll_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.GroupGetAll_onerror = urn_ast_AST_wsdl_GroupGetAll_op_onerror;

//
// Operation {urn:ast/AST.wsdl}GroupGetAll
// Wrapped operation.
//
function urn_ast_AST_wsdl_GroupGetAll_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.GroupGetAllRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.GroupGetAll_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.GroupGetAll_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.GroupGetAll = urn_ast_AST_wsdl_GroupGetAll_op;

function urn_ast_AST_wsdl_GroupGetAllRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_GroupGetAll();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:GroupGetAll', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.GroupGetAllRequest_serializeInput = urn_ast_AST_wsdl_GroupGetAllRequest_serializeInput;

function urn_ast_AST_wsdl_GroupGetAllResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_GroupGetAllResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGGetFXSPortsStatus_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGGetFXSPortsStatusResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGGetFXSPortsStatusResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGGetFXSPortsStatus_onsuccess = urn_ast_AST_wsdl_AGGetFXSPortsStatus_op_onsuccess;

function urn_ast_AST_wsdl_AGGetFXSPortsStatus_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGGetFXSPortsStatus_onerror = urn_ast_AST_wsdl_AGGetFXSPortsStatus_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGGetFXSPortsStatus
// Wrapped operation.
// parameter fxsport
// - simple type {http://www.w3.org/2001/XMLSchema}unsignedInt//
function urn_ast_AST_wsdl_AGGetFXSPortsStatus_op(successCallback, errorCallback, fxsport) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = fxsport;
    xml = this.AGGetFXSPortsStatusRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGGetFXSPortsStatus_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGGetFXSPortsStatus_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGGetFXSPortsStatus = urn_ast_AST_wsdl_AGGetFXSPortsStatus_op;

function urn_ast_AST_wsdl_AGGetFXSPortsStatusRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGGetFXSPortsStatus();
    wrapperObj.setFxsport(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGGetFXSPortsStatus', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGGetFXSPortsStatusRequest_serializeInput = urn_ast_AST_wsdl_AGGetFXSPortsStatusRequest_serializeInput;

function urn_ast_AST_wsdl_AGGetFXSPortsStatusResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGGetFXSPortsStatusResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAlgPickupSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAlgPickupSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAlgPickupSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgPickupSave_onsuccess = urn_ast_AST_wsdl_AGAlgPickupSave_op_onsuccess;

function urn_ast_AST_wsdl_AGAlgPickupSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgPickupSave_onerror = urn_ast_AST_wsdl_AGAlgPickupSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAlgPickupSave
// Wrapped operation.
// parameter pickup
// - Object constructor is AST_AlgPickup
// parameter arr
// - Object constructor is AST_AlgPickupChnArr
//
function urn_ast_AST_wsdl_AGAlgPickupSave_op(successCallback, errorCallback, pickup, arr) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(2);
    args[0] = pickup;
    args[1] = arr;
    xml = this.AGAlgPickupSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAlgPickupSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAlgPickupSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgPickupSave = urn_ast_AST_wsdl_AGAlgPickupSave_op;

function urn_ast_AST_wsdl_AGAlgPickupSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAlgPickupSave();
    wrapperObj.setPickup(args[0]);
    wrapperObj.setArr(args[1]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAlgPickupSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgPickupSaveRequest_serializeInput = urn_ast_AST_wsdl_AGAlgPickupSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGAlgPickupSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAlgPickupSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSipBatchEndpointsGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSipBatchEndpointsGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSipBatchEndpointsGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipBatchEndpointsGet_onsuccess = urn_ast_AST_wsdl_AGSipBatchEndpointsGet_op_onsuccess;

function urn_ast_AST_wsdl_AGSipBatchEndpointsGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipBatchEndpointsGet_onerror = urn_ast_AST_wsdl_AGSipBatchEndpointsGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSipBatchEndpointsGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGSipBatchEndpointsGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGSipBatchEndpointsGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSipBatchEndpointsGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSipBatchEndpointsGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipBatchEndpointsGet = urn_ast_AST_wsdl_AGSipBatchEndpointsGet_op;

function urn_ast_AST_wsdl_AGSipBatchEndpointsGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSipBatchEndpointsGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSipBatchEndpointsGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipBatchEndpointsGetRequest_serializeInput = urn_ast_AST_wsdl_AGSipBatchEndpointsGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGSipBatchEndpointsGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSipBatchEndpointsGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGNetworkOpenvpnGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGNetworkOpenvpnGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGNetworkOpenvpnGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkOpenvpnGet_onsuccess = urn_ast_AST_wsdl_AGNetworkOpenvpnGet_op_onsuccess;

function urn_ast_AST_wsdl_AGNetworkOpenvpnGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkOpenvpnGet_onerror = urn_ast_AST_wsdl_AGNetworkOpenvpnGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGNetworkOpenvpnGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGNetworkOpenvpnGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGNetworkOpenvpnGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGNetworkOpenvpnGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGNetworkOpenvpnGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkOpenvpnGet = urn_ast_AST_wsdl_AGNetworkOpenvpnGet_op;

function urn_ast_AST_wsdl_AGNetworkOpenvpnGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGNetworkOpenvpnGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGNetworkOpenvpnGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkOpenvpnGetRequest_serializeInput = urn_ast_AST_wsdl_AGNetworkOpenvpnGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGNetworkOpenvpnGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGNetworkOpenvpnGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSipBendpointGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSipBendpointGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSipBendpointGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipBendpointGet_onsuccess = urn_ast_AST_wsdl_AGSipBendpointGet_op_onsuccess;

function urn_ast_AST_wsdl_AGSipBendpointGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipBendpointGet_onerror = urn_ast_AST_wsdl_AGSipBendpointGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSipBendpointGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGSipBendpointGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGSipBendpointGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSipBendpointGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSipBendpointGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipBendpointGet = urn_ast_AST_wsdl_AGSipBendpointGet_op;

function urn_ast_AST_wsdl_AGSipBendpointGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSipBendpointGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSipBendpointGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipBendpointGetRequest_serializeInput = urn_ast_AST_wsdl_AGSipBendpointGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGSipBendpointGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSipBendpointGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSystemLanguageSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSystemLanguageSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSystemLanguageSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemLanguageSave_onsuccess = urn_ast_AST_wsdl_AGSystemLanguageSave_op_onsuccess;

function urn_ast_AST_wsdl_AGSystemLanguageSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemLanguageSave_onerror = urn_ast_AST_wsdl_AGSystemLanguageSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSystemLanguageSave
// Wrapped operation.
// parameter language
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_AGSystemLanguageSave_op(successCallback, errorCallback, language) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = language;
    xml = this.AGSystemLanguageSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSystemLanguageSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSystemLanguageSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemLanguageSave = urn_ast_AST_wsdl_AGSystemLanguageSave_op;

function urn_ast_AST_wsdl_AGSystemLanguageSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSystemLanguageSave();
    wrapperObj.setLanguage(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSystemLanguageSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemLanguageSaveRequest_serializeInput = urn_ast_AST_wsdl_AGSystemLanguageSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGSystemLanguageSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSystemLanguageSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGOEMSettingInfoSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGOEMSettingInfoSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGOEMSettingInfoSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGOEMSettingInfoSave_onsuccess = urn_ast_AST_wsdl_AGOEMSettingInfoSave_op_onsuccess;

function urn_ast_AST_wsdl_AGOEMSettingInfoSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGOEMSettingInfoSave_onerror = urn_ast_AST_wsdl_AGOEMSettingInfoSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGOEMSettingInfoSave
// Wrapped operation.
// parameter save
// - Object constructor is AST_OEMSettingInfoSave
//
function urn_ast_AST_wsdl_AGOEMSettingInfoSave_op(successCallback, errorCallback, save) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = save;
    xml = this.AGOEMSettingInfoSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGOEMSettingInfoSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGOEMSettingInfoSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGOEMSettingInfoSave = urn_ast_AST_wsdl_AGOEMSettingInfoSave_op;

function urn_ast_AST_wsdl_AGOEMSettingInfoSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGOEMSettingInfoSave();
    wrapperObj.setSave(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGOEMSettingInfoSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGOEMSettingInfoSaveRequest_serializeInput = urn_ast_AST_wsdl_AGOEMSettingInfoSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGOEMSettingInfoSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGOEMSettingInfoSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGRoutingGroupSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGRoutingGroupSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGRoutingGroupSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupSave_onsuccess = urn_ast_AST_wsdl_AGRoutingGroupSave_op_onsuccess;

function urn_ast_AST_wsdl_AGRoutingGroupSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupSave_onerror = urn_ast_AST_wsdl_AGRoutingGroupSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGRoutingGroupSave
// Wrapped operation.
// parameter oldname
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter newname
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter save
// - Object constructor is AST_RoutingGroup
//
function urn_ast_AST_wsdl_AGRoutingGroupSave_op(successCallback, errorCallback, oldname, newname, save) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(3);
    args[0] = oldname;
    args[1] = newname;
    args[2] = save;
    xml = this.AGRoutingGroupSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGRoutingGroupSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGRoutingGroupSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupSave = urn_ast_AST_wsdl_AGRoutingGroupSave_op;

function urn_ast_AST_wsdl_AGRoutingGroupSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGRoutingGroupSave();
    wrapperObj.setOldname(args[0]);
    wrapperObj.setNewname(args[1]);
    wrapperObj.setSave(args[2]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGRoutingGroupSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupSaveRequest_serializeInput = urn_ast_AST_wsdl_AGRoutingGroupSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGRoutingGroupSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGRoutingGroupSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAlgChannelRemoveOne_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAlgChannelRemoveOneResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAlgChannelRemoveOneResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelRemoveOne_onsuccess = urn_ast_AST_wsdl_AGAlgChannelRemoveOne_op_onsuccess;

function urn_ast_AST_wsdl_AGAlgChannelRemoveOne_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelRemoveOne_onerror = urn_ast_AST_wsdl_AGAlgChannelRemoveOne_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAlgChannelRemoveOne
// Wrapped operation.
// parameter channel
// - simple type {http://www.w3.org/2001/XMLSchema}unsignedShort//
function urn_ast_AST_wsdl_AGAlgChannelRemoveOne_op(successCallback, errorCallback, channel) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = channel;
    xml = this.AGAlgChannelRemoveOneRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAlgChannelRemoveOne_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAlgChannelRemoveOne_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelRemoveOne = urn_ast_AST_wsdl_AGAlgChannelRemoveOne_op;

function urn_ast_AST_wsdl_AGAlgChannelRemoveOneRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAlgChannelRemoveOne();
    wrapperObj.setChannel(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAlgChannelRemoveOne', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelRemoveOneRequest_serializeInput = urn_ast_AST_wsdl_AGAlgChannelRemoveOneRequest_serializeInput;

function urn_ast_AST_wsdl_AGAlgChannelRemoveOneResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAlgChannelRemoveOneResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGRoutingGroupsDialGetOne_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGRoutingGroupsDialGetOneResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGRoutingGroupsDialGetOneResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupsDialGetOne_onsuccess = urn_ast_AST_wsdl_AGRoutingGroupsDialGetOne_op_onsuccess;

function urn_ast_AST_wsdl_AGRoutingGroupsDialGetOne_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupsDialGetOne_onerror = urn_ast_AST_wsdl_AGRoutingGroupsDialGetOne_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGRoutingGroupsDialGetOne
// Wrapped operation.
// parameter section
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_AGRoutingGroupsDialGetOne_op(successCallback, errorCallback, section) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = section;
    xml = this.AGRoutingGroupsDialGetOneRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGRoutingGroupsDialGetOne_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGRoutingGroupsDialGetOne_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupsDialGetOne = urn_ast_AST_wsdl_AGRoutingGroupsDialGetOne_op;

function urn_ast_AST_wsdl_AGRoutingGroupsDialGetOneRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGRoutingGroupsDialGetOne();
    wrapperObj.setSection(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGRoutingGroupsDialGetOne', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupsDialGetOneRequest_serializeInput = urn_ast_AST_wsdl_AGRoutingGroupsDialGetOneRequest_serializeInput;

function urn_ast_AST_wsdl_AGRoutingGroupsDialGetOneResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGRoutingGroupsDialGetOneResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGRoutingRulesDel_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGRoutingRulesDelResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGRoutingRulesDelResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingRulesDel_onsuccess = urn_ast_AST_wsdl_AGRoutingRulesDel_op_onsuccess;

function urn_ast_AST_wsdl_AGRoutingRulesDel_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingRulesDel_onerror = urn_ast_AST_wsdl_AGRoutingRulesDel_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGRoutingRulesDel
// Wrapped operation.
// parameter sections
// - Object constructor is AST_SectionArr
//
function urn_ast_AST_wsdl_AGRoutingRulesDel_op(successCallback, errorCallback, sections) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = sections;
    xml = this.AGRoutingRulesDelRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGRoutingRulesDel_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGRoutingRulesDel_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingRulesDel = urn_ast_AST_wsdl_AGRoutingRulesDel_op;

function urn_ast_AST_wsdl_AGRoutingRulesDelRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGRoutingRulesDel();
    wrapperObj.setSections(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGRoutingRulesDel', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingRulesDelRequest_serializeInput = urn_ast_AST_wsdl_AGRoutingRulesDelRequest_serializeInput;

function urn_ast_AST_wsdl_AGRoutingRulesDelResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGRoutingRulesDelResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_RtpGetAll_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_RtpGetAllResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_RtpGetAllResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.RtpGetAll_onsuccess = urn_ast_AST_wsdl_RtpGetAll_op_onsuccess;

function urn_ast_AST_wsdl_RtpGetAll_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.RtpGetAll_onerror = urn_ast_AST_wsdl_RtpGetAll_op_onerror;

//
// Operation {urn:ast/AST.wsdl}RtpGetAll
// Wrapped operation.
//
function urn_ast_AST_wsdl_RtpGetAll_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.RtpGetAllRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.RtpGetAll_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.RtpGetAll_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.RtpGetAll = urn_ast_AST_wsdl_RtpGetAll_op;

function urn_ast_AST_wsdl_RtpGetAllRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_RtpGetAll();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:RtpGetAll', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.RtpGetAllRequest_serializeInput = urn_ast_AST_wsdl_RtpGetAllRequest_serializeInput;

function urn_ast_AST_wsdl_RtpGetAllResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_RtpGetAllResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSetRemoteProvisionAddress_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSetRemoteProvisionAddressResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSetRemoteProvisionAddressResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSetRemoteProvisionAddress_onsuccess = urn_ast_AST_wsdl_AGSetRemoteProvisionAddress_op_onsuccess;

function urn_ast_AST_wsdl_AGSetRemoteProvisionAddress_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSetRemoteProvisionAddress_onerror = urn_ast_AST_wsdl_AGSetRemoteProvisionAddress_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSetRemoteProvisionAddress
// Wrapped operation.
// parameter RemoteProvisionAddress
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter UpgradeSwitch
// - simple type {http://www.w3.org/2001/XMLSchema}unsignedByte//
function urn_ast_AST_wsdl_AGSetRemoteProvisionAddress_op(successCallback, errorCallback, RemoteProvisionAddress, UpgradeSwitch) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(2);
    args[0] = RemoteProvisionAddress;
    args[1] = UpgradeSwitch;
    xml = this.AGSetRemoteProvisionAddressRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSetRemoteProvisionAddress_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSetRemoteProvisionAddress_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSetRemoteProvisionAddress = urn_ast_AST_wsdl_AGSetRemoteProvisionAddress_op;

function urn_ast_AST_wsdl_AGSetRemoteProvisionAddressRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSetRemoteProvisionAddress();
    wrapperObj.setRemoteProvisionAddress(args[0]);
    wrapperObj.setUpgradeSwitch(args[1]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSetRemoteProvisionAddress', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSetRemoteProvisionAddressRequest_serializeInput = urn_ast_AST_wsdl_AGSetRemoteProvisionAddressRequest_serializeInput;

function urn_ast_AST_wsdl_AGSetRemoteProvisionAddressResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSetRemoteProvisionAddressResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGNetworkDdnsGetSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGNetworkDdnsGetSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGNetworkDdnsGetSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkDdnsGetSave_onsuccess = urn_ast_AST_wsdl_AGNetworkDdnsGetSave_op_onsuccess;

function urn_ast_AST_wsdl_AGNetworkDdnsGetSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkDdnsGetSave_onerror = urn_ast_AST_wsdl_AGNetworkDdnsGetSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGNetworkDdnsGetSave
// Wrapped operation.
// parameter save
// - Object constructor is AST_NetworkDdnsSave
//
function urn_ast_AST_wsdl_AGNetworkDdnsGetSave_op(successCallback, errorCallback, save) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = save;
    xml = this.AGNetworkDdnsGetSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGNetworkDdnsGetSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGNetworkDdnsGetSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkDdnsGetSave = urn_ast_AST_wsdl_AGNetworkDdnsGetSave_op;

function urn_ast_AST_wsdl_AGNetworkDdnsGetSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGNetworkDdnsGetSave();
    wrapperObj.setSave(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGNetworkDdnsGetSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkDdnsGetSaveRequest_serializeInput = urn_ast_AST_wsdl_AGNetworkDdnsGetSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGNetworkDdnsGetSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGNetworkDdnsGetSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSetFXSPortsGain_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSetFXSPortsGainResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSetFXSPortsGainResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSetFXSPortsGain_onsuccess = urn_ast_AST_wsdl_AGSetFXSPortsGain_op_onsuccess;

function urn_ast_AST_wsdl_AGSetFXSPortsGain_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSetFXSPortsGain_onerror = urn_ast_AST_wsdl_AGSetFXSPortsGain_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSetFXSPortsGain
// Wrapped operation.
// parameter fxsport
// - simple type {http://www.w3.org/2001/XMLSchema}unsignedInt// parameter rxgain
// - simple type {http://www.w3.org/2001/XMLSchema}float// parameter txgain
// - simple type {http://www.w3.org/2001/XMLSchema}float//
function urn_ast_AST_wsdl_AGSetFXSPortsGain_op(successCallback, errorCallback, fxsport, rxgain, txgain) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(3);
    args[0] = fxsport;
    args[1] = rxgain;
    args[2] = txgain;
    xml = this.AGSetFXSPortsGainRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSetFXSPortsGain_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSetFXSPortsGain_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSetFXSPortsGain = urn_ast_AST_wsdl_AGSetFXSPortsGain_op;

function urn_ast_AST_wsdl_AGSetFXSPortsGainRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSetFXSPortsGain();
    wrapperObj.setFxsport(args[0]);
    wrapperObj.setRxgain(args[1]);
    wrapperObj.setTxgain(args[2]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSetFXSPortsGain', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSetFXSPortsGainRequest_serializeInput = urn_ast_AST_wsdl_AGSetFXSPortsGainRequest_serializeInput;

function urn_ast_AST_wsdl_AGSetFXSPortsGainResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSetFXSPortsGainResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAlgDialtableSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAlgDialtableSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAlgDialtableSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgDialtableSave_onsuccess = urn_ast_AST_wsdl_AGAlgDialtableSave_op_onsuccess;

function urn_ast_AST_wsdl_AGAlgDialtableSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgDialtableSave_onerror = urn_ast_AST_wsdl_AGAlgDialtableSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAlgDialtableSave
// Wrapped operation.
// parameter save
// - Object constructor is AST_AlgDialtableSave
//
function urn_ast_AST_wsdl_AGAlgDialtableSave_op(successCallback, errorCallback, save) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = save;
    xml = this.AGAlgDialtableSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAlgDialtableSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAlgDialtableSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgDialtableSave = urn_ast_AST_wsdl_AGAlgDialtableSave_op;

function urn_ast_AST_wsdl_AGAlgDialtableSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAlgDialtableSave();
    wrapperObj.setSave(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAlgDialtableSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgDialtableSaveRequest_serializeInput = urn_ast_AST_wsdl_AGAlgDialtableSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGAlgDialtableSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAlgDialtableSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGFxsGroupDialProvisonSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGFxsGroupDialProvisonSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGFxsGroupDialProvisonSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGFxsGroupDialProvisonSave_onsuccess = urn_ast_AST_wsdl_AGFxsGroupDialProvisonSave_op_onsuccess;

function urn_ast_AST_wsdl_AGFxsGroupDialProvisonSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGFxsGroupDialProvisonSave_onerror = urn_ast_AST_wsdl_AGFxsGroupDialProvisonSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGFxsGroupDialProvisonSave
// Wrapped operation.
// parameter grouparr
// - Object constructor is AST_FxsGroupDialArr
//
function urn_ast_AST_wsdl_AGFxsGroupDialProvisonSave_op(successCallback, errorCallback, grouparr) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = grouparr;
    xml = this.AGFxsGroupDialProvisonSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGFxsGroupDialProvisonSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGFxsGroupDialProvisonSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGFxsGroupDialProvisonSave = urn_ast_AST_wsdl_AGFxsGroupDialProvisonSave_op;

function urn_ast_AST_wsdl_AGFxsGroupDialProvisonSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGFxsGroupDialProvisonSave();
    wrapperObj.setGrouparr(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGFxsGroupDialProvisonSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGFxsGroupDialProvisonSaveRequest_serializeInput = urn_ast_AST_wsdl_AGFxsGroupDialProvisonSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGFxsGroupDialProvisonSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGFxsGroupDialProvisonSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGjConConfigKeyboardMap_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGjConConfigKeyboardMapResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGjConConfigKeyboardMapResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConConfigKeyboardMap_onsuccess = urn_ast_AST_wsdl_AGjConConfigKeyboardMap_op_onsuccess;

function urn_ast_AST_wsdl_AGjConConfigKeyboardMap_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConConfigKeyboardMap_onerror = urn_ast_AST_wsdl_AGjConConfigKeyboardMap_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGjConConfigKeyboardMap
// Wrapped operation.
// parameter keyboard
// - simple type {http://www.w3.org/2001/XMLSchema}int// parameter old
// - simple type {http://www.w3.org/2001/XMLSchema}byte// parameter val
// - simple type {http://www.w3.org/2001/XMLSchema}byte//
function urn_ast_AST_wsdl_AGjConConfigKeyboardMap_op(successCallback, errorCallback, keyboard, old, val) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(3);
    args[0] = keyboard;
    args[1] = old;
    args[2] = val;
    xml = this.AGjConConfigKeyboardMapRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGjConConfigKeyboardMap_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGjConConfigKeyboardMap_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConConfigKeyboardMap = urn_ast_AST_wsdl_AGjConConfigKeyboardMap_op;

function urn_ast_AST_wsdl_AGjConConfigKeyboardMapRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGjConConfigKeyboardMap();
    wrapperObj.setKeyboard(args[0]);
    wrapperObj.setOld(args[1]);
    wrapperObj.setVal(args[2]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGjConConfigKeyboardMap', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConConfigKeyboardMapRequest_serializeInput = urn_ast_AST_wsdl_AGjConConfigKeyboardMapRequest_serializeInput;

function urn_ast_AST_wsdl_AGjConConfigKeyboardMapResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGjConConfigKeyboardMapResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAlgChannelUnlimited_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAlgChannelUnlimitedResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAlgChannelUnlimitedResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelUnlimited_onsuccess = urn_ast_AST_wsdl_AGAlgChannelUnlimited_op_onsuccess;

function urn_ast_AST_wsdl_AGAlgChannelUnlimited_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelUnlimited_onerror = urn_ast_AST_wsdl_AGAlgChannelUnlimited_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAlgChannelUnlimited
// Wrapped operation.
// parameter channel
// - simple type {http://www.w3.org/2001/XMLSchema}int//
function urn_ast_AST_wsdl_AGAlgChannelUnlimited_op(successCallback, errorCallback, channel) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = channel;
    xml = this.AGAlgChannelUnlimitedRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAlgChannelUnlimited_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAlgChannelUnlimited_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelUnlimited = urn_ast_AST_wsdl_AGAlgChannelUnlimited_op;

function urn_ast_AST_wsdl_AGAlgChannelUnlimitedRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAlgChannelUnlimited();
    wrapperObj.setChannel(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAlgChannelUnlimited', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelUnlimitedRequest_serializeInput = urn_ast_AST_wsdl_AGAlgChannelUnlimitedRequest_serializeInput;

function urn_ast_AST_wsdl_AGAlgChannelUnlimitedResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAlgChannelUnlimitedResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGRoutingRulsGetOne_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGRoutingRulsGetOneResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGRoutingRulsGetOneResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingRulsGetOne_onsuccess = urn_ast_AST_wsdl_AGRoutingRulsGetOne_op_onsuccess;

function urn_ast_AST_wsdl_AGRoutingRulsGetOne_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingRulsGetOne_onerror = urn_ast_AST_wsdl_AGRoutingRulsGetOne_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGRoutingRulsGetOne
// Wrapped operation.
// parameter rule
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_AGRoutingRulsGetOne_op(successCallback, errorCallback, rule) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = rule;
    xml = this.AGRoutingRulsGetOneRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGRoutingRulsGetOne_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGRoutingRulsGetOne_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingRulsGetOne = urn_ast_AST_wsdl_AGRoutingRulsGetOne_op;

function urn_ast_AST_wsdl_AGRoutingRulsGetOneRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGRoutingRulsGetOne();
    wrapperObj.setRule(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGRoutingRulsGetOne', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingRulsGetOneRequest_serializeInput = urn_ast_AST_wsdl_AGRoutingRulsGetOneRequest_serializeInput;

function urn_ast_AST_wsdl_AGRoutingRulsGetOneResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGRoutingRulsGetOneResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGNetworkTookitTcpdump_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGNetworkTookitTcpdumpResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGNetworkTookitTcpdumpResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkTookitTcpdump_onsuccess = urn_ast_AST_wsdl_AGNetworkTookitTcpdump_op_onsuccess;

function urn_ast_AST_wsdl_AGNetworkTookitTcpdump_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkTookitTcpdump_onerror = urn_ast_AST_wsdl_AGNetworkTookitTcpdump_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGNetworkTookitTcpdump
// Wrapped operation.
// parameter flag
// - simple type {http://www.w3.org/2001/XMLSchema}int// parameter tcpdump
// - Object constructor is AST_NetworkTookitTcpdump
//
function urn_ast_AST_wsdl_AGNetworkTookitTcpdump_op(successCallback, errorCallback, flag, tcpdump) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(2);
    args[0] = flag;
    args[1] = tcpdump;
    xml = this.AGNetworkTookitTcpdumpRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGNetworkTookitTcpdump_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGNetworkTookitTcpdump_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkTookitTcpdump = urn_ast_AST_wsdl_AGNetworkTookitTcpdump_op;

function urn_ast_AST_wsdl_AGNetworkTookitTcpdumpRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGNetworkTookitTcpdump();
    wrapperObj.setFlag(args[0]);
    wrapperObj.setTcpdump(args[1]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGNetworkTookitTcpdump', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkTookitTcpdumpRequest_serializeInput = urn_ast_AST_wsdl_AGNetworkTookitTcpdumpRequest_serializeInput;

function urn_ast_AST_wsdl_AGNetworkTookitTcpdumpResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGNetworkTookitTcpdumpResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAdvCloudSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAdvCloudSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAdvCloudSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvCloudSave_onsuccess = urn_ast_AST_wsdl_AGAdvCloudSave_op_onsuccess;

function urn_ast_AST_wsdl_AGAdvCloudSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvCloudSave_onerror = urn_ast_AST_wsdl_AGAdvCloudSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAdvCloudSave
// Wrapped operation.
// parameter save
// - Object constructor is AST_AdvCloudSave
//
function urn_ast_AST_wsdl_AGAdvCloudSave_op(successCallback, errorCallback, save) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = save;
    xml = this.AGAdvCloudSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAdvCloudSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAdvCloudSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvCloudSave = urn_ast_AST_wsdl_AGAdvCloudSave_op;

function urn_ast_AST_wsdl_AGAdvCloudSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAdvCloudSave();
    wrapperObj.setSave(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAdvCloudSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvCloudSaveRequest_serializeInput = urn_ast_AST_wsdl_AGAdvCloudSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGAdvCloudSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAdvCloudSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGNetworkGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGNetworkGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGNetworkGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkGet_onsuccess = urn_ast_AST_wsdl_AGNetworkGet_op_onsuccess;

function urn_ast_AST_wsdl_AGNetworkGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkGet_onerror = urn_ast_AST_wsdl_AGNetworkGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGNetworkGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGNetworkGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGNetworkGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGNetworkGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGNetworkGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkGet = urn_ast_AST_wsdl_AGNetworkGet_op;

function urn_ast_AST_wsdl_AGNetworkGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGNetworkGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGNetworkGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkGetRequest_serializeInput = urn_ast_AST_wsdl_AGNetworkGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGNetworkGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGNetworkGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGNetworkFirewallsave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGNetworkFirewallsaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGNetworkFirewallsaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkFirewallsave_onsuccess = urn_ast_AST_wsdl_AGNetworkFirewallsave_op_onsuccess;

function urn_ast_AST_wsdl_AGNetworkFirewallsave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkFirewallsave_onerror = urn_ast_AST_wsdl_AGNetworkFirewallsave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGNetworkFirewallsave
// Wrapped operation.
// parameter save
// - Object constructor is AST_UcpNetworkSwitch
//
function urn_ast_AST_wsdl_AGNetworkFirewallsave_op(successCallback, errorCallback, save) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = save;
    xml = this.AGNetworkFirewallsaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGNetworkFirewallsave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGNetworkFirewallsave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkFirewallsave = urn_ast_AST_wsdl_AGNetworkFirewallsave_op;

function urn_ast_AST_wsdl_AGNetworkFirewallsaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGNetworkFirewallsave();
    wrapperObj.setSave(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGNetworkFirewallsave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkFirewallsaveRequest_serializeInput = urn_ast_AST_wsdl_AGNetworkFirewallsaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGNetworkFirewallsaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGNetworkFirewallsaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAlgAutoCallGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAlgAutoCallGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAlgAutoCallGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgAutoCallGet_onsuccess = urn_ast_AST_wsdl_AGAlgAutoCallGet_op_onsuccess;

function urn_ast_AST_wsdl_AGAlgAutoCallGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgAutoCallGet_onerror = urn_ast_AST_wsdl_AGAlgAutoCallGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAlgAutoCallGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGAlgAutoCallGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGAlgAutoCallGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAlgAutoCallGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAlgAutoCallGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgAutoCallGet = urn_ast_AST_wsdl_AGAlgAutoCallGet_op;

function urn_ast_AST_wsdl_AGAlgAutoCallGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAlgAutoCallGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAlgAutoCallGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgAutoCallGetRequest_serializeInput = urn_ast_AST_wsdl_AGAlgAutoCallGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGAlgAutoCallGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAlgAutoCallGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGjConIoSettingsGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGjConIoSettingsGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGjConIoSettingsGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConIoSettingsGet_onsuccess = urn_ast_AST_wsdl_AGjConIoSettingsGet_op_onsuccess;

function urn_ast_AST_wsdl_AGjConIoSettingsGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConIoSettingsGet_onerror = urn_ast_AST_wsdl_AGjConIoSettingsGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGjConIoSettingsGet
// Wrapped operation.
// parameter board
// - simple type {http://www.w3.org/2001/XMLSchema}int//
function urn_ast_AST_wsdl_AGjConIoSettingsGet_op(successCallback, errorCallback, board) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = board;
    xml = this.AGjConIoSettingsGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGjConIoSettingsGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGjConIoSettingsGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConIoSettingsGet = urn_ast_AST_wsdl_AGjConIoSettingsGet_op;

function urn_ast_AST_wsdl_AGjConIoSettingsGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGjConIoSettingsGet();
    wrapperObj.setBoard(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGjConIoSettingsGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConIoSettingsGetRequest_serializeInput = urn_ast_AST_wsdl_AGjConIoSettingsGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGjConIoSettingsGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGjConIoSettingsGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAlgGlbSettingGetAll_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAlgGlbSettingGetAllResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAlgGlbSettingGetAllResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgGlbSettingGetAll_onsuccess = urn_ast_AST_wsdl_AGAlgGlbSettingGetAll_op_onsuccess;

function urn_ast_AST_wsdl_AGAlgGlbSettingGetAll_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgGlbSettingGetAll_onerror = urn_ast_AST_wsdl_AGAlgGlbSettingGetAll_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAlgGlbSettingGetAll
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGAlgGlbSettingGetAll_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGAlgGlbSettingGetAllRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAlgGlbSettingGetAll_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAlgGlbSettingGetAll_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgGlbSettingGetAll = urn_ast_AST_wsdl_AGAlgGlbSettingGetAll_op;

function urn_ast_AST_wsdl_AGAlgGlbSettingGetAllRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAlgGlbSettingGetAll();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAlgGlbSettingGetAll', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgGlbSettingGetAllRequest_serializeInput = urn_ast_AST_wsdl_AGAlgGlbSettingGetAllRequest_serializeInput;

function urn_ast_AST_wsdl_AGAlgGlbSettingGetAllResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAlgGlbSettingGetAllResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSystemToolsGetFirmwareInfo_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSystemToolsGetFirmwareInfoResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSystemToolsGetFirmwareInfoResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolsGetFirmwareInfo_onsuccess = urn_ast_AST_wsdl_AGSystemToolsGetFirmwareInfo_op_onsuccess;

function urn_ast_AST_wsdl_AGSystemToolsGetFirmwareInfo_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolsGetFirmwareInfo_onerror = urn_ast_AST_wsdl_AGSystemToolsGetFirmwareInfo_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSystemToolsGetFirmwareInfo
// Wrapped operation.
// parameter filename
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_AGSystemToolsGetFirmwareInfo_op(successCallback, errorCallback, filename) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = filename;
    xml = this.AGSystemToolsGetFirmwareInfoRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSystemToolsGetFirmwareInfo_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSystemToolsGetFirmwareInfo_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolsGetFirmwareInfo = urn_ast_AST_wsdl_AGSystemToolsGetFirmwareInfo_op;

function urn_ast_AST_wsdl_AGSystemToolsGetFirmwareInfoRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSystemToolsGetFirmwareInfo();
    wrapperObj.setFilename(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSystemToolsGetFirmwareInfo', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolsGetFirmwareInfoRequest_serializeInput = urn_ast_AST_wsdl_AGSystemToolsGetFirmwareInfoRequest_serializeInput;

function urn_ast_AST_wsdl_AGSystemToolsGetFirmwareInfoResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSystemToolsGetFirmwareInfoResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_IaxGeneralSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_IaxGeneralSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_IaxGeneralSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.IaxGeneralSave_onsuccess = urn_ast_AST_wsdl_IaxGeneralSave_op_onsuccess;

function urn_ast_AST_wsdl_IaxGeneralSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.IaxGeneralSave_onerror = urn_ast_AST_wsdl_IaxGeneralSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}IaxGeneralSave
// Wrapped operation.
// parameter oldSection
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter newSection
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter datachunk
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_IaxGeneralSave_op(successCallback, errorCallback, oldSection, newSection, datachunk) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(3);
    args[0] = oldSection;
    args[1] = newSection;
    args[2] = datachunk;
    xml = this.IaxGeneralSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.IaxGeneralSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.IaxGeneralSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.IaxGeneralSave = urn_ast_AST_wsdl_IaxGeneralSave_op;

function urn_ast_AST_wsdl_IaxGeneralSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_IaxGeneralSave();
    wrapperObj.setOldSection(args[0]);
    wrapperObj.setNewSection(args[1]);
    wrapperObj.setDatachunk(args[2]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:IaxGeneralSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.IaxGeneralSaveRequest_serializeInput = urn_ast_AST_wsdl_IaxGeneralSaveRequest_serializeInput;

function urn_ast_AST_wsdl_IaxGeneralSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_IaxGeneralSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAlgChannelGetAll_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAlgChannelGetAllResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAlgChannelGetAllResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelGetAll_onsuccess = urn_ast_AST_wsdl_AGAlgChannelGetAll_op_onsuccess;

function urn_ast_AST_wsdl_AGAlgChannelGetAll_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelGetAll_onerror = urn_ast_AST_wsdl_AGAlgChannelGetAll_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAlgChannelGetAll
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGAlgChannelGetAll_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGAlgChannelGetAllRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAlgChannelGetAll_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAlgChannelGetAll_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelGetAll = urn_ast_AST_wsdl_AGAlgChannelGetAll_op;

function urn_ast_AST_wsdl_AGAlgChannelGetAllRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAlgChannelGetAll();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAlgChannelGetAll', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelGetAllRequest_serializeInput = urn_ast_AST_wsdl_AGAlgChannelGetAllRequest_serializeInput;

function urn_ast_AST_wsdl_AGAlgChannelGetAllResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAlgChannelGetAllResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSystemWsapiReload_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSystemWsapiReloadResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSystemWsapiReloadResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemWsapiReload_onsuccess = urn_ast_AST_wsdl_AGSystemWsapiReload_op_onsuccess;

function urn_ast_AST_wsdl_AGSystemWsapiReload_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemWsapiReload_onerror = urn_ast_AST_wsdl_AGSystemWsapiReload_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSystemWsapiReload
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGSystemWsapiReload_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGSystemWsapiReloadRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSystemWsapiReload_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSystemWsapiReload_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemWsapiReload = urn_ast_AST_wsdl_AGSystemWsapiReload_op;

function urn_ast_AST_wsdl_AGSystemWsapiReloadRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSystemWsapiReload();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSystemWsapiReload', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemWsapiReloadRequest_serializeInput = urn_ast_AST_wsdl_AGSystemWsapiReloadRequest_serializeInput;

function urn_ast_AST_wsdl_AGSystemWsapiReloadResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSystemWsapiReloadResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGNetworkToolkitGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGNetworkToolkitGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGNetworkToolkitGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkToolkitGet_onsuccess = urn_ast_AST_wsdl_AGNetworkToolkitGet_op_onsuccess;

function urn_ast_AST_wsdl_AGNetworkToolkitGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkToolkitGet_onerror = urn_ast_AST_wsdl_AGNetworkToolkitGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGNetworkToolkitGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGNetworkToolkitGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGNetworkToolkitGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGNetworkToolkitGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGNetworkToolkitGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkToolkitGet = urn_ast_AST_wsdl_AGNetworkToolkitGet_op;

function urn_ast_AST_wsdl_AGNetworkToolkitGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGNetworkToolkitGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGNetworkToolkitGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkToolkitGetRequest_serializeInput = urn_ast_AST_wsdl_AGNetworkToolkitGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGNetworkToolkitGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGNetworkToolkitGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGUcpAlgDriverSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGUcpAlgDriverSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGUcpAlgDriverSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgDriverSave_onsuccess = urn_ast_AST_wsdl_AGUcpAlgDriverSave_op_onsuccess;

function urn_ast_AST_wsdl_AGUcpAlgDriverSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgDriverSave_onerror = urn_ast_AST_wsdl_AGUcpAlgDriverSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGUcpAlgDriverSave
// Wrapped operation.
// parameter driver
// - Object constructor is AST_UcpAlgDriverParam
//
function urn_ast_AST_wsdl_AGUcpAlgDriverSave_op(successCallback, errorCallback, driver) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = driver;
    xml = this.AGUcpAlgDriverSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGUcpAlgDriverSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGUcpAlgDriverSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgDriverSave = urn_ast_AST_wsdl_AGUcpAlgDriverSave_op;

function urn_ast_AST_wsdl_AGUcpAlgDriverSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGUcpAlgDriverSave();
    wrapperObj.setDriver(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGUcpAlgDriverSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgDriverSaveRequest_serializeInput = urn_ast_AST_wsdl_AGUcpAlgDriverSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGUcpAlgDriverSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGUcpAlgDriverSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSystemInfoGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSystemInfoGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSystemInfoGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemInfoGet_onsuccess = urn_ast_AST_wsdl_AGSystemInfoGet_op_onsuccess;

function urn_ast_AST_wsdl_AGSystemInfoGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemInfoGet_onerror = urn_ast_AST_wsdl_AGSystemInfoGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSystemInfoGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGSystemInfoGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGSystemInfoGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSystemInfoGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSystemInfoGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemInfoGet = urn_ast_AST_wsdl_AGSystemInfoGet_op;

function urn_ast_AST_wsdl_AGSystemInfoGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSystemInfoGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSystemInfoGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemInfoGetRequest_serializeInput = urn_ast_AST_wsdl_AGSystemInfoGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGSystemInfoGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSystemInfoGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGjConRelayGetOne_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGjConRelayGetOneResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGjConRelayGetOneResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConRelayGetOne_onsuccess = urn_ast_AST_wsdl_AGjConRelayGetOne_op_onsuccess;

function urn_ast_AST_wsdl_AGjConRelayGetOne_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConRelayGetOne_onerror = urn_ast_AST_wsdl_AGjConRelayGetOne_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGjConRelayGetOne
// Wrapped operation.
// parameter board
// - simple type {http://www.w3.org/2001/XMLSchema}int//
function urn_ast_AST_wsdl_AGjConRelayGetOne_op(successCallback, errorCallback, board) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = board;
    xml = this.AGjConRelayGetOneRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGjConRelayGetOne_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGjConRelayGetOne_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConRelayGetOne = urn_ast_AST_wsdl_AGjConRelayGetOne_op;

function urn_ast_AST_wsdl_AGjConRelayGetOneRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGjConRelayGetOne();
    wrapperObj.setBoard(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGjConRelayGetOne', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConRelayGetOneRequest_serializeInput = urn_ast_AST_wsdl_AGjConRelayGetOneRequest_serializeInput;

function urn_ast_AST_wsdl_AGjConRelayGetOneResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGjConRelayGetOneResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSystemAutoUpdateSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSystemAutoUpdateSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSystemAutoUpdateSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemAutoUpdateSave_onsuccess = urn_ast_AST_wsdl_AGSystemAutoUpdateSave_op_onsuccess;

function urn_ast_AST_wsdl_AGSystemAutoUpdateSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemAutoUpdateSave_onerror = urn_ast_AST_wsdl_AGSystemAutoUpdateSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSystemAutoUpdateSave
// Wrapped operation.
// parameter save
// - Object constructor is AST_AutoProvisionSave
//
function urn_ast_AST_wsdl_AGSystemAutoUpdateSave_op(successCallback, errorCallback, save) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = save;
    xml = this.AGSystemAutoUpdateSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSystemAutoUpdateSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSystemAutoUpdateSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemAutoUpdateSave = urn_ast_AST_wsdl_AGSystemAutoUpdateSave_op;

function urn_ast_AST_wsdl_AGSystemAutoUpdateSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSystemAutoUpdateSave();
    wrapperObj.setSave(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSystemAutoUpdateSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemAutoUpdateSaveRequest_serializeInput = urn_ast_AST_wsdl_AGSystemAutoUpdateSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGSystemAutoUpdateSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSystemAutoUpdateSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAdvAstfileeditorEditDel_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAdvAstfileeditorEditDelResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAdvAstfileeditorEditDelResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstfileeditorEditDel_onsuccess = urn_ast_AST_wsdl_AGAdvAstfileeditorEditDel_op_onsuccess;

function urn_ast_AST_wsdl_AGAdvAstfileeditorEditDel_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstfileeditorEditDel_onerror = urn_ast_AST_wsdl_AGAdvAstfileeditorEditDel_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAdvAstfileeditorEditDel
// Wrapped operation.
// parameter fname
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_AGAdvAstfileeditorEditDel_op(successCallback, errorCallback, fname) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = fname;
    xml = this.AGAdvAstfileeditorEditDelRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAdvAstfileeditorEditDel_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAdvAstfileeditorEditDel_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstfileeditorEditDel = urn_ast_AST_wsdl_AGAdvAstfileeditorEditDel_op;

function urn_ast_AST_wsdl_AGAdvAstfileeditorEditDelRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAdvAstfileeditorEditDel();
    wrapperObj.setFname(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAdvAstfileeditorEditDel', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstfileeditorEditDelRequest_serializeInput = urn_ast_AST_wsdl_AGAdvAstfileeditorEditDelRequest_serializeInput;

function urn_ast_AST_wsdl_AGAdvAstfileeditorEditDelResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAdvAstfileeditorEditDelResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSipAdvSettingGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSipAdvSettingGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSipAdvSettingGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipAdvSettingGet_onsuccess = urn_ast_AST_wsdl_AGSipAdvSettingGet_op_onsuccess;

function urn_ast_AST_wsdl_AGSipAdvSettingGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipAdvSettingGet_onerror = urn_ast_AST_wsdl_AGSipAdvSettingGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSipAdvSettingGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGSipAdvSettingGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGSipAdvSettingGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSipAdvSettingGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSipAdvSettingGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipAdvSettingGet = urn_ast_AST_wsdl_AGSipAdvSettingGet_op;

function urn_ast_AST_wsdl_AGSipAdvSettingGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSipAdvSettingGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSipAdvSettingGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipAdvSettingGetRequest_serializeInput = urn_ast_AST_wsdl_AGSipAdvSettingGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGSipAdvSettingGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSipAdvSettingGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGUcpAlgFxoparamGetAll_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGUcpAlgFxoparamGetAllResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGUcpAlgFxoparamGetAllResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgFxoparamGetAll_onsuccess = urn_ast_AST_wsdl_AGUcpAlgFxoparamGetAll_op_onsuccess;

function urn_ast_AST_wsdl_AGUcpAlgFxoparamGetAll_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgFxoparamGetAll_onerror = urn_ast_AST_wsdl_AGUcpAlgFxoparamGetAll_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGUcpAlgFxoparamGetAll
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGUcpAlgFxoparamGetAll_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGUcpAlgFxoparamGetAllRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGUcpAlgFxoparamGetAll_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGUcpAlgFxoparamGetAll_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgFxoparamGetAll = urn_ast_AST_wsdl_AGUcpAlgFxoparamGetAll_op;

function urn_ast_AST_wsdl_AGUcpAlgFxoparamGetAllRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGUcpAlgFxoparamGetAll();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGUcpAlgFxoparamGetAll', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgFxoparamGetAllRequest_serializeInput = urn_ast_AST_wsdl_AGUcpAlgFxoparamGetAllRequest_serializeInput;

function urn_ast_AST_wsdl_AGUcpAlgFxoparamGetAllResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGUcpAlgFxoparamGetAllResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSystemModuleBoardInfoGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSystemModuleBoardInfoGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSystemModuleBoardInfoGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemModuleBoardInfoGet_onsuccess = urn_ast_AST_wsdl_AGSystemModuleBoardInfoGet_op_onsuccess;

function urn_ast_AST_wsdl_AGSystemModuleBoardInfoGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemModuleBoardInfoGet_onerror = urn_ast_AST_wsdl_AGSystemModuleBoardInfoGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSystemModuleBoardInfoGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGSystemModuleBoardInfoGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGSystemModuleBoardInfoGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSystemModuleBoardInfoGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSystemModuleBoardInfoGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemModuleBoardInfoGet = urn_ast_AST_wsdl_AGSystemModuleBoardInfoGet_op;

function urn_ast_AST_wsdl_AGSystemModuleBoardInfoGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSystemModuleBoardInfoGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSystemModuleBoardInfoGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemModuleBoardInfoGetRequest_serializeInput = urn_ast_AST_wsdl_AGSystemModuleBoardInfoGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGSystemModuleBoardInfoGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSystemModuleBoardInfoGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGUcpSystemToolsSndRecordStop_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGUcpSystemToolsSndRecordStopResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGUcpSystemToolsSndRecordStopResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpSystemToolsSndRecordStop_onsuccess = urn_ast_AST_wsdl_AGUcpSystemToolsSndRecordStop_op_onsuccess;

function urn_ast_AST_wsdl_AGUcpSystemToolsSndRecordStop_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpSystemToolsSndRecordStop_onerror = urn_ast_AST_wsdl_AGUcpSystemToolsSndRecordStop_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGUcpSystemToolsSndRecordStop
// Wrapped operation.
// parameter channel
// - simple type {http://www.w3.org/2001/XMLSchema}int//
function urn_ast_AST_wsdl_AGUcpSystemToolsSndRecordStop_op(successCallback, errorCallback, channel) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = channel;
    xml = this.AGUcpSystemToolsSndRecordStopRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGUcpSystemToolsSndRecordStop_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGUcpSystemToolsSndRecordStop_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpSystemToolsSndRecordStop = urn_ast_AST_wsdl_AGUcpSystemToolsSndRecordStop_op;

function urn_ast_AST_wsdl_AGUcpSystemToolsSndRecordStopRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGUcpSystemToolsSndRecordStop();
    wrapperObj.setChannel(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGUcpSystemToolsSndRecordStop', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpSystemToolsSndRecordStopRequest_serializeInput = urn_ast_AST_wsdl_AGUcpSystemToolsSndRecordStopRequest_serializeInput;

function urn_ast_AST_wsdl_AGUcpSystemToolsSndRecordStopResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGUcpSystemToolsSndRecordStopResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGLogSettingsSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGLogSettingsSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGLogSettingsSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGLogSettingsSave_onsuccess = urn_ast_AST_wsdl_AGLogSettingsSave_op_onsuccess;

function urn_ast_AST_wsdl_AGLogSettingsSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGLogSettingsSave_onerror = urn_ast_AST_wsdl_AGLogSettingsSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGLogSettingsSave
// Wrapped operation.
// parameter save
// - Object constructor is AST_LogSettingSave
//
function urn_ast_AST_wsdl_AGLogSettingsSave_op(successCallback, errorCallback, save) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = save;
    xml = this.AGLogSettingsSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGLogSettingsSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGLogSettingsSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGLogSettingsSave = urn_ast_AST_wsdl_AGLogSettingsSave_op;

function urn_ast_AST_wsdl_AGLogSettingsSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGLogSettingsSave();
    wrapperObj.setSave(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGLogSettingsSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGLogSettingsSaveRequest_serializeInput = urn_ast_AST_wsdl_AGLogSettingsSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGLogSettingsSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGLogSettingsSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGUcpAlgGlbSettingSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGUcpAlgGlbSettingSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGUcpAlgGlbSettingSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgGlbSettingSave_onsuccess = urn_ast_AST_wsdl_AGUcpAlgGlbSettingSave_op_onsuccess;

function urn_ast_AST_wsdl_AGUcpAlgGlbSettingSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgGlbSettingSave_onerror = urn_ast_AST_wsdl_AGUcpAlgGlbSettingSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGUcpAlgGlbSettingSave
// Wrapped operation.
// parameter save
// - Object constructor is AST_UcpAlgGlbSave
// parameter flag
// - simple type {http://www.w3.org/2001/XMLSchema}int//
function urn_ast_AST_wsdl_AGUcpAlgGlbSettingSave_op(successCallback, errorCallback, save, flag) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(2);
    args[0] = save;
    args[1] = flag;
    xml = this.AGUcpAlgGlbSettingSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGUcpAlgGlbSettingSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGUcpAlgGlbSettingSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgGlbSettingSave = urn_ast_AST_wsdl_AGUcpAlgGlbSettingSave_op;

function urn_ast_AST_wsdl_AGUcpAlgGlbSettingSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGUcpAlgGlbSettingSave();
    wrapperObj.setSave(args[0]);
    wrapperObj.setFlag(args[1]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGUcpAlgGlbSettingSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgGlbSettingSaveRequest_serializeInput = urn_ast_AST_wsdl_AGUcpAlgGlbSettingSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGUcpAlgGlbSettingSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGUcpAlgGlbSettingSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGjConGetAll_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGjConGetAllResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGjConGetAllResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConGetAll_onsuccess = urn_ast_AST_wsdl_AGjConGetAll_op_onsuccess;

function urn_ast_AST_wsdl_AGjConGetAll_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConGetAll_onerror = urn_ast_AST_wsdl_AGjConGetAll_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGjConGetAll
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGjConGetAll_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGjConGetAllRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGjConGetAll_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGjConGetAll_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConGetAll = urn_ast_AST_wsdl_AGjConGetAll_op;

function urn_ast_AST_wsdl_AGjConGetAllRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGjConGetAll();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGjConGetAll', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConGetAllRequest_serializeInput = urn_ast_AST_wsdl_AGjConGetAllRequest_serializeInput;

function urn_ast_AST_wsdl_AGjConGetAllResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGjConGetAllResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGNetworkVPNGetConnectStatus_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGNetworkVPNGetConnectStatusResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGNetworkVPNGetConnectStatusResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkVPNGetConnectStatus_onsuccess = urn_ast_AST_wsdl_AGNetworkVPNGetConnectStatus_op_onsuccess;

function urn_ast_AST_wsdl_AGNetworkVPNGetConnectStatus_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkVPNGetConnectStatus_onerror = urn_ast_AST_wsdl_AGNetworkVPNGetConnectStatus_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGNetworkVPNGetConnectStatus
// Wrapped operation.
// parameter vpntype
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_AGNetworkVPNGetConnectStatus_op(successCallback, errorCallback, vpntype) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = vpntype;
    xml = this.AGNetworkVPNGetConnectStatusRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGNetworkVPNGetConnectStatus_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGNetworkVPNGetConnectStatus_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkVPNGetConnectStatus = urn_ast_AST_wsdl_AGNetworkVPNGetConnectStatus_op;

function urn_ast_AST_wsdl_AGNetworkVPNGetConnectStatusRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGNetworkVPNGetConnectStatus();
    wrapperObj.setVpntype(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGNetworkVPNGetConnectStatus', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkVPNGetConnectStatusRequest_serializeInput = urn_ast_AST_wsdl_AGNetworkVPNGetConnectStatusRequest_serializeInput;

function urn_ast_AST_wsdl_AGNetworkVPNGetConnectStatusResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGNetworkVPNGetConnectStatusResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGNetworkSnmpSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGNetworkSnmpSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGNetworkSnmpSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkSnmpSave_onsuccess = urn_ast_AST_wsdl_AGNetworkSnmpSave_op_onsuccess;

function urn_ast_AST_wsdl_AGNetworkSnmpSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkSnmpSave_onerror = urn_ast_AST_wsdl_AGNetworkSnmpSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGNetworkSnmpSave
// Wrapped operation.
// parameter save
// - Object constructor is AST_SnmpSave
//
function urn_ast_AST_wsdl_AGNetworkSnmpSave_op(successCallback, errorCallback, save) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = save;
    xml = this.AGNetworkSnmpSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGNetworkSnmpSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGNetworkSnmpSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkSnmpSave = urn_ast_AST_wsdl_AGNetworkSnmpSave_op;

function urn_ast_AST_wsdl_AGNetworkSnmpSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGNetworkSnmpSave();
    wrapperObj.setSave(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGNetworkSnmpSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkSnmpSaveRequest_serializeInput = urn_ast_AST_wsdl_AGNetworkSnmpSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGNetworkSnmpSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGNetworkSnmpSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSipEndpointSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSipEndpointSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSipEndpointSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipEndpointSave_onsuccess = urn_ast_AST_wsdl_AGSipEndpointSave_op_onsuccess;

function urn_ast_AST_wsdl_AGSipEndpointSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipEndpointSave_onerror = urn_ast_AST_wsdl_AGSipEndpointSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSipEndpointSave
// Wrapped operation.
// parameter oldname
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter newname
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter context
// - Object constructor is AST_SipContext
// parameter lines
// - Object constructor is AST_LineArr
// parameter sections
// - Object constructor is AST_SectionArr
//
function urn_ast_AST_wsdl_AGSipEndpointSave_op(successCallback, errorCallback, oldname, newname, context, lines, sections) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(5);
    args[0] = oldname;
    args[1] = newname;
    args[2] = context;
    args[3] = lines;
    args[4] = sections;
    xml = this.AGSipEndpointSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSipEndpointSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSipEndpointSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipEndpointSave = urn_ast_AST_wsdl_AGSipEndpointSave_op;

function urn_ast_AST_wsdl_AGSipEndpointSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSipEndpointSave();
    wrapperObj.setOldname(args[0]);
    wrapperObj.setNewname(args[1]);
    wrapperObj.setContext(args[2]);
    wrapperObj.setLines(args[3]);
    wrapperObj.setSections(args[4]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSipEndpointSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipEndpointSaveRequest_serializeInput = urn_ast_AST_wsdl_AGSipEndpointSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGSipEndpointSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSipEndpointSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGNetworkFirewallGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGNetworkFirewallGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGNetworkFirewallGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkFirewallGet_onsuccess = urn_ast_AST_wsdl_AGNetworkFirewallGet_op_onsuccess;

function urn_ast_AST_wsdl_AGNetworkFirewallGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkFirewallGet_onerror = urn_ast_AST_wsdl_AGNetworkFirewallGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGNetworkFirewallGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGNetworkFirewallGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGNetworkFirewallGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGNetworkFirewallGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGNetworkFirewallGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkFirewallGet = urn_ast_AST_wsdl_AGNetworkFirewallGet_op;

function urn_ast_AST_wsdl_AGNetworkFirewallGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGNetworkFirewallGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGNetworkFirewallGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkFirewallGetRequest_serializeInput = urn_ast_AST_wsdl_AGNetworkFirewallGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGNetworkFirewallGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGNetworkFirewallGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGLogGetAll_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGLogGetAllResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGLogGetAllResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGLogGetAll_onsuccess = urn_ast_AST_wsdl_AGLogGetAll_op_onsuccess;

function urn_ast_AST_wsdl_AGLogGetAll_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGLogGetAll_onerror = urn_ast_AST_wsdl_AGLogGetAll_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGLogGetAll
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGLogGetAll_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGLogGetAllRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGLogGetAll_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGLogGetAll_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGLogGetAll = urn_ast_AST_wsdl_AGLogGetAll_op;

function urn_ast_AST_wsdl_AGLogGetAllRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGLogGetAll();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGLogGetAll', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGLogGetAllRequest_serializeInput = urn_ast_AST_wsdl_AGLogGetAllRequest_serializeInput;

function urn_ast_AST_wsdl_AGLogGetAllResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGLogGetAllResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGLogDelAll_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGLogDelAllResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGLogDelAllResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGLogDelAll_onsuccess = urn_ast_AST_wsdl_AGLogDelAll_op_onsuccess;

function urn_ast_AST_wsdl_AGLogDelAll_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGLogDelAll_onerror = urn_ast_AST_wsdl_AGLogDelAll_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGLogDelAll
// Wrapped operation.
// parameter name
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_AGLogDelAll_op(successCallback, errorCallback, name) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = name;
    xml = this.AGLogDelAllRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGLogDelAll_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGLogDelAll_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGLogDelAll = urn_ast_AST_wsdl_AGLogDelAll_op;

function urn_ast_AST_wsdl_AGLogDelAllRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGLogDelAll();
    wrapperObj.setName(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGLogDelAll', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGLogDelAllRequest_serializeInput = urn_ast_AST_wsdl_AGLogDelAllRequest_serializeInput;

function urn_ast_AST_wsdl_AGLogDelAllResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGLogDelAllResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGNetworkTookitPing_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGNetworkTookitPingResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGNetworkTookitPingResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkTookitPing_onsuccess = urn_ast_AST_wsdl_AGNetworkTookitPing_op_onsuccess;

function urn_ast_AST_wsdl_AGNetworkTookitPing_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkTookitPing_onerror = urn_ast_AST_wsdl_AGNetworkTookitPing_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGNetworkTookitPing
// Wrapped operation.
// parameter cmd
// - simple type {http://www.w3.org/2001/XMLSchema}int// parameter flag
// - simple type {http://www.w3.org/2001/XMLSchema}int// parameter src
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_AGNetworkTookitPing_op(successCallback, errorCallback, cmd, flag, src) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(3);
    args[0] = cmd;
    args[1] = flag;
    args[2] = src;
    xml = this.AGNetworkTookitPingRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGNetworkTookitPing_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGNetworkTookitPing_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkTookitPing = urn_ast_AST_wsdl_AGNetworkTookitPing_op;

function urn_ast_AST_wsdl_AGNetworkTookitPingRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGNetworkTookitPing();
    wrapperObj.setCmd(args[0]);
    wrapperObj.setFlag(args[1]);
    wrapperObj.setSrc(args[2]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGNetworkTookitPing', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkTookitPingRequest_serializeInput = urn_ast_AST_wsdl_AGNetworkTookitPingRequest_serializeInput;

function urn_ast_AST_wsdl_AGNetworkTookitPingResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGNetworkTookitPingResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGFxsSipBindProvisonSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGFxsSipBindProvisonSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGFxsSipBindProvisonSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGFxsSipBindProvisonSave_onsuccess = urn_ast_AST_wsdl_AGFxsSipBindProvisonSave_op_onsuccess;

function urn_ast_AST_wsdl_AGFxsSipBindProvisonSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGFxsSipBindProvisonSave_onerror = urn_ast_AST_wsdl_AGFxsSipBindProvisonSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGFxsSipBindProvisonSave
// Wrapped operation.
// parameter bindarr
// - Object constructor is AST_ProvAnaBindArr
//
function urn_ast_AST_wsdl_AGFxsSipBindProvisonSave_op(successCallback, errorCallback, bindarr) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = bindarr;
    xml = this.AGFxsSipBindProvisonSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGFxsSipBindProvisonSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGFxsSipBindProvisonSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGFxsSipBindProvisonSave = urn_ast_AST_wsdl_AGFxsSipBindProvisonSave_op;

function urn_ast_AST_wsdl_AGFxsSipBindProvisonSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGFxsSipBindProvisonSave();
    wrapperObj.setBindarr(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGFxsSipBindProvisonSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGFxsSipBindProvisonSaveRequest_serializeInput = urn_ast_AST_wsdl_AGFxsSipBindProvisonSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGFxsSipBindProvisonSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGFxsSipBindProvisonSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGUcpAlgFxoparamSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGUcpAlgFxoparamSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGUcpAlgFxoparamSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgFxoparamSave_onsuccess = urn_ast_AST_wsdl_AGUcpAlgFxoparamSave_op_onsuccess;

function urn_ast_AST_wsdl_AGUcpAlgFxoparamSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgFxoparamSave_onerror = urn_ast_AST_wsdl_AGUcpAlgFxoparamSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGUcpAlgFxoparamSave
// Wrapped operation.
// parameter save
// - Object constructor is AST_UcpAlgFxoparam
//
function urn_ast_AST_wsdl_AGUcpAlgFxoparamSave_op(successCallback, errorCallback, save) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = save;
    xml = this.AGUcpAlgFxoparamSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGUcpAlgFxoparamSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGUcpAlgFxoparamSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgFxoparamSave = urn_ast_AST_wsdl_AGUcpAlgFxoparamSave_op;

function urn_ast_AST_wsdl_AGUcpAlgFxoparamSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGUcpAlgFxoparamSave();
    wrapperObj.setSave(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGUcpAlgFxoparamSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgFxoparamSaveRequest_serializeInput = urn_ast_AST_wsdl_AGUcpAlgFxoparamSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGUcpAlgFxoparamSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGUcpAlgFxoparamSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGCommitLookup_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGCommitLookupResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGCommitLookupResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGCommitLookup_onsuccess = urn_ast_AST_wsdl_AGCommitLookup_op_onsuccess;

function urn_ast_AST_wsdl_AGCommitLookup_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGCommitLookup_onerror = urn_ast_AST_wsdl_AGCommitLookup_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGCommitLookup
// Wrapped operation.
// parameter itemstart
// - simple type {http://www.w3.org/2001/XMLSchema}unsignedInt//
function urn_ast_AST_wsdl_AGCommitLookup_op(successCallback, errorCallback, itemstart) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = itemstart;
    xml = this.AGCommitLookupRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGCommitLookup_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGCommitLookup_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGCommitLookup = urn_ast_AST_wsdl_AGCommitLookup_op;

function urn_ast_AST_wsdl_AGCommitLookupRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGCommitLookup();
    wrapperObj.setItemstart(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGCommitLookup', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGCommitLookupRequest_serializeInput = urn_ast_AST_wsdl_AGCommitLookupRequest_serializeInput;

function urn_ast_AST_wsdl_AGCommitLookupResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGCommitLookupResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAlgSecSettingCreateKey_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAlgSecSettingCreateKeyResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAlgSecSettingCreateKeyResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgSecSettingCreateKey_onsuccess = urn_ast_AST_wsdl_AGAlgSecSettingCreateKey_op_onsuccess;

function urn_ast_AST_wsdl_AGAlgSecSettingCreateKey_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgSecSettingCreateKey_onerror = urn_ast_AST_wsdl_AGAlgSecSettingCreateKey_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAlgSecSettingCreateKey
// Wrapped operation.
// parameter key
// - Object constructor is AST_SipKey
//
function urn_ast_AST_wsdl_AGAlgSecSettingCreateKey_op(successCallback, errorCallback, key) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = key;
    xml = this.AGAlgSecSettingCreateKeyRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAlgSecSettingCreateKey_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAlgSecSettingCreateKey_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgSecSettingCreateKey = urn_ast_AST_wsdl_AGAlgSecSettingCreateKey_op;

function urn_ast_AST_wsdl_AGAlgSecSettingCreateKeyRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAlgSecSettingCreateKey();
    wrapperObj.setKey(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAlgSecSettingCreateKey', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgSecSettingCreateKeyRequest_serializeInput = urn_ast_AST_wsdl_AGAlgSecSettingCreateKeyRequest_serializeInput;

function urn_ast_AST_wsdl_AGAlgSecSettingCreateKeyResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAlgSecSettingCreateKeyResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAlgSecSettingDeleteKey_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAlgSecSettingDeleteKeyResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAlgSecSettingDeleteKeyResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgSecSettingDeleteKey_onsuccess = urn_ast_AST_wsdl_AGAlgSecSettingDeleteKey_op_onsuccess;

function urn_ast_AST_wsdl_AGAlgSecSettingDeleteKey_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgSecSettingDeleteKey_onerror = urn_ast_AST_wsdl_AGAlgSecSettingDeleteKey_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAlgSecSettingDeleteKey
// Wrapped operation.
// parameter section
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_AGAlgSecSettingDeleteKey_op(successCallback, errorCallback, section) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = section;
    xml = this.AGAlgSecSettingDeleteKeyRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAlgSecSettingDeleteKey_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAlgSecSettingDeleteKey_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgSecSettingDeleteKey = urn_ast_AST_wsdl_AGAlgSecSettingDeleteKey_op;

function urn_ast_AST_wsdl_AGAlgSecSettingDeleteKeyRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAlgSecSettingDeleteKey();
    wrapperObj.setSection(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAlgSecSettingDeleteKey', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgSecSettingDeleteKeyRequest_serializeInput = urn_ast_AST_wsdl_AGAlgSecSettingDeleteKeyRequest_serializeInput;

function urn_ast_AST_wsdl_AGAlgSecSettingDeleteKeyResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAlgSecSettingDeleteKeyResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSystemInfoMemoryClean_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSystemInfoMemoryCleanResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSystemInfoMemoryCleanResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemInfoMemoryClean_onsuccess = urn_ast_AST_wsdl_AGSystemInfoMemoryClean_op_onsuccess;

function urn_ast_AST_wsdl_AGSystemInfoMemoryClean_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemInfoMemoryClean_onerror = urn_ast_AST_wsdl_AGSystemInfoMemoryClean_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSystemInfoMemoryClean
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGSystemInfoMemoryClean_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGSystemInfoMemoryCleanRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSystemInfoMemoryClean_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSystemInfoMemoryClean_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemInfoMemoryClean = urn_ast_AST_wsdl_AGSystemInfoMemoryClean_op;

function urn_ast_AST_wsdl_AGSystemInfoMemoryCleanRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSystemInfoMemoryClean();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSystemInfoMemoryClean', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemInfoMemoryCleanRequest_serializeInput = urn_ast_AST_wsdl_AGSystemInfoMemoryCleanRequest_serializeInput;

function urn_ast_AST_wsdl_AGSystemInfoMemoryCleanResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSystemInfoMemoryCleanResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSystemToolsFactoryReset_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSystemToolsFactoryResetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSystemToolsFactoryResetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolsFactoryReset_onsuccess = urn_ast_AST_wsdl_AGSystemToolsFactoryReset_op_onsuccess;

function urn_ast_AST_wsdl_AGSystemToolsFactoryReset_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolsFactoryReset_onerror = urn_ast_AST_wsdl_AGSystemToolsFactoryReset_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSystemToolsFactoryReset
// Wrapped operation.
// parameter rmcdr
// - simple type {http://www.w3.org/2001/XMLSchema}int// parameter rmsyslog
// - simple type {http://www.w3.org/2001/XMLSchema}int//
function urn_ast_AST_wsdl_AGSystemToolsFactoryReset_op(successCallback, errorCallback, rmcdr, rmsyslog) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(2);
    args[0] = rmcdr;
    args[1] = rmsyslog;
    xml = this.AGSystemToolsFactoryResetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSystemToolsFactoryReset_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSystemToolsFactoryReset_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolsFactoryReset = urn_ast_AST_wsdl_AGSystemToolsFactoryReset_op;

function urn_ast_AST_wsdl_AGSystemToolsFactoryResetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSystemToolsFactoryReset();
    wrapperObj.setRmcdr(args[0]);
    wrapperObj.setRmsyslog(args[1]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSystemToolsFactoryReset', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolsFactoryResetRequest_serializeInput = urn_ast_AST_wsdl_AGSystemToolsFactoryResetRequest_serializeInput;

function urn_ast_AST_wsdl_AGSystemToolsFactoryResetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSystemToolsFactoryResetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAlgPickupGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAlgPickupGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAlgPickupGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgPickupGet_onsuccess = urn_ast_AST_wsdl_AGAlgPickupGet_op_onsuccess;

function urn_ast_AST_wsdl_AGAlgPickupGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgPickupGet_onerror = urn_ast_AST_wsdl_AGAlgPickupGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAlgPickupGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGAlgPickupGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGAlgPickupGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAlgPickupGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAlgPickupGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgPickupGet = urn_ast_AST_wsdl_AGAlgPickupGet_op;

function urn_ast_AST_wsdl_AGAlgPickupGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAlgPickupGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAlgPickupGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgPickupGetRequest_serializeInput = urn_ast_AST_wsdl_AGAlgPickupGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGAlgPickupGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAlgPickupGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSipEndpointsDel_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSipEndpointsDelResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSipEndpointsDelResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipEndpointsDel_onsuccess = urn_ast_AST_wsdl_AGSipEndpointsDel_op_onsuccess;

function urn_ast_AST_wsdl_AGSipEndpointsDel_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipEndpointsDel_onerror = urn_ast_AST_wsdl_AGSipEndpointsDel_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSipEndpointsDel
// Wrapped operation.
// parameter sip
// - Object constructor is AST_SectionArr
//
function urn_ast_AST_wsdl_AGSipEndpointsDel_op(successCallback, errorCallback, sip) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = sip;
    xml = this.AGSipEndpointsDelRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSipEndpointsDel_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSipEndpointsDel_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipEndpointsDel = urn_ast_AST_wsdl_AGSipEndpointsDel_op;

function urn_ast_AST_wsdl_AGSipEndpointsDelRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSipEndpointsDel();
    wrapperObj.setSip(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSipEndpointsDel', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipEndpointsDelRequest_serializeInput = urn_ast_AST_wsdl_AGSipEndpointsDelRequest_serializeInput;

function urn_ast_AST_wsdl_AGSipEndpointsDelResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSipEndpointsDelResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGTagAdd_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGTagAddResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGTagAddResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGTagAdd_onsuccess = urn_ast_AST_wsdl_AGTagAdd_op_onsuccess;

function urn_ast_AST_wsdl_AGTagAdd_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGTagAdd_onerror = urn_ast_AST_wsdl_AGTagAdd_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGTagAdd
// Wrapped operation.
// parameter message
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_AGTagAdd_op(successCallback, errorCallback, message) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = message;
    xml = this.AGTagAddRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGTagAdd_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGTagAdd_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGTagAdd = urn_ast_AST_wsdl_AGTagAdd_op;

function urn_ast_AST_wsdl_AGTagAddRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGTagAdd();
    wrapperObj.setMessage(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGTagAdd', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGTagAddRequest_serializeInput = urn_ast_AST_wsdl_AGTagAddRequest_serializeInput;

function urn_ast_AST_wsdl_AGTagAddResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGTagAddResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGNetworkSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGNetworkSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGNetworkSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkSave_onsuccess = urn_ast_AST_wsdl_AGNetworkSave_op_onsuccess;

function urn_ast_AST_wsdl_AGNetworkSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkSave_onerror = urn_ast_AST_wsdl_AGNetworkSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGNetworkSave
// Wrapped operation.
// parameter save
// - Object constructor is AST_NetworkSave
//
function urn_ast_AST_wsdl_AGNetworkSave_op(successCallback, errorCallback, save) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = save;
    xml = this.AGNetworkSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGNetworkSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGNetworkSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkSave = urn_ast_AST_wsdl_AGNetworkSave_op;

function urn_ast_AST_wsdl_AGNetworkSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGNetworkSave();
    wrapperObj.setSave(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGNetworkSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkSaveRequest_serializeInput = urn_ast_AST_wsdl_AGNetworkSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGNetworkSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGNetworkSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSysGeneralDebug_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSysGeneralDebugResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSysGeneralDebugResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysGeneralDebug_onsuccess = urn_ast_AST_wsdl_AGSysGeneralDebug_op_onsuccess;

function urn_ast_AST_wsdl_AGSysGeneralDebug_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysGeneralDebug_onerror = urn_ast_AST_wsdl_AGSysGeneralDebug_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSysGeneralDebug
// Wrapped operation.
// parameter debug
// - simple type {http://www.w3.org/2001/XMLSchema}int//
function urn_ast_AST_wsdl_AGSysGeneralDebug_op(successCallback, errorCallback, debug) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = debug;
    xml = this.AGSysGeneralDebugRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSysGeneralDebug_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSysGeneralDebug_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysGeneralDebug = urn_ast_AST_wsdl_AGSysGeneralDebug_op;

function urn_ast_AST_wsdl_AGSysGeneralDebugRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSysGeneralDebug();
    wrapperObj.setDebug(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSysGeneralDebug', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysGeneralDebugRequest_serializeInput = urn_ast_AST_wsdl_AGSysGeneralDebugRequest_serializeInput;

function urn_ast_AST_wsdl_AGSysGeneralDebugResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSysGeneralDebugResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAdvAstapiSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAdvAstapiSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAdvAstapiSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstapiSave_onsuccess = urn_ast_AST_wsdl_AGAdvAstapiSave_op_onsuccess;

function urn_ast_AST_wsdl_AGAdvAstapiSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstapiSave_onerror = urn_ast_AST_wsdl_AGAdvAstapiSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAdvAstapiSave
// Wrapped operation.
// parameter save
// - Object constructor is AST_AdvAstSave
//
function urn_ast_AST_wsdl_AGAdvAstapiSave_op(successCallback, errorCallback, save) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = save;
    xml = this.AGAdvAstapiSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAdvAstapiSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAdvAstapiSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstapiSave = urn_ast_AST_wsdl_AGAdvAstapiSave_op;

function urn_ast_AST_wsdl_AGAdvAstapiSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAdvAstapiSave();
    wrapperObj.setSave(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAdvAstapiSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstapiSaveRequest_serializeInput = urn_ast_AST_wsdl_AGAdvAstapiSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGAdvAstapiSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAdvAstapiSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAlgGlbSettingGetOne_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAlgGlbSettingGetOneResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAlgGlbSettingGetOneResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgGlbSettingGetOne_onsuccess = urn_ast_AST_wsdl_AGAlgGlbSettingGetOne_op_onsuccess;

function urn_ast_AST_wsdl_AGAlgGlbSettingGetOne_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgGlbSettingGetOne_onerror = urn_ast_AST_wsdl_AGAlgGlbSettingGetOne_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAlgGlbSettingGetOne
// Wrapped operation.
// parameter section
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_AGAlgGlbSettingGetOne_op(successCallback, errorCallback, section) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = section;
    xml = this.AGAlgGlbSettingGetOneRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAlgGlbSettingGetOne_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAlgGlbSettingGetOne_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgGlbSettingGetOne = urn_ast_AST_wsdl_AGAlgGlbSettingGetOne_op;

function urn_ast_AST_wsdl_AGAlgGlbSettingGetOneRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAlgGlbSettingGetOne();
    wrapperObj.setSection(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAlgGlbSettingGetOne', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgGlbSettingGetOneRequest_serializeInput = urn_ast_AST_wsdl_AGAlgGlbSettingGetOneRequest_serializeInput;

function urn_ast_AST_wsdl_AGAlgGlbSettingGetOneResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAlgGlbSettingGetOneResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGRoutingAdvSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGRoutingAdvSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGRoutingAdvSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingAdvSave_onsuccess = urn_ast_AST_wsdl_AGRoutingAdvSave_op_onsuccess;

function urn_ast_AST_wsdl_AGRoutingAdvSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingAdvSave_onerror = urn_ast_AST_wsdl_AGRoutingAdvSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGRoutingAdvSave
// Wrapped operation.
// parameter save
// - Object constructor is AST_RoutingAdvSave
//
function urn_ast_AST_wsdl_AGRoutingAdvSave_op(successCallback, errorCallback, save) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = save;
    xml = this.AGRoutingAdvSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGRoutingAdvSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGRoutingAdvSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingAdvSave = urn_ast_AST_wsdl_AGRoutingAdvSave_op;

function urn_ast_AST_wsdl_AGRoutingAdvSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGRoutingAdvSave();
    wrapperObj.setSave(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGRoutingAdvSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingAdvSaveRequest_serializeInput = urn_ast_AST_wsdl_AGRoutingAdvSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGRoutingAdvSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGRoutingAdvSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGRoutingAdvGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGRoutingAdvGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGRoutingAdvGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingAdvGet_onsuccess = urn_ast_AST_wsdl_AGRoutingAdvGet_op_onsuccess;

function urn_ast_AST_wsdl_AGRoutingAdvGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingAdvGet_onerror = urn_ast_AST_wsdl_AGRoutingAdvGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGRoutingAdvGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGRoutingAdvGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGRoutingAdvGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGRoutingAdvGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGRoutingAdvGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingAdvGet = urn_ast_AST_wsdl_AGRoutingAdvGet_op;

function urn_ast_AST_wsdl_AGRoutingAdvGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGRoutingAdvGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGRoutingAdvGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingAdvGetRequest_serializeInput = urn_ast_AST_wsdl_AGRoutingAdvGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGRoutingAdvGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGRoutingAdvGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGLogCdrGenFile_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGLogCdrGenFileResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGLogCdrGenFileResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGLogCdrGenFile_onsuccess = urn_ast_AST_wsdl_AGLogCdrGenFile_op_onsuccess;

function urn_ast_AST_wsdl_AGLogCdrGenFile_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGLogCdrGenFile_onerror = urn_ast_AST_wsdl_AGLogCdrGenFile_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGLogCdrGenFile
// Wrapped operation.
// parameter filename
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter table
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_AGLogCdrGenFile_op(successCallback, errorCallback, filename, table) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(2);
    args[0] = filename;
    args[1] = table;
    xml = this.AGLogCdrGenFileRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGLogCdrGenFile_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGLogCdrGenFile_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGLogCdrGenFile = urn_ast_AST_wsdl_AGLogCdrGenFile_op;

function urn_ast_AST_wsdl_AGLogCdrGenFileRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGLogCdrGenFile();
    wrapperObj.setFilename(args[0]);
    wrapperObj.setTable(args[1]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGLogCdrGenFile', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGLogCdrGenFileRequest_serializeInput = urn_ast_AST_wsdl_AGLogCdrGenFileRequest_serializeInput;

function urn_ast_AST_wsdl_AGLogCdrGenFileResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGLogCdrGenFileResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_RoutingGetAll_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_RoutingGetAllResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_RoutingGetAllResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.RoutingGetAll_onsuccess = urn_ast_AST_wsdl_RoutingGetAll_op_onsuccess;

function urn_ast_AST_wsdl_RoutingGetAll_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.RoutingGetAll_onerror = urn_ast_AST_wsdl_RoutingGetAll_op_onerror;

//
// Operation {urn:ast/AST.wsdl}RoutingGetAll
// Wrapped operation.
//
function urn_ast_AST_wsdl_RoutingGetAll_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.RoutingGetAllRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.RoutingGetAll_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.RoutingGetAll_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.RoutingGetAll = urn_ast_AST_wsdl_RoutingGetAll_op;

function urn_ast_AST_wsdl_RoutingGetAllRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_RoutingGetAll();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:RoutingGetAll', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.RoutingGetAllRequest_serializeInput = urn_ast_AST_wsdl_RoutingGetAllRequest_serializeInput;

function urn_ast_AST_wsdl_RoutingGetAllResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_RoutingGetAllResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAdvCloudGetStatus_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAdvCloudGetStatusResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAdvCloudGetStatusResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvCloudGetStatus_onsuccess = urn_ast_AST_wsdl_AGAdvCloudGetStatus_op_onsuccess;

function urn_ast_AST_wsdl_AGAdvCloudGetStatus_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvCloudGetStatus_onerror = urn_ast_AST_wsdl_AGAdvCloudGetStatus_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAdvCloudGetStatus
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGAdvCloudGetStatus_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGAdvCloudGetStatusRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAdvCloudGetStatus_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAdvCloudGetStatus_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvCloudGetStatus = urn_ast_AST_wsdl_AGAdvCloudGetStatus_op;

function urn_ast_AST_wsdl_AGAdvCloudGetStatusRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAdvCloudGetStatus();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAdvCloudGetStatus', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvCloudGetStatusRequest_serializeInput = urn_ast_AST_wsdl_AGAdvCloudGetStatusRequest_serializeInput;

function urn_ast_AST_wsdl_AGAdvCloudGetStatusResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAdvCloudGetStatusResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSysLoginGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSysLoginGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSysLoginGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysLoginGet_onsuccess = urn_ast_AST_wsdl_AGSysLoginGet_op_onsuccess;

function urn_ast_AST_wsdl_AGSysLoginGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysLoginGet_onerror = urn_ast_AST_wsdl_AGSysLoginGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSysLoginGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGSysLoginGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGSysLoginGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSysLoginGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSysLoginGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysLoginGet = urn_ast_AST_wsdl_AGSysLoginGet_op;

function urn_ast_AST_wsdl_AGSysLoginGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSysLoginGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSysLoginGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysLoginGetRequest_serializeInput = urn_ast_AST_wsdl_AGSysLoginGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGSysLoginGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSysLoginGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSystemToolsSystemReboot_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSystemToolsSystemRebootResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSystemToolsSystemRebootResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolsSystemReboot_onsuccess = urn_ast_AST_wsdl_AGSystemToolsSystemReboot_op_onsuccess;

function urn_ast_AST_wsdl_AGSystemToolsSystemReboot_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolsSystemReboot_onerror = urn_ast_AST_wsdl_AGSystemToolsSystemReboot_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSystemToolsSystemReboot
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGSystemToolsSystemReboot_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGSystemToolsSystemRebootRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSystemToolsSystemReboot_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSystemToolsSystemReboot_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolsSystemReboot = urn_ast_AST_wsdl_AGSystemToolsSystemReboot_op;

function urn_ast_AST_wsdl_AGSystemToolsSystemRebootRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSystemToolsSystemReboot();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSystemToolsSystemReboot', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolsSystemRebootRequest_serializeInput = urn_ast_AST_wsdl_AGSystemToolsSystemRebootRequest_serializeInput;

function urn_ast_AST_wsdl_AGSystemToolsSystemRebootResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSystemToolsSystemRebootResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGRoutingGroupsDialGetAll_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGRoutingGroupsDialGetAllResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGRoutingGroupsDialGetAllResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupsDialGetAll_onsuccess = urn_ast_AST_wsdl_AGRoutingGroupsDialGetAll_op_onsuccess;

function urn_ast_AST_wsdl_AGRoutingGroupsDialGetAll_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupsDialGetAll_onerror = urn_ast_AST_wsdl_AGRoutingGroupsDialGetAll_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGRoutingGroupsDialGetAll
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGRoutingGroupsDialGetAll_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGRoutingGroupsDialGetAllRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGRoutingGroupsDialGetAll_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGRoutingGroupsDialGetAll_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupsDialGetAll = urn_ast_AST_wsdl_AGRoutingGroupsDialGetAll_op;

function urn_ast_AST_wsdl_AGRoutingGroupsDialGetAllRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGRoutingGroupsDialGetAll();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGRoutingGroupsDialGetAll', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupsDialGetAllRequest_serializeInput = urn_ast_AST_wsdl_AGRoutingGroupsDialGetAllRequest_serializeInput;

function urn_ast_AST_wsdl_AGRoutingGroupsDialGetAllResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGRoutingGroupsDialGetAllResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGjConRelaySave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGjConRelaySaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGjConRelaySaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConRelaySave_onsuccess = urn_ast_AST_wsdl_AGjConRelaySave_op_onsuccess;

function urn_ast_AST_wsdl_AGjConRelaySave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConRelaySave_onerror = urn_ast_AST_wsdl_AGjConRelaySave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGjConRelaySave
// Wrapped operation.
// parameter board
// - simple type {http://www.w3.org/2001/XMLSchema}int// parameter relay
// - simple type {http://www.w3.org/2001/XMLSchema}int// parameter mode
// - simple type {http://www.w3.org/2001/XMLSchema}int// parameter count
// - simple type {http://www.w3.org/2001/XMLSchema}int//
function urn_ast_AST_wsdl_AGjConRelaySave_op(successCallback, errorCallback, board, relay, mode, count) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(4);
    args[0] = board;
    args[1] = relay;
    args[2] = mode;
    args[3] = count;
    xml = this.AGjConRelaySaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGjConRelaySave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGjConRelaySave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConRelaySave = urn_ast_AST_wsdl_AGjConRelaySave_op;

function urn_ast_AST_wsdl_AGjConRelaySaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGjConRelaySave();
    wrapperObj.setBoard(args[0]);
    wrapperObj.setRelay(args[1]);
    wrapperObj.setMode(args[2]);
    wrapperObj.setCount(args[3]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGjConRelaySave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConRelaySaveRequest_serializeInput = urn_ast_AST_wsdl_AGjConRelaySaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGjConRelaySaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGjConRelaySaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAdvTr069GetStatus_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAdvTr069GetStatusResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAdvTr069GetStatusResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvTr069GetStatus_onsuccess = urn_ast_AST_wsdl_AGAdvTr069GetStatus_op_onsuccess;

function urn_ast_AST_wsdl_AGAdvTr069GetStatus_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvTr069GetStatus_onerror = urn_ast_AST_wsdl_AGAdvTr069GetStatus_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAdvTr069GetStatus
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGAdvTr069GetStatus_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGAdvTr069GetStatusRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAdvTr069GetStatus_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAdvTr069GetStatus_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvTr069GetStatus = urn_ast_AST_wsdl_AGAdvTr069GetStatus_op;

function urn_ast_AST_wsdl_AGAdvTr069GetStatusRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAdvTr069GetStatus();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAdvTr069GetStatus', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvTr069GetStatusRequest_serializeInput = urn_ast_AST_wsdl_AGAdvTr069GetStatusRequest_serializeInput;

function urn_ast_AST_wsdl_AGAdvTr069GetStatusResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAdvTr069GetStatusResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSipSecurityGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSipSecurityGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSipSecurityGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipSecurityGet_onsuccess = urn_ast_AST_wsdl_AGSipSecurityGet_op_onsuccess;

function urn_ast_AST_wsdl_AGSipSecurityGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipSecurityGet_onerror = urn_ast_AST_wsdl_AGSipSecurityGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSipSecurityGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGSipSecurityGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGSipSecurityGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSipSecurityGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSipSecurityGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipSecurityGet = urn_ast_AST_wsdl_AGSipSecurityGet_op;

function urn_ast_AST_wsdl_AGSipSecurityGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSipSecurityGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSipSecurityGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipSecurityGetRequest_serializeInput = urn_ast_AST_wsdl_AGSipSecurityGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGSipSecurityGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSipSecurityGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGFxsSpeedialProvisionSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGFxsSpeedialProvisionSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGFxsSpeedialProvisionSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGFxsSpeedialProvisionSave_onsuccess = urn_ast_AST_wsdl_AGFxsSpeedialProvisionSave_op_onsuccess;

function urn_ast_AST_wsdl_AGFxsSpeedialProvisionSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGFxsSpeedialProvisionSave_onerror = urn_ast_AST_wsdl_AGFxsSpeedialProvisionSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGFxsSpeedialProvisionSave
// Wrapped operation.
// parameter dialarr
// - Object constructor is AST_ProvFxsSpeedDailArr
//
function urn_ast_AST_wsdl_AGFxsSpeedialProvisionSave_op(successCallback, errorCallback, dialarr) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = dialarr;
    xml = this.AGFxsSpeedialProvisionSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGFxsSpeedialProvisionSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGFxsSpeedialProvisionSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGFxsSpeedialProvisionSave = urn_ast_AST_wsdl_AGFxsSpeedialProvisionSave_op;

function urn_ast_AST_wsdl_AGFxsSpeedialProvisionSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGFxsSpeedialProvisionSave();
    wrapperObj.setDialarr(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGFxsSpeedialProvisionSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGFxsSpeedialProvisionSaveRequest_serializeInput = urn_ast_AST_wsdl_AGFxsSpeedialProvisionSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGFxsSpeedialProvisionSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGFxsSpeedialProvisionSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSystemToolsSystemSwitch_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSystemToolsSystemSwitchResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSystemToolsSystemSwitchResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolsSystemSwitch_onsuccess = urn_ast_AST_wsdl_AGSystemToolsSystemSwitch_op_onsuccess;

function urn_ast_AST_wsdl_AGSystemToolsSystemSwitch_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolsSystemSwitch_onerror = urn_ast_AST_wsdl_AGSystemToolsSystemSwitch_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSystemToolsSystemSwitch
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGSystemToolsSystemSwitch_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGSystemToolsSystemSwitchRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSystemToolsSystemSwitch_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSystemToolsSystemSwitch_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolsSystemSwitch = urn_ast_AST_wsdl_AGSystemToolsSystemSwitch_op;

function urn_ast_AST_wsdl_AGSystemToolsSystemSwitchRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSystemToolsSystemSwitch();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSystemToolsSystemSwitch', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolsSystemSwitchRequest_serializeInput = urn_ast_AST_wsdl_AGSystemToolsSystemSwitchRequest_serializeInput;

function urn_ast_AST_wsdl_AGSystemToolsSystemSwitchResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSystemToolsSystemSwitchResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGRoutingRulsGetAll_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGRoutingRulsGetAllResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGRoutingRulsGetAllResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingRulsGetAll_onsuccess = urn_ast_AST_wsdl_AGRoutingRulsGetAll_op_onsuccess;

function urn_ast_AST_wsdl_AGRoutingRulsGetAll_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingRulsGetAll_onerror = urn_ast_AST_wsdl_AGRoutingRulsGetAll_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGRoutingRulsGetAll
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGRoutingRulsGetAll_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGRoutingRulsGetAllRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGRoutingRulsGetAll_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGRoutingRulsGetAll_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingRulsGetAll = urn_ast_AST_wsdl_AGRoutingRulsGetAll_op;

function urn_ast_AST_wsdl_AGRoutingRulsGetAllRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGRoutingRulsGetAll();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGRoutingRulsGetAll', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingRulsGetAllRequest_serializeInput = urn_ast_AST_wsdl_AGRoutingRulsGetAllRequest_serializeInput;

function urn_ast_AST_wsdl_AGRoutingRulsGetAllResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGRoutingRulsGetAllResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGRS485SetBaudrate_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGRS485SetBaudrateResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGRS485SetBaudrateResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRS485SetBaudrate_onsuccess = urn_ast_AST_wsdl_AGRS485SetBaudrate_op_onsuccess;

function urn_ast_AST_wsdl_AGRS485SetBaudrate_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRS485SetBaudrate_onerror = urn_ast_AST_wsdl_AGRS485SetBaudrate_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGRS485SetBaudrate
// Wrapped operation.
// parameter baudrate
// - simple type {http://www.w3.org/2001/XMLSchema}unsignedInt// parameter DevNum
// - simple type {http://www.w3.org/2001/XMLSchema}unsignedByte//
function urn_ast_AST_wsdl_AGRS485SetBaudrate_op(successCallback, errorCallback, baudrate, DevNum) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(2);
    args[0] = baudrate;
    args[1] = DevNum;
    xml = this.AGRS485SetBaudrateRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGRS485SetBaudrate_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGRS485SetBaudrate_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRS485SetBaudrate = urn_ast_AST_wsdl_AGRS485SetBaudrate_op;

function urn_ast_AST_wsdl_AGRS485SetBaudrateRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGRS485SetBaudrate();
    wrapperObj.setBaudrate(args[0]);
    wrapperObj.setDevNum(args[1]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGRS485SetBaudrate', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRS485SetBaudrateRequest_serializeInput = urn_ast_AST_wsdl_AGRS485SetBaudrateRequest_serializeInput;

function urn_ast_AST_wsdl_AGRS485SetBaudrateResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGRS485SetBaudrateResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSysGeneralSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSysGeneralSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSysGeneralSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysGeneralSave_onsuccess = urn_ast_AST_wsdl_AGSysGeneralSave_op_onsuccess;

function urn_ast_AST_wsdl_AGSysGeneralSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysGeneralSave_onerror = urn_ast_AST_wsdl_AGSysGeneralSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSysGeneralSave
// Wrapped operation.
// parameter save
// - Object constructor is AST_SysGeneralSave
//
function urn_ast_AST_wsdl_AGSysGeneralSave_op(successCallback, errorCallback, save) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = save;
    xml = this.AGSysGeneralSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSysGeneralSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSysGeneralSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysGeneralSave = urn_ast_AST_wsdl_AGSysGeneralSave_op;

function urn_ast_AST_wsdl_AGSysGeneralSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSysGeneralSave();
    wrapperObj.setSave(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSysGeneralSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysGeneralSaveRequest_serializeInput = urn_ast_AST_wsdl_AGSysGeneralSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGSysGeneralSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSysGeneralSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSystemAutoUpdateGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSystemAutoUpdateGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSystemAutoUpdateGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemAutoUpdateGet_onsuccess = urn_ast_AST_wsdl_AGSystemAutoUpdateGet_op_onsuccess;

function urn_ast_AST_wsdl_AGSystemAutoUpdateGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemAutoUpdateGet_onerror = urn_ast_AST_wsdl_AGSystemAutoUpdateGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSystemAutoUpdateGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGSystemAutoUpdateGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGSystemAutoUpdateGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSystemAutoUpdateGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSystemAutoUpdateGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemAutoUpdateGet = urn_ast_AST_wsdl_AGSystemAutoUpdateGet_op;

function urn_ast_AST_wsdl_AGSystemAutoUpdateGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSystemAutoUpdateGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSystemAutoUpdateGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemAutoUpdateGetRequest_serializeInput = urn_ast_AST_wsdl_AGSystemAutoUpdateGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGSystemAutoUpdateGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSystemAutoUpdateGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGjConIoSettingsSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGjConIoSettingsSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGjConIoSettingsSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConIoSettingsSave_onsuccess = urn_ast_AST_wsdl_AGjConIoSettingsSave_op_onsuccess;

function urn_ast_AST_wsdl_AGjConIoSettingsSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConIoSettingsSave_onerror = urn_ast_AST_wsdl_AGjConIoSettingsSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGjConIoSettingsSave
// Wrapped operation.
// parameter board
// - simple type {http://www.w3.org/2001/XMLSchema}int// parameter IoSettings
// - Object constructor is AST_IoSettingsOne
//
function urn_ast_AST_wsdl_AGjConIoSettingsSave_op(successCallback, errorCallback, board, IoSettings) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(2);
    args[0] = board;
    args[1] = IoSettings;
    xml = this.AGjConIoSettingsSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGjConIoSettingsSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGjConIoSettingsSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConIoSettingsSave = urn_ast_AST_wsdl_AGjConIoSettingsSave_op;

function urn_ast_AST_wsdl_AGjConIoSettingsSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGjConIoSettingsSave();
    wrapperObj.setBoard(args[0]);
    wrapperObj.setIoSettings(args[1]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGjConIoSettingsSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConIoSettingsSaveRequest_serializeInput = urn_ast_AST_wsdl_AGjConIoSettingsSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGjConIoSettingsSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGjConIoSettingsSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAdvAstfileeditorEditGetOne_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAdvAstfileeditorEditGetOneResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAdvAstfileeditorEditGetOneResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstfileeditorEditGetOne_onsuccess = urn_ast_AST_wsdl_AGAdvAstfileeditorEditGetOne_op_onsuccess;

function urn_ast_AST_wsdl_AGAdvAstfileeditorEditGetOne_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstfileeditorEditGetOne_onerror = urn_ast_AST_wsdl_AGAdvAstfileeditorEditGetOne_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAdvAstfileeditorEditGetOne
// Wrapped operation.
// parameter fname
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_AGAdvAstfileeditorEditGetOne_op(successCallback, errorCallback, fname) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = fname;
    xml = this.AGAdvAstfileeditorEditGetOneRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAdvAstfileeditorEditGetOne_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAdvAstfileeditorEditGetOne_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstfileeditorEditGetOne = urn_ast_AST_wsdl_AGAdvAstfileeditorEditGetOne_op;

function urn_ast_AST_wsdl_AGAdvAstfileeditorEditGetOneRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAdvAstfileeditorEditGetOne();
    wrapperObj.setFname(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAdvAstfileeditorEditGetOne', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstfileeditorEditGetOneRequest_serializeInput = urn_ast_AST_wsdl_AGAdvAstfileeditorEditGetOneRequest_serializeInput;

function urn_ast_AST_wsdl_AGAdvAstfileeditorEditGetOneResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAdvAstfileeditorEditGetOneResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGRegisterParaSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGRegisterParaSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGRegisterParaSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRegisterParaSave_onsuccess = urn_ast_AST_wsdl_AGRegisterParaSave_op_onsuccess;

function urn_ast_AST_wsdl_AGRegisterParaSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRegisterParaSave_onerror = urn_ast_AST_wsdl_AGRegisterParaSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGRegisterParaSave
// Wrapped operation.
// parameter para
// - Object constructor is AST_RegisterPara
//
function urn_ast_AST_wsdl_AGRegisterParaSave_op(successCallback, errorCallback, para) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = para;
    xml = this.AGRegisterParaSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGRegisterParaSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGRegisterParaSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRegisterParaSave = urn_ast_AST_wsdl_AGRegisterParaSave_op;

function urn_ast_AST_wsdl_AGRegisterParaSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGRegisterParaSave();
    wrapperObj.setPara(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGRegisterParaSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRegisterParaSaveRequest_serializeInput = urn_ast_AST_wsdl_AGRegisterParaSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGRegisterParaSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGRegisterParaSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAlgSecSettingDeleteFile_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAlgSecSettingDeleteFileResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAlgSecSettingDeleteFileResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgSecSettingDeleteFile_onsuccess = urn_ast_AST_wsdl_AGAlgSecSettingDeleteFile_op_onsuccess;

function urn_ast_AST_wsdl_AGAlgSecSettingDeleteFile_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgSecSettingDeleteFile_onerror = urn_ast_AST_wsdl_AGAlgSecSettingDeleteFile_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAlgSecSettingDeleteFile
// Wrapped operation.
// parameter filename
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_AGAlgSecSettingDeleteFile_op(successCallback, errorCallback, filename) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = filename;
    xml = this.AGAlgSecSettingDeleteFileRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAlgSecSettingDeleteFile_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAlgSecSettingDeleteFile_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgSecSettingDeleteFile = urn_ast_AST_wsdl_AGAlgSecSettingDeleteFile_op;

function urn_ast_AST_wsdl_AGAlgSecSettingDeleteFileRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAlgSecSettingDeleteFile();
    wrapperObj.setFilename(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAlgSecSettingDeleteFile', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgSecSettingDeleteFileRequest_serializeInput = urn_ast_AST_wsdl_AGAlgSecSettingDeleteFileRequest_serializeInput;

function urn_ast_AST_wsdl_AGAlgSecSettingDeleteFileResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAlgSecSettingDeleteFileResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGRoutingRulesSaveOrder_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGRoutingRulesSaveOrderResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGRoutingRulesSaveOrderResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingRulesSaveOrder_onsuccess = urn_ast_AST_wsdl_AGRoutingRulesSaveOrder_op_onsuccess;

function urn_ast_AST_wsdl_AGRoutingRulesSaveOrder_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingRulesSaveOrder_onerror = urn_ast_AST_wsdl_AGRoutingRulesSaveOrder_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGRoutingRulesSaveOrder
// Wrapped operation.
// parameter order
// - Object constructor is AST_LineArr
//
function urn_ast_AST_wsdl_AGRoutingRulesSaveOrder_op(successCallback, errorCallback, order) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = order;
    xml = this.AGRoutingRulesSaveOrderRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGRoutingRulesSaveOrder_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGRoutingRulesSaveOrder_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingRulesSaveOrder = urn_ast_AST_wsdl_AGRoutingRulesSaveOrder_op;

function urn_ast_AST_wsdl_AGRoutingRulesSaveOrderRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGRoutingRulesSaveOrder();
    wrapperObj.setOrder(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGRoutingRulesSaveOrder', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingRulesSaveOrderRequest_serializeInput = urn_ast_AST_wsdl_AGRoutingRulesSaveOrderRequest_serializeInput;

function urn_ast_AST_wsdl_AGRoutingRulesSaveOrderResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGRoutingRulesSaveOrderResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGNetworkWanSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGNetworkWanSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGNetworkWanSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkWanSave_onsuccess = urn_ast_AST_wsdl_AGNetworkWanSave_op_onsuccess;

function urn_ast_AST_wsdl_AGNetworkWanSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkWanSave_onerror = urn_ast_AST_wsdl_AGNetworkWanSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGNetworkWanSave
// Wrapped operation.
// parameter save
// - Object constructor is AST_NetworkWanSave
//
function urn_ast_AST_wsdl_AGNetworkWanSave_op(successCallback, errorCallback, save) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = save;
    xml = this.AGNetworkWanSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGNetworkWanSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGNetworkWanSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkWanSave = urn_ast_AST_wsdl_AGNetworkWanSave_op;

function urn_ast_AST_wsdl_AGNetworkWanSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGNetworkWanSave();
    wrapperObj.setSave(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGNetworkWanSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkWanSaveRequest_serializeInput = urn_ast_AST_wsdl_AGNetworkWanSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGNetworkWanSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGNetworkWanSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSipFxoBindingSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSipFxoBindingSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSipFxoBindingSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipFxoBindingSave_onsuccess = urn_ast_AST_wsdl_AGSipFxoBindingSave_op_onsuccess;

function urn_ast_AST_wsdl_AGSipFxoBindingSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipFxoBindingSave_onerror = urn_ast_AST_wsdl_AGSipFxoBindingSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSipFxoBindingSave
// Wrapped operation.
// parameter roules
// - Object constructor is AST_SipFxoBindingSaveArr
//
function urn_ast_AST_wsdl_AGSipFxoBindingSave_op(successCallback, errorCallback, roules) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = roules;
    xml = this.AGSipFxoBindingSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSipFxoBindingSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSipFxoBindingSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipFxoBindingSave = urn_ast_AST_wsdl_AGSipFxoBindingSave_op;

function urn_ast_AST_wsdl_AGSipFxoBindingSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSipFxoBindingSave();
    wrapperObj.setRoules(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSipFxoBindingSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipFxoBindingSaveRequest_serializeInput = urn_ast_AST_wsdl_AGSipFxoBindingSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGSipFxoBindingSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSipFxoBindingSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGCommitAll_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGCommitAllResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGCommitAllResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGCommitAll_onsuccess = urn_ast_AST_wsdl_AGCommitAll_op_onsuccess;

function urn_ast_AST_wsdl_AGCommitAll_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGCommitAll_onerror = urn_ast_AST_wsdl_AGCommitAll_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGCommitAll
// Wrapped operation.
// parameter message
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_AGCommitAll_op(successCallback, errorCallback, message) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = message;
    xml = this.AGCommitAllRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGCommitAll_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGCommitAll_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGCommitAll = urn_ast_AST_wsdl_AGCommitAll_op;

function urn_ast_AST_wsdl_AGCommitAllRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGCommitAll();
    wrapperObj.setMessage(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGCommitAll', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGCommitAllRequest_serializeInput = urn_ast_AST_wsdl_AGCommitAllRequest_serializeInput;

function urn_ast_AST_wsdl_AGCommitAllResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGCommitAllResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_IaxGetAll_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_IaxGetAllResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_IaxGetAllResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.IaxGetAll_onsuccess = urn_ast_AST_wsdl_IaxGetAll_op_onsuccess;

function urn_ast_AST_wsdl_IaxGetAll_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.IaxGetAll_onerror = urn_ast_AST_wsdl_IaxGetAll_op_onerror;

//
// Operation {urn:ast/AST.wsdl}IaxGetAll
// Wrapped operation.
//
function urn_ast_AST_wsdl_IaxGetAll_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.IaxGetAllRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.IaxGetAll_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.IaxGetAll_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.IaxGetAll = urn_ast_AST_wsdl_IaxGetAll_op;

function urn_ast_AST_wsdl_IaxGetAllRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_IaxGetAll();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:IaxGetAll', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.IaxGetAllRequest_serializeInput = urn_ast_AST_wsdl_IaxGetAllRequest_serializeInput;

function urn_ast_AST_wsdl_IaxGetAllResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_IaxGetAllResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAlgChannelSync_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAlgChannelSyncResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAlgChannelSyncResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelSync_onsuccess = urn_ast_AST_wsdl_AGAlgChannelSync_op_onsuccess;

function urn_ast_AST_wsdl_AGAlgChannelSync_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelSync_onerror = urn_ast_AST_wsdl_AGAlgChannelSync_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAlgChannelSync
// Wrapped operation.
// parameter sections
// - Object constructor is AST_SectionArr
// parameter lines
// - Object constructor is AST_LineArr
//
function urn_ast_AST_wsdl_AGAlgChannelSync_op(successCallback, errorCallback, sections, lines) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(2);
    args[0] = sections;
    args[1] = lines;
    xml = this.AGAlgChannelSyncRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAlgChannelSync_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAlgChannelSync_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelSync = urn_ast_AST_wsdl_AGAlgChannelSync_op;

function urn_ast_AST_wsdl_AGAlgChannelSyncRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAlgChannelSync();
    wrapperObj.setSections(args[0]);
    wrapperObj.setLines(args[1]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAlgChannelSync', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelSyncRequest_serializeInput = urn_ast_AST_wsdl_AGAlgChannelSyncRequest_serializeInput;

function urn_ast_AST_wsdl_AGAlgChannelSyncResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAlgChannelSyncResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAlgChannelSaveAll_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAlgChannelSaveAllResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAlgChannelSaveAllResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelSaveAll_onsuccess = urn_ast_AST_wsdl_AGAlgChannelSaveAll_op_onsuccess;

function urn_ast_AST_wsdl_AGAlgChannelSaveAll_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelSaveAll_onerror = urn_ast_AST_wsdl_AGAlgChannelSaveAll_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAlgChannelSaveAll
// Wrapped operation.
// parameter save
// - Object constructor is AST_AnaFxsAll
//
function urn_ast_AST_wsdl_AGAlgChannelSaveAll_op(successCallback, errorCallback, save) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = save;
    xml = this.AGAlgChannelSaveAllRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAlgChannelSaveAll_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAlgChannelSaveAll_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelSaveAll = urn_ast_AST_wsdl_AGAlgChannelSaveAll_op;

function urn_ast_AST_wsdl_AGAlgChannelSaveAllRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAlgChannelSaveAll();
    wrapperObj.setSave(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAlgChannelSaveAll', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelSaveAllRequest_serializeInput = urn_ast_AST_wsdl_AGAlgChannelSaveAllRequest_serializeInput;

function urn_ast_AST_wsdl_AGAlgChannelSaveAllResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAlgChannelSaveAllResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGGetSIPEndpointStatus_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGGetSIPEndpointStatusResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGGetSIPEndpointStatusResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGGetSIPEndpointStatus_onsuccess = urn_ast_AST_wsdl_AGGetSIPEndpointStatus_op_onsuccess;

function urn_ast_AST_wsdl_AGGetSIPEndpointStatus_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGGetSIPEndpointStatus_onerror = urn_ast_AST_wsdl_AGGetSIPEndpointStatus_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGGetSIPEndpointStatus
// Wrapped operation.
// parameter user
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_AGGetSIPEndpointStatus_op(successCallback, errorCallback, user) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = user;
    xml = this.AGGetSIPEndpointStatusRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGGetSIPEndpointStatus_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGGetSIPEndpointStatus_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGGetSIPEndpointStatus = urn_ast_AST_wsdl_AGGetSIPEndpointStatus_op;

function urn_ast_AST_wsdl_AGGetSIPEndpointStatusRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGGetSIPEndpointStatus();
    wrapperObj.setUser(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGGetSIPEndpointStatus', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGGetSIPEndpointStatusRequest_serializeInput = urn_ast_AST_wsdl_AGGetSIPEndpointStatusRequest_serializeInput;

function urn_ast_AST_wsdl_AGGetSIPEndpointStatusResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGGetSIPEndpointStatusResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGRoutingGroupsDialSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGRoutingGroupsDialSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGRoutingGroupsDialSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupsDialSave_onsuccess = urn_ast_AST_wsdl_AGRoutingGroupsDialSave_op_onsuccess;

function urn_ast_AST_wsdl_AGRoutingGroupsDialSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupsDialSave_onerror = urn_ast_AST_wsdl_AGRoutingGroupsDialSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGRoutingGroupsDialSave
// Wrapped operation.
// parameter oldname
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter newname
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter save
// - Object constructor is AST_FxsGroupDial
//
function urn_ast_AST_wsdl_AGRoutingGroupsDialSave_op(successCallback, errorCallback, oldname, newname, save) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(3);
    args[0] = oldname;
    args[1] = newname;
    args[2] = save;
    xml = this.AGRoutingGroupsDialSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGRoutingGroupsDialSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGRoutingGroupsDialSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupsDialSave = urn_ast_AST_wsdl_AGRoutingGroupsDialSave_op;

function urn_ast_AST_wsdl_AGRoutingGroupsDialSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGRoutingGroupsDialSave();
    wrapperObj.setOldname(args[0]);
    wrapperObj.setNewname(args[1]);
    wrapperObj.setSave(args[2]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGRoutingGroupsDialSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupsDialSaveRequest_serializeInput = urn_ast_AST_wsdl_AGRoutingGroupsDialSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGRoutingGroupsDialSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGRoutingGroupsDialSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_RoutingOrder_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_RoutingOrderResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_RoutingOrderResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.RoutingOrder_onsuccess = urn_ast_AST_wsdl_RoutingOrder_op_onsuccess;

function urn_ast_AST_wsdl_RoutingOrder_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.RoutingOrder_onerror = urn_ast_AST_wsdl_RoutingOrder_op_onerror;

//
// Operation {urn:ast/AST.wsdl}RoutingOrder
// Wrapped operation.
// parameter orders
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_RoutingOrder_op(successCallback, errorCallback, orders) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = orders;
    xml = this.RoutingOrderRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.RoutingOrder_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.RoutingOrder_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.RoutingOrder = urn_ast_AST_wsdl_RoutingOrder_op;

function urn_ast_AST_wsdl_RoutingOrderRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_RoutingOrder();
    wrapperObj.setOrders(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:RoutingOrder', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.RoutingOrderRequest_serializeInput = urn_ast_AST_wsdl_RoutingOrderRequest_serializeInput;

function urn_ast_AST_wsdl_RoutingOrderResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_RoutingOrderResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSystemCloseAllservice_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSystemCloseAllserviceResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSystemCloseAllserviceResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemCloseAllservice_onsuccess = urn_ast_AST_wsdl_AGSystemCloseAllservice_op_onsuccess;

function urn_ast_AST_wsdl_AGSystemCloseAllservice_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemCloseAllservice_onerror = urn_ast_AST_wsdl_AGSystemCloseAllservice_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSystemCloseAllservice
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGSystemCloseAllservice_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGSystemCloseAllserviceRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSystemCloseAllservice_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSystemCloseAllservice_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemCloseAllservice = urn_ast_AST_wsdl_AGSystemCloseAllservice_op;

function urn_ast_AST_wsdl_AGSystemCloseAllserviceRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSystemCloseAllservice();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSystemCloseAllservice', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemCloseAllserviceRequest_serializeInput = urn_ast_AST_wsdl_AGSystemCloseAllserviceRequest_serializeInput;

function urn_ast_AST_wsdl_AGSystemCloseAllserviceResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSystemCloseAllserviceResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSysGeneralDelLang_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSysGeneralDelLangResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSysGeneralDelLangResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysGeneralDelLang_onsuccess = urn_ast_AST_wsdl_AGSysGeneralDelLang_op_onsuccess;

function urn_ast_AST_wsdl_AGSysGeneralDelLang_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysGeneralDelLang_onerror = urn_ast_AST_wsdl_AGSysGeneralDelLang_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSysGeneralDelLang
// Wrapped operation.
// parameter lang
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_AGSysGeneralDelLang_op(successCallback, errorCallback, lang) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = lang;
    xml = this.AGSysGeneralDelLangRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSysGeneralDelLang_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSysGeneralDelLang_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysGeneralDelLang = urn_ast_AST_wsdl_AGSysGeneralDelLang_op;

function urn_ast_AST_wsdl_AGSysGeneralDelLangRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSysGeneralDelLang();
    wrapperObj.setLang(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSysGeneralDelLang', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysGeneralDelLangRequest_serializeInput = urn_ast_AST_wsdl_AGSysGeneralDelLangRequest_serializeInput;

function urn_ast_AST_wsdl_AGSysGeneralDelLangResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSysGeneralDelLangResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAlgChannelAddClient_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAlgChannelAddClientResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAlgChannelAddClientResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelAddClient_onsuccess = urn_ast_AST_wsdl_AGAlgChannelAddClient_op_onsuccess;

function urn_ast_AST_wsdl_AGAlgChannelAddClient_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelAddClient_onerror = urn_ast_AST_wsdl_AGAlgChannelAddClient_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAlgChannelAddClient
// Wrapped operation.
// parameter clientInfo
// - Object constructor is AST_ClientAdd
//
function urn_ast_AST_wsdl_AGAlgChannelAddClient_op(successCallback, errorCallback, clientInfo) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = clientInfo;
    xml = this.AGAlgChannelAddClientRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAlgChannelAddClient_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAlgChannelAddClient_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelAddClient = urn_ast_AST_wsdl_AGAlgChannelAddClient_op;

function urn_ast_AST_wsdl_AGAlgChannelAddClientRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAlgChannelAddClient();
    wrapperObj.setClientInfo(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAlgChannelAddClient', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelAddClientRequest_serializeInput = urn_ast_AST_wsdl_AGAlgChannelAddClientRequest_serializeInput;

function urn_ast_AST_wsdl_AGAlgChannelAddClientResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAlgChannelAddClientResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAdvAstfileeditorEditSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAdvAstfileeditorEditSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAdvAstfileeditorEditSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstfileeditorEditSave_onsuccess = urn_ast_AST_wsdl_AGAdvAstfileeditorEditSave_op_onsuccess;

function urn_ast_AST_wsdl_AGAdvAstfileeditorEditSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstfileeditorEditSave_onerror = urn_ast_AST_wsdl_AGAdvAstfileeditorEditSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAdvAstfileeditorEditSave
// Wrapped operation.
// parameter fname
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter datachunk
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_AGAdvAstfileeditorEditSave_op(successCallback, errorCallback, fname, datachunk) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(2);
    args[0] = fname;
    args[1] = datachunk;
    xml = this.AGAdvAstfileeditorEditSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAdvAstfileeditorEditSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAdvAstfileeditorEditSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstfileeditorEditSave = urn_ast_AST_wsdl_AGAdvAstfileeditorEditSave_op;

function urn_ast_AST_wsdl_AGAdvAstfileeditorEditSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAdvAstfileeditorEditSave();
    wrapperObj.setFname(args[0]);
    wrapperObj.setDatachunk(args[1]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAdvAstfileeditorEditSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstfileeditorEditSaveRequest_serializeInput = urn_ast_AST_wsdl_AGAdvAstfileeditorEditSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGAdvAstfileeditorEditSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAdvAstfileeditorEditSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGOEMSettingInfoGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGOEMSettingInfoGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGOEMSettingInfoGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGOEMSettingInfoGet_onsuccess = urn_ast_AST_wsdl_AGOEMSettingInfoGet_op_onsuccess;

function urn_ast_AST_wsdl_AGOEMSettingInfoGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGOEMSettingInfoGet_onerror = urn_ast_AST_wsdl_AGOEMSettingInfoGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGOEMSettingInfoGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGOEMSettingInfoGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGOEMSettingInfoGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGOEMSettingInfoGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGOEMSettingInfoGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGOEMSettingInfoGet = urn_ast_AST_wsdl_AGOEMSettingInfoGet_op;

function urn_ast_AST_wsdl_AGOEMSettingInfoGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGOEMSettingInfoGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGOEMSettingInfoGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGOEMSettingInfoGetRequest_serializeInput = urn_ast_AST_wsdl_AGOEMSettingInfoGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGOEMSettingInfoGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGOEMSettingInfoGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGRegisterParaRead_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGRegisterParaReadResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGRegisterParaReadResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRegisterParaRead_onsuccess = urn_ast_AST_wsdl_AGRegisterParaRead_op_onsuccess;

function urn_ast_AST_wsdl_AGRegisterParaRead_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRegisterParaRead_onerror = urn_ast_AST_wsdl_AGRegisterParaRead_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGRegisterParaRead
// Wrapped operation.
// parameter read
// - Object constructor is AST_RegisterParaRead
//
function urn_ast_AST_wsdl_AGRegisterParaRead_op(successCallback, errorCallback, read) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = read;
    xml = this.AGRegisterParaReadRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGRegisterParaRead_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGRegisterParaRead_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRegisterParaRead = urn_ast_AST_wsdl_AGRegisterParaRead_op;

function urn_ast_AST_wsdl_AGRegisterParaReadRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGRegisterParaRead();
    wrapperObj.setRead(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGRegisterParaRead', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRegisterParaReadRequest_serializeInput = urn_ast_AST_wsdl_AGRegisterParaReadRequest_serializeInput;

function urn_ast_AST_wsdl_AGRegisterParaReadResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGRegisterParaReadResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_GroupSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_GroupSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_GroupSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.GroupSave_onsuccess = urn_ast_AST_wsdl_GroupSave_op_onsuccess;

function urn_ast_AST_wsdl_GroupSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.GroupSave_onerror = urn_ast_AST_wsdl_GroupSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}GroupSave
// Wrapped operation.
// parameter oldGroup
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter newGroup
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter datachunk
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_GroupSave_op(successCallback, errorCallback, oldGroup, newGroup, datachunk) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(3);
    args[0] = oldGroup;
    args[1] = newGroup;
    args[2] = datachunk;
    xml = this.GroupSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.GroupSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.GroupSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.GroupSave = urn_ast_AST_wsdl_GroupSave_op;

function urn_ast_AST_wsdl_GroupSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_GroupSave();
    wrapperObj.setOldGroup(args[0]);
    wrapperObj.setNewGroup(args[1]);
    wrapperObj.setDatachunk(args[2]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:GroupSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.GroupSaveRequest_serializeInput = urn_ast_AST_wsdl_GroupSaveRequest_serializeInput;

function urn_ast_AST_wsdl_GroupSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_GroupSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGNetworkRulesGetAll_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGNetworkRulesGetAllResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGNetworkRulesGetAllResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkRulesGetAll_onsuccess = urn_ast_AST_wsdl_AGNetworkRulesGetAll_op_onsuccess;

function urn_ast_AST_wsdl_AGNetworkRulesGetAll_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkRulesGetAll_onerror = urn_ast_AST_wsdl_AGNetworkRulesGetAll_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGNetworkRulesGetAll
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGNetworkRulesGetAll_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGNetworkRulesGetAllRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGNetworkRulesGetAll_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGNetworkRulesGetAll_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkRulesGetAll = urn_ast_AST_wsdl_AGNetworkRulesGetAll_op;

function urn_ast_AST_wsdl_AGNetworkRulesGetAllRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGNetworkRulesGetAll();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGNetworkRulesGetAll', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkRulesGetAllRequest_serializeInput = urn_ast_AST_wsdl_AGNetworkRulesGetAllRequest_serializeInput;

function urn_ast_AST_wsdl_AGNetworkRulesGetAllResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGNetworkRulesGetAllResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGUcpAlgGlbSettingGetAll_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGUcpAlgGlbSettingGetAllResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGUcpAlgGlbSettingGetAllResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgGlbSettingGetAll_onsuccess = urn_ast_AST_wsdl_AGUcpAlgGlbSettingGetAll_op_onsuccess;

function urn_ast_AST_wsdl_AGUcpAlgGlbSettingGetAll_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgGlbSettingGetAll_onerror = urn_ast_AST_wsdl_AGUcpAlgGlbSettingGetAll_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGUcpAlgGlbSettingGetAll
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGUcpAlgGlbSettingGetAll_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGUcpAlgGlbSettingGetAllRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGUcpAlgGlbSettingGetAll_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGUcpAlgGlbSettingGetAll_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgGlbSettingGetAll = urn_ast_AST_wsdl_AGUcpAlgGlbSettingGetAll_op;

function urn_ast_AST_wsdl_AGUcpAlgGlbSettingGetAllRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGUcpAlgGlbSettingGetAll();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGUcpAlgGlbSettingGetAll', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgGlbSettingGetAllRequest_serializeInput = urn_ast_AST_wsdl_AGUcpAlgGlbSettingGetAllRequest_serializeInput;

function urn_ast_AST_wsdl_AGUcpAlgGlbSettingGetAllResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGUcpAlgGlbSettingGetAllResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGLogCdrGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGLogCdrGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGLogCdrGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGLogCdrGet_onsuccess = urn_ast_AST_wsdl_AGLogCdrGet_op_onsuccess;

function urn_ast_AST_wsdl_AGLogCdrGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGLogCdrGet_onerror = urn_ast_AST_wsdl_AGLogCdrGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGLogCdrGet
// Wrapped operation.
// parameter filter
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter table
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter page
// - simple type {http://www.w3.org/2001/XMLSchema}int// parameter pagecount
// - simple type {http://www.w3.org/2001/XMLSchema}int//
function urn_ast_AST_wsdl_AGLogCdrGet_op(successCallback, errorCallback, filter, table, page, pagecount) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(4);
    args[0] = filter;
    args[1] = table;
    args[2] = page;
    args[3] = pagecount;
    xml = this.AGLogCdrGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGLogCdrGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGLogCdrGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGLogCdrGet = urn_ast_AST_wsdl_AGLogCdrGet_op;

function urn_ast_AST_wsdl_AGLogCdrGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGLogCdrGet();
    wrapperObj.setFilter(args[0]);
    wrapperObj.setTable(args[1]);
    wrapperObj.setPage(args[2]);
    wrapperObj.setPagecount(args[3]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGLogCdrGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGLogCdrGetRequest_serializeInput = urn_ast_AST_wsdl_AGLogCdrGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGLogCdrGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGLogCdrGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGRoutingGroupGetOne_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGRoutingGroupGetOneResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGRoutingGroupGetOneResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupGetOne_onsuccess = urn_ast_AST_wsdl_AGRoutingGroupGetOne_op_onsuccess;

function urn_ast_AST_wsdl_AGRoutingGroupGetOne_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupGetOne_onerror = urn_ast_AST_wsdl_AGRoutingGroupGetOne_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGRoutingGroupGetOne
// Wrapped operation.
// parameter section
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_AGRoutingGroupGetOne_op(successCallback, errorCallback, section) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = section;
    xml = this.AGRoutingGroupGetOneRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGRoutingGroupGetOne_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGRoutingGroupGetOne_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupGetOne = urn_ast_AST_wsdl_AGRoutingGroupGetOne_op;

function urn_ast_AST_wsdl_AGRoutingGroupGetOneRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGRoutingGroupGetOne();
    wrapperObj.setSection(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGRoutingGroupGetOne', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupGetOneRequest_serializeInput = urn_ast_AST_wsdl_AGRoutingGroupGetOneRequest_serializeInput;

function urn_ast_AST_wsdl_AGRoutingGroupGetOneResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGRoutingGroupGetOneResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSipBatchEndpointsSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSipBatchEndpointsSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSipBatchEndpointsSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipBatchEndpointsSave_onsuccess = urn_ast_AST_wsdl_AGSipBatchEndpointsSave_op_onsuccess;

function urn_ast_AST_wsdl_AGSipBatchEndpointsSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipBatchEndpointsSave_onerror = urn_ast_AST_wsdl_AGSipBatchEndpointsSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSipBatchEndpointsSave
// Wrapped operation.
// parameter save
// - Object constructor is AST_SipBatchArr
//
function urn_ast_AST_wsdl_AGSipBatchEndpointsSave_op(successCallback, errorCallback, save) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = save;
    xml = this.AGSipBatchEndpointsSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSipBatchEndpointsSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSipBatchEndpointsSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipBatchEndpointsSave = urn_ast_AST_wsdl_AGSipBatchEndpointsSave_op;

function urn_ast_AST_wsdl_AGSipBatchEndpointsSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSipBatchEndpointsSave();
    wrapperObj.setSave(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSipBatchEndpointsSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipBatchEndpointsSaveRequest_serializeInput = urn_ast_AST_wsdl_AGSipBatchEndpointsSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGSipBatchEndpointsSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSipBatchEndpointsSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_SipGeneralSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_SipGeneralSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_SipGeneralSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.SipGeneralSave_onsuccess = urn_ast_AST_wsdl_SipGeneralSave_op_onsuccess;

function urn_ast_AST_wsdl_SipGeneralSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.SipGeneralSave_onerror = urn_ast_AST_wsdl_SipGeneralSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}SipGeneralSave
// Wrapped operation.
// parameter oldSection
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter newSection
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter datachunk
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_SipGeneralSave_op(successCallback, errorCallback, oldSection, newSection, datachunk) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(3);
    args[0] = oldSection;
    args[1] = newSection;
    args[2] = datachunk;
    xml = this.SipGeneralSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.SipGeneralSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.SipGeneralSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.SipGeneralSave = urn_ast_AST_wsdl_SipGeneralSave_op;

function urn_ast_AST_wsdl_SipGeneralSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_SipGeneralSave();
    wrapperObj.setOldSection(args[0]);
    wrapperObj.setNewSection(args[1]);
    wrapperObj.setDatachunk(args[2]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:SipGeneralSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.SipGeneralSaveRequest_serializeInput = urn_ast_AST_wsdl_SipGeneralSaveRequest_serializeInput;

function urn_ast_AST_wsdl_SipGeneralSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_SipGeneralSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAlgChannelRemoveClient_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAlgChannelRemoveClientResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAlgChannelRemoveClientResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelRemoveClient_onsuccess = urn_ast_AST_wsdl_AGAlgChannelRemoveClient_op_onsuccess;

function urn_ast_AST_wsdl_AGAlgChannelRemoveClient_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelRemoveClient_onerror = urn_ast_AST_wsdl_AGAlgChannelRemoveClient_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAlgChannelRemoveClient
// Wrapped operation.
// parameter clientInfo
// - Object constructor is AST_ClientRemove
//
function urn_ast_AST_wsdl_AGAlgChannelRemoveClient_op(successCallback, errorCallback, clientInfo) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = clientInfo;
    xml = this.AGAlgChannelRemoveClientRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAlgChannelRemoveClient_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAlgChannelRemoveClient_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelRemoveClient = urn_ast_AST_wsdl_AGAlgChannelRemoveClient_op;

function urn_ast_AST_wsdl_AGAlgChannelRemoveClientRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAlgChannelRemoveClient();
    wrapperObj.setClientInfo(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAlgChannelRemoveClient', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelRemoveClientRequest_serializeInput = urn_ast_AST_wsdl_AGAlgChannelRemoveClientRequest_serializeInput;

function urn_ast_AST_wsdl_AGAlgChannelRemoveClientResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAlgChannelRemoveClientResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGjConSetKeyClib_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGjConSetKeyClibResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGjConSetKeyClibResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConSetKeyClib_onsuccess = urn_ast_AST_wsdl_AGjConSetKeyClib_op_onsuccess;

function urn_ast_AST_wsdl_AGjConSetKeyClib_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConSetKeyClib_onerror = urn_ast_AST_wsdl_AGjConSetKeyClib_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGjConSetKeyClib
// Wrapped operation.
// parameter board
// - simple type {http://www.w3.org/2001/XMLSchema}int// parameter keybaord
// - simple type {http://www.w3.org/2001/XMLSchema}int//
function urn_ast_AST_wsdl_AGjConSetKeyClib_op(successCallback, errorCallback, board, keybaord) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(2);
    args[0] = board;
    args[1] = keybaord;
    xml = this.AGjConSetKeyClibRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGjConSetKeyClib_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGjConSetKeyClib_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConSetKeyClib = urn_ast_AST_wsdl_AGjConSetKeyClib_op;

function urn_ast_AST_wsdl_AGjConSetKeyClibRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGjConSetKeyClib();
    wrapperObj.setBoard(args[0]);
    wrapperObj.setKeybaord(args[1]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGjConSetKeyClib', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConSetKeyClibRequest_serializeInput = urn_ast_AST_wsdl_AGjConSetKeyClibRequest_serializeInput;

function urn_ast_AST_wsdl_AGjConSetKeyClibResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGjConSetKeyClibResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAdvCloudGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAdvCloudGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAdvCloudGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvCloudGet_onsuccess = urn_ast_AST_wsdl_AGAdvCloudGet_op_onsuccess;

function urn_ast_AST_wsdl_AGAdvCloudGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvCloudGet_onerror = urn_ast_AST_wsdl_AGAdvCloudGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAdvCloudGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGAdvCloudGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGAdvCloudGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAdvCloudGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAdvCloudGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvCloudGet = urn_ast_AST_wsdl_AGAdvCloudGet_op;

function urn_ast_AST_wsdl_AGAdvCloudGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAdvCloudGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAdvCloudGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvCloudGetRequest_serializeInput = urn_ast_AST_wsdl_AGAdvCloudGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGAdvCloudGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAdvCloudGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_RoutingDel_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_RoutingDelResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_RoutingDelResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.RoutingDel_onsuccess = urn_ast_AST_wsdl_RoutingDel_op_onsuccess;

function urn_ast_AST_wsdl_RoutingDel_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.RoutingDel_onerror = urn_ast_AST_wsdl_RoutingDel_op_onerror;

//
// Operation {urn:ast/AST.wsdl}RoutingDel
// Wrapped operation.
// parameter routingName
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_RoutingDel_op(successCallback, errorCallback, routingName) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = routingName;
    xml = this.RoutingDelRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.RoutingDel_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.RoutingDel_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.RoutingDel = urn_ast_AST_wsdl_RoutingDel_op;

function urn_ast_AST_wsdl_RoutingDelRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_RoutingDel();
    wrapperObj.setRoutingName(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:RoutingDel', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.RoutingDelRequest_serializeInput = urn_ast_AST_wsdl_RoutingDelRequest_serializeInput;

function urn_ast_AST_wsdl_RoutingDelResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_RoutingDelResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSipEndpointGetAll_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSipEndpointGetAllResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSipEndpointGetAllResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipEndpointGetAll_onsuccess = urn_ast_AST_wsdl_AGSipEndpointGetAll_op_onsuccess;

function urn_ast_AST_wsdl_AGSipEndpointGetAll_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipEndpointGetAll_onerror = urn_ast_AST_wsdl_AGSipEndpointGetAll_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSipEndpointGetAll
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGSipEndpointGetAll_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGSipEndpointGetAllRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSipEndpointGetAll_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSipEndpointGetAll_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipEndpointGetAll = urn_ast_AST_wsdl_AGSipEndpointGetAll_op;

function urn_ast_AST_wsdl_AGSipEndpointGetAllRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSipEndpointGetAll();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSipEndpointGetAll', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipEndpointGetAllRequest_serializeInput = urn_ast_AST_wsdl_AGSipEndpointGetAllRequest_serializeInput;

function urn_ast_AST_wsdl_AGSipEndpointGetAllResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSipEndpointGetAllResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSipEndpointOperation_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSipEndpointOperationResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSipEndpointOperationResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipEndpointOperation_onsuccess = urn_ast_AST_wsdl_AGSipEndpointOperation_op_onsuccess;

function urn_ast_AST_wsdl_AGSipEndpointOperation_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipEndpointOperation_onerror = urn_ast_AST_wsdl_AGSipEndpointOperation_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSipEndpointOperation
// Wrapped operation.
// parameter mode
// - simple type {http://www.w3.org/2001/XMLSchema}unsignedByte// parameter user
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter passwd
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter hostip
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter port
// - simple type {http://www.w3.org/2001/XMLSchema}unsignedInt//
function urn_ast_AST_wsdl_AGSipEndpointOperation_op(successCallback, errorCallback, mode, user, passwd, hostip, port) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(5);
    args[0] = mode;
    args[1] = user;
    args[2] = passwd;
    args[3] = hostip;
    args[4] = port;
    xml = this.AGSipEndpointOperationRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSipEndpointOperation_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSipEndpointOperation_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipEndpointOperation = urn_ast_AST_wsdl_AGSipEndpointOperation_op;

function urn_ast_AST_wsdl_AGSipEndpointOperationRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSipEndpointOperation();
    wrapperObj.setMode(args[0]);
    wrapperObj.setUser(args[1]);
    wrapperObj.setPasswd(args[2]);
    wrapperObj.setHostip(args[3]);
    wrapperObj.setPort(args[4]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSipEndpointOperation', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipEndpointOperationRequest_serializeInput = urn_ast_AST_wsdl_AGSipEndpointOperationRequest_serializeInput;

function urn_ast_AST_wsdl_AGSipEndpointOperationResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSipEndpointOperationResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGNetworkBurnMac_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGNetworkBurnMacResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGNetworkBurnMacResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkBurnMac_onsuccess = urn_ast_AST_wsdl_AGNetworkBurnMac_op_onsuccess;

function urn_ast_AST_wsdl_AGNetworkBurnMac_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkBurnMac_onerror = urn_ast_AST_wsdl_AGNetworkBurnMac_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGNetworkBurnMac
// Wrapped operation.
// parameter LanMac
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter WanMac
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_AGNetworkBurnMac_op(successCallback, errorCallback, LanMac, WanMac) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(2);
    args[0] = LanMac;
    args[1] = WanMac;
    xml = this.AGNetworkBurnMacRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGNetworkBurnMac_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGNetworkBurnMac_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkBurnMac = urn_ast_AST_wsdl_AGNetworkBurnMac_op;

function urn_ast_AST_wsdl_AGNetworkBurnMacRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGNetworkBurnMac();
    wrapperObj.setLanMac(args[0]);
    wrapperObj.setWanMac(args[1]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGNetworkBurnMac', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkBurnMacRequest_serializeInput = urn_ast_AST_wsdl_AGNetworkBurnMacRequest_serializeInput;

function urn_ast_AST_wsdl_AGNetworkBurnMacResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGNetworkBurnMacResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGCommitSwitch_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGCommitSwitchResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGCommitSwitchResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGCommitSwitch_onsuccess = urn_ast_AST_wsdl_AGCommitSwitch_op_onsuccess;

function urn_ast_AST_wsdl_AGCommitSwitch_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGCommitSwitch_onerror = urn_ast_AST_wsdl_AGCommitSwitch_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGCommitSwitch
// Wrapped operation.
// parameter commitsw
// - simple type {http://www.w3.org/2001/XMLSchema}int//
function urn_ast_AST_wsdl_AGCommitSwitch_op(successCallback, errorCallback, commitsw) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = commitsw;
    xml = this.AGCommitSwitchRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGCommitSwitch_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGCommitSwitch_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGCommitSwitch = urn_ast_AST_wsdl_AGCommitSwitch_op;

function urn_ast_AST_wsdl_AGCommitSwitchRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGCommitSwitch();
    wrapperObj.setCommitsw(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGCommitSwitch', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGCommitSwitchRequest_serializeInput = urn_ast_AST_wsdl_AGCommitSwitchRequest_serializeInput;

function urn_ast_AST_wsdl_AGCommitSwitchResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGCommitSwitchResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_IaxSaveEndpoint_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_IaxSaveEndpointResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_IaxSaveEndpointResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.IaxSaveEndpoint_onsuccess = urn_ast_AST_wsdl_IaxSaveEndpoint_op_onsuccess;

function urn_ast_AST_wsdl_IaxSaveEndpoint_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.IaxSaveEndpoint_onerror = urn_ast_AST_wsdl_IaxSaveEndpoint_op_onerror;

//
// Operation {urn:ast/AST.wsdl}IaxSaveEndpoint
// Wrapped operation.
// parameter oldEndpoint
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter newEndpoint
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter datachunk
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_IaxSaveEndpoint_op(successCallback, errorCallback, oldEndpoint, newEndpoint, datachunk) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(3);
    args[0] = oldEndpoint;
    args[1] = newEndpoint;
    args[2] = datachunk;
    xml = this.IaxSaveEndpointRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.IaxSaveEndpoint_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.IaxSaveEndpoint_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.IaxSaveEndpoint = urn_ast_AST_wsdl_IaxSaveEndpoint_op;

function urn_ast_AST_wsdl_IaxSaveEndpointRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_IaxSaveEndpoint();
    wrapperObj.setOldEndpoint(args[0]);
    wrapperObj.setNewEndpoint(args[1]);
    wrapperObj.setDatachunk(args[2]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:IaxSaveEndpoint', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.IaxSaveEndpointRequest_serializeInput = urn_ast_AST_wsdl_IaxSaveEndpointRequest_serializeInput;

function urn_ast_AST_wsdl_IaxSaveEndpointResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_IaxSaveEndpointResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAlgGlbSettingSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAlgGlbSettingSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAlgGlbSettingSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgGlbSettingSave_onsuccess = urn_ast_AST_wsdl_AGAlgGlbSettingSave_op_onsuccess;

function urn_ast_AST_wsdl_AGAlgGlbSettingSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgGlbSettingSave_onerror = urn_ast_AST_wsdl_AGAlgGlbSettingSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAlgGlbSettingSave
// Wrapped operation.
// parameter save
// - Object constructor is AST_AlgGlbSave
// parameter flag
// - simple type {http://www.w3.org/2001/XMLSchema}int//
function urn_ast_AST_wsdl_AGAlgGlbSettingSave_op(successCallback, errorCallback, save, flag) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(2);
    args[0] = save;
    args[1] = flag;
    xml = this.AGAlgGlbSettingSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAlgGlbSettingSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAlgGlbSettingSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgGlbSettingSave = urn_ast_AST_wsdl_AGAlgGlbSettingSave_op;

function urn_ast_AST_wsdl_AGAlgGlbSettingSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAlgGlbSettingSave();
    wrapperObj.setSave(args[0]);
    wrapperObj.setFlag(args[1]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAlgGlbSettingSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgGlbSettingSaveRequest_serializeInput = urn_ast_AST_wsdl_AGAlgGlbSettingSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGAlgGlbSettingSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAlgGlbSettingSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAlgChannelAddOne_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAlgChannelAddOneResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAlgChannelAddOneResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelAddOne_onsuccess = urn_ast_AST_wsdl_AGAlgChannelAddOne_op_onsuccess;

function urn_ast_AST_wsdl_AGAlgChannelAddOne_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelAddOne_onerror = urn_ast_AST_wsdl_AGAlgChannelAddOne_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAlgChannelAddOne
// Wrapped operation.
// parameter channel
// - simple type {http://www.w3.org/2001/XMLSchema}unsignedShort// parameter signal
// - simple type {http://www.w3.org/2001/XMLSchema}unsignedByte//
function urn_ast_AST_wsdl_AGAlgChannelAddOne_op(successCallback, errorCallback, channel, signal) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(2);
    args[0] = channel;
    args[1] = signal;
    xml = this.AGAlgChannelAddOneRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAlgChannelAddOne_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAlgChannelAddOne_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelAddOne = urn_ast_AST_wsdl_AGAlgChannelAddOne_op;

function urn_ast_AST_wsdl_AGAlgChannelAddOneRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAlgChannelAddOne();
    wrapperObj.setChannel(args[0]);
    wrapperObj.setSignal(args[1]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAlgChannelAddOne', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelAddOneRequest_serializeInput = urn_ast_AST_wsdl_AGAlgChannelAddOneRequest_serializeInput;

function urn_ast_AST_wsdl_AGAlgChannelAddOneResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAlgChannelAddOneResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSystemDHCPUpdateSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSystemDHCPUpdateSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSystemDHCPUpdateSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemDHCPUpdateSave_onsuccess = urn_ast_AST_wsdl_AGSystemDHCPUpdateSave_op_onsuccess;

function urn_ast_AST_wsdl_AGSystemDHCPUpdateSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemDHCPUpdateSave_onerror = urn_ast_AST_wsdl_AGSystemDHCPUpdateSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSystemDHCPUpdateSave
// Wrapped operation.
// parameter enable
// - simple type {http://www.w3.org/2001/XMLSchema}unsignedByte//
function urn_ast_AST_wsdl_AGSystemDHCPUpdateSave_op(successCallback, errorCallback, enable) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = enable;
    xml = this.AGSystemDHCPUpdateSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSystemDHCPUpdateSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSystemDHCPUpdateSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemDHCPUpdateSave = urn_ast_AST_wsdl_AGSystemDHCPUpdateSave_op;

function urn_ast_AST_wsdl_AGSystemDHCPUpdateSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSystemDHCPUpdateSave();
    wrapperObj.setEnable(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSystemDHCPUpdateSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemDHCPUpdateSaveRequest_serializeInput = urn_ast_AST_wsdl_AGSystemDHCPUpdateSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGSystemDHCPUpdateSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSystemDHCPUpdateSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSyncAll_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSyncAllResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSyncAllResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSyncAll_onsuccess = urn_ast_AST_wsdl_AGSyncAll_op_onsuccess;

function urn_ast_AST_wsdl_AGSyncAll_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSyncAll_onerror = urn_ast_AST_wsdl_AGSyncAll_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSyncAll
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGSyncAll_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGSyncAllRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSyncAll_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSyncAll_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSyncAll = urn_ast_AST_wsdl_AGSyncAll_op;

function urn_ast_AST_wsdl_AGSyncAllRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSyncAll();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSyncAll', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSyncAllRequest_serializeInput = urn_ast_AST_wsdl_AGSyncAllRequest_serializeInput;

function urn_ast_AST_wsdl_AGSyncAllResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSyncAllResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGNetworkIPSettings_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGNetworkIPSettingsResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGNetworkIPSettingsResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkIPSettings_onsuccess = urn_ast_AST_wsdl_AGNetworkIPSettings_op_onsuccess;

function urn_ast_AST_wsdl_AGNetworkIPSettings_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkIPSettings_onerror = urn_ast_AST_wsdl_AGNetworkIPSettings_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGNetworkIPSettings
// Wrapped operation.
// parameter ipaddr
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter netmask
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter gateway
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_AGNetworkIPSettings_op(successCallback, errorCallback, ipaddr, netmask, gateway) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(3);
    args[0] = ipaddr;
    args[1] = netmask;
    args[2] = gateway;
    xml = this.AGNetworkIPSettingsRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGNetworkIPSettings_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGNetworkIPSettings_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkIPSettings = urn_ast_AST_wsdl_AGNetworkIPSettings_op;

function urn_ast_AST_wsdl_AGNetworkIPSettingsRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGNetworkIPSettings();
    wrapperObj.setIpaddr(args[0]);
    wrapperObj.setNetmask(args[1]);
    wrapperObj.setGateway(args[2]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGNetworkIPSettings', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkIPSettingsRequest_serializeInput = urn_ast_AST_wsdl_AGNetworkIPSettingsRequest_serializeInput;

function urn_ast_AST_wsdl_AGNetworkIPSettingsResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGNetworkIPSettingsResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGNetworkOpenvpnSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGNetworkOpenvpnSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGNetworkOpenvpnSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkOpenvpnSave_onsuccess = urn_ast_AST_wsdl_AGNetworkOpenvpnSave_op_onsuccess;

function urn_ast_AST_wsdl_AGNetworkOpenvpnSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkOpenvpnSave_onerror = urn_ast_AST_wsdl_AGNetworkOpenvpnSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGNetworkOpenvpnSave
// Wrapped operation.
// parameter save
// - Object constructor is AST_NetworkOpenvpn
//
function urn_ast_AST_wsdl_AGNetworkOpenvpnSave_op(successCallback, errorCallback, save) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = save;
    xml = this.AGNetworkOpenvpnSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGNetworkOpenvpnSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGNetworkOpenvpnSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkOpenvpnSave = urn_ast_AST_wsdl_AGNetworkOpenvpnSave_op;

function urn_ast_AST_wsdl_AGNetworkOpenvpnSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGNetworkOpenvpnSave();
    wrapperObj.setSave(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGNetworkOpenvpnSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkOpenvpnSaveRequest_serializeInput = urn_ast_AST_wsdl_AGNetworkOpenvpnSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGNetworkOpenvpnSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGNetworkOpenvpnSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAlgAutoCallTest_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAlgAutoCallTestResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAlgAutoCallTestResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgAutoCallTest_onsuccess = urn_ast_AST_wsdl_AGAlgAutoCallTest_op_onsuccess;

function urn_ast_AST_wsdl_AGAlgAutoCallTest_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgAutoCallTest_onerror = urn_ast_AST_wsdl_AGAlgAutoCallTest_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAlgAutoCallTest
// Wrapped operation.
// parameter test
// - Object constructor is AST_AutoCallTest
//
function urn_ast_AST_wsdl_AGAlgAutoCallTest_op(successCallback, errorCallback, test) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = test;
    xml = this.AGAlgAutoCallTestRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAlgAutoCallTest_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAlgAutoCallTest_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgAutoCallTest = urn_ast_AST_wsdl_AGAlgAutoCallTest_op;

function urn_ast_AST_wsdl_AGAlgAutoCallTestRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAlgAutoCallTest();
    wrapperObj.setTest(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAlgAutoCallTest', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgAutoCallTestRequest_serializeInput = urn_ast_AST_wsdl_AGAlgAutoCallTestRequest_serializeInput;

function urn_ast_AST_wsdl_AGAlgAutoCallTestResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAlgAutoCallTestResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSipSecuritySave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSipSecuritySaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSipSecuritySaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipSecuritySave_onsuccess = urn_ast_AST_wsdl_AGSipSecuritySave_op_onsuccess;

function urn_ast_AST_wsdl_AGSipSecuritySave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipSecuritySave_onerror = urn_ast_AST_wsdl_AGSipSecuritySave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSipSecuritySave
// Wrapped operation.
// parameter sec
// - Object constructor is AST_SipSecSave
//
function urn_ast_AST_wsdl_AGSipSecuritySave_op(successCallback, errorCallback, sec) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = sec;
    xml = this.AGSipSecuritySaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSipSecuritySave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSipSecuritySave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipSecuritySave = urn_ast_AST_wsdl_AGSipSecuritySave_op;

function urn_ast_AST_wsdl_AGSipSecuritySaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSipSecuritySave();
    wrapperObj.setSec(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSipSecuritySave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipSecuritySaveRequest_serializeInput = urn_ast_AST_wsdl_AGSipSecuritySaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGSipSecuritySaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSipSecuritySaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAlgDialtableGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAlgDialtableGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAlgDialtableGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgDialtableGet_onsuccess = urn_ast_AST_wsdl_AGAlgDialtableGet_op_onsuccess;

function urn_ast_AST_wsdl_AGAlgDialtableGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgDialtableGet_onerror = urn_ast_AST_wsdl_AGAlgDialtableGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAlgDialtableGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGAlgDialtableGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGAlgDialtableGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAlgDialtableGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAlgDialtableGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgDialtableGet = urn_ast_AST_wsdl_AGAlgDialtableGet_op;

function urn_ast_AST_wsdl_AGAlgDialtableGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAlgDialtableGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAlgDialtableGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgDialtableGetRequest_serializeInput = urn_ast_AST_wsdl_AGAlgDialtableGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGAlgDialtableGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAlgDialtableGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSipBendpointSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSipBendpointSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSipBendpointSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipBendpointSave_onsuccess = urn_ast_AST_wsdl_AGSipBendpointSave_op_onsuccess;

function urn_ast_AST_wsdl_AGSipBendpointSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipBendpointSave_onerror = urn_ast_AST_wsdl_AGSipBendpointSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSipBendpointSave
// Wrapped operation.
// parameter save
// - Object constructor is AST_SipBendSave
//
function urn_ast_AST_wsdl_AGSipBendpointSave_op(successCallback, errorCallback, save) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = save;
    xml = this.AGSipBendpointSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSipBendpointSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSipBendpointSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipBendpointSave = urn_ast_AST_wsdl_AGSipBendpointSave_op;

function urn_ast_AST_wsdl_AGSipBendpointSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSipBendpointSave();
    wrapperObj.setSave(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSipBendpointSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipBendpointSaveRequest_serializeInput = urn_ast_AST_wsdl_AGSipBendpointSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGSipBendpointSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSipBendpointSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGLogSettingsGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGLogSettingsGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGLogSettingsGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGLogSettingsGet_onsuccess = urn_ast_AST_wsdl_AGLogSettingsGet_op_onsuccess;

function urn_ast_AST_wsdl_AGLogSettingsGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGLogSettingsGet_onerror = urn_ast_AST_wsdl_AGLogSettingsGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGLogSettingsGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGLogSettingsGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGLogSettingsGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGLogSettingsGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGLogSettingsGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGLogSettingsGet = urn_ast_AST_wsdl_AGLogSettingsGet_op;

function urn_ast_AST_wsdl_AGLogSettingsGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGLogSettingsGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGLogSettingsGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGLogSettingsGetRequest_serializeInput = urn_ast_AST_wsdl_AGLogSettingsGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGLogSettingsGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGLogSettingsGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAlgFunkyGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAlgFunkyGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAlgFunkyGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgFunkyGet_onsuccess = urn_ast_AST_wsdl_AGAlgFunkyGet_op_onsuccess;

function urn_ast_AST_wsdl_AGAlgFunkyGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgFunkyGet_onerror = urn_ast_AST_wsdl_AGAlgFunkyGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAlgFunkyGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGAlgFunkyGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGAlgFunkyGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAlgFunkyGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAlgFunkyGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgFunkyGet = urn_ast_AST_wsdl_AGAlgFunkyGet_op;

function urn_ast_AST_wsdl_AGAlgFunkyGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAlgFunkyGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAlgFunkyGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgFunkyGetRequest_serializeInput = urn_ast_AST_wsdl_AGAlgFunkyGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGAlgFunkyGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAlgFunkyGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_IaxGeneralGetAll_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_IaxGeneralGetAllResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_IaxGeneralGetAllResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.IaxGeneralGetAll_onsuccess = urn_ast_AST_wsdl_IaxGeneralGetAll_op_onsuccess;

function urn_ast_AST_wsdl_IaxGeneralGetAll_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.IaxGeneralGetAll_onerror = urn_ast_AST_wsdl_IaxGeneralGetAll_op_onerror;

//
// Operation {urn:ast/AST.wsdl}IaxGeneralGetAll
// Wrapped operation.
//
function urn_ast_AST_wsdl_IaxGeneralGetAll_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.IaxGeneralGetAllRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.IaxGeneralGetAll_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.IaxGeneralGetAll_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.IaxGeneralGetAll = urn_ast_AST_wsdl_IaxGeneralGetAll_op;

function urn_ast_AST_wsdl_IaxGeneralGetAllRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_IaxGeneralGetAll();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:IaxGeneralGetAll', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.IaxGeneralGetAllRequest_serializeInput = urn_ast_AST_wsdl_IaxGeneralGetAllRequest_serializeInput;

function urn_ast_AST_wsdl_IaxGeneralGetAllResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_IaxGeneralGetAllResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_GroupDel_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_GroupDelResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_GroupDelResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.GroupDel_onsuccess = urn_ast_AST_wsdl_GroupDel_op_onsuccess;

function urn_ast_AST_wsdl_GroupDel_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.GroupDel_onerror = urn_ast_AST_wsdl_GroupDel_op_onerror;

//
// Operation {urn:ast/AST.wsdl}GroupDel
// Wrapped operation.
// parameter groupName
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_GroupDel_op(successCallback, errorCallback, groupName) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = groupName;
    xml = this.GroupDelRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.GroupDel_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.GroupDel_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.GroupDel = urn_ast_AST_wsdl_GroupDel_op;

function urn_ast_AST_wsdl_GroupDelRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_GroupDel();
    wrapperObj.setGroupName(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:GroupDel', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.GroupDelRequest_serializeInput = urn_ast_AST_wsdl_GroupDelRequest_serializeInput;

function urn_ast_AST_wsdl_GroupDelResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_GroupDelResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGCommitChekout_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGCommitChekoutResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGCommitChekoutResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGCommitChekout_onsuccess = urn_ast_AST_wsdl_AGCommitChekout_op_onsuccess;

function urn_ast_AST_wsdl_AGCommitChekout_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGCommitChekout_onerror = urn_ast_AST_wsdl_AGCommitChekout_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGCommitChekout
// Wrapped operation.
// parameter message
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter commitid
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_AGCommitChekout_op(successCallback, errorCallback, message, commitid) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(2);
    args[0] = message;
    args[1] = commitid;
    xml = this.AGCommitChekoutRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGCommitChekout_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGCommitChekout_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGCommitChekout = urn_ast_AST_wsdl_AGCommitChekout_op;

function urn_ast_AST_wsdl_AGCommitChekoutRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGCommitChekout();
    wrapperObj.setMessage(args[0]);
    wrapperObj.setCommitid(args[1]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGCommitChekout', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGCommitChekoutRequest_serializeInput = urn_ast_AST_wsdl_AGCommitChekoutRequest_serializeInput;

function urn_ast_AST_wsdl_AGCommitChekoutResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGCommitChekoutResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGUcpAlgDriverGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGUcpAlgDriverGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGUcpAlgDriverGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgDriverGet_onsuccess = urn_ast_AST_wsdl_AGUcpAlgDriverGet_op_onsuccess;

function urn_ast_AST_wsdl_AGUcpAlgDriverGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgDriverGet_onerror = urn_ast_AST_wsdl_AGUcpAlgDriverGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGUcpAlgDriverGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGUcpAlgDriverGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGUcpAlgDriverGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGUcpAlgDriverGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGUcpAlgDriverGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgDriverGet = urn_ast_AST_wsdl_AGUcpAlgDriverGet_op;

function urn_ast_AST_wsdl_AGUcpAlgDriverGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGUcpAlgDriverGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGUcpAlgDriverGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpAlgDriverGetRequest_serializeInput = urn_ast_AST_wsdl_AGUcpAlgDriverGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGUcpAlgDriverGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGUcpAlgDriverGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGNetworkLanGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGNetworkLanGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGNetworkLanGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkLanGet_onsuccess = urn_ast_AST_wsdl_AGNetworkLanGet_op_onsuccess;

function urn_ast_AST_wsdl_AGNetworkLanGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkLanGet_onerror = urn_ast_AST_wsdl_AGNetworkLanGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGNetworkLanGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGNetworkLanGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGNetworkLanGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGNetworkLanGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGNetworkLanGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkLanGet = urn_ast_AST_wsdl_AGNetworkLanGet_op;

function urn_ast_AST_wsdl_AGNetworkLanGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGNetworkLanGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGNetworkLanGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkLanGetRequest_serializeInput = urn_ast_AST_wsdl_AGNetworkLanGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGNetworkLanGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGNetworkLanGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSystemDHCPUpdateGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSystemDHCPUpdateGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSystemDHCPUpdateGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemDHCPUpdateGet_onsuccess = urn_ast_AST_wsdl_AGSystemDHCPUpdateGet_op_onsuccess;

function urn_ast_AST_wsdl_AGSystemDHCPUpdateGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemDHCPUpdateGet_onerror = urn_ast_AST_wsdl_AGSystemDHCPUpdateGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSystemDHCPUpdateGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGSystemDHCPUpdateGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGSystemDHCPUpdateGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSystemDHCPUpdateGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSystemDHCPUpdateGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemDHCPUpdateGet = urn_ast_AST_wsdl_AGSystemDHCPUpdateGet_op;

function urn_ast_AST_wsdl_AGSystemDHCPUpdateGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSystemDHCPUpdateGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSystemDHCPUpdateGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemDHCPUpdateGetRequest_serializeInput = urn_ast_AST_wsdl_AGSystemDHCPUpdateGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGSystemDHCPUpdateGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSystemDHCPUpdateGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAdvAstfileeditorEditGetAll_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAdvAstfileeditorEditGetAllResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAdvAstfileeditorEditGetAllResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstfileeditorEditGetAll_onsuccess = urn_ast_AST_wsdl_AGAdvAstfileeditorEditGetAll_op_onsuccess;

function urn_ast_AST_wsdl_AGAdvAstfileeditorEditGetAll_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstfileeditorEditGetAll_onerror = urn_ast_AST_wsdl_AGAdvAstfileeditorEditGetAll_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAdvAstfileeditorEditGetAll
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGAdvAstfileeditorEditGetAll_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGAdvAstfileeditorEditGetAllRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAdvAstfileeditorEditGetAll_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAdvAstfileeditorEditGetAll_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstfileeditorEditGetAll = urn_ast_AST_wsdl_AGAdvAstfileeditorEditGetAll_op;

function urn_ast_AST_wsdl_AGAdvAstfileeditorEditGetAllRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAdvAstfileeditorEditGetAll();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAdvAstfileeditorEditGetAll', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstfileeditorEditGetAllRequest_serializeInput = urn_ast_AST_wsdl_AGAdvAstfileeditorEditGetAllRequest_serializeInput;

function urn_ast_AST_wsdl_AGAdvAstfileeditorEditGetAllResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAdvAstfileeditorEditGetAllResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGNetworkRulesSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGNetworkRulesSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGNetworkRulesSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkRulesSave_onsuccess = urn_ast_AST_wsdl_AGNetworkRulesSave_op_onsuccess;

function urn_ast_AST_wsdl_AGNetworkRulesSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkRulesSave_onerror = urn_ast_AST_wsdl_AGNetworkRulesSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGNetworkRulesSave
// Wrapped operation.
// parameter oldname
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter newname
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter save
// - Object constructor is AST_UcpNetworkRules
//
function urn_ast_AST_wsdl_AGNetworkRulesSave_op(successCallback, errorCallback, oldname, newname, save) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(3);
    args[0] = oldname;
    args[1] = newname;
    args[2] = save;
    xml = this.AGNetworkRulesSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGNetworkRulesSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGNetworkRulesSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkRulesSave = urn_ast_AST_wsdl_AGNetworkRulesSave_op;

function urn_ast_AST_wsdl_AGNetworkRulesSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGNetworkRulesSave();
    wrapperObj.setOldname(args[0]);
    wrapperObj.setNewname(args[1]);
    wrapperObj.setSave(args[2]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGNetworkRulesSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkRulesSaveRequest_serializeInput = urn_ast_AST_wsdl_AGNetworkRulesSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGNetworkRulesSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGNetworkRulesSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGNetworkDdnsGetAll_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGNetworkDdnsGetAllResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGNetworkDdnsGetAllResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkDdnsGetAll_onsuccess = urn_ast_AST_wsdl_AGNetworkDdnsGetAll_op_onsuccess;

function urn_ast_AST_wsdl_AGNetworkDdnsGetAll_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkDdnsGetAll_onerror = urn_ast_AST_wsdl_AGNetworkDdnsGetAll_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGNetworkDdnsGetAll
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGNetworkDdnsGetAll_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGNetworkDdnsGetAllRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGNetworkDdnsGetAll_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGNetworkDdnsGetAll_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkDdnsGetAll = urn_ast_AST_wsdl_AGNetworkDdnsGetAll_op;

function urn_ast_AST_wsdl_AGNetworkDdnsGetAllRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGNetworkDdnsGetAll();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGNetworkDdnsGetAll', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkDdnsGetAllRequest_serializeInput = urn_ast_AST_wsdl_AGNetworkDdnsGetAllRequest_serializeInput;

function urn_ast_AST_wsdl_AGNetworkDdnsGetAllResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGNetworkDdnsGetAllResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSipEndpointsNewGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSipEndpointsNewGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSipEndpointsNewGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipEndpointsNewGet_onsuccess = urn_ast_AST_wsdl_AGSipEndpointsNewGet_op_onsuccess;

function urn_ast_AST_wsdl_AGSipEndpointsNewGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipEndpointsNewGet_onerror = urn_ast_AST_wsdl_AGSipEndpointsNewGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSipEndpointsNewGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGSipEndpointsNewGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGSipEndpointsNewGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSipEndpointsNewGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSipEndpointsNewGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipEndpointsNewGet = urn_ast_AST_wsdl_AGSipEndpointsNewGet_op;

function urn_ast_AST_wsdl_AGSipEndpointsNewGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSipEndpointsNewGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSipEndpointsNewGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipEndpointsNewGetRequest_serializeInput = urn_ast_AST_wsdl_AGSipEndpointsNewGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGSipEndpointsNewGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSipEndpointsNewGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGRoutingGroupsDel_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGRoutingGroupsDelResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGRoutingGroupsDelResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupsDel_onsuccess = urn_ast_AST_wsdl_AGRoutingGroupsDel_op_onsuccess;

function urn_ast_AST_wsdl_AGRoutingGroupsDel_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupsDel_onerror = urn_ast_AST_wsdl_AGRoutingGroupsDel_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGRoutingGroupsDel
// Wrapped operation.
// parameter sections
// - Object constructor is AST_SectionArr
//
function urn_ast_AST_wsdl_AGRoutingGroupsDel_op(successCallback, errorCallback, sections) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = sections;
    xml = this.AGRoutingGroupsDelRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGRoutingGroupsDel_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGRoutingGroupsDel_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupsDel = urn_ast_AST_wsdl_AGRoutingGroupsDel_op;

function urn_ast_AST_wsdl_AGRoutingGroupsDelRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGRoutingGroupsDel();
    wrapperObj.setSections(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGRoutingGroupsDel', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupsDelRequest_serializeInput = urn_ast_AST_wsdl_AGRoutingGroupsDelRequest_serializeInput;

function urn_ast_AST_wsdl_AGRoutingGroupsDelResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGRoutingGroupsDelResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSipEndpointsSync_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSipEndpointsSyncResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSipEndpointsSyncResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipEndpointsSync_onsuccess = urn_ast_AST_wsdl_AGSipEndpointsSync_op_onsuccess;

function urn_ast_AST_wsdl_AGSipEndpointsSync_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipEndpointsSync_onerror = urn_ast_AST_wsdl_AGSipEndpointsSync_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSipEndpointsSync
// Wrapped operation.
// parameter lines
// - Object constructor is AST_LineArr
// parameter sections
// - Object constructor is AST_SectionArr
//
function urn_ast_AST_wsdl_AGSipEndpointsSync_op(successCallback, errorCallback, lines, sections) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(2);
    args[0] = lines;
    args[1] = sections;
    xml = this.AGSipEndpointsSyncRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSipEndpointsSync_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSipEndpointsSync_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipEndpointsSync = urn_ast_AST_wsdl_AGSipEndpointsSync_op;

function urn_ast_AST_wsdl_AGSipEndpointsSyncRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSipEndpointsSync();
    wrapperObj.setLines(args[0]);
    wrapperObj.setSections(args[1]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSipEndpointsSync', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipEndpointsSyncRequest_serializeInput = urn_ast_AST_wsdl_AGSipEndpointsSyncRequest_serializeInput;

function urn_ast_AST_wsdl_AGSipEndpointsSyncResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSipEndpointsSyncResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSysTimeGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSysTimeGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSysTimeGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysTimeGet_onsuccess = urn_ast_AST_wsdl_AGSysTimeGet_op_onsuccess;

function urn_ast_AST_wsdl_AGSysTimeGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysTimeGet_onerror = urn_ast_AST_wsdl_AGSysTimeGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSysTimeGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGSysTimeGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGSysTimeGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSysTimeGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSysTimeGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysTimeGet = urn_ast_AST_wsdl_AGSysTimeGet_op;

function urn_ast_AST_wsdl_AGSysTimeGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSysTimeGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSysTimeGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysTimeGetRequest_serializeInput = urn_ast_AST_wsdl_AGSysTimeGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGSysTimeGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSysTimeGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSystemToolGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSystemToolGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSystemToolGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolGet_onsuccess = urn_ast_AST_wsdl_AGSystemToolGet_op_onsuccess;

function urn_ast_AST_wsdl_AGSystemToolGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolGet_onerror = urn_ast_AST_wsdl_AGSystemToolGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSystemToolGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGSystemToolGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGSystemToolGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSystemToolGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSystemToolGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolGet = urn_ast_AST_wsdl_AGSystemToolGet_op;

function urn_ast_AST_wsdl_AGSystemToolGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSystemToolGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSystemToolGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolGetRequest_serializeInput = urn_ast_AST_wsdl_AGSystemToolGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGSystemToolGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSystemToolGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSystemToolsAsteriskReboot_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSystemToolsAsteriskRebootResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSystemToolsAsteriskRebootResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolsAsteriskReboot_onsuccess = urn_ast_AST_wsdl_AGSystemToolsAsteriskReboot_op_onsuccess;

function urn_ast_AST_wsdl_AGSystemToolsAsteriskReboot_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolsAsteriskReboot_onerror = urn_ast_AST_wsdl_AGSystemToolsAsteriskReboot_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSystemToolsAsteriskReboot
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGSystemToolsAsteriskReboot_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGSystemToolsAsteriskRebootRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSystemToolsAsteriskReboot_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSystemToolsAsteriskReboot_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolsAsteriskReboot = urn_ast_AST_wsdl_AGSystemToolsAsteriskReboot_op;

function urn_ast_AST_wsdl_AGSystemToolsAsteriskRebootRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSystemToolsAsteriskReboot();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSystemToolsAsteriskReboot', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolsAsteriskRebootRequest_serializeInput = urn_ast_AST_wsdl_AGSystemToolsAsteriskRebootRequest_serializeInput;

function urn_ast_AST_wsdl_AGSystemToolsAsteriskRebootResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSystemToolsAsteriskRebootResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAlgAutoCallSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAlgAutoCallSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAlgAutoCallSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgAutoCallSave_onsuccess = urn_ast_AST_wsdl_AGAlgAutoCallSave_op_onsuccess;

function urn_ast_AST_wsdl_AGAlgAutoCallSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgAutoCallSave_onerror = urn_ast_AST_wsdl_AGAlgAutoCallSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAlgAutoCallSave
// Wrapped operation.
// parameter save
// - Object constructor is AST_AutoCallSave
//
function urn_ast_AST_wsdl_AGAlgAutoCallSave_op(successCallback, errorCallback, save) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = save;
    xml = this.AGAlgAutoCallSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAlgAutoCallSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAlgAutoCallSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgAutoCallSave = urn_ast_AST_wsdl_AGAlgAutoCallSave_op;

function urn_ast_AST_wsdl_AGAlgAutoCallSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAlgAutoCallSave();
    wrapperObj.setSave(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAlgAutoCallSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgAutoCallSaveRequest_serializeInput = urn_ast_AST_wsdl_AGAlgAutoCallSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGAlgAutoCallSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAlgAutoCallSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGNetworkWanGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGNetworkWanGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGNetworkWanGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkWanGet_onsuccess = urn_ast_AST_wsdl_AGNetworkWanGet_op_onsuccess;

function urn_ast_AST_wsdl_AGNetworkWanGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkWanGet_onerror = urn_ast_AST_wsdl_AGNetworkWanGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGNetworkWanGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGNetworkWanGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGNetworkWanGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGNetworkWanGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGNetworkWanGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkWanGet = urn_ast_AST_wsdl_AGNetworkWanGet_op;

function urn_ast_AST_wsdl_AGNetworkWanGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGNetworkWanGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGNetworkWanGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkWanGetRequest_serializeInput = urn_ast_AST_wsdl_AGNetworkWanGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGNetworkWanGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGNetworkWanGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGjConGetKeys_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGjConGetKeysResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGjConGetKeysResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConGetKeys_onsuccess = urn_ast_AST_wsdl_AGjConGetKeys_op_onsuccess;

function urn_ast_AST_wsdl_AGjConGetKeys_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConGetKeys_onerror = urn_ast_AST_wsdl_AGjConGetKeys_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGjConGetKeys
// Wrapped operation.
// parameter board
// - simple type {http://www.w3.org/2001/XMLSchema}int// parameter keybaord
// - simple type {http://www.w3.org/2001/XMLSchema}int//
function urn_ast_AST_wsdl_AGjConGetKeys_op(successCallback, errorCallback, board, keybaord) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(2);
    args[0] = board;
    args[1] = keybaord;
    xml = this.AGjConGetKeysRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGjConGetKeys_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGjConGetKeys_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConGetKeys = urn_ast_AST_wsdl_AGjConGetKeys_op;

function urn_ast_AST_wsdl_AGjConGetKeysRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGjConGetKeys();
    wrapperObj.setBoard(args[0]);
    wrapperObj.setKeybaord(args[1]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGjConGetKeys', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConGetKeysRequest_serializeInput = urn_ast_AST_wsdl_AGjConGetKeysRequest_serializeInput;

function urn_ast_AST_wsdl_AGjConGetKeysResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGjConGetKeysResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGNetworkRulesGetOne_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGNetworkRulesGetOneResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGNetworkRulesGetOneResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkRulesGetOne_onsuccess = urn_ast_AST_wsdl_AGNetworkRulesGetOne_op_onsuccess;

function urn_ast_AST_wsdl_AGNetworkRulesGetOne_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkRulesGetOne_onerror = urn_ast_AST_wsdl_AGNetworkRulesGetOne_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGNetworkRulesGetOne
// Wrapped operation.
// parameter rulename
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_AGNetworkRulesGetOne_op(successCallback, errorCallback, rulename) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = rulename;
    xml = this.AGNetworkRulesGetOneRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGNetworkRulesGetOne_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGNetworkRulesGetOne_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkRulesGetOne = urn_ast_AST_wsdl_AGNetworkRulesGetOne_op;

function urn_ast_AST_wsdl_AGNetworkRulesGetOneRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGNetworkRulesGetOne();
    wrapperObj.setRulename(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGNetworkRulesGetOne', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkRulesGetOneRequest_serializeInput = urn_ast_AST_wsdl_AGNetworkRulesGetOneRequest_serializeInput;

function urn_ast_AST_wsdl_AGNetworkRulesGetOneResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGNetworkRulesGetOneResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAdvAstcliGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAdvAstcliGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAdvAstcliGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstcliGet_onsuccess = urn_ast_AST_wsdl_AGAdvAstcliGet_op_onsuccess;

function urn_ast_AST_wsdl_AGAdvAstcliGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstcliGet_onerror = urn_ast_AST_wsdl_AGAdvAstcliGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAdvAstcliGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGAdvAstcliGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGAdvAstcliGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAdvAstcliGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAdvAstcliGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstcliGet = urn_ast_AST_wsdl_AGAdvAstcliGet_op;

function urn_ast_AST_wsdl_AGAdvAstcliGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAdvAstcliGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAdvAstcliGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstcliGetRequest_serializeInput = urn_ast_AST_wsdl_AGAdvAstcliGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGAdvAstcliGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAdvAstcliGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSystemDemoFlagSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSystemDemoFlagSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSystemDemoFlagSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemDemoFlagSave_onsuccess = urn_ast_AST_wsdl_AGSystemDemoFlagSave_op_onsuccess;

function urn_ast_AST_wsdl_AGSystemDemoFlagSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemDemoFlagSave_onerror = urn_ast_AST_wsdl_AGSystemDemoFlagSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSystemDemoFlagSave
// Wrapped operation.
// parameter demoflag
// - simple type {http://www.w3.org/2001/XMLSchema}unsignedByte//
function urn_ast_AST_wsdl_AGSystemDemoFlagSave_op(successCallback, errorCallback, demoflag) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = demoflag;
    xml = this.AGSystemDemoFlagSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSystemDemoFlagSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSystemDemoFlagSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemDemoFlagSave = urn_ast_AST_wsdl_AGSystemDemoFlagSave_op;

function urn_ast_AST_wsdl_AGSystemDemoFlagSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSystemDemoFlagSave();
    wrapperObj.setDemoflag(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSystemDemoFlagSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemDemoFlagSaveRequest_serializeInput = urn_ast_AST_wsdl_AGSystemDemoFlagSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGSystemDemoFlagSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSystemDemoFlagSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSysLoginSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSysLoginSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSysLoginSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysLoginSave_onsuccess = urn_ast_AST_wsdl_AGSysLoginSave_op_onsuccess;

function urn_ast_AST_wsdl_AGSysLoginSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysLoginSave_onerror = urn_ast_AST_wsdl_AGSysLoginSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSysLoginSave
// Wrapped operation.
// parameter save
// - Object constructor is AST_SysLoginSave
//
function urn_ast_AST_wsdl_AGSysLoginSave_op(successCallback, errorCallback, save) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = save;
    xml = this.AGSysLoginSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSysLoginSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSysLoginSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysLoginSave = urn_ast_AST_wsdl_AGSysLoginSave_op;

function urn_ast_AST_wsdl_AGSysLoginSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSysLoginSave();
    wrapperObj.setSave(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSysLoginSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysLoginSaveRequest_serializeInput = urn_ast_AST_wsdl_AGSysLoginSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGSysLoginSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSysLoginSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGTagDel_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGTagDelResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGTagDelResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGTagDel_onsuccess = urn_ast_AST_wsdl_AGTagDel_op_onsuccess;

function urn_ast_AST_wsdl_AGTagDel_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGTagDel_onerror = urn_ast_AST_wsdl_AGTagDel_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGTagDel
// Wrapped operation.
// parameter message
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_AGTagDel_op(successCallback, errorCallback, message) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = message;
    xml = this.AGTagDelRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGTagDel_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGTagDel_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGTagDel = urn_ast_AST_wsdl_AGTagDel_op;

function urn_ast_AST_wsdl_AGTagDelRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGTagDel();
    wrapperObj.setMessage(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGTagDel', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGTagDelRequest_serializeInput = urn_ast_AST_wsdl_AGTagDelRequest_serializeInput;

function urn_ast_AST_wsdl_AGTagDelResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGTagDelResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSipAdvSettingSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSipAdvSettingSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSipAdvSettingSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipAdvSettingSave_onsuccess = urn_ast_AST_wsdl_AGSipAdvSettingSave_op_onsuccess;

function urn_ast_AST_wsdl_AGSipAdvSettingSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipAdvSettingSave_onerror = urn_ast_AST_wsdl_AGSipAdvSettingSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSipAdvSettingSave
// Wrapped operation.
// parameter save
// - Object constructor is AST_SipAdvSave
//
function urn_ast_AST_wsdl_AGSipAdvSettingSave_op(successCallback, errorCallback, save) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = save;
    xml = this.AGSipAdvSettingSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSipAdvSettingSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSipAdvSettingSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipAdvSettingSave = urn_ast_AST_wsdl_AGSipAdvSettingSave_op;

function urn_ast_AST_wsdl_AGSipAdvSettingSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSipAdvSettingSave();
    wrapperObj.setSave(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSipAdvSettingSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipAdvSettingSaveRequest_serializeInput = urn_ast_AST_wsdl_AGSipAdvSettingSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGSipAdvSettingSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSipAdvSettingSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSystemToolsUpdatefireware_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSystemToolsUpdatefirewareResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSystemToolsUpdatefirewareResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolsUpdatefireware_onsuccess = urn_ast_AST_wsdl_AGSystemToolsUpdatefireware_op_onsuccess;

function urn_ast_AST_wsdl_AGSystemToolsUpdatefireware_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolsUpdatefireware_onerror = urn_ast_AST_wsdl_AGSystemToolsUpdatefireware_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSystemToolsUpdatefireware
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGSystemToolsUpdatefireware_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGSystemToolsUpdatefirewareRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSystemToolsUpdatefireware_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSystemToolsUpdatefireware_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolsUpdatefireware = urn_ast_AST_wsdl_AGSystemToolsUpdatefireware_op;

function urn_ast_AST_wsdl_AGSystemToolsUpdatefirewareRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSystemToolsUpdatefireware();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSystemToolsUpdatefireware', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemToolsUpdatefirewareRequest_serializeInput = urn_ast_AST_wsdl_AGSystemToolsUpdatefirewareRequest_serializeInput;

function urn_ast_AST_wsdl_AGSystemToolsUpdatefirewareResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSystemToolsUpdatefirewareResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_SipGeneralGetAll_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_SipGeneralGetAllResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_SipGeneralGetAllResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.SipGeneralGetAll_onsuccess = urn_ast_AST_wsdl_SipGeneralGetAll_op_onsuccess;

function urn_ast_AST_wsdl_SipGeneralGetAll_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.SipGeneralGetAll_onerror = urn_ast_AST_wsdl_SipGeneralGetAll_op_onerror;

//
// Operation {urn:ast/AST.wsdl}SipGeneralGetAll
// Wrapped operation.
//
function urn_ast_AST_wsdl_SipGeneralGetAll_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.SipGeneralGetAllRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.SipGeneralGetAll_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.SipGeneralGetAll_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.SipGeneralGetAll = urn_ast_AST_wsdl_SipGeneralGetAll_op;

function urn_ast_AST_wsdl_SipGeneralGetAllRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_SipGeneralGetAll();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:SipGeneralGetAll', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.SipGeneralGetAllRequest_serializeInput = urn_ast_AST_wsdl_SipGeneralGetAllRequest_serializeInput;

function urn_ast_AST_wsdl_SipGeneralGetAllResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_SipGeneralGetAllResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSipFxoBindingGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSipFxoBindingGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSipFxoBindingGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipFxoBindingGet_onsuccess = urn_ast_AST_wsdl_AGSipFxoBindingGet_op_onsuccess;

function urn_ast_AST_wsdl_AGSipFxoBindingGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipFxoBindingGet_onerror = urn_ast_AST_wsdl_AGSipFxoBindingGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSipFxoBindingGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGSipFxoBindingGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGSipFxoBindingGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSipFxoBindingGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSipFxoBindingGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipFxoBindingGet = urn_ast_AST_wsdl_AGSipFxoBindingGet_op;

function urn_ast_AST_wsdl_AGSipFxoBindingGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSipFxoBindingGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSipFxoBindingGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipFxoBindingGetRequest_serializeInput = urn_ast_AST_wsdl_AGSipFxoBindingGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGSipFxoBindingGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSipFxoBindingGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSetHotlineNumber_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSetHotlineNumberResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSetHotlineNumberResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSetHotlineNumber_onsuccess = urn_ast_AST_wsdl_AGSetHotlineNumber_op_onsuccess;

function urn_ast_AST_wsdl_AGSetHotlineNumber_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSetHotlineNumber_onerror = urn_ast_AST_wsdl_AGSetHotlineNumber_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSetHotlineNumber
// Wrapped operation.
// parameter HotlineNumber
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter port
// - simple type {http://www.w3.org/2001/XMLSchema}unsignedInt//
function urn_ast_AST_wsdl_AGSetHotlineNumber_op(successCallback, errorCallback, HotlineNumber, port) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(2);
    args[0] = HotlineNumber;
    args[1] = port;
    xml = this.AGSetHotlineNumberRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSetHotlineNumber_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSetHotlineNumber_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSetHotlineNumber = urn_ast_AST_wsdl_AGSetHotlineNumber_op;

function urn_ast_AST_wsdl_AGSetHotlineNumberRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSetHotlineNumber();
    wrapperObj.setHotlineNumber(args[0]);
    wrapperObj.setPort(args[1]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSetHotlineNumber', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSetHotlineNumberRequest_serializeInput = urn_ast_AST_wsdl_AGSetHotlineNumberRequest_serializeInput;

function urn_ast_AST_wsdl_AGSetHotlineNumberResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSetHotlineNumberResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGRoutingGroupGetAll_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGRoutingGroupGetAllResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGRoutingGroupGetAllResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupGetAll_onsuccess = urn_ast_AST_wsdl_AGRoutingGroupGetAll_op_onsuccess;

function urn_ast_AST_wsdl_AGRoutingGroupGetAll_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupGetAll_onerror = urn_ast_AST_wsdl_AGRoutingGroupGetAll_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGRoutingGroupGetAll
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGRoutingGroupGetAll_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGRoutingGroupGetAllRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGRoutingGroupGetAll_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGRoutingGroupGetAll_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupGetAll = urn_ast_AST_wsdl_AGRoutingGroupGetAll_op;

function urn_ast_AST_wsdl_AGRoutingGroupGetAllRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGRoutingGroupGetAll();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGRoutingGroupGetAll', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupGetAllRequest_serializeInput = urn_ast_AST_wsdl_AGRoutingGroupGetAllRequest_serializeInput;

function urn_ast_AST_wsdl_AGRoutingGroupGetAllResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGRoutingGroupGetAllResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGRoutingGroupGetNew_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGRoutingGroupGetNewResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGRoutingGroupGetNewResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupGetNew_onsuccess = urn_ast_AST_wsdl_AGRoutingGroupGetNew_op_onsuccess;

function urn_ast_AST_wsdl_AGRoutingGroupGetNew_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupGetNew_onerror = urn_ast_AST_wsdl_AGRoutingGroupGetNew_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGRoutingGroupGetNew
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGRoutingGroupGetNew_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGRoutingGroupGetNewRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGRoutingGroupGetNew_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGRoutingGroupGetNew_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupGetNew = urn_ast_AST_wsdl_AGRoutingGroupGetNew_op;

function urn_ast_AST_wsdl_AGRoutingGroupGetNewRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGRoutingGroupGetNew();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGRoutingGroupGetNew', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupGetNewRequest_serializeInput = urn_ast_AST_wsdl_AGRoutingGroupGetNewRequest_serializeInput;

function urn_ast_AST_wsdl_AGRoutingGroupGetNewResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGRoutingGroupGetNewResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGNetworkSnmpGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGNetworkSnmpGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGNetworkSnmpGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkSnmpGet_onsuccess = urn_ast_AST_wsdl_AGNetworkSnmpGet_op_onsuccess;

function urn_ast_AST_wsdl_AGNetworkSnmpGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkSnmpGet_onerror = urn_ast_AST_wsdl_AGNetworkSnmpGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGNetworkSnmpGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGNetworkSnmpGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGNetworkSnmpGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGNetworkSnmpGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGNetworkSnmpGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkSnmpGet = urn_ast_AST_wsdl_AGNetworkSnmpGet_op;

function urn_ast_AST_wsdl_AGNetworkSnmpGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGNetworkSnmpGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGNetworkSnmpGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkSnmpGetRequest_serializeInput = urn_ast_AST_wsdl_AGNetworkSnmpGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGNetworkSnmpGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGNetworkSnmpGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGRegisterParaGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGRegisterParaGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGRegisterParaGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRegisterParaGet_onsuccess = urn_ast_AST_wsdl_AGRegisterParaGet_op_onsuccess;

function urn_ast_AST_wsdl_AGRegisterParaGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRegisterParaGet_onerror = urn_ast_AST_wsdl_AGRegisterParaGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGRegisterParaGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGRegisterParaGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGRegisterParaGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGRegisterParaGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGRegisterParaGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRegisterParaGet = urn_ast_AST_wsdl_AGRegisterParaGet_op;

function urn_ast_AST_wsdl_AGRegisterParaGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGRegisterParaGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGRegisterParaGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRegisterParaGetRequest_serializeInput = urn_ast_AST_wsdl_AGRegisterParaGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGRegisterParaGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGRegisterParaGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_IaxDelEndpoint_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_IaxDelEndpointResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_IaxDelEndpointResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.IaxDelEndpoint_onsuccess = urn_ast_AST_wsdl_IaxDelEndpoint_op_onsuccess;

function urn_ast_AST_wsdl_IaxDelEndpoint_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.IaxDelEndpoint_onerror = urn_ast_AST_wsdl_IaxDelEndpoint_op_onerror;

//
// Operation {urn:ast/AST.wsdl}IaxDelEndpoint
// Wrapped operation.
// parameter endpointName
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_IaxDelEndpoint_op(successCallback, errorCallback, endpointName) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = endpointName;
    xml = this.IaxDelEndpointRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.IaxDelEndpoint_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.IaxDelEndpoint_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.IaxDelEndpoint = urn_ast_AST_wsdl_IaxDelEndpoint_op;

function urn_ast_AST_wsdl_IaxDelEndpointRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_IaxDelEndpoint();
    wrapperObj.setEndpointName(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:IaxDelEndpoint', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.IaxDelEndpointRequest_serializeInput = urn_ast_AST_wsdl_IaxDelEndpointRequest_serializeInput;

function urn_ast_AST_wsdl_IaxDelEndpointResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_IaxDelEndpointResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSystemModuleUpdateTftp_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSystemModuleUpdateTftpResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSystemModuleUpdateTftpResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemModuleUpdateTftp_onsuccess = urn_ast_AST_wsdl_AGSystemModuleUpdateTftp_op_onsuccess;

function urn_ast_AST_wsdl_AGSystemModuleUpdateTftp_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemModuleUpdateTftp_onerror = urn_ast_AST_wsdl_AGSystemModuleUpdateTftp_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSystemModuleUpdateTftp
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGSystemModuleUpdateTftp_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGSystemModuleUpdateTftpRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSystemModuleUpdateTftp_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSystemModuleUpdateTftp_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemModuleUpdateTftp = urn_ast_AST_wsdl_AGSystemModuleUpdateTftp_op;

function urn_ast_AST_wsdl_AGSystemModuleUpdateTftpRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSystemModuleUpdateTftp();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSystemModuleUpdateTftp', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSystemModuleUpdateTftpRequest_serializeInput = urn_ast_AST_wsdl_AGSystemModuleUpdateTftpRequest_serializeInput;

function urn_ast_AST_wsdl_AGSystemModuleUpdateTftpResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSystemModuleUpdateTftpResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAlgChannelSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAlgChannelSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAlgChannelSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelSave_onsuccess = urn_ast_AST_wsdl_AGAlgChannelSave_op_onsuccess;

function urn_ast_AST_wsdl_AGAlgChannelSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelSave_onerror = urn_ast_AST_wsdl_AGAlgChannelSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAlgChannelSave
// Wrapped operation.
// parameter channel
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter asschl
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter save
// - Object constructor is AST_AnaSave
//
function urn_ast_AST_wsdl_AGAlgChannelSave_op(successCallback, errorCallback, channel, asschl, save) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(3);
    args[0] = channel;
    args[1] = asschl;
    args[2] = save;
    xml = this.AGAlgChannelSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAlgChannelSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAlgChannelSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelSave = urn_ast_AST_wsdl_AGAlgChannelSave_op;

function urn_ast_AST_wsdl_AGAlgChannelSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAlgChannelSave();
    wrapperObj.setChannel(args[0]);
    wrapperObj.setAsschl(args[1]);
    wrapperObj.setSave(args[2]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAlgChannelSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAlgChannelSaveRequest_serializeInput = urn_ast_AST_wsdl_AGAlgChannelSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGAlgChannelSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAlgChannelSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGUcpSystemToolsSndRecordStart_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGUcpSystemToolsSndRecordStartResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGUcpSystemToolsSndRecordStartResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpSystemToolsSndRecordStart_onsuccess = urn_ast_AST_wsdl_AGUcpSystemToolsSndRecordStart_op_onsuccess;

function urn_ast_AST_wsdl_AGUcpSystemToolsSndRecordStart_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpSystemToolsSndRecordStart_onerror = urn_ast_AST_wsdl_AGUcpSystemToolsSndRecordStart_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGUcpSystemToolsSndRecordStart
// Wrapped operation.
// parameter channel
// - simple type {http://www.w3.org/2001/XMLSchema}int//
function urn_ast_AST_wsdl_AGUcpSystemToolsSndRecordStart_op(successCallback, errorCallback, channel) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = channel;
    xml = this.AGUcpSystemToolsSndRecordStartRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGUcpSystemToolsSndRecordStart_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGUcpSystemToolsSndRecordStart_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpSystemToolsSndRecordStart = urn_ast_AST_wsdl_AGUcpSystemToolsSndRecordStart_op;

function urn_ast_AST_wsdl_AGUcpSystemToolsSndRecordStartRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGUcpSystemToolsSndRecordStart();
    wrapperObj.setChannel(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGUcpSystemToolsSndRecordStart', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGUcpSystemToolsSndRecordStartRequest_serializeInput = urn_ast_AST_wsdl_AGUcpSystemToolsSndRecordStartRequest_serializeInput;

function urn_ast_AST_wsdl_AGUcpSystemToolsSndRecordStartResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGUcpSystemToolsSndRecordStartResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGNetworkBurnMacGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGNetworkBurnMacGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGNetworkBurnMacGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkBurnMacGet_onsuccess = urn_ast_AST_wsdl_AGNetworkBurnMacGet_op_onsuccess;

function urn_ast_AST_wsdl_AGNetworkBurnMacGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkBurnMacGet_onerror = urn_ast_AST_wsdl_AGNetworkBurnMacGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGNetworkBurnMacGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGNetworkBurnMacGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGNetworkBurnMacGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGNetworkBurnMacGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGNetworkBurnMacGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkBurnMacGet = urn_ast_AST_wsdl_AGNetworkBurnMacGet_op;

function urn_ast_AST_wsdl_AGNetworkBurnMacGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGNetworkBurnMacGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGNetworkBurnMacGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkBurnMacGetRequest_serializeInput = urn_ast_AST_wsdl_AGNetworkBurnMacGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGNetworkBurnMacGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGNetworkBurnMacGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAdvAstapiGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAdvAstapiGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAdvAstapiGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstapiGet_onsuccess = urn_ast_AST_wsdl_AGAdvAstapiGet_op_onsuccess;

function urn_ast_AST_wsdl_AGAdvAstapiGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstapiGet_onerror = urn_ast_AST_wsdl_AGAdvAstapiGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAdvAstapiGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGAdvAstapiGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGAdvAstapiGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAdvAstapiGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAdvAstapiGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstapiGet = urn_ast_AST_wsdl_AGAdvAstapiGet_op;

function urn_ast_AST_wsdl_AGAdvAstapiGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAdvAstapiGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAdvAstapiGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvAstapiGetRequest_serializeInput = urn_ast_AST_wsdl_AGAdvAstapiGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGAdvAstapiGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAdvAstapiGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_RoutingSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_RoutingSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_RoutingSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.RoutingSave_onsuccess = urn_ast_AST_wsdl_RoutingSave_op_onsuccess;

function urn_ast_AST_wsdl_RoutingSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.RoutingSave_onerror = urn_ast_AST_wsdl_RoutingSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}RoutingSave
// Wrapped operation.
// parameter oldRouting
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter newRouting
// - simple type {http://www.w3.org/2001/XMLSchema}string// parameter datachunk
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_RoutingSave_op(successCallback, errorCallback, oldRouting, newRouting, datachunk) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(3);
    args[0] = oldRouting;
    args[1] = newRouting;
    args[2] = datachunk;
    xml = this.RoutingSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.RoutingSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.RoutingSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.RoutingSave = urn_ast_AST_wsdl_RoutingSave_op;

function urn_ast_AST_wsdl_RoutingSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_RoutingSave();
    wrapperObj.setOldRouting(args[0]);
    wrapperObj.setNewRouting(args[1]);
    wrapperObj.setDatachunk(args[2]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:RoutingSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.RoutingSaveRequest_serializeInput = urn_ast_AST_wsdl_RoutingSaveRequest_serializeInput;

function urn_ast_AST_wsdl_RoutingSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_RoutingSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGjConRelaysSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGjConRelaysSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGjConRelaysSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConRelaysSave_onsuccess = urn_ast_AST_wsdl_AGjConRelaysSave_op_onsuccess;

function urn_ast_AST_wsdl_AGjConRelaysSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConRelaysSave_onerror = urn_ast_AST_wsdl_AGjConRelaysSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGjConRelaysSave
// Wrapped operation.
// parameter board
// - simple type {http://www.w3.org/2001/XMLSchema}int// parameter relay
// - Object constructor is AST_Relay
//
function urn_ast_AST_wsdl_AGjConRelaysSave_op(successCallback, errorCallback, board, relay) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(2);
    args[0] = board;
    args[1] = relay;
    xml = this.AGjConRelaysSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGjConRelaysSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGjConRelaysSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConRelaysSave = urn_ast_AST_wsdl_AGjConRelaysSave_op;

function urn_ast_AST_wsdl_AGjConRelaysSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGjConRelaysSave();
    wrapperObj.setBoard(args[0]);
    wrapperObj.setRelay(args[1]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGjConRelaysSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGjConRelaysSaveRequest_serializeInput = urn_ast_AST_wsdl_AGjConRelaysSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGjConRelaysSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGjConRelaysSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSysGeneralGet_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSysGeneralGetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSysGeneralGetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysGeneralGet_onsuccess = urn_ast_AST_wsdl_AGSysGeneralGet_op_onsuccess;

function urn_ast_AST_wsdl_AGSysGeneralGet_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysGeneralGet_onerror = urn_ast_AST_wsdl_AGSysGeneralGet_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSysGeneralGet
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGSysGeneralGet_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGSysGeneralGetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSysGeneralGet_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSysGeneralGet_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysGeneralGet = urn_ast_AST_wsdl_AGSysGeneralGet_op;

function urn_ast_AST_wsdl_AGSysGeneralGetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSysGeneralGet();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSysGeneralGet', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSysGeneralGetRequest_serializeInput = urn_ast_AST_wsdl_AGSysGeneralGetRequest_serializeInput;

function urn_ast_AST_wsdl_AGSysGeneralGetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSysGeneralGetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGNetworkRulesDel_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGNetworkRulesDelResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGNetworkRulesDelResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkRulesDel_onsuccess = urn_ast_AST_wsdl_AGNetworkRulesDel_op_onsuccess;

function urn_ast_AST_wsdl_AGNetworkRulesDel_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkRulesDel_onerror = urn_ast_AST_wsdl_AGNetworkRulesDel_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGNetworkRulesDel
// Wrapped operation.
// parameter sections
// - Object constructor is AST_SectionArr
//
function urn_ast_AST_wsdl_AGNetworkRulesDel_op(successCallback, errorCallback, sections) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = sections;
    xml = this.AGNetworkRulesDelRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGNetworkRulesDel_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGNetworkRulesDel_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkRulesDel = urn_ast_AST_wsdl_AGNetworkRulesDel_op;

function urn_ast_AST_wsdl_AGNetworkRulesDelRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGNetworkRulesDel();
    wrapperObj.setSections(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGNetworkRulesDel', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkRulesDelRequest_serializeInput = urn_ast_AST_wsdl_AGNetworkRulesDelRequest_serializeInput;

function urn_ast_AST_wsdl_AGNetworkRulesDelResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGNetworkRulesDelResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGSipEndpointGetOne_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGSipEndpointGetOneResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGSipEndpointGetOneResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipEndpointGetOne_onsuccess = urn_ast_AST_wsdl_AGSipEndpointGetOne_op_onsuccess;

function urn_ast_AST_wsdl_AGSipEndpointGetOne_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipEndpointGetOne_onerror = urn_ast_AST_wsdl_AGSipEndpointGetOne_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGSipEndpointGetOne
// Wrapped operation.
// parameter section
// - simple type {http://www.w3.org/2001/XMLSchema}string//
function urn_ast_AST_wsdl_AGSipEndpointGetOne_op(successCallback, errorCallback, section) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = section;
    xml = this.AGSipEndpointGetOneRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGSipEndpointGetOne_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGSipEndpointGetOne_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipEndpointGetOne = urn_ast_AST_wsdl_AGSipEndpointGetOne_op;

function urn_ast_AST_wsdl_AGSipEndpointGetOneRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGSipEndpointGetOne();
    wrapperObj.setSection(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGSipEndpointGetOne', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGSipEndpointGetOneRequest_serializeInput = urn_ast_AST_wsdl_AGSipEndpointGetOneRequest_serializeInput;

function urn_ast_AST_wsdl_AGSipEndpointGetOneResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGSipEndpointGetOneResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGNetworkLanSave_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGNetworkLanSaveResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGNetworkLanSaveResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkLanSave_onsuccess = urn_ast_AST_wsdl_AGNetworkLanSave_op_onsuccess;

function urn_ast_AST_wsdl_AGNetworkLanSave_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkLanSave_onerror = urn_ast_AST_wsdl_AGNetworkLanSave_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGNetworkLanSave
// Wrapped operation.
// parameter save
// - Object constructor is AST_NetworkLanSave
//
function urn_ast_AST_wsdl_AGNetworkLanSave_op(successCallback, errorCallback, save) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = save;
    xml = this.AGNetworkLanSaveRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGNetworkLanSave_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGNetworkLanSave_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkLanSave = urn_ast_AST_wsdl_AGNetworkLanSave_op;

function urn_ast_AST_wsdl_AGNetworkLanSaveRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGNetworkLanSave();
    wrapperObj.setSave(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGNetworkLanSave', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGNetworkLanSaveRequest_serializeInput = urn_ast_AST_wsdl_AGNetworkLanSaveRequest_serializeInput;

function urn_ast_AST_wsdl_AGNetworkLanSaveResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGNetworkLanSaveResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGAdvTr069Get_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGAdvTr069GetResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGAdvTr069GetResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvTr069Get_onsuccess = urn_ast_AST_wsdl_AGAdvTr069Get_op_onsuccess;

function urn_ast_AST_wsdl_AGAdvTr069Get_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvTr069Get_onerror = urn_ast_AST_wsdl_AGAdvTr069Get_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGAdvTr069Get
// Wrapped operation.
//
function urn_ast_AST_wsdl_AGAdvTr069Get_op(successCallback, errorCallback) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(0);
    xml = this.AGAdvTr069GetRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGAdvTr069Get_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGAdvTr069Get_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvTr069Get = urn_ast_AST_wsdl_AGAdvTr069Get_op;

function urn_ast_AST_wsdl_AGAdvTr069GetRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGAdvTr069Get();
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGAdvTr069Get', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGAdvTr069GetRequest_serializeInput = urn_ast_AST_wsdl_AGAdvTr069GetRequest_serializeInput;

function urn_ast_AST_wsdl_AGAdvTr069GetResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGAdvTr069GetResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_AGRoutingGroupsDialDel_op_onsuccess(client, responseXml) {
    if (client.user_onsuccess) {
     var responseObject = null;
     var element = responseXml.documentElement;
     this.jsutils.trace('responseXml: ' + this.jsutils.traceElementName(element));
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('first element child: ' + this.jsutils.traceElementName(element));
     while (!this.jsutils.isNodeNamedNS(element, 'http://schemas.xmlsoap.org/soap/envelope/', 'Body')) {
      element = this.jsutils.getNextElementSibling(element);
      if (element == null) {
       throw 'No env:Body in message.'
      }
     }
     element = this.jsutils.getFirstElementChild(element);
     this.jsutils.trace('part element: ' + this.jsutils.traceElementName(element));
     this.jsutils.trace('calling urn_ast_AST_wsdl_AGRoutingGroupsDialDelResponse_deserializeResponse');
     responseObject = urn_ast_AST_wsdl_AGRoutingGroupsDialDelResponse_deserializeResponse(this.jsutils, element);
     client.user_onsuccess(responseObject);
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupsDialDel_onsuccess = urn_ast_AST_wsdl_AGRoutingGroupsDialDel_op_onsuccess;

function urn_ast_AST_wsdl_AGRoutingGroupsDialDel_op_onerror(client) {
    if (client.user_onerror) {
     var httpStatus;
     var httpStatusText;
     try {
      httpStatus = client.req.status;
      httpStatusText = client.req.statusText;
     } catch(e) {
      httpStatus = -1;
      httpStatusText = 'Error opening connection to server';
     }
     if (client.parseErrorDetails) {
      client.user_onerror(httpStatus, httpStatusText, client.parseErrorDetails(this));
     } else {
      client.user_onerror(httpStatus, httpStatusText);
     }
    }
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupsDialDel_onerror = urn_ast_AST_wsdl_AGRoutingGroupsDialDel_op_onerror;

//
// Operation {urn:ast/AST.wsdl}AGRoutingGroupsDialDel
// Wrapped operation.
// parameter sections
// - Object constructor is AST_SectionArr
//
function urn_ast_AST_wsdl_AGRoutingGroupsDialDel_op(successCallback, errorCallback, sections) {
    this.client = new CxfApacheOrgClient(this.jsutils);
    var xml = null;
    var args = new Array(1);
    args[0] = sections;
    xml = this.AGRoutingGroupsDialDelRequest_serializeInput(this.jsutils, args);
    this.client.user_onsuccess = successCallback;
    this.client.user_onerror = errorCallback;
    var closureThis = this;
    this.client.onsuccess = function(client, responseXml) { closureThis.AGRoutingGroupsDialDel_onsuccess(client, responseXml); };
    this.client.onerror = function(client) { closureThis.AGRoutingGroupsDialDel_onerror(client); };
    var requestHeaders = [];
    requestHeaders['SOAPAction'] = '';
    this.jsutils.trace('synchronous = ' + this.synchronous);
    this.client.request(this.url, xml, null, this.synchronous, requestHeaders);
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupsDialDel = urn_ast_AST_wsdl_AGRoutingGroupsDialDel_op;

function urn_ast_AST_wsdl_AGRoutingGroupsDialDelRequest_serializeInput(cxfjsutils, args) {
    var wrapperObj = new AST_AGRoutingGroupsDialDel();
    wrapperObj.setSections(args[0]);
    var xml;
    xml = cxfjsutils.beginSoap11Message("xmlns:jns0='urn:ast' ");
    // block for local variables
    {
     xml = xml + wrapperObj.serialize(cxfjsutils, 'jns0:AGRoutingGroupsDialDel', null);
    }
    xml = xml + cxfjsutils.endSoap11Message();
    return xml;
}

urn_ast_AST_wsdl_ASTPortType.prototype.AGRoutingGroupsDialDelRequest_serializeInput = urn_ast_AST_wsdl_AGRoutingGroupsDialDelRequest_serializeInput;

function urn_ast_AST_wsdl_AGRoutingGroupsDialDelResponse_deserializeResponse(cxfjsutils, partElement) {
    var returnObject = AST_AGRoutingGroupsDialDelResponse_deserialize (cxfjsutils, partElement);

    return returnObject;
}
function urn_ast_AST_wsdl_ASTPortType_urn_ast_AST_wsdl_AST () {
  this.url = 'http://localhost';
}
urn_ast_AST_wsdl_ASTPortType_urn_ast_AST_wsdl_AST.prototype = new urn_ast_AST_wsdl_ASTPortType;
